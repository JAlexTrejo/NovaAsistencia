{"file_contents":{"README.md":{"content":"# GY&ID CRM by Alejandro Trejo y Nova Axis\n\nGY&ID CRM es un sistema integral de gestión de recursos humanos y nómina, diseñado específicamente para empresas de construcción con múltiples sitios de trabajo. El sistema incluye control de asistencia, cálculos de nómina automatizados, gestión de empleados y reportes avanzados.\n\n## 🚀 Características Principales\n\n- **Gestión de Empleados**: Control completo de perfiles, roles y asignaciones\n- **Control de Asistencia**: Registro de entrada/salida con geolocalización\n- **Cálculos de Nómina**: Automatización completa con soporte para aguinaldo y finiquito\n- **RBAC Avanzado**: Control de acceso basado en roles (SuperAdmin, Admin, Supervisor, User)\n- **Reportes y Analytics**: Dashboards ejecutivos y reportes detallados\n- **Multi-sitio**: Gestión de múltiples obras de construcción\n- **Tiempo Real**: Actualizaciones en tiempo real con Supabase\n\n## 🛠️ Stack Tecnológico\n\n- **Frontend**: React 18, Vite, Tailwind CSS\n- **Backend**: Supabase (PostgreSQL, Auth, Realtime)\n- **Estado**: Redux Toolkit\n- **Routing**: React Router v6\n- **Testing**: Vitest, Testing Library\n- **Build**: Vite con optimizaciones de producción\n- **Deploy**: Docker + Nginx\n\n## 📋 Requisitos Previos\n\n- Node.js 18+ \n- npm o yarn\n- Cuenta de Supabase\n- Docker (opcional, para deployment)\n\n## ⚙️ Configuración del Entorno\n\n### 1. Clonar el Repositorio\n\n```bash\ngit clone [repository-url]\ncd nova-hr\nnpm install\n```\n\n### 2. Variables de Entorno\n\nCopiar `.env.example` a `.env` y configurar:\n\n```env\n# Supabase Configuration\nVITE_SUPABASE_URL=https://your-project.supabase.co\nVITE_SUPABASE_ANON_KEY=your-anon-key-here\n\n# Optional API Keys\nVITE_OPENAI_API_KEY=your-openai-api-key-here\nVITE_GEMINI_API_KEY=your-gemini-api-key-here\n```\n\n### 3. Configuración de Supabase\n\n1. Crear un nuevo proyecto en [Supabase](https://supabase.io)\n2. Ejecutar las migraciones SQL desde `supabase/migrations/`\n3. Configurar las variables de entorno con tu URL y clave anónima\n4. Configurar las políticas RLS según la documentación\n\n### 4. Base de Datos\n\nEl sistema incluye migraciones SQL completas:\n\n```bash\n# Las migraciones se encuentran en supabase/migrations/\n# Ejecutar en orden cronológico en tu proyecto Supabase\n```\n\n**Estructura Principal:**\n- `usuarios` - Gestión de usuarios y roles\n- `obras` - Sitios de construcción\n- `asistencias` - Registros de asistencia\n- `incidencias` - Sistema de reportes\n- `logs_actividad` - Auditoría del sistema\n\n## 🚀 Desarrollo\n\n### Comandos Disponibles\n\n```bash\n# Desarrollo\nnpm run dev          # Iniciar servidor de desarrollo\n\n# Build\nnpm run build        # Construir para producción\nnpm run preview      # Previsualizar build de producción\n\n# Calidad de Código\nnpm run lint         # Ejecutar ESLint\nnpm run lint:fix     # Corregir errores de ESLint automáticamente\nnpm run format       # Formatear código con Prettier\nnpm run format:check # Verificar formato de código\n\n# Testing\nnpm run test         # Ejecutar pruebas\nnpm run test:ui      # Interfaz visual de pruebas\nnpm run test:coverage # Generar reporte de cobertura\n```\n\n### Estructura del Proyecto\n\n```\nnova-hr/\n├── src/\n│   ├── auth/                    # Componentes de autenticación\n│   ├── components/              # Componentes reutilizables\n│   ├── contexts/               # Contextos de React\n│   ├── data/                   # Servicios de datos\n│   ├── pages/                  # Páginas de la aplicación\n│   ├── services/               # Servicios de API\n│   ├── utils/                  # Utilidades (payroll, helpers)\n│   └── lib/                    # Configuración de librerías\n├── supabase/migrations/        # Migraciones SQL\n├── public/                     # Archivos estáticos\n└── docker/                     # Configuración Docker\n```\n\n### Patrones de Desarrollo\n\n**Componentes:**\n```jsx\n// Usar hooks de contexto para auth\nconst { user, userProfile, hasRole } = useAuth();\n\n// Optional chaining obligatorio\nconst userName = user?.profile?.full_name ?? 'Usuario';\n\n// Manejo de errores sin console.error para operaciones Supabase\nif (error) {\n  setErrorMessage(error.message); // Mostrar al usuario\n  return;\n}\n```\n\n**Servicios:**\n```javascript\n// Patrón de servicios de datos\nexport const employeeDataService = {\n  async getEmployees(filters = {}) {\n    try {\n      const { data, error } = await supabase\n        .from('usuarios')\n        .select('*');\n      \n      if (error) throw error;\n      return { success: true, data };\n    } catch (error) {\n      return { success: false, error: error.message };\n    }\n  }\n};\n```\n\n## 🧪 Testing\n\n### Ejecutar Pruebas\n\n```bash\n# Pruebas unitarias\nnpm run test\n\n# Cobertura de código\nnpm run test:coverage\n\n# Interfaz visual\nnpm run test:ui\n```\n\n### Pruebas Incluidas\n\n- **Utilidades de Nómina**: Pruebas completas para cálculos salariales\n- **Servicios de Datos**: Pruebas de integración con Supabase\n- **Componentes**: Pruebas unitarias de componentes React\n- **Helpers**: Pruebas de funciones auxiliares\n\n**Estructura de Tests:**\n```\nsrc/\n├── utils/payroll.test.js       # Pruebas de cálculos de nómina\n├── data/employeeService.test.js # Pruebas de servicios\n└── test/setup.js               # Configuración global de tests\n```\n\n## 🐳 Deployment con Docker\n\n### Build Local\n\n```bash\n# Construir imagen\ndocker build -t nova-hr .\n\n# Ejecutar contenedor\ndocker run -p 8080:80 nova-hr\n```\n\n### Docker Compose\n\n```bash\n# Desarrollo\ndocker-compose up -d\n\n# Producción\ndocker-compose -f docker-compose.prod.yml up -d\n```\n\n### Configuración Nginx\n\nEl sistema incluye configuración optimizada de Nginx:\n\n- **Compresión**: Gzip y Brotli habilitados\n- **Cache**: Headers de cache para assets estáticos\n- **SPA**: Fallback para client-side routing\n- **Security**: Headers de seguridad configurados\n- **Health Check**: Endpoint `/health` para monitoreo\n\n## 🔐 Seguridad\n\n### Row Level Security (RLS)\n\nTodas las tablas tienen políticas RLS configuradas:\n\n```sql\n-- Ejemplo: Usuarios pueden ver solo sus datos\nCREATE POLICY \"users_manage_own_data\" ON public.usuarios\nFOR ALL TO authenticated\nUSING (id = auth.uid());\n\n-- Admins pueden ver todos los datos\nCREATE POLICY \"admins_view_all\" ON public.usuarios\nFOR SELECT TO authenticated\nUSING (public.is_admin_from_auth());\n```\n\n### Roles del Sistema\n\n1. **SuperAdmin**: Control total del sistema\n2. **Admin**: Gestión de empleados y nómina\n3. **Supervisor**: Gestión de sitios y equipos\n4. **User**: Acceso a dashboard personal\n\n### Variables de Entorno\n\n**⚠️ NUNCA exponer claves de servicio en el cliente**\n\n```env\n# ✅ Correcto - Solo clave anónima en cliente\nVITE_SUPABASE_ANON_KEY=eyJhbG...\n\n```\n\n## 📊 Monitoreo y Analytics\n\n### Health Checks\n\n```bash\n# Verificar estado de la aplicación\ncurl http://localhost:8080/health\n\n# Respuesta esperada\nhealthy\n```\n\n### Métricas Incluidas\n\n- Performance de queries a base de datos\n- Tiempo de respuesta de la aplicación  \n- Uso de memoria y recursos\n- Errores y excepciones\n- Actividad de usuarios\n\n## 🔧 Configuración Avanzada\n\n### Vite Configuration\n\n```javascript\n// vite.config.js - Optimizaciones incluidas\nexport default defineConfig({\n  build: {\n    chunkSizeWarningLimit: 1200,\n    rollupOptions: {\n      output: {\n        manualChunks: {\n          vendor: ['react', 'react-dom'],\n          supabase: ['@supabase/supabase-js'],\n          // ... más optimizaciones\n        }\n      }\n    }\n  }\n});\n```\n\n### ESLint y Prettier\n\n```json\n// Configuración incluida en package.json\n{\n  \"scripts\": {\n    \"lint\": \"eslint .\",\n    \"format\": \"prettier --write .\"\n  }\n}\n```\n\n## 📚 Documentación Adicional\n\n- [Guía de Contribución](CONTRIBUTING.md)\n- [Changelog](CHANGELOG.md) \n- [Documentación API](docs/API.md)\n- [Guía de Deployment](docs/DEPLOYMENT.md)\n\n## 🤝 Contribuir\n\n1. Fork del repositorio\n2. Crear rama para feature (`git checkout -b feature/nueva-funcionalidad`)\n3. Commit cambios (`git commit -m 'Agregar nueva funcionalidad'`)\n4. Push a la rama (`git push origin feature/nueva-funcionalidad`)\n5. Crear Pull Request\n\n### Estándares de Código\n\n- Usar ESLint y Prettier configurados\n- Mantener cobertura de tests > 80%\n- Documentar funciones complejas\n- Usar optional chaining para acceso a propiedades\n- Seguir patrones establecidos en el proyecto\n\n## 📝 Licencia\n\nEste proyecto está licenciado bajo la Licencia MIT - ver el archivo [LICENSE](LICENSE) para detalles.\n\n## 🆘 Soporte\n\nPara reportar bugs o solicitar nuevas funcionalidades:\n\n1. Revisar [Issues existentes](../../issues)\n2. Crear nuevo Issue con template correspondiente\n3. Incluir información detallada y pasos para reproducir\n\n## 🎯 Roadmap\n\n### v1.1.0 (Q2 2025)\n- [ ] Notificaciones push\n- [ ] Generación automática de reportes\n- [ ] Integración con servicios de nómina externos\n- [ ] Dashboard móvil optimizado\n\n### v1.2.0 (Q3 2025)\n- [ ] API RESTful pública\n- [ ] Integración con sistemas contables\n- [ ] Análisis predictivo de asistencia\n- [ ] Multi-idioma\n\n---\n\n**Nova HR** - Transformando la gestión de recursos humanos con tecnología moderna 🚀","size_bytes":9198},"postcss.config.js":{"content":"module.exports = {\n  plugins: {\n    \"tailwindcss/nesting\": {},\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n};\n\n","size_bytes":115},"replit.md":{"content":"# Nova HR - GY&ID CRM System\n\n## Project Overview\nNova HR is a comprehensive human resources and payroll management system designed for construction companies with multiple work sites. Built with React 18, Vite, and Supabase, it provides attendance control, automated payroll calculations, employee management, and advanced reporting.\n\n## Recent Changes\n- **September 29, 2025**: Replit environment setup and comprehensive testing\n  - Configured Vite to run on port 5000 for Replit compatibility\n  - Enabled `allowedHosts: true` for proxy support (Replit serves via iframe)\n  - Set up Frontend workflow for development server\n  - Updated .gitignore with Node.js patterns\n  - Fixed branding service (added missing `getPublicBrandingSettings`, `applyBrandingSettings`, `formatCurrency` methods)\n  - Fixed EmployeeAttendanceDashboard component (was incorrectly exporting service instead of React component)\n  - Verified all forms are functional:\n    - Employee registration/management with multi-step validation\n    - Attendance check-in/out with GPS geolocation\n    - Payroll calculation and management\n    - Sites/obras creation and configuration\n    - Incident registration and approval workflow\n  - All navigation, buttons, and forms tested and working correctly\n\n## Tech Stack\n- **Frontend**: React 18, Vite 5.4\n- **Backend**: Supabase (PostgreSQL, Auth, Realtime)\n- **State Management**: Redux Toolkit\n- **Routing**: React Router v6\n- **Styling**: Tailwind CSS\n- **Testing**: Vitest\n- **Build Tool**: Vite\n\n## Project Architecture\n\n### Directory Structure\n```\nnova-hr/\n├── src/\n│   ├── auth/              # Authentication components\n│   ├── components/        # Reusable UI components\n│   ├── contexts/          # React contexts (AuthContext, etc.)\n│   ├── pages/             # Application pages/routes\n│   ├── services/          # API services for data operations\n│   ├── utils/             # Utility functions (payroll calculations, etc.)\n│   └── lib/               # Library configurations\n├── supabase/\n│   └── migrations/        # Database migration files\n└── public/                # Static assets\n```\n\n### Key Features\n- Role-Based Access Control (RBAC): SuperAdmin, Admin, Supervisor, User\n- Real-time attendance tracking with geolocation\n- Automated payroll calculations (aguinaldo, finiquito support)\n- Multi-site construction management\n- Comprehensive reporting and analytics\n- Activity logging and security monitoring\n\n## Configuration\n\n### Environment Variables\nThe project uses `.env` file with the following variables:\n- `VITE_SUPABASE_URL`: Supabase project URL\n- `VITE_SUPABASE_ANON_KEY`: Supabase anonymous key\n- Optional API keys for OpenAI, Gemini, Anthropic, etc.\n\n### Development Server\n- Port: 5000 (configured for Replit)\n- Host: 0.0.0.0 (accepts all connections)\n- HMR: Enabled via WebSocket\n- Proxy Support: Enabled (`allowedHosts: true`)\n\n### Supabase Integration\nThe application connects to Supabase for:\n- User authentication and authorization\n- PostgreSQL database operations\n- Real-time data subscriptions\n- Row Level Security (RLS) policies\n\nDatabase migrations are located in `supabase/migrations/` and should be applied in chronological order.\n\n## Development Workflow\n\n### Available Commands\n- `npm run dev`: Start development server\n- `npm run build`: Build for production\n- `npm run preview`: Preview production build\n- `npm run lint`: Run ESLint\n- `npm run format`: Format code with Prettier\n- `npm run test`: Run tests with Vitest\n\n### Running the Application\nThe Frontend workflow is configured to automatically run `npm run dev` on port 5000. The application will be accessible through the Replit webview.\n\n### Code Conventions\n- Use optional chaining for safe property access\n- Handle Supabase errors by displaying user-friendly messages\n- Follow existing component patterns and file structure\n- Use Tailwind CSS for styling\n- Implement proper error boundaries\n\n## Database Schema\nMain tables include:\n- `usuarios`: User management and profiles\n- `obras`: Construction sites\n- `asistencias`: Attendance records\n- `incidencias`: Incident reports\n- `logs_actividad`: Activity audit logs\n\nAll tables have Row Level Security (RLS) policies configured.\n\n## User Roles & Permissions\n1. **SuperAdmin**: Full system control\n2. **Admin**: Employee and payroll management\n3. **Supervisor**: Site and team management\n4. **User**: Personal dashboard access\n\n## Testing\n- Unit tests for utilities and services\n- Component tests with React Testing Library\n- Payroll calculation tests with comprehensive coverage\n\n## Deployment\nThe application is configured for deployment with:\n- Docker support (Dockerfile and docker-compose.yml included)\n- Nginx configuration for production\n- Build optimizations and code splitting\n- Cache control headers for SPA routing\n","size_bytes":4872},"tailwind.config.js":{"content":"/** @type {import('tailwindcss').Config} */\nexport default {\n  darkMode: [\"class\"],\n  content: [\n    './pages/**/*.{js,jsx}',\n    './components/**/*.{js,jsx}',\n    './app/**/*.{js,jsx}',\n    './src/**/*.{js,jsx}',\n  ],\n  prefix: \"\",\n  theme: {\n    container: {\n      center: true,\n      padding: \"2rem\",\n      screens: {\n        \"2xl\": \"1400px\",\n      },\n    },\n    extend: {\n      colors: {\n        border: \"var(--color-border)\", // slate-200\n        input: \"var(--color-input)\", // white\n        ring: \"var(--color-ring)\", // blue-600\n        background: \"var(--color-background)\", // slate-50\n        foreground: \"var(--color-foreground)\", // slate-800\n        primary: {\n          DEFAULT: \"var(--color-primary)\", // blue-600\n          foreground: \"var(--color-primary-foreground)\", // white\n        },\n        secondary: {\n          DEFAULT: \"var(--color-secondary)\", // slate-500\n          foreground: \"var(--color-secondary-foreground)\", // white\n        },\n        destructive: {\n          DEFAULT: \"var(--color-destructive)\", // red-600\n          foreground: \"var(--color-destructive-foreground)\", // white\n        },\n        muted: {\n          DEFAULT: \"var(--color-muted)\", // slate-100\n          foreground: \"var(--color-muted-foreground)\", // slate-500\n        },\n        accent: {\n          DEFAULT: \"var(--color-accent)\", // amber-500\n          foreground: \"var(--color-accent-foreground)\", // slate-800\n        },\n        popover: {\n          DEFAULT: \"var(--color-popover)\", // white\n          foreground: \"var(--color-popover-foreground)\", // slate-800\n        },\n        card: {\n          DEFAULT: \"var(--color-card)\", // white\n          foreground: \"var(--color-card-foreground)\", // slate-800\n        },\n        success: {\n          DEFAULT: \"var(--color-success)\", // emerald-600\n          foreground: \"var(--color-success-foreground)\", // white\n        },\n        warning: {\n          DEFAULT: \"var(--color-warning)\", // amber-600\n          foreground: \"var(--color-warning-foreground)\", // white\n        },\n        error: {\n          DEFAULT: \"var(--color-error)\", // red-600\n          foreground: \"var(--color-error-foreground)\", // white\n        },\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      fontFamily: {\n        sans: ['Inter', 'system-ui', 'sans-serif'],\n        mono: ['JetBrains Mono', 'monospace'],\n      },\n      fontSize: {\n        'xs': ['0.75rem', { lineHeight: '1rem' }],\n        'sm': ['0.875rem', { lineHeight: '1.25rem' }],\n        'base': ['1rem', { lineHeight: '1.5rem' }],\n        'lg': ['1.125rem', { lineHeight: '1.75rem' }],\n        'xl': ['1.25rem', { lineHeight: '1.75rem' }],\n        '2xl': ['1.5rem', { lineHeight: '2rem' }],\n        '3xl': ['1.875rem', { lineHeight: '2.25rem' }],\n        '4xl': ['2.25rem', { lineHeight: '2.5rem' }],\n      },\n      fontWeight: {\n        normal: '400',\n        medium: '500',\n        semibold: '600',\n      },\n      boxShadow: {\n        'sm': '0 1px 2px 0 rgba(0, 0, 0, 0.05)',\n        'DEFAULT': '0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06)',\n        'md': '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',\n        'lg': '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',\n        'xl': '0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)',\n      },\n      transitionDuration: {\n        '150': '150ms',\n        '200': '200ms',\n        '300': '300ms',\n      },\n      transitionTimingFunction: {\n        'out-cubic': 'cubic-bezier(0.33, 1, 0.68, 1)',\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\")],\n}","size_bytes":4148},"src/App.jsx":{"content":"import React from 'react';\nimport { AuthProvider } from './contexts/AuthContext';\nimport { BrandingProvider } from './components/BrandingProvider';\nimport Routes from './Routes';\nimport ErrorBoundary from './components/ErrorBoundary';\n\nconst App = () => {\n  return (\n    <ErrorBoundary>\n      <AuthProvider>\n        <BrandingProvider>\n          <Routes />\n        </BrandingProvider>\n      </AuthProvider>\n    </ErrorBoundary>\n  );\n};\n\nexport default App;","size_bytes":455},"src/Routes.jsx":{"content":"// src/Routes.jsx\nimport React, { Suspense } from \"react\";\nimport {\n  BrowserRouter,\n  Routes as RouterRoutes,\n  Route,\n  Navigate,\n  useLocation,\n} from \"react-router-dom\";\nimport ErrorBoundary from \"./components/ErrorBoundary\";\nimport ScrollToTop from \"./components/ScrollToTop\";\nimport { useAuth } from \"./contexts/AuthContext\";\n\n// Page imports\nimport NotFound from \"./pages/NotFound\";\nimport EmployeeLoginPortal from \"./pages/employee-login-portal\";\nimport EmployeeAttendanceDashboard from \"./pages/employee-attendance-dashboard\";\nimport AdministratorEmployeeManagementConsole from \"./pages/administrator-employee-management-console\";\nimport AttendanceHistoryAndAnalyticsDashboard from \"./pages/attendance-history-and-analytics-dashboard\";\nimport PayrollCalculationAndManagementInterface from \"./pages/payroll-calculation-and-management-interface\";\nimport EnhancedEmployeePayrollManagementWithDetailedCalculations from \"./pages/enhanced-employee-payroll-management-with-detailed-calculations\";\nimport ConstructionSiteAndSupervisorManagementHub from \"./pages/construction-site-and-supervisor-management-hub\";\nimport IncidentRegistrationAndManagementSystem from \"./pages/incident-registration-and-management-system\";\nimport ComprehensiveReportingAndExportCenter from \"./pages/comprehensive-reporting-and-export-center\";\nimport SystemAdministrationAndConfigurationPanel from \"./pages/system-administration-and-configuration-panel\";\nimport UserProfileManagementAndAuthenticationCenter from \"./pages/user-profile-management-and-authentication-center\";\nimport RoleBasedAccessControlManagementSystem from \"./pages/role-based-access-control-management-system\";\nimport ActivityLoggingAndSecurityMonitoringDashboard from \"./pages/activity-logging-and-security-monitoring-dashboard\";\nimport EnhancedEmployeeManagementConsoleWithDeletionControls from \"./pages/enhanced-employee-management-console-with-deletion-controls\";\nimport RealTimePayrollEstimationDashboardWithZeroStateHandling from \"./pages/real-time-payroll-estimation-dashboard-with-zero-state-handling\";\nimport AdvancedPayrollCalculationEngineWithComprehensiveWageManagement from \"./pages/advanced-payroll-calculation-engine-with-comprehensive-wage-management\";\nimport RoleBasedPermissionEnforcementAndSecurityManagementSystem from \"./pages/role-based-permission-enforcement-and-security-management-system\";\nimport PersonalizedWorkerDashboardWithSiteIntegrationAndTeamCollaboration from \"./pages/personalized-worker-dashboard-with-site-integration-and-team-collaboration\";\nimport ProductionDeploymentAndInfrastructureManagement from \"./pages/production-deployment-and-infrastructure-management\";\nimport ProductionDatabaseSchemaManagementConsole from \"./pages/production-database-schema-management-console\";\nimport FrontendArchitectureAndCodeQualityDashboard from \"./pages/frontend-architecture-and-code-quality-dashboard\";\nimport ObrasFinancialControlManagement from \"./pages/obras-financial-control-management\";\n\n// New page imports\nimport ProductionAuthenticationManagementSystem from \"./pages/production-authentication-management-system\";\nimport ComprehensiveEmployeeRegistrationAndProfileManagement from \"./pages/comprehensive-employee-registration-and-profile-management\";\nimport ProductionEnvironmentConfigurationDashboard from \"./pages/production-environment-configuration-dashboard\";\nimport EnterpriseCodeQualityAndTestingCenter from \"./pages/enterprise-code-quality-and-testing-center\";\n\n// Production Hardening Pages\nimport ProductionDataServicesAndErrorHandlingManagementConsole from \"./pages/production-data-services-and-error-handling-management-console\";\nimport EnterpriseSecurityAndRbacImplementationCenter from \"./pages/enterprise-security-and-rbac-implementation-center\";\n\n// NEW IMPORT - Performance Optimization and Production Deployment Center\nimport PerformanceOptimizationAndProductionDeploymentCenter from \"./pages/performance-optimization-and-production-deployment-center\";\n\n// Password reset page — RUTA EXACTA A TU ARCHIVO\nimport AuthReset from \"./auth/Reset.jsx\";\n\n// --- ProtectedRoute con soporte de `next` ---\nfunction ProtectedRoute({ children, requiredRole = null }) {\n  const { user, userProfile, loading } = useAuth();\n  const location = useLocation();\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"flex flex-col items-center space-y-4\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n          <span className=\"text-gray-600\">Cargando...</span>\n        </div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    const next = encodeURIComponent(location.pathname + location.search);\n    return <Navigate to={`/login?next=${next}`} replace />;\n  }\n\n  if (!userProfile) {\n    return <Navigate to=\"/profile-center\" replace />;\n  }\n\n  if (requiredRole) {\n    const userRole = userProfile?.role;\n    const hasAccess =\n      userRole === requiredRole ||\n      (requiredRole === \"admin\" && [\"admin\", \"superadmin\"].includes(userRole)) ||\n      (requiredRole === \"supervisor\" && [\"supervisor\", \"admin\", \"superadmin\"].includes(userRole)) ||\n      userRole === \"superadmin\";\n\n    if (!hasAccess) {\n      switch (userRole) {\n        case \"superadmin\":\n          return <Navigate to=\"/admin/system\" replace />;\n        case \"admin\":\n          return <Navigate to=\"/admin/employees\" replace />;\n        case \"supervisor\":\n          return <Navigate to=\"/supervisor/sites\" replace />;\n        default:\n          return <Navigate to=\"/dashboard\" replace />;\n      }\n    }\n  }\n\n  return children;\n}\n\n// Main routing component\nfunction AppRoutes() {\n  return (\n    <Suspense fallback={<div className=\"p-6\">Cargando…</div>}>\n      <RouterRoutes>\n        {/* Public Routes */}\n        <Route path=\"/login\" element={<EmployeeLoginPortal />} />\n        <Route path=\"/employee-login-portal\" element={<EmployeeLoginPortal />} />\n\n        {/* Password reset callback (Supabase) */}\n        <Route path=\"/auth/reset\" element={<AuthReset />} />\n\n        {/* Profile Management - Accessible to all authenticated users */}\n        <Route\n          path=\"/profile-center\"\n          element={\n            <ProtectedRoute>\n              <UserProfileManagementAndAuthenticationCenter />\n            </ProtectedRoute>\n          }\n        />\n\n        {/* Employee Routes */}\n        <Route\n          path=\"/dashboard\"\n          element={\n            <ProtectedRoute>\n              <EmployeeAttendanceDashboard />\n            </ProtectedRoute>\n          }\n        />\n\n        {/* Personalized Worker Dashboard */}\n        <Route\n          path=\"/personalized-worker-dashboard-with-site-integration-and-team-collaboration\"\n          element={\n            <ProtectedRoute requiredRole=\"user\">\n              <PersonalizedWorkerDashboardWithSiteIntegrationAndTeamCollaboration />\n            </ProtectedRoute>\n          }\n        />\n\n        {/* Supervisor Routes */}\n        <Route\n          path=\"/supervisor/sites\"\n          element={\n            <ProtectedRoute requiredRole=\"supervisor\">\n              <ConstructionSiteAndSupervisorManagementHub />\n            </ProtectedRoute>\n          }\n        />\n\n        {/* Administrator Routes */}\n        <Route\n          path=\"/admin/employees\"\n          element={\n            <ProtectedRoute requiredRole=\"admin\">\n              <AdministratorEmployeeManagementConsole />\n            </ProtectedRoute>\n          }\n        />\n\n        {/* Enhanced Employee Management with Deletion Controls */}\n        <Route\n          path=\"/enhanced-employee-management-console-with-deletion-controls\"\n          element={\n            <ProtectedRoute requiredRole=\"admin\">\n              <EnhancedEmployeeManagementConsoleWithDeletionControls />\n            </ProtectedRoute>\n          }\n        />\n\n        {/* Real-Time Payroll Estimation Dashboard */}\n        <Route\n          path=\"/real-time-payroll-estimation-dashboard-with-zero-state-handling\"\n          element={\n            <ProtectedRoute requiredRole=\"admin\">\n              <RealTimePayrollEstimationDashboardWithZeroStateHandling />\n            </ProtectedRoute>\n          }\n        />\n\n        {/* Enhanced Employee Payroll Management */}\n        <Route\n          path=\"/enhanced-employee-payroll-management-with-detailed-calculations\"\n          element={\n            <ProtectedRoute requiredRole=\"admin\">\n              <EnhancedEmployeePayrollManagementWithDetailedCalculations />\n            </ProtectedRoute>\n          }\n        />\n\n        {/* Advanced Payroll Calculation Engine */}\n        <Route\n          path=\"/advanced-payroll-calculation-engine-with-comprehensive-wage-management\"\n          element={\n            <ProtectedRoute requiredRole=\"admin\">\n              <AdvancedPayrollCalculationEngineWithComprehensiveWageManagement />\n            </ProtectedRoute>\n          }\n        />\n\n        {/* Role-Based Permission Enforcement System */}\n        <Route\n          path=\"/role-based-permission-enforcement-and-security-management-system\"\n          element={\n            <ProtectedRoute requiredRole=\"superadmin\">\n              <RoleBasedPermissionEnforcementAndSecurityManagementSystem />\n            </ProtectedRoute>\n          }\n        />\n\n        {/* Obras Financial Control Management */}\n        <Route\n          path=\"/admin/obras-financiero\"\n          element={\n            <ProtectedRoute requiredRole=\"admin\">\n              <ObrasFinancialControlManagement />\n            </ProtectedRoute>\n          }\n        />\n\n        {/* Production Deployment and Infrastructure Management */}\n        <Route\n          path=\"/production-deployment-and-infrastructure-management\"\n          element={\n            <ProtectedRoute requiredRole=\"superadmin\">\n              <ProductionDeploymentAndInfrastructureManagement />\n            </ProtectedRoute>\n          }\n        />\n\n        {/* Performance Optimization and Production Deployment Center */}\n        <Route\n          path=\"/performance-optimization-and-production-deployment-center\"\n          element={\n            <ProtectedRoute requiredRole=\"superadmin\">\n              <PerformanceOptimizationAndProductionDeploymentCenter />\n            </ProtectedRoute>\n          }\n        />\n\n        {/* Production Authentication and Employee Registration */}\n        <Route\n          path=\"/production-authentication-management-system\"\n          element={\n            <ProtectedRoute requiredRole=\"admin\">\n              <ProductionAuthenticationManagementSystem />\n            </ProtectedRoute>\n          }\n        />\n        <Route\n          path=\"/comprehensive-employee-registration-and-profile-management\"\n          element={\n            <ProtectedRoute requiredRole=\"admin\">\n              <ComprehensiveEmployeeRegistrationAndProfileManagement />\n            </ProtectedRoute>\n          }\n        />\n\n        {/* Production Database and Code Quality Management */}\n        <Route\n          path=\"/production-database-schema-management-console\"\n          element={\n            <ProtectedRoute requiredRole=\"superadmin\">\n              <ProductionDatabaseSchemaManagementConsole />\n            </ProtectedRoute>\n          }\n        />\n        <Route\n          path=\"/frontend-architecture-and-code-quality-dashboard\"\n          element={\n            <ProtectedRoute requiredRole=\"admin\">\n              <FrontendArchitectureAndCodeQualityDashboard />\n            </ProtectedRoute>\n          }\n        />\n\n        {/* Production Environment and Code Quality */}\n        <Route\n          path=\"/production-environment-configuration-dashboard\"\n          element={\n            <ProtectedRoute requiredRole=\"superadmin\">\n              <ProductionEnvironmentConfigurationDashboard />\n            </ProtectedRoute>\n          }\n        />\n        <Route\n          path=\"/enterprise-code-quality-and-testing-center\"\n          element={\n            <ProtectedRoute requiredRole=\"admin\">\n              <EnterpriseCodeQualityAndTestingCenter />\n            </ProtectedRoute>\n          }\n        />\n\n        {/* Production Hardening */}\n        <Route\n          path=\"/production-data-services-and-error-handling-management-console\"\n          element={\n            <ProtectedRoute requiredRole=\"superadmin\">\n              <ProductionDataServicesAndErrorHandlingManagementConsole />\n            </ProtectedRoute>\n          }\n        />\n        <Route\n          path=\"/enterprise-security-and-rbac-implementation-center\"\n          element={\n            <ProtectedRoute requiredRole=\"superadmin\">\n              <EnterpriseSecurityAndRbacImplementationCenter />\n            </ProtectedRoute>\n          }\n        />\n\n        {/* Admin */}\n        <Route\n          path=\"/admin/attendance\"\n          element={\n            <ProtectedRoute requiredRole=\"admin\">\n              <AttendanceHistoryAndAnalyticsDashboard />\n            </ProtectedRoute>\n          }\n        />\n        <Route\n          path=\"/admin/payroll\"\n          element={\n            <ProtectedRoute requiredRole=\"admin\">\n              <PayrollCalculationAndManagementInterface />\n            </ProtectedRoute>\n          }\n        />\n        <Route\n          path=\"/admin/incidents\"\n          element={\n            <ProtectedRoute requiredRole=\"admin\">\n              <IncidentRegistrationAndManagementSystem />\n            </ProtectedRoute>\n          }\n        />\n        <Route\n          path=\"/admin/reports\"\n          element={\n            <ProtectedRoute requiredRole=\"admin\">\n              <ComprehensiveReportingAndExportCenter />\n            </ProtectedRoute>\n          }\n        />\n\n        {/* SuperAdmin */}\n        <Route\n          path=\"/admin/system\"\n          element={\n            <ProtectedRoute requiredRole=\"superadmin\">\n              <SystemAdministrationAndConfigurationPanel />\n            </ProtectedRoute>\n          }\n        />\n        <Route\n          path=\"/admin/roles\"\n          element={\n            <ProtectedRoute requiredRole=\"superadmin\">\n              <RoleBasedAccessControlManagementSystem />\n            </ProtectedRoute>\n          }\n        />\n\n        {/* Default Redirects */}\n        <Route path=\"/\" element={<Navigate to=\"/login\" replace />} />\n\n        {/* 404 */}\n        <Route path=\"*\" element={<NotFound />} />\n      </RouterRoutes>\n    </Suspense>\n  );\n}\n\nexport default function Routes() {\n  return (\n    <BrowserRouter>\n      <ErrorBoundary>\n        <ScrollToTop />\n        <AppRoutes />\n      </ErrorBoundary>\n    </BrowserRouter>\n  );\n}\n","size_bytes":14477},"src/index.jsx":{"content":"import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./styles/tailwind.css\";\nimport \"./styles/index.css\";\nimport { wrapGlobalFetchForMetrics } from \"./lib/net-tap\";\n\n// Initialize network instrumentation before app starts\nwrapGlobalFetchForMetrics();\n\nconst container = document.getElementById(\"root\");\nconst root = createRoot(container);\n\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);","size_bytes":464},"src/auth/ProtectedRoute.jsx":{"content":"import React from 'react';\nimport { Navigate, useLocation } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\nimport { hasRole } from '../constants/roles.ts';\nimport Loading from '../components/ui/Loading';\nimport NotAuthorized from '../components/ui/NotAuthorized';\n\n/**\n * Production-ready ProtectedRoute component with consistent RBAC\n */\nexport function ProtectedRoute({ \n  children, \n  requiredRole = null, \n  requiredPermission = null,\n  fallbackPath = '/employee-login-portal'\n}) {\n  const { user, loading } = useAuth();\n  const location = useLocation();\n\n  // Show loading while auth state is being determined\n  if (loading) {\n    return <Loading />;\n  }\n\n  // Redirect to login if not authenticated\n  if (!user) {\n    return <Navigate \n      to={fallbackPath} \n      state={{ from: location }} \n      replace \n    />;\n  }\n\n  // Check role-based access\n  if (requiredRole && !hasRole(user?.role, requiredRole)) {\n    return <NotAuthorized requiredRole={requiredRole} userRole={user?.role} />;\n  }\n\n  // Check permission-based access\n  if (requiredPermission && !hasPermission(user?.role, requiredPermission)) {\n    return <NotAuthorized requiredPermission={requiredPermission} userRole={user?.role} />;\n  }\n\n  // User is authenticated and authorized\n  return <>{children}</>;\n}\n\nexport default ProtectedRoute;","size_bytes":1343},"src/auth/RequireRole.jsx":{"content":"import React from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\nimport { getDashboardRoute } from '../utils/navigationHelpers';\n\nconst RequireRole = ({ children, allowedRoles = [] }) => {\n  const { userProfile, loading } = useAuth();\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"flex flex-col items-center space-y-4\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n          <span className=\"text-gray-600\">Cargando...</span>\n        </div>\n      </div>\n    );\n  }\n\n  if (!userProfile) {\n    return <Navigate to=\"/login\" replace />;\n  }\n\n  const userRole = userProfile?.role;\n  \n  // Check if user has required role\n  const hasAccess = \n    allowedRoles?.includes(userRole) ||\n    allowedRoles?.includes('SuperAdmin') && userRole === 'superadmin' ||\n    allowedRoles?.includes('Admin') && ['admin', 'superadmin']?.includes(userRole) ||\n    allowedRoles?.includes('User') && ['user', 'supervisor', 'admin', 'superadmin']?.includes(userRole) ||\n    userRole === 'superadmin'; // SuperAdmin always has access\n\n  if (!hasAccess) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"max-w-md mx-auto text-center\">\n          <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4\">\n            <h3 className=\"font-semibold\">Acceso No Autorizado</h3>\n            <p className=\"mt-2 text-sm\">\n              No tienes permisos para acceder a esta sección.\n            </p>\n          </div>\n          <button\n            onClick={() => window.location.href = getDashboardRoute(userRole)}\n            className=\"bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n          >\n            Volver al Dashboard\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return children;\n};\n\nexport default RequireRole;","size_bytes":2024},"src/auth/Reset.jsx":{"content":"// src/auth/reset.jsx\nimport React, { useEffect, useState } from \"react\";\nimport { useNavigate, useSearchParams } from \"react-router-dom\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport { supabase } from \"../lib/supabase\";\n\nexport default function AuthReset() {\n  const navigate = useNavigate();\n  const [params] = useSearchParams();\n  const { updatePassword } = useAuth();\n\n  const [ready, setReady] = useState(false);\n  const [hasSession, setHasSession] = useState(false);\n  const [password, setPassword] = useState(\"\");\n  const [submitting, setSubmitting] = useState(false);\n  const [error, setError] = useState(\"\");\n\n  // Asegura la sesión de recuperación (supabase añade tokens en el hash)\n  useEffect(() => {\n    let mounted = true;\n\n    const ensureRecoverySession = async () => {\n      try {\n        // ¿Ya hay sesión?\n        const { data } = await supabase.auth.getSession();\n        if (data?.session) {\n          if (mounted) {\n            setHasSession(true);\n            setReady(true);\n          }\n          return;\n        }\n\n        // Intento manual con tokens del hash\n        const hash = new URLSearchParams(window.location.hash.replace(/^#/, \"\"));\n        const access_token = hash.get(\"access_token\");\n        const refresh_token = hash.get(\"refresh_token\");\n\n        if (access_token && refresh_token) {\n          const { data: setData, error: setErr } = await supabase.auth.setSession({\n            access_token,\n            refresh_token,\n          });\n          if (mounted) {\n            if (setErr) {\n              setError(setErr.message);\n              setHasSession(false);\n            } else {\n              setHasSession(!!setData?.session);\n              // Limpia el hash para no dejar tokens a la vista\n              history.replaceState(null, \"\", window.location.pathname + window.location.search);\n            }\n          }\n        } else {\n          // Reintento rápido por si tarda en hidratar\n          await new Promise((r) => setTimeout(r, 250));\n          const { data: data2 } = await supabase.auth.getSession();\n          if (mounted) setHasSession(!!data2?.session);\n        }\n      } catch (e) {\n        if (mounted) setError(e?.message || \"Error preparando la sesión de recuperación.\");\n      } finally {\n        if (mounted) setReady(true);\n      }\n    };\n\n    ensureRecoverySession();\n    return () => {\n      mounted = false;\n    };\n  }, []);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setError(\"\");\n\n    if (!hasSession) {\n      setError(\n        \"No hay sesión de recuperación activa. Abre el enlace del correo en este navegador.\"\n      );\n      return;\n    }\n    if (!password || password.length < 8) {\n      setError(\"La contraseña debe tener al menos 8 caracteres.\");\n      return;\n    }\n\n    setSubmitting(true);\n    const res = await updatePassword(password);\n    setSubmitting(false);\n\n    if (!res?.success) {\n      setError(res?.error || \"No se pudo actualizar la contraseña.\");\n      return;\n    }\n\n    // ✅ Redirige inmediatamente al login. Conserva `next` si venía en la URL.\n    const next = params.get(\"next\");\n    const loginUrl = next ? `/login?next=${encodeURIComponent(next)}` : \"/login\";\n    navigate(loginUrl, { replace: true });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex items-start justify-center p-6\">\n      <div className=\"w-full max-w-lg bg-white border border-gray-200 rounded-xl shadow-sm p-6 mt-20\">\n        <h1 className=\"text-2xl font-semibold text-gray-900 text-center mb-6\">Nueva contraseña</h1>\n\n        {!ready ? (\n          <div className=\"text-sm text-gray-600 text-center\">Preparando…</div>\n        ) : !hasSession ? (\n          <div className=\"space-y-4\">\n            <div className=\"text-sm text-red-600 bg-red-50 border border-red-200 rounded-md p-3\">\n              {error ||\n                \"No se detectó sesión de recuperación. Reabre el enlace del correo en este navegador.\"}\n            </div>\n          </div>\n        ) : (\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            {error && (\n              <div className=\"text-sm text-red-600 bg-red-50 border border-red-200 rounded-md p-3\">\n                {error}\n              </div>\n            )}\n\n            <input\n              type=\"password\"\n              className=\"w-full rounded-lg border border-gray-300 px-3 py-2\"\n              placeholder=\"Nueva contraseña (mínimo 8 caracteres)\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              disabled={submitting}\n              autoFocus\n            />\n\n            <button\n              type=\"submit\"\n              className=\"w-full rounded-lg bg-blue-600 text-white px-3 py-2 font-medium disabled:opacity-60\"\n              disabled={submitting}\n            >\n              {submitting ? \"Guardando…\" : \"Guardar\"}\n            </button>\n          </form>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":4959},"src/components/AppIcon.jsx":{"content":"import React from 'react';\nimport * as LucideIcons from 'lucide-react';\nimport { HelpCircle } from 'lucide-react';\n\nfunction Icon({\n    name,\n    size = 24,\n    color = \"currentColor\",\n    className = \"\",\n    strokeWidth = 2,\n    ...props\n}) {\n    const IconComponent = LucideIcons?.[name];\n\n    if (!IconComponent) {\n        return <HelpCircle size={size} color=\"gray\" strokeWidth={strokeWidth} className={className} {...props} />;\n    }\n\n    return <IconComponent\n        size={size}\n        color={color}\n        strokeWidth={strokeWidth}\n        className={className}\n        {...props}\n    />;\n}\nexport default Icon;","size_bytes":621},"src/components/AppImage.jsx":{"content":"import React from 'react';\n\nfunction Image({\n  src,\n  alt = \"Image Name\",\n  className = \"\",\n  ...props\n}) {\n\n  return (\n    <img\n      src={src}\n      alt={alt}\n      className={className}\n      onError={(e) => {\n        e.target.src = \"/assets/images/no_image.png\"\n      }}\n      {...props}\n    />\n  );\n}\n\nexport default Image;\n","size_bytes":329},"src/components/BrandingProvider.jsx":{"content":"import React, { createContext, useContext, useState, useEffect } from 'react';\nimport brandingService from '../services/brandingService';\n\nconst BrandingContext = createContext({});\n\nexport const useBranding = () => {\n  const context = useContext(BrandingContext);\n  if (!context) {\n    throw new Error('useBranding must be used within a BrandingProvider');\n  }\n  return context;\n};\n\nexport const BrandingProvider = ({ children }) => {\n  const [branding, setBranding] = useState({\n    nombre_empresa: 'AsistenciaPro',\n    logo_url: null,\n    color_primario: '#3B82F6',\n    color_secundario: '#10B981',\n    moneda: 'MXN',\n    simbolo_moneda: '$',\n    mensaje_bienvenida: 'Sistema de gestión de asistencia y recursos humanos'\n  });\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    loadBrandingSettings();\n  }, []);\n\n  const loadBrandingSettings = async () => {\n    try {\n      setLoading(true);\n      const settings = await brandingService?.getPublicBrandingSettings();\n      if (settings) {\n        setBranding(prevBranding => ({\n          ...prevBranding,\n          ...settings\n        }));\n        \n        // Apply branding to the UI\n        brandingService?.applyBrandingSettings(settings);\n      }\n    } catch (error) {\n      console.warn('Could not load branding settings:', error?.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updateBranding = (newBranding) => {\n    setBranding(prevBranding => ({\n      ...prevBranding,\n      ...newBranding\n    }));\n    \n    // Apply new branding settings\n    brandingService?.applyBrandingSettings(newBranding);\n  };\n\n  const formatCurrency = (amount) => {\n    return brandingService?.formatCurrency(amount, {\n      code: branding?.moneda,\n      symbol: branding?.simbolo_moneda\n    });\n  };\n\n  // Add missing footer text functions\n  const getFooterText = () => {\n    return branding?.mensaje_bienvenida || 'Sistema de gestión de asistencia y recursos humanos';\n  };\n\n  const getCopyrightText = () => {\n    const currentYear = new Date()?.getFullYear();\n    const companyName = branding?.nombre_empresa || 'AsistenciaPro';\n    return `© ${currentYear} ${companyName}. Todos los derechos reservados.`;\n  };\n\n  const value = {\n    branding,\n    brandingSettings: branding, // Add alias for backward compatibility\n    loading,\n    updateBranding,\n    formatCurrency,\n    refreshBranding: loadBrandingSettings,\n    getFooterText,\n    getCopyrightText\n  };\n\n  return (\n    <BrandingContext.Provider value={value}>\n      {children}\n    </BrandingContext.Provider>\n  );\n};\n\nexport default BrandingProvider;","size_bytes":2593},"src/components/ErrorBoundary.jsx":{"content":"import React from \"react\";\nimport Icon from \"./AppIcon\";\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    error.__ErrorBoundary = true;\n    window.__COMPONENT_ERROR__?.(error, errorInfo);\n    // console.log(\"Error caught by ErrorBoundary:\", error, errorInfo);\n  }\n\n  render() {\n    if (this.state?.hasError) {\n      return (\n        <div className=\"min-h-screen flex items-center justify-center bg-neutral-50\">\n          <div className=\"text-center p-8 max-w-md\">\n            <div className=\"flex justify-center items-center mb-2\">\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"42px\" height=\"42px\" viewBox=\"0 0 32 33\" fill=\"none\">\n                <path d=\"M16 28.5C22.6274 28.5 28 23.1274 28 16.5C28 9.87258 22.6274 4.5 16 4.5C9.37258 4.5 4 9.87258 4 16.5C4 23.1274 9.37258 28.5 16 28.5Z\" stroke=\"#343330\" strokeWidth=\"2\" strokeMiterlimit=\"10\" />\n                <path d=\"M11.5 15.5C12.3284 15.5 13 14.8284 13 14C13 13.1716 12.3284 12.5 11.5 12.5C10.6716 12.5 10 13.1716 10 14C10 14.8284 10.6716 15.5 11.5 15.5Z\" fill=\"#343330\" />\n                <path d=\"M20.5 15.5C21.3284 15.5 22 14.8284 22 14C22 13.1716 21.3284 12.5 20.5 12.5C19.6716 12.5 19 13.1716 19 14C19 14.8284 19.6716 15.5 20.5 15.5Z\" fill=\"#343330\" />\n                <path d=\"M21 22.5C19.9625 20.7062 18.2213 19.5 16 19.5C13.7787 19.5 12.0375 20.7062 11 22.5\" stroke=\"#343330\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n              </svg>\n            </div>\n            <div className=\"flex flex-col gap-1 text-center\">\n              <h1 className=\"text-2xl font-medium text-neutral-800\">Something went wrong</h1>\n              <p className=\"text-neutral-600 text-base w w-8/12 mx-auto\">We encountered an unexpected error while processing your request.</p>\n            </div>\n            <div className=\"flex justify-center items-center mt-6\">\n              <button\n                onClick={() => {\n                  window.location.href = \"/\";\n                }}\n                className=\"bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 px-4 rounded flex items-center gap-2 transition-colors duration-200 shadow-sm\"\n              >\n                <Icon name=\"ArrowLeft\" size={18} color=\"#fff\" />\n                Back\n              </button>\n            </div>\n          </div >\n        </div >\n      );\n    }\n\n    return this.props?.children;\n  }\n}\n\nexport default ErrorBoundary;","size_bytes":2599},"src/components/ScrollToTop.jsx":{"content":"import { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nconst ScrollToTop = () => {\n  const { pathname } = useLocation();\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [pathname]);\n\n  return null;\n};\n\nexport default ScrollToTop;","size_bytes":263},"src/config/flags.ts":{"content":"// src/config/flags.ts\n/**\n * Feature flags for production hardening and staging environments\n * Used to control feature rollouts and enable/disable functionality\n */\n\nexport const FLAGS = {\n  // Global branding feature flag\n  BRAND_GLOBAL: import.meta.env?.VITE_FLAG_BRAND_GLOBAL === '1',\n  \n  // New RLS policies flag\n  NEW_RLS: import.meta.env?.VITE_FLAG_NEW_RLS === '1',\n  \n  // Production hardening features\n  PRODUCTION_MONITORING: import.meta.env?.VITE_FLAG_PRODUCTION_MONITORING === '1',\n  \n  // Security enhancements\n  ENHANCED_SECURITY: import.meta.env?.VITE_FLAG_ENHANCED_SECURITY === '1',\n  \n  // Error tracking and reporting\n  ERROR_TRACKING: import.meta.env?.VITE_FLAG_ERROR_TRACKING === '1',\n  \n  // Performance monitoring\n  PERFORMANCE_MONITORING: import.meta.env?.VITE_FLAG_PERFORMANCE_MONITORING === '1',\n  \n  // Mock data detection\n  MOCK_DATA_DETECTION: import.meta.env?.VITE_FLAG_MOCK_DATA_DETECTION === '1',\n  \n  // Development features (should be false in production)\n  DEBUG_MODE: import.meta.env?.VITE_FLAG_DEBUG_MODE === '1',\n  \n  // Service health monitoring\n  HEALTH_CHECKS: import.meta.env?.VITE_FLAG_HEALTH_CHECKS === '1'\n};\n\n// Flag validation for production safety\nexport function validateFlags() {\n  const warnings = [];\n  \n  // Check for development flags in production\n  if (import.meta.env?.PROD && FLAGS?.DEBUG_MODE) {\n    warnings?.push('DEBUG_MODE is enabled in production environment');\n  }\n  \n  // Recommend enabling production flags\n  if (import.meta.env?.PROD && !FLAGS?.ERROR_TRACKING) {\n    warnings?.push('ERROR_TRACKING should be enabled in production');\n  }\n  \n  if (import.meta.env?.PROD && !FLAGS?.HEALTH_CHECKS) {\n    warnings?.push('HEALTH_CHECKS should be enabled in production');\n  }\n  \n  return warnings;\n}\n\n// Get current flag status for monitoring\nexport function getFlagStatus() {\n  return {\n    environment: import.meta.env?.MODE,\n    flags: FLAGS,\n    warnings: validateFlags()\n  };\n}\n\nexport default FLAGS;","size_bytes":1967},"src/constants/roles.ts":{"content":"/**\n * Role definitions for Nova HR RBAC system\n */\nexport const ROLES = {\n  SUPERADMIN: 'superadmin',\n  ADMIN: 'admin', \n  SUPERVISOR: 'supervisor',\n  EMPLOYEE: 'employee'\n} as const;\n\n/**\n * Role hierarchy for permission inheritance\n */\nexport const ROLE_HIERARCHY = {\n  [ROLES.SUPERADMIN]: 4,\n  [ROLES.ADMIN]: 3,\n  [ROLES.SUPERVISOR]: 2,\n  [ROLES.EMPLOYEE]: 1\n} as const;\n\n/**\n * Permissions mapping for each role\n */\nexport const ROLE_PERMISSIONS = {\n  [ROLES.SUPERADMIN]: [\n    'manage_users',\n    'manage_employees',\n    'manage_sites',\n    'manage_attendance',\n    'manage_payroll',\n    'manage_incidents',\n    'manage_reports',\n    'manage_system',\n    'manage_branding',\n    'view_analytics'\n  ],\n  [ROLES.ADMIN]: [\n    'manage_employees',\n    'manage_sites', \n    'manage_attendance',\n    'manage_payroll',\n    'manage_incidents',\n    'manage_reports',\n    'view_analytics'\n  ],\n  [ROLES.SUPERVISOR]: [\n    'view_employees',\n    'manage_attendance',\n    'create_incidents',\n    'view_reports'\n  ],\n  [ROLES.EMPLOYEE]: [\n    'view_own_data',\n    'clock_in_out',\n    'view_own_payroll',\n    'create_incidents'\n  ]\n} as const;\n\n/**\n * Check if user has required role\n */\nexport function hasRole(userRole: string, requiredRole: string): boolean {\n  if (!userRole || !requiredRole) return false;\n  \n  const userLevel = ROLE_HIERARCHY[userRole as keyof typeof ROLE_HIERARCHY] || 0;\n  const requiredLevel = ROLE_HIERARCHY[requiredRole as keyof typeof ROLE_HIERARCHY] || 0;\n  \n  return userLevel >= requiredLevel;\n}\n\n/**\n * Check if user has specific permission\n */\nexport function hasPermission(userRole: string, permission: string): boolean {\n  if (!userRole || !permission) return false;\n  \n  const rolePermissions = ROLE_PERMISSIONS[userRole as keyof typeof ROLE_PERMISSIONS] || [];\n  return rolePermissions.includes(permission);\n}\n\n/**\n * Get all permissions for a role\n */\nexport function getRolePermissions(role: string): string[] {\n  return ROLE_PERMISSIONS[role as keyof typeof ROLE_PERMISSIONS] || [];\n}","size_bytes":2015},"src/contexts/AuthContext.jsx":{"content":"// src/contexts/AuthContext.jsx\nimport React, {\n  createContext,\n  useContext,\n  useEffect,\n  useState,\n  useCallback,\n  useRef,\n  useMemo,\n} from 'react';\nimport { supabase } from '../lib/supabase';\n\nconst AuthContext = createContext({});\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) throw new Error('useAuth must be used within AuthProvider');\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [userProfile, setUserProfile] = useState(null);\n  const [employeeProfile, setEmployeeProfile] = useState(null);\n\n  const [loading, setLoading] = useState(true);\n  const [authError, setAuthError] = useState('');\n  const [profileLoading, setProfileLoading] = useState(false);\n\n  // Anti-duplicado / control de concurrencia\n  const inFlightRef = useRef(null);      // { userId, promise }\n  const lastLoadRef = useRef(0);         // timestamp\n  const authChangeTimerRef = useRef(null);\n\n  // ---------- localStorage helpers ----------\n  const saveSessionToStorage = useCallback((userData, profileData, employeeData = null) => {\n    try {\n      const sessionData = {\n        user: userData,\n        userProfile: profileData,\n        employeeProfile: employeeData,\n        timestamp: Date.now(),\n      };\n      localStorage.setItem('asistenciapro_session', JSON.stringify(sessionData));\n    } catch (e) {\n      console.error('Failed to save session:', e);\n    }\n  }, []);\n\n  const loadSessionFromStorage = useCallback(() => {\n    try {\n      const saved = localStorage.getItem('asistenciapro_session');\n      if (!saved) return null;\n      const sessionData = JSON.parse(saved);\n      const isValid = Date.now() - sessionData?.timestamp < 24 * 60 * 60 * 1000;\n      if (isValid) return sessionData;\n      localStorage.removeItem('asistenciapro_session');\n    } catch (e) {\n      console.error('Failed to load session:', e);\n      localStorage.removeItem('asistenciapro_session');\n    }\n    return null;\n  }, []);\n\n  const clearSessionFromStorage = useCallback(() => {\n    try { localStorage.removeItem('asistenciapro_session'); } catch {}\n  }, []);\n  // ------------------------------------------\n\n  // --------- Carga de perfil (ÚNICA fuente de verdad) ---------\n  const fetchUserProfile = useCallback(\n    async (userId, { useCache = false } = {}) => {\n      if (!userId) return null;\n\n      // Throttle: evita repetición si fue hace < 500ms y es el mismo usuario\n      const now = Date.now();\n      if (now - lastLoadRef.current < 500 && userProfile?.id === userId) return userProfile;\n\n      // Deduper: si ya hay un fetch en curso para el mismo user, espera ese\n      if (inFlightRef.current?.userId === userId) {\n        try {\n          return await inFlightRef.current.promise;\n        } catch {\n          // continúa a intentar de nuevo\n        }\n      }\n\n      setProfileLoading(true);\n      setAuthError('');\n\n      const run = async () => {\n        try {\n          // Cache primero si procede\n          if (useCache) {\n            const cached = loadSessionFromStorage();\n            if (cached?.userProfile?.id === userId) {\n              setUserProfile(cached.userProfile);\n              setEmployeeProfile(cached.employeeProfile || null);\n              return cached.userProfile;\n            }\n          }\n\n          // Consulta mínima SIN count\n          const { data: profile, error: profileError } = await supabase\n            .from('user_profiles')\n            .select('id, full_name, email, phone, role, is_super_admin')\n            .eq('id', userId)\n            .single();\n\n          if (profileError) throw profileError;\n\n          setUserProfile(profile);\n\n          // Si no es admin, intenta traer su employee_profile activo\n          if (profile.role !== 'superadmin' && profile.role !== 'admin') {\n            const { data: employeeData, error: empError } = await supabase\n              .from('employee_profiles')\n              .select(`\n                *,\n                construction_site:construction_sites!site_id (id, name, address, manager_name, phone),\n                supervisor:user_profiles!supervisor_id (id, full_name, email, phone)\n              `)\n              .eq('user_id', userId)\n              .eq('status', 'active')\n              .maybeSingle();\n\n            if (!empError) {\n              setEmployeeProfile(employeeData || null);\n              saveSessionToStorage(user, profile, employeeData || null);\n            } else {\n              setEmployeeProfile(null);\n              saveSessionToStorage(user, profile, null);\n            }\n          } else {\n            setEmployeeProfile(null);\n            saveSessionToStorage(user, profile, null);\n          }\n\n          return profile;\n        } catch (err) {\n          console.error('fetchUserProfile error:', err);\n          setAuthError(err?.message || 'Failed to load user profile.');\n          setEmployeeProfile(null);\n          return null;\n        } finally {\n          lastLoadRef.current = Date.now();\n          setProfileLoading(false);\n        }\n      };\n\n      const promise = run();\n      inFlightRef.current = { userId, promise };\n      const result = await promise;\n      if (inFlightRef.current?.userId === userId) inFlightRef.current = null;\n      return result;\n    },\n    [loadSessionFromStorage, saveSessionToStorage, user, userProfile]\n  );\n  // ------------------------------------------------------------\n\n  // --------- Inicialización de sesión ----------\n  useEffect(() => {\n    let isMounted = true;\n\n    const boot = async () => {\n      try {\n        // 1) Intenta cache\n        const cached = loadSessionFromStorage();\n        if (cached?.user && isMounted) {\n          setUser(cached.user);\n          setUserProfile(cached.userProfile);\n          setEmployeeProfile(cached.employeeProfile || null);\n          setLoading(false);\n        }\n\n        // 2) Pide sesión actual (no llama fetchUserProfile aquí; lo hará onAuthStateChange)\n        const { data: { session }, error } = await supabase.auth.getSession();\n        if (!isMounted) return;\n        if (error) throw error;\n\n        setUser(session?.user ?? null);\n        setLoading(false);\n      } catch (e) {\n        console.error('Session init error:', e);\n        setAuthError('Failed to load session. Please refresh the page.');\n        setLoading(false);\n      }\n    };\n\n    const { data: { subscription } } = supabase.auth.onAuthStateChange((event, session) => {\n      if (!isMounted) return;\n\n      // Debounce del SDK (algunas veces dispara múltiples eventos cercanos)\n      if (authChangeTimerRef.current) clearTimeout(authChangeTimerRef.current);\n      authChangeTimerRef.current = setTimeout(async () => {\n        setUser(session?.user ?? null);\n        if (session?.user?.id) {\n          await fetchUserProfile(session.user.id, { useCache: true });\n        } else {\n          setUserProfile(null);\n          setEmployeeProfile(null);\n          clearSessionFromStorage();\n        }\n      }, 120);\n    });\n\n    boot();\n\n    return () => {\n      isMounted = false;\n      subscription?.unsubscribe?.();\n      if (authChangeTimerRef.current) clearTimeout(authChangeTimerRef.current);\n    };\n  }, [fetchUserProfile, loadSessionFromStorage, clearSessionFromStorage]);\n  // --------------------------------------------\n\n  // --------- Operaciones de perfil públicas (stab. con useCallback) ---------\n  const refreshUserProfile = useCallback(async () => {\n    if (!user?.id) return;\n    setLoading(true);\n    await fetchUserProfile(user.id, { useCache: false });\n    setLoading(false);\n  }, [user?.id, fetchUserProfile]);\n\n  const logActivity = useCallback(\n    async (action, module, description, userId = null) => {\n      try {\n        await supabase.from('logs_actividad').insert({\n          usuario_id: userId || user?.id,\n          rol: userProfile?.role || 'user',\n          accion: action,\n          modulo: module,\n          descripcion: description,\n        });\n      } catch (e) {\n        console.error('Failed to log activity:', e);\n      }\n    },\n    [user?.id, userProfile?.role]\n  );\n\n  const signIn = useCallback(\n    async (email, password) => {\n      try {\n        setAuthError('');\n        setLoading(true);\n        const { data, error } = await supabase.auth.signInWithPassword({ email, password });\n        if (error) throw error;\n        await logActivity('login', 'Authentication', 'User logged in successfully', data?.user?.id);\n        return { success: true, user: data?.user };\n      } catch (e) {\n        setAuthError(e?.message || 'Something went wrong.');\n        return { success: false, error: e?.message };\n      } finally {\n        setLoading(false);\n      }\n    },\n    [logActivity]\n  );\n\n  const signUp = useCallback(\n    async (email, password, fullName, role = 'user') => {\n      try {\n        setAuthError('');\n        const { data, error } = await supabase.auth.signUp({\n          email,\n          password,\n          options: { data: { full_name: fullName, role } },\n        });\n        if (error) throw error;\n        await logActivity('registration', 'Authentication', 'New user registered', data?.user?.id);\n        return { success: true, user: data?.user };\n      } catch (e) {\n        setAuthError(e?.message || 'Something went wrong.');\n        return { success: false, error: e?.message };\n      }\n    },\n    [logActivity]\n  );\n\n  const sendOTP = useCallback(async (phone, email) => {\n    try {\n      setAuthError('');\n      const otpData = phone ? { phone } : email ? { email } : null;\n      if (!otpData) return { success: false, error: 'Debe proporcionar un teléfono o correo electrónico' };\n      const { data, error } = await supabase.auth.signInWithOtp(otpData);\n      if (error) throw error;\n      return { success: true, data };\n    } catch (e) {\n      setAuthError(e?.message || 'Something went wrong.');\n      return { success: false, error: e?.message };\n    }\n  }, []);\n\n  const verifyOTP = useCallback(\n    async (phone, email, token, fullName, role = 'user') => {\n      try {\n        setAuthError('');\n        const verifyData = { token, type: phone ? 'sms' : 'email', ...(phone ? { phone } : { email }) };\n        const { data, error } = await supabase.auth.verifyOtp(verifyData);\n        if (error) throw error;\n        await logActivity('otp_verification', 'Authentication', 'OTP verified successfully', data?.user?.id);\n        return { success: true, user: data?.user, session: data?.session };\n      } catch (e) {\n        setAuthError(e?.message || 'Something went wrong.');\n        return { success: false, error: e?.message };\n      }\n    },\n    [logActivity]\n  );\n\n  const resetPassword = useCallback(async (email, redirectTo) => {\n    try {\n      setAuthError('');\n      if (!email) return { success: false, error: 'Debes ingresar un correo' };\n      const { data, error } = await supabase.auth.resetPasswordForEmail(email, {\n        redirectTo: redirectTo || `${window.location.origin}/auth/reset`,\n      });\n      if (error) throw error;\n      return { success: true, data };\n    } catch (e) {\n      return { success: false, error: e?.message || 'No se pudo enviar el enlace de restablecimiento' };\n    }\n  }, []);\n\n  const updatePassword = useCallback(async (newPassword) => {\n    try {\n      setAuthError('');\n      if (!newPassword) return { success: false, error: 'Ingresa una contraseña válida' };\n      const { data, error } = await supabase.auth.updateUser({ password: newPassword });\n      if (error) throw error;\n      try { await logActivity('password_update', 'Authentication', 'User updated password'); } catch {}\n      return { success: true, data };\n    } catch (e) {\n      return { success: false, error: e?.message || 'No se pudo actualizar la contraseña' };\n    }\n  }, [logActivity]);\n\n  const signOut = useCallback(async () => {\n    try {\n      setAuthError('');\n      await logActivity('logout', 'Authentication', 'User logged out');\n      const { error } = await supabase.auth.signOut();\n      if (error) throw error;\n      clearSessionFromStorage();\n      return { success: true };\n    } catch (e) {\n      setAuthError(e?.message || 'Failed to sign out');\n      return { success: false, error: e?.message || 'Failed to sign out' };\n    }\n  }, [logActivity, clearSessionFromStorage]);\n  // ---------------------------------------------------------------------------------------\n\n  const getUserProfile = useCallback(() => userProfile, [userProfile]);\n  const getEmployeeProfile = useCallback(() => employeeProfile, [employeeProfile]);\n\n  // Roles (callbacks estables)\n  const isAdmin = useCallback(\n    () => userProfile?.role === 'admin' || userProfile?.role === 'superadmin',\n    [userProfile?.role]\n  );\n  const isSuperAdmin = useCallback(\n    () => userProfile?.role === 'superadmin' || userProfile?.is_super_admin === true,\n    [userProfile?.role, userProfile?.is_super_admin]\n  );\n  const isSupervisor = useCallback(\n    () => ['supervisor', 'admin', 'superadmin'].includes(userProfile?.role),\n    [userProfile?.role]\n  );\n  const hasRole = useCallback((requiredRole) => {\n    if (!userProfile?.role) return false;\n    const rank = { user: 1, supervisor: 2, admin: 3, superadmin: 4 };\n    return (rank[userProfile.role] || 0) >= (rank[requiredRole] || 0);\n  }, [userProfile?.role]);\n\n  const getCurrentUserContext = useCallback(() => {\n    if (!userProfile) return null;\n    return {\n      id: userProfile.id,\n      name: userProfile.full_name || userProfile.email?.split('@')?.[0],\n      email: userProfile.email,\n      role: userProfile.role,\n      phone: userProfile.phone,\n      avatar: null,\n      site: employeeProfile?.construction_site?.name || 'No asignado',\n      supervisor: employeeProfile?.supervisor?.full_name || 'No asignado',\n      position: employeeProfile?.position || 'No asignado',\n      employeeId: employeeProfile?.employee_id || null,\n      isEmployee: !!employeeProfile,\n    };\n  }, [userProfile, employeeProfile]);\n\n  const getConnectionStatus = useCallback(async () => {\n    try {\n      // test mínimo contra auth (sin tocar user_profiles)\n      const { data, error } = await supabase.auth.getSession();\n      if (error) return { success: false, error: error.message, type: 'auth' };\n      return { success: true };\n    } catch (e) {\n      return { success: false, error: e?.message || 'Connection test failed', type: 'unknown' };\n    }\n  }, []);\n\n  // ⚠️ IMPORTANTE: memoiza el valor del Context para que NO cambie en cada render\n  const value = useMemo(\n    () => ({\n      user,\n      userProfile,\n      employeeProfile,\n      loading,\n      profileLoading,\n      authError,\n      // auth ops\n      signIn,\n      signUp,\n      sendOTP,\n      verifyOTP,\n      resetPassword,\n      updatePassword,\n      signOut,\n      // profile ops\n      getUserProfile,\n      getEmployeeProfile,\n      fetchUserProfile,\n      refreshUserProfile,\n      getCurrentUserContext,\n      // roles\n      isAdmin,\n      isSuperAdmin,\n      isSupervisor,\n      hasRole,\n      // misc\n      setAuthError,\n      getConnectionStatus,\n    }),\n    [\n      user,\n      userProfile,\n      employeeProfile,\n      loading,\n      profileLoading,\n      authError,\n      signIn,\n      signUp,\n      sendOTP,\n      verifyOTP,\n      resetPassword,\n      updatePassword,\n      signOut,\n      getUserProfile,\n      getEmployeeProfile,\n      fetchUserProfile,\n      refreshUserProfile,\n      getCurrentUserContext,\n      isAdmin,\n      isSuperAdmin,\n      isSupervisor,\n      hasRole,\n      getConnectionStatus,\n    ]\n  );\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n","size_bytes":15605},"src/data/employeeService.js":{"content":"// src/data/employeeDataService.js\nimport { supabase } from '../lib/supabase';\n\nfunction ok(data)   { return { success: true,  ...data }; }\nfunction fail(err)  { return { success: false, error: err?.message || String(err) || 'Error desconocido' }; }\n\n// Sanea el término de búsqueda para usarlo en ilike (escapa % y ,)\nfunction sanitizeSearch(s = '') {\n  const raw = String(s).trim();\n  if (!raw) return '';\n  // Escapar % y , que rompen el OR encoder\n  return raw.replaceAll('%', '\\\\%').replaceAll(',', ' ');\n}\n\nexport const employeeDataService = {\n  /**\n   * Obtiene empleados con filtros, paginación y ordenamiento.\n   * @param {Object} filters\n   *  - role?: string\n   *  - obra_id?: string\n   *  - search?: string\n   *  - limit?: number (default 100)\n   *  - offset?: number (default 0)\n   *  - orderBy?: string (default 'created_at')\n   *  - order?: 'asc' | 'desc' (default 'desc')\n   */\n  async getEmployees(filters = {}) {\n    try {\n      const {\n        role,\n        obra_id,\n        search,\n        limit = 100,\n        offset = 0,\n        orderBy = 'created_at',\n        order = 'desc',\n      } = filters;\n\n      let query = supabase\n        .from('usuarios')\n        .select(`\n          id,\n          correo,\n          nombre,\n          telefono,\n          rol,\n          is_active,\n          obra_id,\n          supervisor_id,\n          puesto,\n          hourly_rate,\n          created_at,\n          updated_at,\n          obras:obra_id (\n            id,\n            nombre,\n            direccion\n          ),\n          supervisor:usuarios!supervisor_id (\n            id,\n            nombre,\n            correo\n          )\n        `)\n        .eq('is_active', true);\n\n      if (role)    query = query.eq('rol', role);\n      if (obra_id) query = query.eq('obra_id', obra_id);\n\n      if (search) {\n        const needle = sanitizeSearch(search);\n        // Nota: al usar OR con ilike, evita inyectar comas sin escapar\n        query = query.or(`nombre.ilike.%${needle}%,correo.ilike.%${needle}%`);\n      }\n\n      // Orden y paginación\n      query = query.order(orderBy, { ascending: String(order).toLowerCase() === 'asc' });\n      query = query.range(offset, Math.max(offset + limit - 1, offset));\n\n      const { data, error } = await query;\n      if (error) throw error;\n\n      const rows = (data || []).map(emp => ({\n        id: emp?.id,\n        name: emp?.nombre,\n        email: emp?.correo,\n        phone: emp?.telefono,\n        puesto: emp?.puesto || 'No asignado',\n        sitio_asignado: emp?.obras?.nombre || 'No asignado',\n        supervisor_id: emp?.supervisor_id,\n        supervisor: emp?.supervisor ? {\n          id: emp.supervisor.id,\n          nombre: emp.supervisor.nombre,\n          correo: emp.supervisor.correo,\n        } : null,\n        hourly_rate: Number(emp?.hourly_rate) || 0,\n        status: emp?.is_active ? 'active' : 'inactive',\n        role: emp?.rol,\n        obra_id: emp?.obra_id,\n        created_at: emp?.created_at,\n        updated_at: emp?.updated_at,\n      }));\n\n      // No devolvemos count para evitar lecturas extra caras (si lo necesitas, calcula en UI o añade un RPC/contador dedicado)\n      return ok({ data: rows, page: { offset, limit, returned: rows.length } });\n    } catch (error) {\n      return fail(error || 'Error al cargar empleados');\n    }\n  },\n\n  // Crear empleado\n  async createEmployee(employeeData) {\n    try {\n      const payload = {\n        correo:        employeeData?.email,\n        nombre:        employeeData?.name,\n        telefono:      employeeData?.phone,\n        puesto:        employeeData?.puesto,\n        obra_id:       employeeData?.obra_id,\n        supervisor_id: employeeData?.supervisor_id,\n        hourly_rate:   Number(employeeData?.hourly_rate) || 0,\n        rol:           employeeData?.role || 'user',\n        is_active:     true,\n      };\n\n      const { data, error } = await supabase\n        .from('usuarios')\n        .insert([payload])\n        .select()\n        .single();\n\n      if (error) throw error;\n      return ok({ data });\n    } catch (error) {\n      return fail(error || 'Error al crear empleado');\n    }\n  },\n\n  // Actualizar empleado\n  async updateEmployee(id, updateData) {\n    try {\n      const { data, error } = await supabase\n        .from('usuarios')\n        .update({ ...updateData, updated_at: new Date().toISOString() })\n        .eq('id', id)\n        .select()\n        .single();\n\n      if (error) throw error;\n      return ok({ data });\n    } catch (error) {\n      return fail(error || 'Error al actualizar empleado');\n    }\n  },\n\n  // Borrado lógico\n  async deleteEmployee(id) {\n    try {\n      const { data, error } = await supabase\n        .from('usuarios')\n        .update({ is_active: false, updated_at: new Date().toISOString() })\n        .eq('id', id)\n        .select()\n        .single();\n\n      if (error) throw error;\n      return ok({ data });\n    } catch (error) {\n      return fail(error || 'Error al eliminar empleado');\n    }\n  },\n};\n","size_bytes":4962},"src/data/reportService.js":{"content":"// src/data/reportDataService.js\nimport { supabase } from '../lib/supabase';\n\nfunction ok(data)  { return { success: true,  ...data }; }\nfunction fail(err) { return { success: false, error: err?.message || String(err) || 'Error desconocido' }; }\n\nfunction sanitizeDate(d) {\n  // Acepta Date, número (epoch) o string ISO; devuelve ISO o null\n  if (!d) return null;\n  try {\n    const iso = new Date(d).toISOString();\n    return iso;\n  } catch { return null; }\n}\n\nexport const reportDataService = {\n  /**\n   * Reporte de asistencias con filtros y paginación.\n   * @param {Object} filters\n   *  - startDate?: string|Date\n   *  - endDate?: string|Date\n   *  - obra_id?: string\n   *  - usuario_id?: string\n   *  - limit?: number (default 200)\n   *  - offset?: number (default 0)\n   *  - orderBy?: string (default 'fecha_entrada')\n   *  - order?: 'asc'|'desc' (default 'desc')\n   */\n  async getAttendanceReport(filters = {}) {\n    try {\n      const {\n        startDate,\n        endDate,\n        obra_id,\n        usuario_id,\n        limit = 200,\n        offset = 0,\n        orderBy = 'fecha_entrada',\n        order = 'desc',\n      } = filters;\n\n      let query = supabase\n        .from('asistencias')\n        .select(`\n          id,\n          fecha_entrada,\n          fecha_salida,\n          horas_trabajadas,\n          usuario_id,\n          obra_id,\n          usuarios:usuario_id (nombre, correo),\n          obras:obra_id (nombre)\n        `);\n\n      const sd = sanitizeDate(startDate);\n      const ed = sanitizeDate(endDate);\n\n      if (sd) query = query.gte('fecha_entrada', sd);\n      if (ed) query = query.lte('fecha_entrada', ed);\n\n      if (obra_id)    query = query.eq('obra_id', obra_id);\n      if (usuario_id) query = query.eq('usuario_id', usuario_id);\n\n      query = query.order(orderBy, { ascending: String(order).toLowerCase() === 'asc' })\n                   .range(offset, Math.max(offset + limit - 1, offset));\n\n      const { data, error } = await query;\n      if (error) throw error;\n\n      return ok({\n        data: data || [],\n        page: { offset, limit, returned: data?.length || 0 },\n      });\n    } catch (error) {\n      return fail(error || 'Error al generar reporte de asistencia');\n    }\n  },\n\n  /**\n   * Reporte de nómina (básico).\n   * Nota: Esto NO calcula nómina completa. Solo trae datos base del empleado.\n   * Si necesitas totales por rango de fechas (horas * rate), conviene un RPC.\n   * @param {Object} filters\n   *  - is_active?: boolean (default true)\n   *  - obra_id?: string\n   *  - search?: string\n   *  - limit?: number (default 200)\n   *  - offset?: number (default 0)\n   *  - orderBy?: string (default 'nombre')\n   *  - order?: 'asc'|'desc' (default 'asc')\n   */\n  async getPayrollReport(filters = {}) {\n    try {\n      const {\n        is_active = true,\n        obra_id,\n        search,\n        limit = 200,\n        offset = 0,\n        orderBy = 'nombre',\n        order = 'asc',\n      } = filters;\n\n      let query = supabase\n        .from('usuarios')\n        .select(`\n          id,\n          nombre,\n          correo,\n          hourly_rate,\n          puesto,\n          obra_id,\n          is_active,\n          obras:obra_id (nombre)\n        `);\n\n      if (typeof is_active === 'boolean') query = query.eq('is_active', is_active);\n      if (obra_id) query = query.eq('obra_id', obra_id);\n\n      if (search) {\n        const needle = String(search).trim().replaceAll('%', '\\\\%').replaceAll(',', ' ');\n        query = query.or(`nombre.ilike.%${needle}%,correo.ilike.%${needle}%`);\n      }\n\n      query = query.order(orderBy, { ascending: String(order).toLowerCase() === 'asc' })\n                   .range(offset, Math.max(offset + limit - 1, offset));\n\n      const { data, error } = await query;\n      if (error) throw error;\n\n      return ok({\n        data: (data || []).map(r => ({\n          id: r.id,\n          nombre: r.nombre,\n          correo: r.correo,\n          puesto: r.puesto || 'No asignado',\n          hourly_rate: Number(r.hourly_rate) || 0,\n          obra: r.obras?.nombre || 'No asignado',\n          is_active: !!r.is_active,\n        })),\n        page: { offset, limit, returned: data?.length || 0 },\n      });\n    } catch (error) {\n      return fail(error || 'Error al generar reporte de nómina');\n    }\n  },\n};\n","size_bytes":4268},"src/data/siteService.js":{"content":"// src/data/siteDataService.js\nimport { supabase } from '../lib/supabase';\n\nconst ok  = (data) => ({ success: true,  ...data });\nconst fail = (e)   => ({ success: false, error: e?.message || String(e) || 'Error desconocido' });\n\nfunction sanitizeSearch(s = '') {\n  const raw = String(s).trim();\n  if (!raw) return '';\n  return raw.replaceAll('%', '\\\\%').replaceAll(',', ' ');\n}\n\nexport const siteDataService = {\n  /**\n   * Lista de obras con filtros, paginación y orden.\n   * @param {Object} params\n   *  - activa?: boolean (default true)\n   *  - search?: string (filtra por nombre/dirección)\n   *  - limit?: number (default 100)\n   *  - offset?: number (default 0)\n   *  - orderBy?: string (default 'created_at')\n   *  - order?: 'asc' | 'desc' (default 'desc')\n   */\n  async getSites(params = {}) {\n    try {\n      const {\n        activa = true,\n        search,\n        limit = 100,\n        offset = 0,\n        orderBy = 'created_at',\n        order = 'desc',\n      } = params;\n\n      let query = supabase\n        .from('obras')\n        .select(`\n          id,\n          nombre,\n          direccion,\n          descripcion,\n          activa,\n          created_at,\n          updated_at\n        `);\n\n      if (typeof activa === 'boolean') query = query.eq('activa', activa);\n\n      if (search) {\n        const needle = sanitizeSearch(search);\n        query = query.or(`nombre.ilike.%${needle}%,direccion.ilike.%${needle}%`);\n      }\n\n      query = query\n        .order(orderBy, { ascending: String(order).toLowerCase() === 'asc' })\n        .range(offset, Math.max(offset + limit - 1, offset));\n\n      const { data, error } = await query;\n      if (error) throw error;\n\n      return ok({\n        data: data || [],\n        page: { offset, limit, returned: data?.length || 0 },\n      });\n    } catch (error) {\n      return fail(error || 'Error al cargar sitios');\n    }\n  },\n\n  /** Obtener una obra por ID */\n  async getSiteById(id) {\n    try {\n      const { data, error } = await supabase\n        .from('obras')\n        .select(`\n          id,\n          nombre,\n          direccion,\n          descripcion,\n          activa,\n          created_at,\n          updated_at\n        `)\n        .eq('id', id)\n        .maybeSingle();\n\n      if (error) throw error;\n      return ok({ data });\n    } catch (error) {\n      return fail(error || 'Error al cargar el sitio');\n    }\n  },\n\n  /** Crear obra */\n  async createSite(siteData) {\n    try {\n      const payload = {\n        nombre: siteData?.nombre,\n        direccion: siteData?.direccion,\n        descripcion: siteData?.descripcion || null,\n        activa: true,\n      };\n\n      const { data, error } = await supabase\n        .from('obras')\n        .insert([payload])\n        .select()\n        .single();\n\n      if (error) throw error;\n      return ok({ data });\n    } catch (error) {\n      return fail(error || 'Error al crear sitio');\n    }\n  },\n\n  /** Actualizar obra */\n  async updateSite(id, updateData) {\n    try {\n      const { data, error } = await supabase\n        .from('obras')\n        .update({ ...updateData, updated_at: new Date().toISOString() })\n        .eq('id', id)\n        .select()\n        .single();\n\n      if (error) throw error;\n      return ok({ data });\n    } catch (error) {\n      return fail(error || 'Error al actualizar sitio');\n    }\n  },\n\n  /** Desactivar (soft delete) */\n  async deactivateSite(id) {\n    try {\n      const { data, error } = await supabase\n        .from('obras')\n        .update({ activa: false, updated_at: new Date().toISOString() })\n        .eq('id', id)\n        .select()\n        .single();\n\n      if (error) throw error;\n      return ok({ data });\n    } catch (error) {\n      return fail(error || 'Error al desactivar sitio');\n    }\n  },\n};\n","size_bytes":3733},"src/data/supervisorService.js":{"content":"// src/data/supervisorDataService.js\nimport { supabase } from '../lib/supabase';\n\nconst ok   = (data) => ({ success: true,  ...data });\nconst fail = (e)    => ({ success: false, error: e?.message || String(e) || 'Error desconocido' });\n\nfunction sanitizeSearch(s = '') {\n  const raw = String(s).trim();\n  if (!raw) return '';\n  return raw.replaceAll('%', '\\\\%').replaceAll(',', ' ');\n}\n\nexport const supervisorDataService = {\n  /**\n   * Lista de supervisores con filtros, paginación y orden.\n   * @param {Object} params\n   *  - roles?: string[] (default ['supervisor','admin','superadmin'])\n   *  - is_active?: boolean (default true)\n   *  - obra_id?: string\n   *  - search?: string (nombre/correo/telefono)\n   *  - limit?: number (default 100)\n   *  - offset?: number (default 0)\n   *  - orderBy?: string (default 'created_at')\n   *  - order?: 'asc'|'desc' (default 'desc')\n   */\n  async getSupervisors(params = {}) {\n    try {\n      const {\n        roles = ['supervisor', 'admin', 'superadmin'],\n        is_active = true,\n        obra_id,\n        search,\n        limit = 100,\n        offset = 0,\n        orderBy = 'created_at',\n        order = 'desc',\n      } = params;\n\n      let query = supabase\n        .from('usuarios')\n        .select(`\n          id,\n          nombre,\n          correo,\n          telefono,\n          obra_id,\n          is_active,\n          obras:obra_id (id, nombre, direccion)\n        `)\n        .in('rol', roles);\n\n      if (typeof is_active === 'boolean') query = query.eq('is_active', is_active);\n      if (obra_id) query = query.eq('obra_id', obra_id);\n\n      if (search) {\n        const needle = sanitizeSearch(search);\n        query = query.or(`nombre.ilike.%${needle}%,correo.ilike.%${needle}%,telefono.ilike.%${needle}%`);\n      }\n\n      query = query\n        .order(orderBy, { ascending: String(order).toLowerCase() === 'asc' })\n        .range(offset, Math.max(offset + limit - 1, offset));\n\n      const { data, error } = await query;\n      if (error) throw error;\n\n      return ok({\n        data: data || [],\n        page: { offset, limit, returned: data?.length || 0 },\n      });\n    } catch (error) {\n      return fail(error || 'Error al cargar supervisores');\n    }\n  },\n\n  /**\n   * Empleados a cargo de un supervisor.\n   * @param {string} supervisorId\n   * @param {Object} params\n   *  - is_active?: boolean (default true)\n   *  - obra_id?: string\n   *  - search?: string (nombre/correo)\n   *  - limit?: number (default 200)\n   *  - offset?: number (default 0)\n   *  - orderBy?: string (default 'nombre')\n   *  - order?: 'asc'|'desc' (default 'asc')\n   */\n  async getEmployeesBySupervisor(supervisorId, params = {}) {\n    try {\n      const {\n        is_active = true,\n        obra_id,\n        search,\n        limit = 200,\n        offset = 0,\n        orderBy = 'nombre',\n        order = 'asc',\n      } = params;\n\n      let query = supabase\n        .from('usuarios')\n        .select(`\n          id,\n          nombre,\n          correo,\n          puesto,\n          obra_id,\n          is_active,\n          obras:obra_id (nombre)\n        `)\n        .eq('supervisor_id', supervisorId);\n\n      if (typeof is_active === 'boolean') query = query.eq('is_active', is_active);\n      if (obra_id) query = query.eq('obra_id', obra_id);\n\n      if (search) {\n        const needle = sanitizeSearch(search);\n        query = query.or(`nombre.ilike.%${needle}%,correo.ilike.%${needle}%`);\n      }\n\n      query = query\n        .order(orderBy, { ascending: String(order).toLowerCase() === 'asc' })\n        .range(offset, Math.max(offset + limit - 1, offset));\n\n      const { data, error } = await query;\n      if (error) throw error;\n\n      return ok({\n        data: (data || []).map(r => ({\n          id: r.id,\n          nombre: r.nombre,\n          correo: r.correo,\n          puesto: r.puesto || 'No asignado',\n          obra: r.obras?.nombre || 'No asignado',\n          is_active: !!r.is_active,\n        })),\n        page: { offset, limit, returned: data?.length || 0 },\n      });\n    } catch (error) {\n      return fail(error || 'Error al cargar empleados del supervisor');\n    }\n  },\n};\n","size_bytes":4109},"src/hooks/useActivityLogs.js":{"content":"// src/hooks/useActivityLogs.js\nimport { useQuery } from '@tanstack/react-query';\nimport { supabase } from '../lib/supabase';\n\n/**\n * Hook para traer logs de actividad con filtros y paginación\n * @param {Object} params\n * @param {string} params.search - texto de búsqueda en descripción, acción o módulo\n * @param {string} params.from - fecha inicio (ISO o YYYY-MM-DD)\n * @param {string} params.to - fecha fin (ISO o YYYY-MM-DD)\n * @param {string} params.modulo - filtrar por módulo específico\n * @param {string} params.accion - filtrar por acción específica\n * @param {number} params.pageSize - número de registros por página\n * @param {number} params.page - página actual (0-indexed)\n */\nexport function useActivityLogs({ search = '', from, to, modulo, accion, pageSize = 20, page = 0 }) {\n  return useQuery({\n    queryKey: ['activityLogs', { search, from, to, modulo, accion, pageSize, page }],\n    queryFn: async () => {\n      let query = supabase\n        .from('activity_logs')\n        .select(\n          `\n            id,\n            accion,\n            modulo,\n            descripcion,\n            rol,\n            fecha,\n            ip_address,\n            user_agent,\n            usuarios:usuario_id (\n              id,\n              nombre,\n              correo\n            )\n          `,\n          { count: 'exact' }\n        )\n        .order('fecha', { ascending: false });\n\n      if (search) {\n        query = query.or(\n          `accion.ilike.%${search}%,descripcion.ilike.%${search}%,modulo.ilike.%${search}%`\n        );\n      }\n\n      if (from) query = query.gte('fecha', from);\n      if (to) query = query.lte('fecha', to);\n      if (modulo) query = query.eq('modulo', modulo);\n      if (accion) query = query.eq('accion', accion);\n\n      // paginación\n      const fromRange = page * pageSize;\n      const toRange = fromRange + pageSize - 1;\n      query = query.range(fromRange, toRange);\n\n      const { data, error, count } = await query;\n\n      if (error) throw error;\n      return { data: data || [], count };\n    },\n    keepPreviousData: true,\n  });\n}\n","size_bytes":2085},"src/hooks/useBranding.js":{"content":"import { useEffect, useState, useCallback } from 'react';\nimport { getBranding } from '@/services/brandingService';\nimport { applyBrandingTheme } from '@/utils/applyBrandingTheme';\n\nexport function useBranding(applyTheme = true) {\n  const [branding, setBranding] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  const load = useCallback(async () => {\n    setLoading(true); setError(null);\n    const res = await getBranding();\n    if (!res?.ok) { setError(res?.error); setLoading(false); return; }\n    setBranding(res?.data);\n    if (applyTheme) applyBrandingTheme(res?.data);\n    setLoading(false);\n  }, [applyTheme]);\n\n  useEffect(() => { load(); }, [load]);\n\n  return { branding, loading, error, reloadBranding: load };\n}","size_bytes":787},"src/hooks/useQuery.js":{"content":"// src/hooks/useQuery.js\nimport { useCallback, useEffect, useRef, useState } from 'react';\n\n/**\n * useServiceQuery(serviceFn, options)\n * - serviceFn: función async del service. Debe retornar:\n *      a) { ok, data, error, code }  ó\n *      b) data cruda (se trata como ok = true)\n *\n * options:\n *  - params: valor o array de valores a pasar a serviceFn\n *  - enabled: boolean (default: true)\n *  - deps: array de dependencias extra para re-ejecutar\n *  - select: (data) => any  (mapeo opcional del resultado)\n *  - keepPreviousData: boolean (mantener datos previos durante fetch)\n *  - retry: number (reintentos ante error de red/idempotentes) default 0\n *  - onSuccess, onError: callbacks\n */\n\nfunction normalizeError(err) {\n  if (!err) return { error: 'Unknown error', code: 'UNKNOWN' };\n  if (typeof err === 'string') return { error: err };\n  if (err?.error || err?.code) return { error: err?.error || 'Error', code: err?.code };\n  return { error: err?.message || 'Unexpected error', code: err?.code };\n}\n\nexport function useServiceQuery(serviceFn, options = {}) {\n  const {\n    params,\n    enabled = true,\n    deps = [],\n    select,\n    keepPreviousData = false,\n    retry = 0,\n    onSuccess,\n    onError,\n  } = options;\n\n  const mountedRef = useRef(true);\n  const abortRef = useRef(null);\n\n  const [data, setData] = useState(undefined);\n  const [error, setError] = useState(null);\n  const [status, setStatus] = useState(enabled ? 'loading' : 'idle'); // idle | loading | success | error\n  const [isFetching, setIsFetching] = useState(false);\n\n  const callService = useCallback(async () => {\n    if (!serviceFn || !enabled) return;\n\n    // Evita superposiciones\n    if (abortRef.current) abortRef.current.abort();\n    const ac = new AbortController();\n    abortRef.current = ac;\n\n    if (status === 'idle') setStatus('loading');\n    else setIsFetching(true);\n\n    let attempts = 0;\n    while (attempts <= retry) {\n      try {\n        const args = Array.isArray(params) ? params : (params !== undefined ? [params] : []);\n        const res = await serviceFn(...args);\n\n        if (ac.signal.aborted) return;\n\n        // Soporta contrato { ok, data, error } o data cruda\n        let nextData, ok = true, errObj = null;\n        if (res && typeof res === 'object' && 'ok' in res) {\n          ok = !!res.ok;\n          if (ok) nextData = res.data;\n          else errObj = normalizeError(res);\n        } else {\n          nextData = res;\n        }\n\n        if (!ok) throw errObj || { error: 'Request failed' };\n\n        const finalData = typeof select === 'function' ? select(nextData) : nextData;\n\n        if (!mountedRef.current) return;\n        setError(null);\n        // Si keepPreviousData es true, NO limpiamos data al iniciar el fetch;\n        // simplemente actualizamos cuando llega la nueva respuesta:\n        setData(finalData);\n        setStatus('success');\n        setIsFetching(false);\n        onSuccess && onSuccess(finalData);\n        return;\n      } catch (e) {\n        if (ac.signal.aborted) return;\n        const norm = normalizeError(e);\n        if (attempts < retry) {\n          attempts += 1;\n          continue; // reintento\n        }\n        if (!mountedRef.current) return;\n        setError(norm);\n        setStatus('error');\n        setIsFetching(false);\n        onError && onError(norm);\n        return;\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [serviceFn, enabled, select, keepPreviousData, retry, JSON.stringify(params)]);\n\n  // Efecto principal\n  useEffect(() => {\n    mountedRef.current = true;\n    if (enabled) callService();\n    return () => {\n      mountedRef.current = false;\n      if (abortRef.current) abortRef.current.abort();\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [enabled, callService, ...deps]);\n\n  const refetch = useCallback(() => {\n    if (!enabled) return;\n    return callService();\n  }, [enabled, callService]);\n\n  return {\n    data,\n    error,\n    status,\n    isLoading: status === 'loading',\n    isError: status === 'error',\n    isSuccess: status === 'success',\n    isFetching,\n    refetch,\n  };\n}\n\n/**\n * Compatibilidad: muchas pantallas importan `{ useQuery }` desde este archivo.\n * Exportamos un alias para no romper esos imports.\n */\nexport const useQuery = useServiceQuery;\n\nexport default useServiceQuery;\n","size_bytes":4332},"src/hooks/useQuery.jsx":{"content":"import { useQuery } from '@tanstack/react-query';\n\n\n// Custom useQuery hook implementation with fallback behavior\nexport function useCustomQuery(queryKey, queryFn, options = {}) {\n  // Simple implementation that returns a query-like object\n  // This prevents the \"Cannot read properties of undefined (reading 'buildError')\" error\n  return {\n    data: null,\n    error: null,\n    isLoading: false,\n    isError: false,\n    isSuccess: false,\n    refetch: () => Promise.resolve(),\n    buildError: null, // Explicitly include buildError property to prevent access errors\n    ...options\n  };\n}\n\n// Export useQuery that uses the custom implementation\nexport function useQuery(queryKey, queryFn, options = {}) {\n  return useCustomQuery(queryKey, queryFn, options);\n}\n\n// Default export\nexport default useQuery;","size_bytes":801},"src/lib/net-tap.js":{"content":"// src/lib/net-tap.js\n// Network instrumentation for tracking Supabase API calls\n\nexport function wrapGlobalFetchForMetrics() {\n  if (window.__fetchWrapped) return;\n  window.__fetchWrapped = true;\n  \n  const orig = window.fetch;\n  window.__netCounters = window.__netCounters || { \n    total: 0, \n    byPath: {},\n    byPathDetailed: [] // Track timing and stack traces\n  };\n  \n  window.fetch = async (...args) => {\n    const startTime = performance.now();\n    try {\n      const url = String(args[0]);\n      \n      if (url.includes('/rest/v1/') || url.includes('/rpc/')) {\n        window.__netCounters.total++;\n        \n        // Extract endpoint name\n        const key = url.split('/rest/v1/')[1]?.split('?')[0] || \n                    url.split('/rpc/')[1]?.split('?')[0] || \n                    url;\n        \n        window.__netCounters.byPath[key] = (window.__netCounters.byPath[key] || 0) + 1;\n        \n        // Store detailed info for debugging\n        const method = args[1]?.method || 'GET';\n        const callInfo = {\n          endpoint: key,\n          method,\n          timestamp: new Date().toISOString(),\n          url: url.substring(0, 200) // Truncate long URLs\n        };\n        \n        window.__netCounters.byPathDetailed.push(callInfo);\n        \n        // Optional: Log to console in dev mode\n        if (import.meta.env.DEV) {\n          console.debug('[NET]', method, key, `(#${window.__netCounters.byPath[key]})`);\n        }\n      }\n      \n      const response = await orig(...args);\n      \n      // Track timing\n      const duration = performance.now() - startTime;\n      if (url.includes('/rest/v1/') || url.includes('/rpc/')) {\n        const lastCall = window.__netCounters.byPathDetailed[window.__netCounters.byPathDetailed.length - 1];\n        if (lastCall) {\n          lastCall.duration = Math.round(duration);\n          lastCall.status = response.status;\n        }\n      }\n      \n      return response;\n    } catch (e) {\n      throw e;\n    }\n  };\n}\n\n// Helper to print network stats\nexport function printNetworkStats() {\n  const counters = window.__netCounters;\n  if (!counters) {\n    console.log('No network counters available. Was wrapGlobalFetchForMetrics() called?');\n    return;\n  }\n  \n  console.log('\\n=== NETWORK STATS ===');\n  console.log('Total Supabase calls:', counters.total);\n  console.log('\\nCalls by endpoint:');\n  console.table(counters.byPath);\n  \n  // Group by endpoint for detailed view\n  const grouped = {};\n  counters.byPathDetailed.forEach(call => {\n    if (!grouped[call.endpoint]) {\n      grouped[call.endpoint] = [];\n    }\n    grouped[call.endpoint].push(call);\n  });\n  \n  console.log('\\nDetailed breakdown:');\n  Object.entries(grouped).forEach(([endpoint, calls]) => {\n    console.log(`\\n${endpoint} (${calls.length} calls):`);\n    calls.forEach((call, idx) => {\n      console.log(`  ${idx + 1}. ${call.method} - ${call.duration}ms - ${call.status} - ${call.timestamp}`);\n    });\n  });\n  \n  console.log('\\n=== END STATS ===\\n');\n}\n\n// Helper to reset counters\nexport function resetNetworkCounters() {\n  window.__netCounters = { \n    total: 0, \n    byPath: {},\n    byPathDetailed: []\n  };\n  console.log('Network counters reset');\n}\n\n// Helper to get current counts\nexport function getNetworkCounts() {\n  return window.__netCounters || { total: 0, byPath: {}, byPathDetailed: [] };\n}\n\n// Auto-expose to window for easy console access\nif (typeof window !== 'undefined') {\n  window.printNetStats = printNetworkStats;\n  window.resetNetStats = resetNetworkCounters;\n  window.getNetCounts = getNetworkCounts;\n}\n","size_bytes":3561},"src/lib/supaCache.js":{"content":"// src/lib/supaCache.js\nconst CACHE = new Map();       // key -> { t, ttl, data }\nconst INFLIGHT = new Map();    // key -> Promise\n\nfunction keyFrom(parts) {\n  return JSON.stringify(parts, (_, v) => (v instanceof Date ? v.toISOString() : v));\n}\n\n/**\n * selectCached: evita duplicar llamadas idénticas y cachea por TTL.\n * @param {(supabase) => Promise<{ data, error }>} fetcher función que hace el .from().select(...)\n * @param {object} kParts partes para la cache key (tabla, cols, filtros, etc.)\n * @param {number} ttlMs tiempo en ms (p.ej. 15s)\n */\nexport async function selectCached(fetcher, kParts, ttlMs = 15000) {\n  const k = keyFrom(kParts);\n  const now = Date.now();\n\n  // cache hit fresco\n  const cached = CACHE.get(k);\n  if (cached && now - cached.t < cached.ttl) {\n    return { data: cached.data, error: null, fromCache: true };\n  }\n\n  // dedupe: si ya hay una llamada en vuelo con la misma key, espera esa\n  if (INFLIGHT.has(k)) {\n    return INFLIGHT.get(k);\n  }\n\n  const p = (async () => {\n    try {\n      const { supabase } = await import('@/lib/supabase');\n      const { data, error } = await fetcher(supabase);\n      if (!error) {\n        CACHE.set(k, { t: now, ttl: ttlMs, data });\n      }\n      return { data, error, fromCache: false };\n    } finally {\n      INFLIGHT.delete(k);\n    }\n  })();\n\n  INFLIGHT.set(k, p);\n  return p;\n}\n\n/** Limpia manualmente una clave específica */\nexport function invalidateCached(kParts) {\n  CACHE.delete(keyFrom(kParts));\n}\n\n/** Limpia toda la caché (si cambias de sesión, por ejemplo) */\nexport function clearSupaCache() {\n  CACHE.clear();\n  INFLIGHT.clear();\n}\n","size_bytes":1619},"src/lib/supabase.js":{"content":"import { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = import.meta.env?.VITE_SUPABASE_URL;\nconst supabaseAnonKey = import.meta.env?.VITE_SUPABASE_ANON_KEY;\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  throw new Error('Missing Supabase environment variables. Please check your .env file for VITE_SUPABASE_URL and VITE_SUPABASE_ANON_KEY');\n}\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey, {\n  auth: {\n    autoRefreshToken: true,\n    persistSession: true,\n  }\n});\n","size_bytes":500},"src/pages/ConnectionDiagnosticPage.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { ConnectionStatus } from '../components/ui/ConnectionStatus';\nimport { RetryButton } from '../components/ui/RetryButton';\nimport NavigationHeader from '../components/ui/NavigationHeader';\nimport BrandedHeader from '../components/ui/BrandedHeader';\nimport { useAuth } from '../contexts/AuthContext';\n\nconst ConnectionDiagnosticPage = () => {\n  const [connectionStatus, setConnectionStatus] = useState('checking');\n  const [diagnosticResults, setDiagnosticResults] = useState({});\n  const [retryCount, setRetryCount] = useState(0);\n  const { authError, user } = useAuth();\n\n  useEffect(() => {\n    performDiagnostics();\n  }, [retryCount]);\n\n  const performDiagnostics = async () => {\n    setConnectionStatus('checking');\n    const results = {};\n\n    try {\n      // Test 1: Basic connectivity\n      try {\n        const response = await fetch('https://httpbin.org/get', { \n          method: 'GET',\n          timeout: 10000 \n        });\n        results.internetConnection = response?.ok ? 'success' : 'failed';\n      } catch (error) {\n        results.internetConnection = 'failed';\n      }\n\n      // Test 2: Supabase URL reachability\n      try {\n        const supabaseUrl = import.meta.env?.VITE_SUPABASE_URL;\n        if (!supabaseUrl) {\n          results.supabaseConfig = 'missing_config';\n        } else {\n          const response = await fetch(`${supabaseUrl}/rest/v1/`, {\n            method: 'HEAD',\n            timeout: 15000\n          });\n          results.supabaseReachability = response?.ok ? 'success' : 'failed';\n        }\n      } catch (error) {\n        results.supabaseReachability = 'failed';\n      }\n\n      // Test 3: Authentication service\n      try {\n        const { supabase } = await import('../lib/supabase');\n        const { error } = await supabase?.auth?.getSession();\n        results.authService = error ? 'failed' : 'success';\n      } catch (error) {\n        results.authService = 'failed';\n      }\n\n      // Test 4: Database connectivity (simple health check)\n      try {\n        const { supabase } = await import('../lib/supabase');\n        const { error } = await supabase?.from('user_profiles')?.select('count')?.limit(1);\n        results.databaseConnection = error ? 'failed' : 'success';\n      } catch (error) {\n        results.databaseConnection = 'failed';\n      }\n\n      setDiagnosticResults(results);\n      \n      // Determine overall status\n      const hasFailures = Object.values(results)?.some(status => status === 'failed' || status === 'missing_config');\n      setConnectionStatus(hasFailures ? 'failed' : 'success');\n\n    } catch (error) {\n      console.error('Diagnostic error:', error);\n      setConnectionStatus('failed');\n      setDiagnosticResults({ general: 'failed' });\n    }\n  };\n\n  const handleRetry = () => {\n    setRetryCount(prev => prev + 1);\n  };\n\n  const getDiagnosticStatusIcon = (status) => {\n    switch (status) {\n      case 'success':\n        return <span className=\"text-green-600\">✓</span>;\n      case 'failed':\n        return <span className=\"text-red-600\">✗</span>;\n      case 'missing_config':\n        return <span className=\"text-yellow-600\">⚠</span>;\n      default:\n        return <span className=\"text-gray-400\">-</span>;\n    }\n  };\n\n  const getDiagnosticMessage = (test, status) => {\n    const messages = {\n      internetConnection: {\n        success: 'Internet connectivity is working',\n        failed: 'No internet connection detected'\n      },\n      supabaseReachability: {\n        success: 'Supabase server is reachable',\n        failed: 'Cannot reach Supabase server - project may be paused or deleted'\n      },\n      authService: {\n        success: 'Authentication service is working',\n        failed: 'Authentication service is not responding'\n      },\n      databaseConnection: {\n        success: 'Database connection is working',\n        failed: 'Cannot connect to database - check RLS policies and table permissions'\n      },\n      supabaseConfig: {\n        missing_config: 'Supabase configuration is missing from environment variables'\n      }\n    };\n\n    return messages?.[test]?.[status] || 'Status unknown';\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <NavigationHeader title=\"Connection Diagnostics\" subtitle=\"System connectivity analysis and troubleshooting\" />\n      <BrandedHeader />\n      <div className=\"max-w-4xl mx-auto px-4 py-8\">\n        <div className=\"bg-white rounded-lg shadow-lg p-6\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h1 className=\"text-2xl font-bold text-gray-900\">\n              Connection Diagnostics\n            </h1>\n            <ConnectionStatus status={connectionStatus} message={connectionStatus === 'checking' ? 'Running diagnostics...' : connectionStatus === 'success' ? 'All systems operational' : 'Connection issues detected'} />\n          </div>\n\n          {/* User Context */}\n          {user && (\n            <div className=\"mb-6 p-4 bg-blue-50 rounded-lg\">\n              <h3 className=\"text-sm font-medium text-blue-800 mb-2\">Current User</h3>\n              <p className=\"text-blue-700\">\n                {user?.email} (ID: {user?.id})\n              </p>\n            </div>\n          )}\n\n          {/* Auth Error Display */}\n          {authError && (\n            <div className=\"mb-6 p-4 bg-red-50 border border-red-200 rounded-lg\">\n              <h3 className=\"text-sm font-medium text-red-800 mb-2\">Authentication Error</h3>\n              <p className=\"text-red-700\">{authError}</p>\n            </div>\n          )}\n\n          {/* Diagnostic Results */}\n          <div className=\"space-y-4\">\n            <h2 className=\"text-lg font-semibold text-gray-800\">Diagnostic Results</h2>\n            \n            {Object.entries(diagnosticResults)?.length === 0 && connectionStatus === 'checking' ? (\n              <div className=\"flex items-center space-x-3 py-4\">\n                <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-blue-600\"></div>\n                <span className=\"text-gray-600\">Running diagnostics...</span>\n              </div>\n            ) : (\n              <div className=\"space-y-3\">\n                {Object.entries(diagnosticResults)?.map(([test, status]) => (\n                  <div key={test} className=\"flex items-center justify-between p-3 border border-gray-200 rounded-lg\">\n                    <div className=\"flex items-center space-x-3\">\n                      {getDiagnosticStatusIcon(status)}\n                      <span className=\"font-medium text-gray-800\">\n                        {test?.replace(/([A-Z])/g, ' $1')?.replace(/^./, str => str?.toUpperCase())}\n                      </span>\n                    </div>\n                    <span className={`text-sm ${\n                      status === 'success' ? 'text-green-600' : \n                      status === 'failed' ? 'text-red-600' : 'text-yellow-600'\n                    }`}>\n                      {getDiagnosticMessage(test, status)}\n                    </span>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n\n          {/* Troubleshooting Recommendations */}\n          {connectionStatus === 'failed' && (\n            <div className=\"mt-8 p-6 bg-yellow-50 border border-yellow-200 rounded-lg\">\n              <h3 className=\"text-lg font-semibold text-yellow-800 mb-4\">Troubleshooting Recommendations</h3>\n              <ul className=\"space-y-2 text-yellow-700\">\n                {diagnosticResults?.internetConnection === 'failed' && (\n                  <li>• Check your internet connection and try again</li>\n                )}\n                {diagnosticResults?.supabaseReachability === 'failed' && (\n                  <li>• Your Supabase project may be paused - check your Supabase dashboard</li>\n                )}\n                {diagnosticResults?.authService === 'failed' && (\n                  <li>• Verify your VITE_SUPABASE_URL and VITE_SUPABASE_ANON_KEY environment variables</li>\n                )}\n                {diagnosticResults?.databaseConnection === 'failed' && (\n                  <li>• Check RLS policies and table permissions in your Supabase dashboard</li>\n                )}\n                {diagnosticResults?.supabaseConfig === 'missing_config' && (\n                  <li>• Add missing Supabase configuration to your .env file</li>\n                )}\n                <li>• Try refreshing the page or clearing your browser cache</li>\n                <li>• Contact your system administrator if problems persist</li>\n              </ul>\n            </div>\n          )}\n\n          {/* Environment Info */}\n          <div className=\"mt-8 p-4 bg-gray-50 rounded-lg\">\n            <h3 className=\"text-sm font-semibold text-gray-800 mb-3\">Environment Information</h3>\n            <div className=\"grid grid-cols-2 gap-4 text-sm\">\n              <div>\n                <span className=\"font-medium\">Supabase URL:</span>\n                <span className=\"ml-2 text-gray-600\">\n                  {import.meta.env?.VITE_SUPABASE_URL ? '✓ Configured' : '✗ Missing'}\n                </span>\n              </div>\n              <div>\n                <span className=\"font-medium\">Supabase Key:</span>\n                <span className=\"ml-2 text-gray-600\">\n                  {import.meta.env?.VITE_SUPABASE_ANON_KEY ? '✓ Configured' : '✗ Missing'}\n                </span>\n              </div>\n              <div>\n                <span className=\"font-medium\">Retry Attempts:</span>\n                <span className=\"ml-2 text-gray-600\">{retryCount}</span>\n              </div>\n              <div>\n                <span className=\"font-medium\">Browser:</span>\n                <span className=\"ml-2 text-gray-600\">{navigator?.userAgent?.split(' ')?.[0] || 'Unknown'}</span>\n              </div>\n            </div>\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"mt-8 flex space-x-4\">\n            <RetryButton \n              onClick={handleRetry} \n              disabled={connectionStatus === 'checking'}\n              className=\"px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50\"\n            />\n            <button\n              onClick={() => window.location?.reload()}\n              className=\"px-6 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700\"\n            >\n              Refresh Page\n            </button>\n            {user && (\n              <button\n                onClick={() => window.location.href = '/admin/system'}\n                className=\"px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700\"\n              >\n                Back to Dashboard\n              </button>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ConnectionDiagnosticPage;","size_bytes":10809},"src/pages/NotFound.jsx":{"content":"// src/pages/NotFound.jsx\nimport React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Button from '@/components/ui/Button';\nimport Icon from '@/components/AppIcon';\n\nconst NotFound = () => {\n  const navigate = useNavigate();\n\n  const handleGoHome = () => {\n    navigate('/');\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col items-center justify-center bg-background p-4\">\n      <div className=\"text-center max-w-md\">\n        <div className=\"flex justify-center mb-6\">\n          <div className=\"relative\">\n            <h1 className=\"text-9xl font-bold text-primary opacity-20\">404</h1>\n          </div>\n        </div>\n\n        <h2 className=\"text-2xl font-medium text-foreground mb-2\">Page Not Found</h2>\n        <p className=\"text-muted-foreground mb-8\">\n          The page you&apos;re looking for doesn&apos;t exist. Let&apos;s get you back!\n        </p>\n\n        <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n          <Button\n            variant=\"default\"\n            icon={<Icon name=\"ArrowLeft\" />}\n            iconPosition=\"left\"\n            onClick={() => window.history?.back()}\n          >\n            Go Back\n          </Button>\n\n          <Button\n            variant=\"outline\"\n            icon={<Icon name=\"Home\" />}\n            iconPosition=\"left\"\n            onClick={handleGoHome}\n          >\n            Back to Home\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default NotFound;\n","size_bytes":1482},"src/services/activityLogService.js":{"content":"// src/services/activityLogService.js\nimport { supabase } from '@/lib/supabase';\nimport {\n  ok,\n  fail,\n  validateRequired,\n  buildPaginatedQuery,\n  formatPaginatedResponse,\n  buildColumnString,\n} from '@/utils/serviceHelpers';\n\n// Columnas explícitas (nunca SELECT *)\nconst LOG_COLS = [\n  'id',\n  'usuario_id',\n  'rol',\n  'accion',\n  'modulo',\n  'descripcion',\n  'ip_address',\n  'user_agent',\n  'metadata',\n  'fecha',\n];\n\n// Join explícito para traer datos del usuario\nconst LOG_USER_JOIN = 'usuarios:usuario_id(id,nombre,correo)';\n\nexport const activityLogService = {\n  async logAction({ usuarioId, rol, accion, modulo, descripcion, metadata = {} }) {\n    try {\n      validateRequired(['usuarioId', 'rol', 'accion', 'modulo', 'descripcion'], {\n        usuarioId,\n        rol,\n        accion,\n        modulo,\n        descripcion,\n      });\n\n      const payload = {\n        usuario_id: usuarioId,\n        rol,\n        accion,\n        modulo,\n        descripcion,\n        metadata: typeof metadata === 'object' ? metadata : {},\n        ip_address: null, // si capturas IP del servidor, ponla aquí\n        user_agent: typeof navigator !== 'undefined' ? navigator.userAgent : null,\n        fecha: new Date().toISOString(),\n      };\n\n      const { data, error } = await supabase\n        ?.from('logs_actividad')\n        ?.insert([payload])\n        ?.select(`${buildColumnString(LOG_COLS)}, ${LOG_USER_JOIN}`)\n        ?.single();\n\n      if (error) return fail(error);\n      return ok(data);\n    } catch (e) {\n      return fail(e);\n    }\n  },\n\n  /**\n   * Listar logs con filtros, búsqueda y paginación\n   * @param {Object} options\n   * @param {number} options.page   (1-based)\n   * @param {number} options.pageSize\n   * @param {string} options.userId\n   * @param {string} options.module\n   * @param {string} options.action\n   * @param {string} options.startDate ISO o YYYY-MM-DD\n   * @param {string} options.endDate   ISO o YYYY-MM-DD\n   * @param {string} options.q         búsqueda libre (accion/modulo/descripcion)\n   */\n  async listLogs({\n    page = 1,\n    pageSize = 20,\n    userId = null,\n    module = null,\n    action = null,\n    startDate = null,\n    endDate = null,\n    q = '',\n  } = {}) {\n    try {\n      let query = supabase\n        ?.from('logs_actividad')\n        ?.select(`${buildColumnString(LOG_COLS)}, ${LOG_USER_JOIN}`, { count: 'exact' });\n\n      if (userId) query = query?.eq('usuario_id', userId);\n      if (module) query = query?.eq('modulo', module);\n      if (action) query = query?.eq('accion', action);\n      if (startDate) query = query?.gte('fecha', new Date(startDate).toISOString());\n      if (endDate) query = query?.lte('fecha', new Date(endDate).toISOString());\n\n      if (q?.trim()) {\n        // búsqueda básica en campos de texto comunes\n        query = query?.or(\n          `accion.ilike.%${q}%,modulo.ilike.%${q}%,descripcion.ilike.%${q}%`\n        );\n      }\n\n      query = query?.order('fecha', { ascending: false });\n      query = buildPaginatedQuery(query, { page, pageSize });\n\n      const { data, error, count } = await query;\n      if (error) return fail(error);\n\n      return ok(formatPaginatedResponse(data || [], count ?? 0, page, pageSize));\n    } catch (e) {\n      return fail(e);\n    }\n  },\n\n  async getActivityStats(startDate, endDate) {\n    try {\n      let query = supabase?.from('logs_actividad')?.select('accion, modulo, fecha');\n\n      if (startDate) query = query?.gte('fecha', new Date(startDate).toISOString());\n      if (endDate) query = query?.lte('fecha', new Date(endDate).toISOString());\n\n      const { data, error } = await query;\n      if (error) return fail(error);\n\n      const stats = {\n        totalActions: data?.length || 0,\n        actionBreakdown: {},\n        moduleBreakdown: {},\n        dailyActivity: {},\n        topActions: [],\n        topModules: [],\n      };\n\n      data?.forEach((log) => {\n        stats.actionBreakdown[log.accion] = (stats.actionBreakdown[log.accion] || 0) + 1;\n        stats.moduleBreakdown[log.modulo] = (stats.moduleBreakdown[log.modulo] || 0) + 1;\n        const date = new Date(log.fecha).toISOString().split('T')?.[0];\n        stats.dailyActivity[date] = (stats.dailyActivity[date] || 0) + 1;\n      });\n\n      stats.topActions = Object.entries(stats.actionBreakdown)\n        .sort(([, a], [, b]) => b - a)\n        .slice(0, 10)\n        .map(([action, count]) => ({ action, count }));\n\n      stats.topModules = Object.entries(stats.moduleBreakdown)\n        .sort(([, a], [, b]) => b - a)\n        .slice(0, 10)\n        .map(([module, count]) => ({ module, count }));\n\n      return ok(stats);\n    } catch (e) {\n      return fail(e);\n    }\n  },\n\n  async getUserRecentActivity(userId, limit = 10) {\n    try {\n      validateRequired(['userId'], { userId });\n\n      const { data, error } = await supabase\n        ?.from('logs_actividad')\n        ?.select(`${buildColumnString(LOG_COLS)}, ${LOG_USER_JOIN}`)\n        ?.eq('usuario_id', userId)\n        ?.order('fecha', { ascending: false })\n        ?.limit(limit);\n\n      if (error) return fail(error);\n      return ok(data || []);\n    } catch (e) {\n      return fail(e);\n    }\n  },\n\n  async cleanOldLogs(daysToKeep = 90) {\n    try {\n      const cutoffDate = new Date();\n      cutoffDate.setDate(cutoffDate.getDate() - daysToKeep);\n\n      // Para obtener conteo real, encadenamos .select('id')\n      const { data, error } = await supabase\n        ?.from('logs_actividad')\n        ?.delete()\n        ?.lt('fecha', cutoffDate.toISOString())\n        ?.select('id');\n\n      if (error) return fail(error);\n\n      await this.logAction({\n        usuarioId: 'system',\n        rol: 'system',\n        accion: 'maintenance',\n        modulo: 'ActivityLog',\n        descripcion: `Cleaned logs older than ${daysToKeep} days`,\n        metadata: {\n          cutoffDate: cutoffDate.toISOString(),\n          deletedCount: data?.length || 0,\n        },\n      });\n\n      return ok({ deletedCount: data?.length || 0 });\n    } catch (e) {\n      return fail(e);\n    }\n  },\n\n  async exportLogs(filters = {}) {\n    try {\n      const { data: logsResp, ok: isOk, error } = await this.listLogs({\n        ...filters,\n        pageSize: 10000,\n        page: 1,\n      });\n\n      if (!isOk) return fail(error || new Error('Failed to list logs for export'));\n      if (!logsResp?.data?.length) return fail(new Error('No logs found for export'));\n\n      const exportData = logsResp.data.map((log) => ({\n        Timestamp: new Date(log.fecha).toLocaleString(),\n        User: log?.usuario_id,\n        Role: log?.rol,\n        Action: log?.accion,\n        Module: log?.modulo,\n        Description: log?.descripcion,\n        IP: log?.ip_address,\n        UserAgent: log?.user_agent,\n        Metadata: JSON.stringify(log?.metadata),\n      }));\n\n      return ok(exportData);\n    } catch (e) {\n      return fail(e);\n    }\n  },\n};\n\nexport default activityLogService;\n","size_bytes":6866},"src/services/attendanceHistoryService.js":{"content":"import { supabase } from '../lib/supabase';\nimport { adaptSupabaseError } from '../utils/errors.ts';\nimport { sanitizePagination, sanitizeSorting } from '../utils/serviceHelpers';\n\n/**\n * Production-ready attendance history service\n * Follows { ok, data, error, code } contract\n */\nconst attendanceHistoryService = {\n  /**\n   * Get attendance history with filters and pagination\n   */\n  async getAttendanceHistory(params = {}) {\n    try {\n      const {\n        employeeId,\n        startDate,\n        endDate,\n        page = 0,\n        pageSize = 50,\n        sortBy = 'date',\n        sortDir = 'desc'\n      } = params;\n\n      const { offset, limit } = sanitizePagination({ page, pageSize });\n      const { sortBy: safeSort, ascending } = sanitizeSorting(\n        { sortBy, sortDir }, \n        ['date', 'clock_in', 'clock_out', 'total_hours', 'overtime_hours', 'status']\n      );\n\n      let query = supabase?.from('attendance_records')?.select(`\n          date,\n          clock_in,\n          lunch_start,\n          lunch_end,\n          clock_out,\n          total_hours,\n          overtime_hours,\n          status,\n          notes,\n          employee_id,\n          site_id,\n          employee_profiles!inner(full_name, employee_id),\n          construction_sites(name, location)\n        `, { count: 'exact' })?.order(safeSort, { ascending })?.range(offset, offset + limit - 1);\n\n      // Apply filters\n      if (employeeId) {\n        query = query?.eq('employee_id', employeeId);\n      }\n\n      if (startDate) {\n        query = query?.gte('date', startDate);\n      }\n\n      if (endDate) {\n        query = query?.lte('date', endDate);\n      }\n\n      const { data, error, count } = await query;\n\n      if (error) {\n        throw error;\n      }\n\n      return {\n        ok: true,\n        data: {\n          records: data || [],\n          total: count || 0,\n          page: Math.floor(offset / limit),\n          pageSize: limit,\n          totalPages: Math.ceil((count || 0) / limit)\n        }\n      };\n    } catch (e) {\n      const adaptedError = adaptSupabaseError(e);\n      return {\n        ok: false,\n        error: adaptedError?.error,\n        code: adaptedError?.code\n      };\n    }\n  },\n\n  /**\n   * Get attendance summary for date range\n   */\n  async getAttendanceSummary(employeeId, startDate, endDate) {\n    try {\n      const { data, error } = await supabase?.from('attendance_records')?.select('total_hours, overtime_hours, status')?.eq('employee_id', employeeId)?.gte('date', startDate)?.lte('date', endDate);\n\n      if (error) {\n        throw error;\n      }\n\n      const records = data || [];\n      const summary = {\n        totalDays: records?.length,\n        totalHours: records?.reduce((sum, r) => sum + (r?.total_hours || 0), 0),\n        overtimeHours: records?.reduce((sum, r) => sum + (r?.overtime_hours || 0), 0),\n        presentDays: records?.filter(r => r?.status === 'present')?.length,\n        lateDays: records?.filter(r => r?.status === 'late')?.length,\n        absentDays: records?.filter(r => r?.status === 'absent')?.length\n      };\n\n      return {\n        ok: true,\n        data: summary\n      };\n    } catch (e) {\n      const adaptedError = adaptSupabaseError(e);\n      return {\n        ok: false,\n        error: adaptedError?.error,\n        code: adaptedError?.code\n      };\n    }\n  },\n\n  /**\n   * Export attendance records for reporting\n   */\n  async exportAttendanceRecords(params = {}) {\n    try {\n      const {\n        employeeIds = [],\n        startDate,\n        endDate,\n        format = 'json'\n      } = params;\n\n      let query = supabase?.from('attendance_records')?.select(`\n          date,\n          clock_in,\n          lunch_start,\n          lunch_end, \n          clock_out,\n          total_hours,\n          overtime_hours,\n          status,\n          notes,\n          employee_profiles!inner(full_name, employee_id, position),\n          construction_sites(name, location)\n        `)?.order('date', { ascending: false });\n\n      if (employeeIds?.length > 0) {\n        query = query?.in('employee_id', employeeIds);\n      }\n\n      if (startDate) {\n        query = query?.gte('date', startDate);\n      }\n\n      if (endDate) {\n        query = query?.lte('date', endDate);\n      }\n\n      const { data, error } = await query;\n\n      if (error) {\n        throw error;\n      }\n\n      return {\n        ok: true,\n        data: {\n          records: data || [],\n          format,\n          exportedAt: new Date()?.toISOString(),\n          filters: { employeeIds, startDate, endDate }\n        }\n      };\n    } catch (e) {\n      const adaptedError = adaptSupabaseError(e);\n      return {\n        ok: false,\n        error: adaptedError?.error,\n        code: adaptedError?.code\n      };\n    }\n  }\n};\n\nexport default attendanceHistoryService;","size_bytes":4758},"src/services/attendanceListService.js":{"content":"import { supabase } from '../lib/supabase';\nimport { adaptSupabaseError } from '../utils/errors.ts';\nimport { sanitizePagination, sanitizeSorting } from '../utils/serviceHelpers';\n\n/**\n * Production-ready attendance list service for real-time operations\n */\nconst attendanceListService = {\n  /**\n   * Get today's attendance by site\n   */\n  async listTodayBySite(siteId, options = {}) {\n    try {\n      const {\n        status = null,\n        page = 0,\n        pageSize = 50\n      } = options;\n\n      const today = new Date()?.toISOString()?.split('T')?.[0];\n      const { offset, limit } = sanitizePagination({ page, pageSize });\n\n      let query = supabase?.from('attendance_records')?.select(`\n          *,\n          employee_profiles!inner(\n            full_name,\n            employee_id,\n            position,\n            profile_picture_url\n          )\n        `, { count: 'exact' })?.eq('date', today)?.order('clock_in', { ascending: false, nullsFirst: false })?.range(offset, offset + limit - 1);\n\n      if (siteId && siteId !== 'all') {\n        query = query?.eq('site_id', siteId);\n      }\n\n      if (status && status !== 'all') {\n        query = query?.eq('status', status);\n      }\n\n      const { data, error, count } = await query;\n\n      if (error) {\n        throw error;\n      }\n\n      return {\n        ok: true,\n        data: {\n          records: data || [],\n          total: count || 0,\n          page: Math.floor(offset / limit),\n          pageSize: limit,\n          date: today\n        }\n      };\n    } catch (e) {\n      const adaptedError = adaptSupabaseError(e);\n      return {\n        ok: false,\n        error: adaptedError?.error,\n        code: adaptedError?.code\n      };\n    }\n  },\n\n  /**\n   * Get attendance records by date range\n   */\n  async listByRange(options = {}) {\n    try {\n      const {\n        siteId = null,\n        startDate,\n        endDate,\n        page = 0,\n        pageSize = 50,\n        sortBy = 'date',\n        sortDir = 'desc'\n      } = options;\n\n      const { offset, limit } = sanitizePagination({ page, pageSize });\n      const { sortBy: safeSort, ascending } = sanitizeSorting(\n        { sortBy, sortDir },\n        ['date', 'clock_in', 'clock_out', 'total_hours', 'status']\n      );\n\n      let query = supabase?.from('attendance_records')?.select(`\n          *,\n          employee_profiles!inner(\n            full_name,\n            employee_id,\n            position,\n            profile_picture_url\n          ),\n          construction_sites(name, location)\n        `, { count: 'exact' })?.order(safeSort, { ascending })?.range(offset, offset + limit - 1);\n\n      if (siteId && siteId !== 'all') {\n        query = query?.eq('site_id', siteId);\n      }\n\n      if (startDate) {\n        query = query?.gte('date', startDate);\n      }\n\n      if (endDate) {\n        query = query?.lte('date', endDate);\n      }\n\n      const { data, error, count } = await query;\n\n      if (error) {\n        throw error;\n      }\n\n      return {\n        ok: true,\n        data: {\n          records: data || [],\n          total: count || 0,\n          page: Math.floor(offset / limit),\n          pageSize: limit,\n          totalPages: Math.ceil((count || 0) / limit),\n          filters: { siteId, startDate, endDate }\n        }\n      };\n    } catch (e) {\n      const adaptedError = adaptSupabaseError(e);\n      return {\n        ok: false,\n        error: adaptedError?.error,\n        code: adaptedError?.code\n      };\n    }\n  },\n\n  /**\n   * Get real-time attendance statistics\n   */\n  async getAttendanceStats(siteId = null) {\n    try {\n      const today = new Date()?.toISOString()?.split('T')?.[0];\n\n      // Base query for today's attendance\n      let baseQuery = supabase?.from('attendance_records')?.select('status', { count: 'exact', head: true })?.eq('date', today);\n\n      if (siteId && siteId !== 'all') {\n        baseQuery = baseQuery?.eq('site_id', siteId);\n      }\n\n      // Get counts for each status\n      const [\n        { count: total, error: e1 },\n        { count: present, error: e2 },\n        { count: late, error: e3 },\n        { count: absent, error: e4 }\n      ] = await Promise.all([\n        baseQuery,\n        baseQuery?.eq('status', 'present'),\n        baseQuery?.eq('status', 'late'),\n        baseQuery?.eq('status', 'absent')\n      ]);\n\n      if (e1 || e2 || e3 || e4) {\n        throw new Error('Error fetching attendance statistics');\n      }\n\n      return {\n        ok: true,\n        data: {\n          total: total || 0,\n          present: present || 0,\n          late: late || 0,\n          absent: absent || 0,\n          date: today,\n          siteId\n        }\n      };\n    } catch (e) {\n      const adaptedError = adaptSupabaseError(e);\n      return {\n        ok: false,\n        error: adaptedError?.error,\n        code: adaptedError?.code\n      };\n    }\n  }\n};\n\nexport default attendanceListService;","size_bytes":4850},"src/services/attendanceService.js":{"content":"// src/services/attendanceService.js\nimport { supabase } from '@/lib/supabase';\nimport { adaptSupabaseError } from '@/utils/errors';\n\n// ===============================\n// Columnas explícitas (evitar '*')\n// ===============================\nconst ATT_COLS_BASE = [\n  'id',\n  'employee_id',\n  'site_id',\n  'date',\n  'clock_in',\n  'lunch_start',\n  'lunch_end',\n  'clock_out',\n  'total_hours',\n  'overtime_hours', // <-- si no existe, ignora; abajo protegemos su lectura\n  'status',\n  'notes',\n  'updated_at',\n].join(',');\n\nconst EMP_COLS = [\n  'id',\n  'employee_id',\n  'full_name',\n].join(',');\n\nconst SITE_COLS = [\n  'id',\n  'name',\n  'location',\n  'latitude',\n  'longitude',\n  'allowed_radius_meters',\n  'gps_enabled',\n  'active',\n].join(',');\n\n// Con relaciones explícitas\nconst ATT_COLS_WITH_REL = `\n  ${ATT_COLS_BASE},\n  employees:employee_id(${EMP_COLS}),\n  construction_sites:site_id(id,name,location)\n`;\n\n// Aceptamos acciones en español y en inglés\nconst actionToColumn = (action) => {\n  const a = String(action || '')?.toLowerCase();\n  if (a === 'entrada' || a === 'checkin' || a === 'clock_in') return 'clock_in';\n  if (a === 'salida' || a === 'checkout' || a === 'clock_out') return 'clock_out';\n  if (a === 'lunch_start' || a === 'inicio_comida') return 'lunch_start';\n  if (a === 'lunch_end' || a === 'fin_comida') return 'lunch_end';\n  return null;\n};\n\n// YYYY-MM-DD consistente con supabase date\nconst yyyymmdd = (d) => (new Date(d))?.toISOString()?.split('T')?.[0];\n\n// ===============================\n// Registro de asistencia (idempotente)\n// ===============================\nexport async function registerAttendance(employeeId, siteId, action, location = null /* \"lat,lon\" */, registeredBy = null) {\n  try {\n    const today = yyyymmdd(new Date());\n\n    // 1) Config del sitio (para GPS)\n    const { data: site, error: siteError } = await supabase\n      ?.from('construction_sites')\n      ?.select(SITE_COLS)\n      ?.eq('id', siteId)\n      ?.maybeSingle();\n\n    if (siteError) return { ok: false, ...adaptSupabaseError(siteError) };\n    if (!site) return { ok: false, error: 'Sitio no encontrado', code: 'NOT_FOUND' };\n\n    // 2) Validación GPS (si aplica)\n    let locationValidation = { dentro_del_rango: true, distancia_metros: null };\n    let locationError = null;\n\n    if (location && site?.gps_enabled && site?.latitude != null && site?.longitude != null) {\n      const [userLat, userLon] = String(location)?.split(',')?.map((c) => parseFloat(c?.trim()));\n      if (Number.isFinite(userLat) && Number.isFinite(userLon)) {\n        const { data: validation, error: vErr } = await supabase?.rpc('validate_location_within_site', {\n          employee_lat: userLat,\n          employee_lon: userLon,\n          site_uuid: siteId,\n        });\n        if (vErr) {\n          locationError = 'No se pudo validar la ubicación GPS';\n        } else if (validation && validation?.length > 0) {\n          locationValidation = validation?.[0];\n          if (!locationValidation?.dentro_del_rango) {\n            return {\n              ok: false,\n              error: `Fuera de la zona permitida. Distancia: ${locationValidation?.distancia_metros}m, Radio: ${locationValidation?.radio_permitido}m.`,\n              code: 'GPS_OUT_OF_RANGE',\n              validation: locationValidation,\n            };\n          }\n        }\n      } else {\n        locationError = 'Coordenadas GPS inválidas';\n      }\n    }\n\n    // 3) Construir parche de acción\n    const column = actionToColumn(action);\n    if (!column) return { ok: false, error: 'Acción de asistencia no válida', code: 'VALIDATION' };\n\n    const stamp = new Date()?.toISOString();\n    const updatePatch = { [column]: stamp, updated_at: stamp };\n\n    // 4) UPSERT idempotente (UNIQUE (employee_id, date))\n    const payload = {\n      employee_id: employeeId,\n      site_id: siteId,\n      date: today,\n      ...updatePatch,\n    };\n\n    const { data, error } = await supabase\n      ?.from('attendance_records')\n      ?.upsert(payload, { onConflict: 'employee_id,date' })\n      ?.select(ATT_COLS_BASE)\n      ?.single();\n\n    if (error) return { ok: false, ...adaptSupabaseError(error) };\n\n    return {\n      ok: true,\n      data,\n      validation: locationValidation,\n      locationError, // null si todo bien o string si no se pudo validar (no bloquea)\n    };\n  } catch (e) {\n    return { ok: false, ...adaptSupabaseError(e) };\n  }\n}\n\n// ===============================\n// Registro por supervisor (proxy)\n// ===============================\nexport async function registerAttendanceAsSupervisor(supervisorId, employeeId, siteId, action, supervisorLocation = null) {\n  try {\n    return await registerAttendance(employeeId, siteId, action, supervisorLocation, supervisorId);\n  } catch (e) {\n    return { ok: false, ...adaptSupabaseError(e) };\n  }\n}\n\n// ===============================\n// Validar ubicación para un sitio\n// ===============================\nexport async function validateLocationForSite(latitude, longitude, siteId) {\n  try {\n    const { data, error } = await supabase?.rpc('validate_location_within_site', {\n      employee_lat: latitude,\n      employee_lon: longitude,\n      site_uuid: siteId,\n    });\n    if (error) return { ok: false, ...adaptSupabaseError(error) };\n    return { ok: true, data: data?.[0] || { dentro_del_rango: false } };\n  } catch (e) {\n    return { ok: false, ...adaptSupabaseError(e) };\n  }\n}\n\n// ===============================\n// Historial por empleado (rango)\n// ===============================\nexport async function getEmployeeAttendance(employeeId, startDate, endDate) {\n  try {\n    const { data, error } = await supabase\n      ?.from('attendance_records')\n      ?.select(ATT_COLS_BASE)\n      ?.eq('employee_id', employeeId)\n      ?.gte('date', yyyymmdd(startDate))\n      ?.lte('date', yyyymmdd(endDate))\n      ?.order('date', { ascending: false });\n\n    if (error) return { ok: false, ...adaptSupabaseError(error) };\n    return { ok: true, data };\n  } catch (e) {\n    return { ok: false, ...adaptSupabaseError(e) };\n  }\n}\n\n// ===============================\n// Asistencia de hoy (empleado)\n// ===============================\nexport async function getTodayAttendance(employeeId) {\n  try {\n    const today = yyyymmdd(new Date());\n    const { data, error } = await supabase\n      ?.from('attendance_records')\n      ?.select(ATT_COLS_BASE)\n      ?.eq('employee_id', employeeId)\n      ?.eq('date', today)\n      ?.maybeSingle();\n\n    if (error) return { ok: false, ...adaptSupabaseError(error) };\n    return { ok: true, data };\n  } catch (e) {\n    return { ok: false, ...adaptSupabaseError(e) };\n  }\n}\n\n// ===============================\n// Registros globales (con filtros)\n// ===============================\nexport async function getAllAttendanceRecords(startDate, endDate, siteId = null) {\n  try {\n    let query = supabase\n      ?.from('attendance_records')\n      ?.select(ATT_COLS_BASE)\n      ?.gte('date', yyyymmdd(startDate))\n      ?.lte('date', yyyymmdd(endDate))\n      ?.order('date', { ascending: false });\n\n    if (siteId) query = query?.eq('site_id', siteId);\n\n    const { data, error } = await query;\n    if (error) return { ok: false, ...adaptSupabaseError(error) };\n    return { ok: true, data };\n  } catch (e) {\n    return { ok: false, ...adaptSupabaseError(e) };\n  }\n}\n\n// ===============================\n// Resumen semanal (empleado)\n// ===============================\nexport async function getWeeklySummary(employeeId, weekStart /* Date o ISO */) {\n  try {\n    const start = new Date(weekStart);\n    const end = new Date(start);\n    end?.setDate(end?.getDate() + 6);\n\n    const { data, error } = await supabase\n      ?.from('attendance_records')\n      ?.select(ATT_COLS_BASE)\n      ?.eq('employee_id', employeeId)\n      ?.gte('date', yyyymmdd(start))\n      ?.lte('date', yyyymmdd(end))\n      ?.order('date', { ascending: true });\n\n    if (error) return { ok: false, ...adaptSupabaseError(error) };\n\n    const totalHours = (data || [])?.reduce((sum, r) => sum + (Number(r?.total_hours) || 0), 0);\n    const daysWorked = (data || [])?.filter((r) => {\n      if (r?.status) return String(r?.status)?.toLowerCase() === 'complete';\n      return !!(r?.clock_in && r?.clock_out);\n    })?.length;\n\n    return {\n      ok: true,\n      data: {\n        records: data,\n        summary: {\n          totalHours,\n          daysWorked,\n          weekStart: yyyymmdd(start),\n          weekEnd: yyyymmdd(end),\n        },\n      },\n    };\n  } catch (e) {\n    return { ok: false, ...adaptSupabaseError(e) };\n  }\n}\n\n// ===============================\n// NUEVO: Listado paginado + joins (para grids)\n// ===============================\nconst SORT_MAP = {\n  employee: 'employees.full_name', // requiere join\n  date: 'date',\n  clockIn: 'clock_in',\n  clockOut: 'clock_out',\n  totalHours: 'total_hours',\n  overtime: 'overtime_hours', // si tu tabla usa otra col, cámbiala aquí\n  status: 'status',\n};\n\nfunction normalizeRecordForUI(r = {}) {\n  return {\n    id: r?.id,\n    employeeId: r?.employee_id,\n    siteId: r?.site_id,\n    date: r?.date,\n    clockIn: r?.clock_in,\n    lunchStart: r?.lunch_start,\n    lunchEnd: r?.lunch_end,\n    clockOut: r?.clock_out,\n    totalHours: Number(r?.total_hours) || 0,\n    overtime: Number(r?.overtime_hours ?? 0) || 0,\n    status: r?.status || 'complete',\n    notes: r?.notes || null,\n    updatedAt: r?.updated_at,\n\n    // joineados para mostrar en UI\n    employee: r?.employees?.full_name || 'Empleado',\n    employeeCode: r?.employees?.employee_id || null,\n    site: r?.construction_sites?.name || '',\n    siteLocation: r?.construction_sites?.location || '',\n  };\n}\n\n/**\n * Lista paginada de asistencia con filtros, orden y joins\n * @param {Object} params\n * @param {number} params.page\n * @param {number} params.pageSize\n * @param {string} params.sortKey - employee|date|clockIn|clockOut|totalHours|overtime|status\n * @param {'asc'|'desc'} params.sortDir\n * @param {string} params.search - busca por nombre de empleado (ilike)\n * @param {string} params.startDate - ISO / Date\n * @param {string} params.endDate - ISO / Date\n * @param {string} params.siteId\n * @param {string} params.employeeId\n * @param {string} params.status\n */\nexport async function listAttendancePaginated({\n  page = 1,\n  pageSize = 20,\n  sortKey = 'date',\n  sortDir = 'desc',\n  search = '',\n  startDate = null,\n  endDate = null,\n  siteId = null,\n  employeeId = null,\n  status = null,\n} = {}) {\n  try {\n    const from = Math.max(0, (page - 1) * pageSize);\n    const to = from + pageSize - 1;\n\n    let query = supabase\n      ?.from('attendance_records')\n      ?.select(ATT_COLS_WITH_REL, { count: 'exact' });\n\n    // Filtros\n    if (startDate) query = query?.gte('date', yyyymmdd(startDate));\n    if (endDate) query = query?.lte('date', yyyymmdd(endDate));\n    if (siteId) query = query?.eq('site_id', siteId);\n    if (employeeId) query = query?.eq('employee_id', employeeId);\n    if (status) query = query?.eq('status', status);\n\n    // Búsqueda por nombre de empleado (en relación)\n    if (search?.trim()) {\n      // Nota: Para filtrar relaciones, usar \"ilike\" sobre el alias de la relación.\n      // En Supabase es válido: .ilike('employees.full_name', `%term%`)\n      query = query?.ilike('employees.full_name', `%${search.trim()}%`);\n    }\n\n    // Orden\n    const orderCol = SORT_MAP[sortKey] || 'date';\n    const ascending = String(sortDir).toLowerCase() === 'asc';\n\n    // Supabase solo permite order por columnas directas o por relación con sintaxis 'rel.col'\n    // Cuando order por relación, hay que pasar \"foreignTable\" si hace falta; con alias en select suele resolver.\n    query = query?.order(orderCol, { ascending, nullsFirst: !ascending });\n\n    // Paginación\n    query = query?.range(from, to);\n\n    const { data, error, count } = await query;\n    if (error) return { ok: false, ...adaptSupabaseError(error) };\n\n    const totalCount = count || 0;\n    const totalPages = Math.max(1, Math.ceil(totalCount / Math.max(1, pageSize)));\n    const rows = (data || []).map(normalizeRecordForUI);\n\n    return {\n      ok: true,\n      data: {\n        data: rows,\n        page,\n        pageSize,\n        totalCount,\n        totalPages,\n      },\n    };\n  } catch (e) {\n    return { ok: false, ...adaptSupabaseError(e) };\n  }\n}\n\n// ===============================\n// Export agrupado\n// ===============================\nexport const attendanceService = {\n  getTodayAttendance,\n  registerAttendance,\n  registerAttendanceAsSupervisor,\n  validateLocationForSite,\n  getEmployeeAttendance,\n  getAllAttendanceRecords,\n  getWeeklySummary,\n  listAttendancePaginated, // <-- NUEVO\n};\n\nexport default attendanceService;\n","size_bytes":12602},"src/services/authService.js":{"content":"// src/services/authService.js\nimport { supabase } from '@/lib/supabase';\nimport { adaptSupabaseError } from '@/utils/errors';\n\n// ============================\n// Circuit Breaker (perfil)\n// ============================\nclass CircuitBreaker {\n  constructor(threshold = 3, resetTimeout = 30000) {\n    this.threshold = threshold;\n    this.resetTimeout = resetTimeout;\n    this.failureCount = 0;\n    this.state = 'CLOSED';\n    this.nextAttempt = Date.now();\n  }\n  async call(fn) {\n    if (this.state === 'OPEN') {\n      if (Date.now() < this.nextAttempt) {\n        throw new Error('Circuit breaker is OPEN. Service temporarily unavailable.');\n      }\n      this.state = 'HALF_OPEN';\n    }\n    try {\n      const result = await fn();\n      this.onSuccess();\n      return result;\n    } catch (err) {\n      this.onFailure();\n      throw err;\n    }\n  }\n  onSuccess() { this.failureCount = 0; this.state = 'CLOSED'; }\n  onFailure() {\n    this.failureCount++;\n    if (this.failureCount >= this.threshold) {\n      this.state = 'OPEN';\n      this.nextAttempt = Date.now() + this.resetTimeout;\n    }\n  }\n}\nconst profileCircuitBreaker = new CircuitBreaker(3, 30000);\n\n// ============================\n// Helpers\n// ============================\nconst PROFILE_COLS = [\n  'id',\n  'full_name',\n  'email',\n  'phone',          // ← nuevo\n  'daily_salary',   // ← nuevo\n  'role',\n  'active',\n  'created_at',\n  'updated_at',\n].join(',');\n\nconst ok   = (data) => ({ ok: true,  data });\nconst fail = (e)    => ({ ok: false, ...adaptSupabaseError(e) });\n\nfunction classifyError(error) {\n  if (!error) return { type: 'unknown', message: 'Unknown error occurred' };\n  const message = error?.message || '';\n  const code    = error?.code || '';\n  if (/Failed to fetch|NetworkError|ERR_NETWORK|TypeError: fetch/i.test(message))\n    return { type: 'network', message: 'Sin conexión con el servicio. Inténtalo de nuevo.' };\n  if (/Invalid API key|Project not found/i.test(message) || code === 'INVALID_API_KEY')\n    return { type: 'configuration', message: 'Error de configuración de base de datos.' };\n  if (/row-level security policy|permission denied/i.test(message) || code === 'PGRST301')\n    return { type: 'permission', message: 'Acceso denegado por políticas de seguridad.' };\n  if (code === 'PGRST116' || /No rows found/i.test(message))\n    return { type: 'not_found', message: 'Registro no encontrado.' };\n  if (/^PGRST|^22|^23/.test(code))\n    return { type: 'database', message: 'Error de base de datos.' };\n  return { type: 'unknown', message: message || 'Ocurrió un error inesperado.' };\n}\n\nasync function retryWithBackoff(fn, maxRetries = 3, baseDelay = 1000) {\n  for (let attempt = 1; attempt <= maxRetries; attempt++) {\n    try {\n      return await fn();\n    } catch (e) {\n      const t = classifyError(e).type;\n      if (t === 'configuration' || t === 'permission') throw e;\n      if (attempt === maxRetries) throw e;\n      const ms = baseDelay * Math.pow(2, attempt - 1);\n      await new Promise(r => setTimeout(r, ms));\n    }\n  }\n}\n\n// ============================\n// authService\n// ============================\nexport const authService = {\n  async testConnection() {\n    try {\n      if (!supabase) return fail({ message: 'Supabase client not initialized' });\n      const url = import.meta.env?.VITE_SUPABASE_URL;\n      const key = import.meta.env?.VITE_SUPABASE_ANON_KEY;\n      if (!url || !key) return fail({ message: 'Missing env: VITE_SUPABASE_URL / VITE_SUPABASE_ANON_KEY', code: 'CONFIG' });\n\n      const { error: sErr } = await supabase.auth.getSession();\n      if (sErr) return fail(sErr);\n\n      const { error: dbErr } = await supabase.from('user_profiles').select('id').limit(1);\n      if (dbErr) return fail(dbErr);\n\n      return ok(true);\n    } catch (e) {\n      return fail(e);\n    }\n  },\n\n  async signIn(email, password) {\n    try {\n      const res = await retryWithBackoff(async () => {\n        const { data, error } = await supabase.auth.signInWithPassword({ email, password });\n        if (error) throw error;\n        return data;\n      });\n      return ok({ user: res?.user, session: res?.session });\n    } catch (e) {\n      const info = classifyError(e);\n      return { ok: false, error: info.message, code: info.type };\n    }\n  },\n\n  async signUp(email, password, fullName, role = 'user', phone = null, dailySalary = 0) {\n    try {\n      // Creamos el usuario en auth con metadatos útiles\n      const res = await retryWithBackoff(async () => {\n        const { data, error } = await supabase.auth.signUp({\n          email,\n          password,\n          options: { data: { full_name: fullName, role, phone, daily_salary: dailySalary } },\n        });\n        if (error) throw error;\n        return data;\n      });\n\n      // Opcional: crear perfil en user_profiles si tu flujo lo requiere ya (RLS permite Admin; para usuario normal puede fallar)\n      // Recomendado: hacerlo desde un job/edge function con service role, o desde un Admin en backoffice.\n      // Aquí lo intentamos, pero NO rompemos si falla por RLS.\n      if (res?.user?.id) {\n        const payload = {\n          id: res.user.id,\n          email,\n          full_name: fullName ?? null,\n          phone: phone ?? null,\n          daily_salary: Number.isFinite(+dailySalary) ? +dailySalary : 0,\n          role,\n          active: true,\n        };\n        const { error: upErr } = await supabase.from('user_profiles').insert([payload]).select('id').maybeSingle();\n        if (upErr) {\n          // No interrumpimos el alta de auth; solo log\n          console.warn('No se pudo crear user_profiles por RLS (probable):', upErr.message);\n        }\n      }\n\n      return ok({ user: res?.user, session: res?.session });\n    } catch (e) {\n      const info = classifyError(e);\n      return { ok: false, error: info.message, code: info.type };\n    }\n  },\n\n  async signUpWithPhone(phone, fullName, role = 'user') {\n    try {\n      const res = await retryWithBackoff(async () => {\n        const { data, error } = await supabase.auth.signInWithOtp({\n          phone,\n          options: { data: { full_name: fullName, role } },\n        });\n        if (error) throw error;\n        return data;\n      });\n      return ok(res);\n    } catch (e) {\n      const info = classifyError(e);\n      return { ok: false, error: info.message, code: info.type };\n    }\n  },\n\n  async sendPhoneOTP(phone) {\n    try {\n      const res = await retryWithBackoff(async () => {\n        const { data, error } = await supabase.auth.signInWithOtp({ phone });\n        if (error) throw error;\n        return data;\n      });\n      return ok(res);\n    } catch (e) {\n      const info = classifyError(e);\n      return { ok: false, error: info.message, code: info.type };\n    }\n  },\n\n  async sendEmailOTP(email) {\n    try {\n      const res = await retryWithBackoff(async () => {\n        const { data, error } = await supabase.auth.signInWithOtp({ email });\n        if (error) throw error;\n        return data;\n      });\n      return ok(res);\n    } catch (e) {\n      const info = classifyError(e);\n      return { ok: false, error: info.message, code: info.type };\n    }\n  },\n\n  async verifyOTP({ phone, email, token, type = 'sms' }) {\n    try {\n      const res = await retryWithBackoff(async () => {\n        const verifyData = { token, type };\n        if (phone) verifyData.phone = phone; else if (email) verifyData.email = email;\n        const { data, error } = await supabase.auth.verifyOtp(verifyData);\n        if (error) throw error;\n        return data;\n      });\n      return ok({ user: res?.user, session: res?.session });\n    } catch (e) {\n      const info = classifyError(e);\n      return { ok: false, error: info.message, code: info.type };\n    }\n  },\n\n  async signOut() {\n    try {\n      const { error } = await supabase.auth.signOut();\n      if (error) return fail(error);\n      return ok(true);\n    } catch (e) {\n      return fail(e);\n    }\n  },\n\n  async getSession() {\n    try {\n      const res = await retryWithBackoff(async () => {\n        const { data: { session }, error } = await supabase.auth.getSession();\n        if (error) throw error;\n        return session || null;\n      });\n      return ok(res);\n    } catch (e) {\n      return fail(e);\n    }\n  },\n\n  // ============================\n  // USER PROFILE\n  // ============================\n  async getUserProfile(userId) {\n    if (!userId) return { ok: false, error: 'User ID is required', code: 'VALIDATION' };\n    try {\n      const data = await profileCircuitBreaker.call(async () => {\n        const { data, error } = await supabase\n          .from('user_profiles')\n          .select(PROFILE_COLS)\n          .eq('id', userId)\n          .maybeSingle();\n        if (error) {\n          const info = classifyError(error);\n          if (info.type === 'not_found') return null;\n          console.error('Profile fetch error:', { userId, info });\n          throw new Error(info.message);\n        }\n        return data || null;\n      });\n      return ok(data);\n    } catch (e) {\n      if (String(e?.message || '').includes('Circuit breaker is OPEN')) {\n        return { ok: false, error: 'Service temporarily unavailable. Please try again shortly.', code: 'CB_OPEN' };\n      }\n      return fail(e);\n    }\n  },\n\n  async createUserProfile(user) {\n    try {\n      const payload = {\n        id: user?.id,\n        email: user?.email ?? null,\n        full_name: user?.full_name ?? null,\n        phone: user?.phone ?? null,                                  // ← nuevo\n        daily_salary: Number.isFinite(+user?.daily_salary) ? +user?.daily_salary : 0, // ← nuevo\n        role: user?.role ?? 'user',\n        active: true,\n      };\n      const { data, error } = await supabase\n        .from('user_profiles')\n        .insert([payload])\n        .select(PROFILE_COLS)\n        .maybeSingle();\n\n      if (error) return fail(error);\n      return ok(data);\n    } catch (e) {\n      return fail(e);\n    }\n  },\n\n  async updateUserProfile(userId, updates) {\n    try {\n      const mapped = {};\n      if ('email' in updates)        mapped.email = updates.email;\n      if ('full_name' in updates)    mapped.full_name = updates.full_name;\n      if ('phone' in updates)        mapped.phone = updates.phone; // ← nuevo\n      if ('daily_salary' in updates) mapped.daily_salary = Number.isFinite(+updates.daily_salary) ? +updates.daily_salary : 0; // ← nuevo\n      if ('role' in updates)         mapped.role = updates.role;\n      if ('active' in updates)       mapped.active = !!updates.active;\n\n      const { data, error } = await supabase\n        .from('user_profiles')\n        .update(mapped)\n        .eq('id', userId)\n        .select(PROFILE_COLS)\n        .maybeSingle();\n\n      if (error) return fail(error);\n      return ok(data);\n    } catch (e) {\n      return fail(e);\n    }\n  },\n\n  // ============================\n  // Auditoría opcional\n  // ============================\n  async logActivity(action, module, description, userId = null) {\n    try {\n      await supabase.rpc('log_activity', {\n        p_accion: action,\n        p_modulo: module,\n        p_descripcion: description,\n        p_usuario_id: userId,\n      });\n      return ok(true);\n    } catch (e) {\n      console.error('Failed to log activity:', { action, module, description, userId, error: e?.message });\n      return { ok: false, error: 'Failed to log activity' };\n    }\n  },\n\n  getCircuitBreakerStatus() {\n    return {\n      state: profileCircuitBreaker.state,\n      failureCount: profileCircuitBreaker.failureCount,\n      nextAttempt: profileCircuitBreaker.nextAttempt,\n    };\n  },\n  resetCircuitBreaker() {\n    profileCircuitBreaker.failureCount = 0;\n    profileCircuitBreaker.state = 'CLOSED';\n    profileCircuitBreaker.nextAttempt = Date.now();\n  },\n};\n\nexport default authService;\n","size_bytes":11734},"src/services/brandingService.js":{"content":"// src/services/brandingService.js\nimport { supabase } from '@/lib/supabase';\nimport { adaptSupabaseError } from '@/utils/errors';\n\nconst ok   = (data) => ({ ok: true, data });\nconst fail = (e)    => ({ ok: false, ...adaptSupabaseError(e) });\n\nconst BRAND_COLS = [\n  'id',\n  'brand_name',\n  'logo_url',\n  'favicon_url',\n  'primary_color',\n  'secondary_color',\n  'updated_by',\n  'updated_at',\n].join(',');\n\n/** Lee la configuración de marca global (1 fila máx) */\nexport async function getBranding() {\n  try {\n    const { data, error } = await supabase\n      .from('branding_settings')\n      .select(BRAND_COLS)\n      .limit(1)\n      .maybeSingle();\n    if (error) return fail(error);\n    return ok(data); // puede ser null si aún no existe\n  } catch (e) {\n    return fail(e);\n  }\n}\n\n/** Crea/actualiza la marca (RLS: solo superadmin puede escribir) */\nexport async function upsertBranding(payload) {\n  try {\n    const patch = {\n      id: payload?.id, // opcional, si ya existe\n      brand_name: payload?.brand_name,\n      logo_url: payload?.logo_url ?? null,\n      favicon_url: payload?.favicon_url ?? null,\n      primary_color: payload?.primary_color ?? null,\n      secondary_color: payload?.secondary_color ?? null,\n    };\n\n    const { data, error } = await supabase\n      .from('branding_settings')\n      .upsert(patch, { onConflict: 'id' })\n      .select(BRAND_COLS)\n      .maybeSingle();\n\n    if (error) return fail(error);\n    return ok(data);\n  } catch (e) {\n    return fail(e);\n  }\n}\n\n/** Subida de logo a Storage (bucket público 'branding') */\nexport async function uploadLogo(file, keyPrefix = 'logos') {\n  try {\n    if (!file) return { ok: false, error: 'Archivo inválido', code: 'VALIDATION' };\n    const fileExt = file.name.split('.').pop();\n    const fileName = `${crypto.randomUUID()}.${fileExt}`;\n    const path = `${keyPrefix}/${fileName}`;\n\n    const { error: upErr } = await supabase.storage.from('branding').upload(path, file, {\n      cacheControl: '3600',\n      upsert: false,\n    });\n    if (upErr) return fail(upErr);\n\n    const { data: urlData } = supabase.storage.from('branding').getPublicUrl(path);\n    return ok({ path, publicUrl: urlData.publicUrl });\n  } catch (e) {\n    return fail(e);\n  }\n}\n\n/** Subida de favicon a Storage (bucket público 'branding') */\nexport async function uploadFavicon(file, keyPrefix = 'favicons') {\n  try {\n    if (!file) return { ok: false, error: 'Archivo inválido', code: 'VALIDATION' };\n    const fileExt = file.name.split('.').pop();\n    const fileName = `${crypto.randomUUID()}.${fileExt}`;\n    const path = `${keyPrefix}/${fileName}`;\n\n    const { error: upErr } = await supabase.storage.from('branding').upload(path, file, {\n      cacheControl: '3600',\n      upsert: false,\n    });\n    if (upErr) return fail(upErr);\n\n    const { data: urlData } = supabase.storage.from('branding').getPublicUrl(path);\n    return ok({ path, publicUrl: urlData.publicUrl });\n  } catch (e) {\n    return fail(e);\n  }\n}\n\n/** Get public branding settings (for BrandingProvider) */\nexport async function getPublicBrandingSettings() {\n  const result = await getBranding();\n  if (!result?.ok || !result?.data) {\n    return null;\n  }\n  \n  const data = result.data;\n  return {\n    nombre_empresa: data?.brand_name || 'AsistenciaPro',\n    logo_url: data?.logo_url || null,\n    color_primario: data?.primary_color || '#3B82F6',\n    color_secundario: data?.secondary_color || '#10B981',\n    moneda: 'MXN',\n    simbolo_moneda: '$',\n    mensaje_bienvenida: 'Sistema de gestión de asistencia y recursos humanos'\n  };\n}\n\n/** Apply branding settings to the UI */\nexport function applyBrandingSettings(settings) {\n  if (settings?.color_primario) {\n    document.documentElement.style.setProperty('--color-primary', settings.color_primario);\n  }\n  if (settings?.color_secundario) {\n    document.documentElement.style.setProperty('--color-secondary', settings.color_secundario);\n  }\n}\n\n/** Format currency */\nexport function formatCurrency(amount, options = {}) {\n  const { code = 'MXN', symbol = '$' } = options;\n  const numAmount = typeof amount === 'number' ? amount : parseFloat(amount) || 0;\n  \n  return new Intl.NumberFormat('es-MX', {\n    style: 'currency',\n    currency: code,\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2\n  }).format(numAmount);\n}\n\nexport default {\n  getBranding,\n  upsertBranding,\n  uploadLogo,\n  uploadFavicon,\n  getPublicBrandingSettings,\n  applyBrandingSettings,\n  formatCurrency,\n};\n","size_bytes":4460},"src/services/constructionSiteService.js":{"content":"// src/services/constructionSiteService.js\nimport { supabase } from '@/lib/supabase';\nimport { adaptSupabaseError } from '@/utils/errors';\n\nconst ok   = (data) => ({ ok: true, data });\nconst fail = (e)    => ({ ok: false, ...adaptSupabaseError(e) });\n\nconst SITE_COLS = [\n  'id',\n  'name',\n  'location',\n  'description',\n  'latitude',\n  'longitude',\n  'allowed_radius_meters',\n  'gps_enabled',\n  'active',\n  'created_at',\n  'updated_at',\n].join(',');\n\nconst PAGE_SIZE = 50;\n\n/** Listar todos los sitios (con paginación y búsqueda opcional por nombre) */\nexport async function getAllSites({ page = 0, search = '' } = {}) {\n  try {\n    const from = page * PAGE_SIZE;\n    const to = from + PAGE_SIZE - 1;\n\n    let query = supabase\n      .from('construction_sites')\n      .select(SITE_COLS, { count: 'exact' })\n      .order('name', { ascending: true })\n      .range(from, to);\n\n    if (search) query = query.ilike('name', `%${search}%`);\n\n    const { data, error, count } = await query;\n    if (error) return fail(error);\n    return ok({ rows: data || [], count: count ?? 0, page, pageSize: PAGE_SIZE });\n  } catch (e) {\n    return fail(e);\n  }\n}\n\n/** Obtener un sitio por ID */\nexport async function getSiteById(siteId) {\n  try {\n    const { data, error } = await supabase\n      .from('construction_sites')\n      .select(SITE_COLS)\n      .eq('id', siteId)\n      .maybeSingle();\n\n    if (error) return fail(error);\n    return ok(data);\n  } catch (e) {\n    return fail(e);\n  }\n}\n\n/** Crear un sitio (incluye configuración GPS) */\nexport async function createSite(siteData) {\n  try {\n    const insert = {\n      name: siteData?.name,\n      location: siteData?.location ?? null,\n      description: siteData?.description ?? null,\n      latitude: siteData?.latitude == null ? null : Number(siteData.latitude),\n      longitude: siteData?.longitude == null ? null : Number(siteData.longitude),\n      allowed_radius_meters:\n        siteData?.allowed_radius_meters == null ? 15 : Number(siteData.allowed_radius_meters),\n      gps_enabled: siteData?.gps_enabled !== false, // por defecto true\n      active: siteData?.active ?? true,\n    };\n\n    const { data, error } = await supabase\n      .from('construction_sites')\n      .insert([insert])\n      .select(SITE_COLS)\n      .maybeSingle();\n\n    if (error) return fail(error);\n    return ok(data);\n  } catch (e) {\n    return fail(e);\n  }\n}\n\n/** Actualizar un sitio (incluye campos GPS si vienen en updates) */\nexport async function updateSite(siteId, updates = {}) {\n  try {\n    const patch = {};\n    if ('name' in updates) patch.name = updates.name;\n    if ('location' in updates) patch.location = updates.location;\n    if ('description' in updates) patch.description = updates.description;\n    if ('latitude' in updates) patch.latitude = updates.latitude == null ? null : Number(updates.latitude);\n    if ('longitude' in updates) patch.longitude = updates.longitude == null ? null : Number(updates.longitude);\n    if ('allowed_radius_meters' in updates) {\n      patch.allowed_radius_meters =\n        updates.allowed_radius_meters == null ? null : Number(updates.allowed_radius_meters);\n    }\n    if ('gps_enabled' in updates) patch.gps_enabled = !!updates.gps_enabled;\n    if ('active' in updates) patch.active = !!updates.active;\n    if (Object.keys(patch).length === 0) return ok(null);\n\n    const { data, error } = await supabase\n      .from('construction_sites')\n      .update(patch)\n      .eq('id', siteId)\n      .select(SITE_COLS)\n      .maybeSingle();\n\n    if (error) return fail(error);\n    return ok(data);\n  } catch (e) {\n    return fail(e);\n  }\n}\n\n/** Actualizar solo la configuración GPS */\nexport async function updateGPSConfiguration(siteId, gpsConfig = {}) {\n  try {\n    const patch = {\n      latitude: gpsConfig?.latitude == null ? null : Number(gpsConfig.latitude),\n      longitude: gpsConfig?.longitude == null ? null : Number(gpsConfig.longitude),\n      allowed_radius_meters:\n        gpsConfig?.allowed_radius_meters == null ? 15 : Number(gpsConfig.allowed_radius_meters),\n      gps_enabled: gpsConfig?.gps_enabled !== false,\n    };\n\n    const { data, error } = await supabase\n      .from('construction_sites')\n      .update(patch)\n      .eq('id', siteId)\n      .select(SITE_COLS)\n      .maybeSingle();\n\n    if (error) return fail(error);\n    return ok(data);\n  } catch (e) {\n    return fail(e);\n  }\n}\n\n/** Validar si una ubicación está dentro del perímetro del sitio (RPC) */\nexport async function validateLocationForSite(latitude, longitude, siteId) {\n  try {\n    const { data, error } = await supabase.rpc('validate_location_within_site', {\n      employee_lat: latitude,\n      employee_lon: longitude,\n      site_uuid: siteId,\n    });\n    if (error) return fail(error);\n    return ok(data?.[0] || { dentro_del_rango: false });\n  } catch (e) {\n    return fail(e);\n  }\n}\n\n/** Sitios con asignaciones activas (sin '*' y con join explícito) */\nexport async function getSitesWithAssignments() {\n  try {\n    const { data, error } = await supabase\n      .from('construction_sites')\n      .select(`\n        ${SITE_COLS},\n        employee_assignments!inner (\n          id,\n          is_active,\n          employee_id\n        )\n      `)\n      .eq('employee_assignments.is_active', true)\n      .order('name', { ascending: true });\n\n    if (error) return fail(error);\n\n    return ok(data || []);\n  } catch (e) {\n    return fail(e);\n  }\n}\n\n/** Solo sitios con GPS habilitado y coordenadas válidas */\nexport async function getGPSEnabledSites() {\n  try {\n    const { data, error } = await supabase\n      .from('construction_sites')\n      .select(SITE_COLS)\n      .eq('gps_enabled', true)\n      .not('latitude', 'is', null)\n      .not('longitude', 'is', null)\n      .order('name', { ascending: true });\n\n    if (error) return fail(error);\n    return ok(data || []);\n  } catch (e) {\n    return fail(e);\n  }\n}\n\n/** Desactivar sitio (usa columna 'active') */\nexport async function deactivateSite(siteId) {\n  try {\n    const { data, error } = await supabase\n      .from('construction_sites')\n      .update({ active: false })\n      .eq('id', siteId)\n      .select(SITE_COLS)\n      .maybeSingle();\n\n    if (error) return fail(error);\n    return ok(data);\n  } catch (e) {\n    return fail(e);\n  }\n}\n\nexport const constructionSiteService = {\n  getAllSites,\n  getSiteById,\n  createSite,\n  updateSite,\n  updateGPSConfiguration,\n  validateLocationForSite,\n  getSitesWithAssignments,\n  getGPSEnabledSites,\n  deactivateSite,\n};\n\nexport default constructionSiteService;\n","size_bytes":6505},"src/services/employeeService.js":{"content":"// src/services/employeeService.js\nimport { supabase } from '@/lib/supabase';\nimport { adaptSupabaseError } from '@/utils/errors';\n\nconst ok   = (data) => ({ ok: true, data });\nconst fail = (e)    => ({ ok: false, ...adaptSupabaseError(e) });\n\nconst EMP_BASE_COLS = [\n  'id',\n  'user_id',\n  'employee_id',\n  'full_name',\n  'phone',\n  'id_number',\n  'birth_date',\n  'address',\n  'emergency_contact',\n  'hire_date',\n  'daily_salary',\n  'site_id',\n  'supervisor_id',\n  'status',\n  'last_attendance_date',\n  'created_at',\n  'updated_at',\n  'deleted_at',\n  'position',\n  'hourly_rate',\n  'salary_type',\n  'profile_picture_url',\n  'active',\n].join(',');\n\nconst USER_NEST = `\n  user_profiles:user_id (\n    full_name,\n    email,\n    phone,\n    daily_salary,\n    role\n  )\n`;\n\nconst SITE_NEST = `\n  construction_sites:site_id (\n    id,\n    name,\n    location\n  )\n`;\n\nconst SUPERVISOR_NEST = `\n  supervisor:supervisor_id (\n    full_name,\n    email\n  )\n`;\n\nconst PAGE_SIZE = 50;\n\n/** Listado con paginación (vista admin) */\nexport async function listEmployees(page = 0) {\n  try {\n    const from = page * PAGE_SIZE;\n    const to = from + PAGE_SIZE - 1;\n\n    const { data, error, count } = await supabase\n      .from('employee_profiles')\n      .select(\n        `${EMP_BASE_COLS}, ${USER_NEST}, ${SITE_NEST}, ${SUPERVISOR_NEST}`,\n        { count: 'planned' } // suficiente para UI y más barato\n      )\n      .order('created_at', { ascending: false })\n      .range(from, to);\n\n    if (error) return fail(error);\n    return ok({ rows: data || [], count: count ?? 0, page, pageSize: PAGE_SIZE });\n  } catch (e) {\n    return fail(e);\n  }\n}\n\n/** Detalle por ID */\nexport async function getEmployeeById(employeeId) {\n  try {\n    const { data, error } = await supabase\n      .from('employee_profiles')\n      .select(`${EMP_BASE_COLS}, ${USER_NEST}, ${SITE_NEST}, ${SUPERVISOR_NEST}`)\n      .eq('id', employeeId)\n      .maybeSingle();\n\n    if (error) return fail(error);\n    return ok(data);\n  } catch (e) {\n    return fail(e);\n  }\n}\n\n/** Actualizar empleado (solo columnas permitidas) */\nexport async function updateEmployee(employeeId, updates = {}) {\n  try {\n    const patch = {};\n    if ('full_name' in updates)          patch.full_name = updates.full_name;\n    if ('phone' in updates)              patch.phone = updates.phone;\n    if ('id_number' in updates)          patch.id_number = updates.id_number;\n    if ('birth_date' in updates)         patch.birth_date = updates.birth_date;\n    if ('address' in updates)            patch.address = updates.address;\n    if ('emergency_contact' in updates)  patch.emergency_contact = updates.emergency_contact;\n    if ('hire_date' in updates)          patch.hire_date = updates.hire_date;\n    if ('daily_salary' in updates)       patch.daily_salary = Number.isFinite(+updates.daily_salary) ? +updates.daily_salary : 0;\n    if ('hourly_rate' in updates)        patch.hourly_rate = Number.isFinite(+updates.hourly_rate) ? +updates.hourly_rate : 0;\n    if ('salary_type' in updates)        patch.salary_type = updates.salary_type; // 'daily' | 'hourly' | 'project'\n    if ('site_id' in updates)            patch.site_id = updates.site_id;\n    if ('supervisor_id' in updates)      patch.supervisor_id = updates.supervisor_id;\n    if ('status' in updates)             patch.status = updates.status; // enum employee_status\n    if ('position' in updates)           patch.position = updates.position; // enum job_position\n    if ('profile_picture_url' in updates)patch.profile_picture_url = updates.profile_picture_url;\n    if ('active' in updates)             patch.active = !!updates.active;\n\n    if (Object.keys(patch).length === 0) return ok(null);\n\n    const { data, error } = await supabase\n      .from('employee_profiles')\n      .update(patch)\n      .eq('id', employeeId)\n      .select(`${EMP_BASE_COLS}, ${USER_NEST}, ${SITE_NEST}, ${SUPERVISOR_NEST}`)\n      .maybeSingle();\n\n    if (error) return fail(error);\n    return ok(data);\n  } catch (e) {\n    return fail(e);\n  }\n}\n\n/** Empleados por sitio */\nexport async function getEmployeesBySite(siteId) {\n  try {\n    const { data, error } = await supabase\n      .from('employee_profiles')\n      .select(`${EMP_BASE_COLS}, ${USER_NEST}, ${SUPERVISOR_NEST}`)\n      .eq('site_id', siteId)\n      .neq('status', 'deleted')\n      .order('full_name', { ascending: true });\n\n    if (error) return fail(error);\n    return ok(data || []);\n  } catch (e) {\n    return fail(e);\n  }\n}\n\n/**\n * Empleados por supervisor:\n * 1) Via employee_assignments (más seguro con RLS)\n * 2) Fallback a columna supervisor_id si no hay asignaciones\n */\nexport async function getEmployeesBySupervisor(supervisorId) {\n  try {\n    // 1) assignments\n    let { data, error } = await supabase\n      .from('employee_assignments')\n      .select(`\n        id,\n        is_active,\n        site_id,\n        employee:employee_id (\n          ${EMP_BASE_COLS},\n          ${USER_NEST},\n          ${SITE_NEST},\n          ${SUPERVISOR_NEST}\n        )\n      `)\n      .eq('supervisor_id', supervisorId)\n      .eq('is_active', true)\n      .order('id', { ascending: true });\n\n    if (error) return fail(error);\n\n    let employees = (data || []).map(r => r.employee).filter(Boolean);\n\n    // 2) fallback\n    if (!employees.length) {\n      const res = await supabase\n        .from('employee_profiles')\n        .select(`${EMP_BASE_COLS}, ${USER_NEST}, ${SITE_NEST}, ${SUPERVISOR_NEST}`)\n        .eq('supervisor_id', supervisorId)\n        .neq('status', 'deleted')\n        .order('full_name', { ascending: true });\n\n      if (res.error) return fail(res.error);\n      employees = res.data || [];\n    }\n\n    return ok(employees);\n  } catch (e) {\n    return fail(e);\n  }\n}\n\n/** Desactivar (status + active) */\nexport async function deactivateEmployee(employeeId) {\n  try {\n    const { data, error } = await supabase\n      .from('employee_profiles')\n      .update({ status: 'inactive', active: false, updated_at: new Date().toISOString() })\n      .eq('id', employeeId)\n      .select(`${EMP_BASE_COLS}, ${USER_NEST}, ${SITE_NEST}, ${SUPERVISOR_NEST}`)\n      .maybeSingle();\n\n    if (error) return fail(error);\n    return ok(data);\n  } catch (e) {\n    return fail(e);\n  }\n}\n\n/** Restaurar (status + active) */\nexport async function restoreEmployee(employeeId) {\n  try {\n    const { data, error } = await supabase\n      .from('employee_profiles')\n      .update({ status: 'active', active: true, deleted_at: null, updated_at: new Date().toISOString() })\n      .eq('id', employeeId)\n      .select(`${EMP_BASE_COLS}, ${USER_NEST}, ${SITE_NEST}, ${SUPERVISOR_NEST}`)\n      .maybeSingle();\n\n    if (error) return fail(error);\n    return ok(data);\n  } catch (e) {\n    return fail(e);\n  }\n}\n\n/** Borrado lógico vía RPC existente (si la usas) */\nexport async function deleteEmployee(employeeId) {\n  try {\n    const { data, error } = await supabase.rpc('soft_delete_employee', { p_employee_id: employeeId });\n    if (error) return fail(error);\n    return ok(data);\n  } catch (e) {\n    return fail(e);\n  }\n}\n\n/** Listado con filtros (status, sitio, supervisor, fechas, búsqueda) */\nexport async function getEmployeesWithFilters(filters = {}) {\n  try {\n    let query = supabase\n      .from('employee_profiles')\n      .select(`${EMP_BASE_COLS}, ${USER_NEST}, ${SITE_NEST}, ${SUPERVISOR_NEST}`);\n\n    // status\n    if (filters.status && filters.status.length > 0) {\n      query = query.in('status', filters.status);\n    } else if (!filters.includeDeleted) {\n      query = query.neq('status', 'deleted');\n    }\n\n    if (filters.siteId)       query = query.eq('site_id', filters.siteId);\n    if (filters.supervisorId) query = query.eq('supervisor_id', filters.supervisorId);\n\n    // fechas de contratación\n    if (filters.hireDateFrom) query = query.gte('hire_date', filters.hireDateFrom);\n    if (filters.hireDateTo)   query = query.lte('hire_date', filters.hireDateTo);\n\n    // orden\n    const sortColumn = filters.sortColumn || 'full_name';\n    const sortAsc = (filters.sortDirection || 'asc').toLowerCase() === 'asc';\n    query = query.order(sortColumn, { ascending: sortAsc });\n\n    let { data, error } = await query;\n    if (error) return fail(error);\n\n    // búsqueda local\n    if (filters.search && data?.length) {\n      const needle = String(filters.search).trim().toLowerCase();\n      data = data.filter(r =>\n        String(r.full_name || '').toLowerCase().includes(needle) ||\n        String(r.employee_id || '').toLowerCase().includes(needle) ||\n        String(r.id_number || '').toLowerCase().includes(needle)\n      );\n    }\n\n    return ok(data || []);\n  } catch (e) {\n    return fail(e);\n  }\n}\n\n/**\n * Obtiene todos los empleados (sin paginación dura).\n * Soporta búsqueda básica (full_name/email) y límite configurable.\n */\nexport async function getAllEmployees({ search = '', limit = 1000, offset = 0 } = {}) {\n  try {\n    let query = supabase\n      .from('employee_profiles')\n      .select(\n        `${EMP_BASE_COLS}, ${USER_NEST}, ${SITE_NEST}, ${SUPERVISOR_NEST}`,\n        { count: 'planned' } // evita el costo de exact\n      )\n      .neq('status', 'deleted')\n      .order('full_name', { ascending: true });\n\n    if (search) {\n      query = query.or(`full_name.ilike.%${search}%,user_profiles.email.ilike.%${search}%`);\n    }\n\n    const { data, error, count } = await query.range(offset, offset + limit - 1);\n    if (error) return fail(error);\n\n    return ok({ rows: data || [], count: count ?? (data?.length || 0) });\n  } catch (e) {\n    return fail(e);\n  }\n}\n\n// --- Agregador para soportar ambos estilos de import ---\nconst employeeService = {\n  listEmployees,\n  getEmployeeById,\n  updateEmployee,\n  getEmployeesBySite,\n  getEmployeesBySupervisor,\n  deactivateEmployee,\n  restoreEmployee,\n  deleteEmployee,\n  getEmployeesWithFilters,\n  getAllEmployees,\n};\n\nexport { employeeService };\nexport default employeeService;\n","size_bytes":9846},"src/services/enhancedAttendanceService.js":{"content":"// src/services/enhancedAttendanceService.js\nimport { supabase } from '@/lib/supabase';\nimport { adaptSupabaseError } from '@/utils/errors';\n\n// Servicios de estimaciones de nómina\nimport {\n  getRecentPayrollEstimation as getRecentEstimationSvc,\n  recalculateWeeklyEstimation,\n  upsertPayrollEstimation,\n} from './payrollEstimationsService';\n\n// Servicio central de incidentes (para creación rápida)\nimport incidentService from '@/services/incidentService';\n\nconst ok   = (data) => ({ ok: true, data });\nconst fail = (e)    => ({ ok: false, ...adaptSupabaseError(e) });\n\n// ------------------------\n// Helpers de fecha/semana\n// ------------------------\nconst todayStr = () => new Date()?.toISOString()?.split('T')?.[0];\n\nfunction getWeekBounds(date = new Date()) {\n  const d = new Date(date);\n  const day = (d?.getDay() + 6) % 7; // 0 = lunes\n  const monday = new Date(d);\n  monday?.setDate(d?.getDate() - day);\n  monday?.setHours(0, 0, 0, 0);\n\n  const sunday = new Date(monday);\n  sunday?.setDate(monday?.getDate() + 6);\n\n  const toISO = (x) => x?.toISOString()?.slice(0, 10);\n  return { start: toISO(monday), end: toISO(sunday) };\n}\n\n// ------------------------\n// Perfil del trabajador\n// ------------------------\nexport async function getWorkerProfile(userId) {\n  try {\n    const { data, error } = await supabase?.from('employee_profiles')?.select(`\n        id, employee_id, full_name, status, salary_type, daily_salary, hourly_rate,\n        site_id,\n        supervisor_id,\n        construction_sites:site_id ( id, name, location ),\n        supervisor:user_profiles!employee_profiles_supervisor_id_fkey ( id, full_name, email, phone ),\n        user_profiles:user_id ( id, full_name, email, phone, role )\n      `)?.eq('user_id', userId)?.single();\n\n    if (error) return fail(error);\n    return ok(data);\n  } catch (e) {\n    return fail(e);\n  }\n}\n\n// ------------------------\n// Compañeros del mismo sitio\n// ------------------------\nexport async function getSiteCoworkers(siteId, excludeUserId = null) {\n  try {\n    if (!siteId) return ok([]);\n\n    let query = supabase?.from('employee_profiles')?.select('id, full_name, employee_id, site_id, user_id')?.eq('site_id', siteId);\n\n    if (excludeUserId) query = query?.neq('user_id', excludeUserId);\n\n    const { data, error } = await query?.order('full_name', { ascending: true });\n    if (error) return fail(error);\n\n    return ok(data || []);\n  } catch (e) {\n    return fail(e);\n  }\n}\n\n// ------------------------\n// Estado de hoy\n// ------------------------\nexport async function getTodayAttendanceStatus(employeeId, date = todayStr()) {\n  try {\n    const { data, error } = await supabase?.from('attendance_records')?.select('*')?.eq('employee_id', employeeId)?.eq('date', date)?.single();\n\n    if (error && error?.code !== 'PGRST116') return fail(error);\n    return ok(data || null);\n  } catch (e) {\n    return fail(e);\n  }\n}\n\n// ------------------------\n// Tarjeta semanal (auto-rango)\n// ------------------------\nexport async function getWeeklyTimecard(employeeId, startDate, endDate) {\n  try {\n    const range = startDate && endDate ? { start: startDate, end: endDate } : getWeekBounds();\n\n    const { data, error } = await supabase?.from('attendance_records')?.select('id,date,clock_in,lunch_start,lunch_end,clock_out,total_hours,overtime_hours,status,notes')?.eq('employee_id', employeeId)?.gte('date', range?.start)?.lte('date', range?.end)?.order('date', { ascending: true });\n\n    if (error) return fail(error);\n    return ok(data || []);\n  } catch (e) {\n    return fail(e);\n  }\n}\n\n// ------------------------\n// Incidentes recientes del trabajador\n// ------------------------\nexport async function getWorkerIncidents(employeeId, limit = 5) {\n  try {\n    if (!employeeId) return ok([]);\n\n    const { data, error } = await supabase?.from('incident_records')?.select('id, type, date, description, status, created_at, approved_at')?.eq('employee_id', employeeId)?.order('created_at', { ascending: false })?.limit(limit);\n\n    if (error) return fail(error);\n\n    const rows = (data || [])?.map((r) => ({\n      id: r?.id,\n      type: r?.type,\n      date: r?.date,\n      description: r?.description,\n      status: r?.status,\n      createdAt: r?.created_at,\n      approvedAt: r?.approved_at || null,\n    }));\n\n    return ok(rows);\n  } catch (e) {\n    return fail(e);\n  }\n}\n\n/** Alias usado por algunos componentes */\nexport async function listRecentIncidents(employeeId, limit = 5) {\n  return getWorkerIncidents(employeeId, limit);\n}\n\n/** Creación rápida de incidente desde la UI */\nexport async function createIncidentQuick({ employeeId, type, date, description }) {\n  try {\n    const res = await incidentService?.createIncident({ employeeId, type, date, description });\n    return res?.ok ? ok(res?.data) : res;\n  } catch (e) {\n    return fail(e);\n  }\n}\n\n// ------------------------\n// Estimado de nómina (semana)\n// ------------------------\nexport async function getRecentPayrollEstimation(employeeId, startDate, endDate) {\n  try {\n    if (startDate && endDate) {\n      const res = await getRecentEstimationSvc(employeeId, {\n        targetWeekStart: startDate,\n        targetWeekEnd: endDate,\n        computeIfMissing: true,\n        persistComputed: true,\n      });\n      return res?.ok ? ok(res?.data) : res;\n    }\n\n    const res = await getRecentEstimationSvc(employeeId, {\n      computeIfMissing: true,\n      persistComputed: true,\n    });\n    return res?.ok ? ok(res?.data) : res;\n  } catch (e) {\n    return fail(e);\n  }\n}\n\n// ======================================================================\n// Acciones de asistencia\n// ======================================================================\nexport async function clockIn(employeeId, { siteId = null, location = null, notes = null } = {}) {\n  try {\n    const today = todayStr();\n\n    const { data: existing, error: exErr } = await supabase?.from('attendance_records')?.select('*')?.eq('employee_id', employeeId)?.eq('date', today)?.single();\n\n    if (exErr && exErr?.code !== 'PGRST116') return fail(exErr);\n\n    if (!existing) {\n      const { error } = await supabase?.from('attendance_records')?.insert([{\n          employee_id: employeeId,\n          site_id: siteId,\n          date: today,\n          clock_in: new Date()?.toISOString(),\n          location_in: location || null,\n          notes,\n          status: 'present',\n        }]);\n      if (error) return fail(error);\n    } else if (!existing?.clock_in) {\n      const { error } = await supabase?.from('attendance_records')?.update({\n          clock_in: new Date()?.toISOString(),\n          location_in: location || null,\n          notes,\n          updated_at: new Date()?.toISOString(),\n        })?.eq('id', existing?.id);\n      if (error) return fail(error);\n    }\n\n    return ok(true);\n  } catch (e) {\n    return fail(e);\n  }\n}\n\nexport async function startLunchBreak(employeeId) {\n  try {\n    const today = todayStr();\n    const { data: rec, error } = await supabase?.from('attendance_records')?.select('*')?.eq('employee_id', employeeId)?.eq('date', today)?.single();\n    if (error) return fail(error);\n\n    if (!rec?.lunch_start) {\n      const { error: updErr } = await supabase?.from('attendance_records')?.update({ lunch_start: new Date()?.toISOString(), updated_at: new Date()?.toISOString() })?.eq('id', rec?.id);\n      if (updErr) return fail(updErr);\n    }\n    return ok(true);\n  } catch (e) {\n    return fail(e);\n  }\n}\n\nexport async function endLunchBreak(employeeId) {\n  try {\n    const today = todayStr();\n    const { data: rec, error } = await supabase?.from('attendance_records')?.select('*')?.eq('employee_id', employeeId)?.eq('date', today)?.single();\n    if (error) return fail(error);\n\n    if (rec?.lunch_start && !rec?.lunch_end) {\n      const { error: updErr } = await supabase?.from('attendance_records')?.update({ lunch_end: new Date()?.toISOString(), updated_at: new Date()?.toISOString() })?.eq('id', rec?.id);\n      if (updErr) return fail(updErr);\n    }\n    return ok(true);\n  } catch (e) {\n    return fail(e);\n  }\n}\n\nexport async function clockOut(employeeId, { location = null } = {}) {\n  try {\n    const today = todayStr();\n    const { data: rec, error } = await supabase?.from('attendance_records')?.select('*')?.eq('employee_id', employeeId)?.eq('date', today)?.single();\n    if (error) return fail(error);\n\n    if (!rec?.clock_out) {\n      const { error: updErr } = await supabase?.from('attendance_records')?.update({\n          clock_out: new Date()?.toISOString(),\n          location_out: location || null,\n          updated_at: new Date()?.toISOString(),\n        })?.eq('id', rec?.id);\n      if (updErr) return fail(updErr);\n    }\n    return ok(true);\n  } catch (e) {\n    return fail(e);\n  }\n}\n\n// --- Agregador para soportar ambos estilos de import ---\nconst enhancedAttendanceService = {\n  // perfil / equipo\n  getWorkerProfile,\n  getSiteCoworkers,\n  // asistencia\n  getTodayAttendanceStatus,\n  getWeeklyTimecard,\n  clockIn,\n  startLunchBreak,\n  endLunchBreak,\n  clockOut,\n  // incidentes\n  getWorkerIncidents,\n  listRecentIncidents,\n  createIncidentQuick,\n  // estimados nómina\n  getRecentPayrollEstimation,\n  // (recalculateWeeklyEstimation, upsertPayrollEstimation pueden agregarse si los usas)\n};\n\nexport { enhancedAttendanceService };\nexport default enhancedAttendanceService;\n\n// Backward-compatibility alias for older components\nexport { getTodayAttendanceStatus as getTodayAttendance };","size_bytes":9420},"src/services/enhancedEmployeeService.js":{"content":"// src/services/enhancedEmployeeService.js\nimport { supabase } from '@/lib/supabase';\n\n/* -------------------------- Helpers / Sanitizers -------------------------- */\nconst clamp = (n, lo, hi) => Math.max(lo, Math.min(hi, n));\nconst isUUID = (v) => /^[0-9a-f-]{36}$/i.test((v || '').trim());\nconst sanitizeText = (s, max = 64) => (s || '').toString().trim().slice(0, max);\n\n/** Mínimo de caracteres para disparar búsquedas textuales */\nconst MIN_SEARCH_LEN = 2;\n\n/* ------------------------------- Mapeadores ------------------------------- */\nconst mapEmployeeRow = (r) => ({\n  id: r?.id,\n  employeeId: r?.employee_id,\n  name: r?.full_name || r?.user_profiles?.full_name || '',\n  email: r?.user_profiles?.email || r?.email || '',\n  phone: r?.phone || '',\n  site: r?.construction_sites?.name || '',\n  siteId: r?.site_id || null,\n  supervisor: r?.supervisor?.full_name || '',\n  supervisorId: r?.supervisor_id || null,\n  position: r?.position || '',\n  status: r?.status || '',\n  dailySalary: r?.daily_salary ?? 0,\n  hourlyRate: r?.hourly_rate ?? 0,\n  salaryType: r?.salary_type || (r?.hourly_rate ? 'hourly' : 'daily'),\n  userId: r?.user_id || null,\n  hireDate: r?.hire_date || null,\n  address: r?.address || '',\n  birthDate: r?.birth_date || null,\n  emergencyContact: r?.emergency_contact || '',\n  idNumber: r?.id_number || '',\n  avatar: r?.profile_picture_url || null,\n});\n\n/* -------------------------------- Servicio -------------------------------- */\nconst enhancedEmployeeService = {\n  /**\n   * Lista de empleados (paginada) con filtros.\n   * Retorna: { rows, count, pageSize }\n   *\n   * @param {Object} params\n   *  - search?: string\n   *  - site?: string|'all'\n   *  - supervisor?: string|'all'\n   *  - status?: string[] (['active','inactive','suspended']) o []\n   *  - position?: string|'all'\n   *  - hireDateFrom?: 'YYYY-MM-DD'\n   *  - hireDateTo?: 'YYYY-MM-DD'\n   *  - page?: number (0-index)\n   *  - pageSize?: number\n   *  - sortBy?: string (columna DB segura)\n   *  - sortDir?: 'asc'|'desc'\n   */\n  async getEmployees(params = {}) {\n    const {\n      search = '',\n      site = 'all',\n      supervisor = 'all',\n      status = [],\n      position = 'all',\n      hireDateFrom = '',\n      hireDateTo = '',\n      page = 0,\n      pageSize = 50,\n      sortBy = 'created_at',\n      sortDir = 'desc',\n    } = params;\n\n    // Sanitizar\n    const safeSearch = sanitizeText(search, 64);\n    const safePage = Math.max(0, parseInt(page, 10) || 0);\n    const safePageSize = clamp(parseInt(pageSize, 10) || 50, 10, 200);\n    const from = safePage * safePageSize;\n    const to = from + safePageSize - 1;\n\n    // Lista de columnas de orden permitido (evita SQLi en RPC)\n    const ALLOWED_SORT = new Set([\n      'created_at',\n      'full_name',\n      'employee_id',\n      'status',\n      'position',\n      'hire_date',\n      'site_id',\n      'supervisor_id',\n    ]);\n    const orderCol = ALLOWED_SORT.has(sortBy) ? sortBy : 'created_at';\n    const orderAsc = String(sortDir).toLowerCase() === 'asc';\n\n    let q = supabase\n      .from('employee_profiles')\n      .select(\n        `\n        *,\n        user_profiles:user_id (id, full_name, email, role, phone),\n        construction_sites:site_id (id, name, location),\n        supervisor:supervisor_id (id, full_name, email, phone)\n      `,\n        { count: 'exact' }\n      )\n      .neq('status', 'deleted')\n      .order(orderCol, { ascending: orderAsc })\n      .range(from, to);\n\n    // Filtros\n    if (site && site !== 'all') q = q.eq('site_id', site);\n    if (supervisor && supervisor !== 'all') q = q.eq('supervisor_id', supervisor);\n    if (Array.isArray(status) && status.length > 0) q = q.in('status', status);\n    if (position && position !== 'all') q = q.eq('position', position);\n    if (hireDateFrom) q = q.gte('hire_date', hireDateFrom);\n    if (hireDateTo) q = q.lte('hire_date', hireDateTo);\n\n    // Búsqueda\n    if (safeSearch && safeSearch.length >= MIN_SEARCH_LEN) {\n      if (isUUID(safeSearch)) {\n        // Buscar por id/ user_id si parece UUID\n        q = q.or(`id.eq.${safeSearch},user_id.eq.${safeSearch}`);\n      } else {\n        // Texto en varias columnas\n        q = q.or(\n          [\n            `full_name.ilike.%${safeSearch}%`,\n            `employee_id.ilike.%${safeSearch}%`,\n            `email.ilike.%${safeSearch}%`,\n            `phone.ilike.%${safeSearch}%`,\n            `id_number.ilike.%${safeSearch}%`,\n          ].join(',')\n        );\n      }\n    }\n\n    const { data, error, count } = await q;\n    if (error) throw new Error(`Error fetching employees: ${error.message}`);\n\n    return {\n      rows: (data || []).map(mapEmployeeRow),\n      count: count ?? 0,\n      pageSize: safePageSize,\n    };\n  },\n\n  /**\n   * KPIs rápidos (conteos exactos)\n   */\n  async getEmployeeStats() {\n    const base = supabase.from('employee_profiles').select('*', { count: 'exact', head: true });\n\n    const [{ count: total, error: e1 }, { count: active, error: e2 }, { count: inactive, error: e3 }, { count: suspended, error: e4 }] =\n      await Promise.all([\n        base.neq('status', 'deleted'),\n        base.eq('status', 'active'),\n        base.eq('status', 'inactive'),\n        base.eq('status', 'suspended'),\n      ]);\n\n    if (e1) throw new Error(`Error stats total: ${e1.message}`);\n    if (e2) throw new Error(`Error stats active: ${e2.message}`);\n    if (e3) throw new Error(`Error stats inactive: ${e3.message}`);\n    if (e4) throw new Error(`Error stats suspended: ${e4.message}`);\n\n    return {\n      total: total || 0,\n      active: active || 0,\n      inactive: inactive || 0,\n      suspended: suspended || 0,\n    };\n  },\n\n  /**\n   * Detalle por ID (mapeado)\n   */\n  async getEmployeeById(id) {\n    const { data, error } = await supabase\n      .from('employee_profiles')\n      .select(\n        `\n        *,\n        user_profiles:user_id (id, full_name, email, role, phone),\n        construction_sites:site_id (id, name, location),\n        supervisor:supervisor_id (id, full_name, email, phone)\n      `\n      )\n      .eq('id', id)\n      .single();\n\n    if (error) throw new Error(`Error fetching employee: ${error.message}`);\n    return mapEmployeeRow(data);\n  },\n\n  /**\n   * Crear empleado (campos ampliados)\n   */\n  async createEmployee(payload) {\n    const rec = {\n      employee_id: payload?.employeeId || `EMP-${Date.now()}`,\n      user_id: payload?.userId || null,\n      full_name: payload?.name || payload?.full_name,\n      email: payload?.email || null, // si tienes este campo en la tabla, ok; si no, quitar\n      phone: payload?.phone || null,\n      address: payload?.address || null,\n      birth_date: payload?.birthDate || null,\n      position: payload?.position || 'albañil',\n      status: payload?.status || 'active',\n      site_id: payload?.siteId || null,\n      supervisor_id: payload?.supervisorId || null,\n      salary_type: payload?.salaryType || (payload?.hourlyRate ? 'hourly' : 'daily'),\n      daily_salary: payload?.dailySalary ?? 0,\n      hourly_rate: payload?.hourlyRate ?? 0,\n      hire_date: payload?.hireDate || new Date().toISOString().split('T')[0],\n      emergency_contact: payload?.emergencyContact || null,\n      id_number: payload?.idNumber || null,\n      profile_picture_url: payload?.avatar || null,\n      created_at: new Date().toISOString(),\n    };\n\n    const { data, error } = await supabase.from('employee_profiles').insert([rec]).select('id').single();\n    if (error) throw new Error(`Error creating employee: ${error.message}`);\n    return data?.id || true;\n  },\n\n  /**\n   * Actualizar empleado\n   */\n  async updateEmployee(id, payload) {\n    const patch = {\n      full_name: payload?.name ?? payload?.full_name,\n      phone: payload?.phone,\n      address: payload?.address,\n      birth_date: payload?.birthDate,\n      position: payload?.position,\n      status: payload?.status,\n      site_id: payload?.siteId ?? payload?.site_id ?? null,\n      supervisor_id: payload?.supervisorId ?? payload?.supervisor_id ?? null,\n      salary_type: payload?.salaryType,\n      daily_salary: payload?.dailySalary ?? payload?.daily_salary,\n      hourly_rate: payload?.hourlyRate ?? payload?.hourly_rate,\n      emergency_contact: payload?.emergencyContact,\n      id_number: payload?.idNumber,\n      profile_picture_url: payload?.avatar ?? payload?.profile_picture_url,\n      updated_at: new Date().toISOString(),\n    };\n\n    // Limpia campos undefined para no sobreescribir con null accidentalmente\n    Object.keys(patch).forEach((k) => patch[k] === undefined && delete patch[k]);\n\n    const { error } = await supabase.from('employee_profiles').update(patch).eq('id', id);\n    if (error) throw new Error(`Error updating employee: ${error.message}`);\n    return true;\n  },\n\n  /**\n   * Bulk update por IDs\n   */\n  async bulkUpdateEmployees(ids = [], patch = {}) {\n    if (!Array.isArray(ids) || !ids.length) return true;\n    const payload = { ...patch, updated_at: new Date().toISOString() };\n    const { error } = await supabase.from('employee_profiles').update(payload).in('id', ids);\n    if (error) throw new Error(`Error bulk updating employees: ${error.message}`);\n    return true;\n  },\n\n  /**\n   * Soft delete + log opcional\n   */\n  async deleteEmployee(id, performedByUserId = null) {\n    const { error } = await supabase\n      .from('employee_profiles')\n      .update({ status: 'deleted', updated_at: new Date().toISOString() })\n      .eq('id', id);\n\n    if (error) throw new Error(`Error deleting employee: ${error.message}`);\n\n    if (performedByUserId) {\n      // No romper si falla el log\n      await supabase\n        .from('logs_actividad')\n        .insert([\n          {\n            usuario_id: performedByUserId,\n            modulo: 'employees',\n            accion: 'delete',\n            descripcion: `Soft delete empleado ${id}`,\n            fecha: new Date().toISOString(),\n            severity: 'medium',\n            rol: 'admin',\n          },\n        ])\n        .then(() => {})\n        .catch(() => {});\n    }\n    return true;\n  },\n\n  /**\n   * Catálogo: sitios de construcción activos\n   */\n  async getSites() {\n    const { data, error } = await supabase\n      .from('construction_sites')\n      .select('id, name, location, is_active')\n      .eq('is_active', true)\n      .order('name', { ascending: true });\n\n    if (error) throw new Error(`Error fetching sites: ${error.message}`);\n    return data || [];\n  },\n\n  /**\n   * Catálogo: supervisores (roles elevados)\n   */\n  async getSupervisors() {\n    const { data, error } = await supabase\n      .from('user_profiles')\n      .select('id, full_name, email, phone, role')\n      .in('role', ['supervisor', 'admin', 'superadmin'])\n      .order('full_name', { ascending: true });\n\n    if (error) throw new Error(`Error fetching supervisors: ${error.message}`);\n    return data || [];\n  },\n};\n\nexport default enhancedEmployeeService;\n","size_bytes":10796},"src/services/incidentService.js":{"content":"// src/services/incidentService.js\nimport { supabase } from '@/lib/supabase';\nimport { adaptSupabaseError } from '@/utils/errors';\n\nconst ok   = (data) => ({ ok: true, data });\nconst fail = (e)    => ({ ok: false, ...adaptSupabaseError(e) });\n\n// === Configuración de adjuntos ===\n// Cambia este nombre si tu bucket se llama distinto en Supabase Storage.\nconst ATTACHMENTS_BUCKET = 'incident_attachments';\n\n// Normaliza nombres de archivo para ruta segura\nfunction sanitizeFilename(name = '') {\n  return String(name)\n    .normalize('NFKD')\n    .replace(/[^\\w.\\-]+/g, '_')\n    .replace(/_+/g, '_')\n    .slice(0, 180); // deja espacio para el prefijo de ruta\n}\n\n/**\n * Lista incidentes con filtros + paginación.\n * Filtros soportados:\n *  - status: 'all' | 'pending' | 'approved' | 'rejected'\n *  - search: texto (busca en description)\n *  - employeeId: uuid\n *  - dateFrom, dateTo: 'YYYY-MM-DD'\n *  - page, pageSize\n */\nexport async function listIncidents({\n  status = 'all',\n  search = '',\n  employeeId = null,\n  dateFrom = null,\n  dateTo = null,\n  page = 0,\n  pageSize = 20,\n} = {}) {\n  try {\n    let query = supabase\n      .from('incident_records')\n      .select(`\n        id,\n        employee_id,\n        type,\n        date,\n        description,\n        status,\n        approved_by,\n        approved_at,\n        created_at,\n        updated_at,\n        user_profiles:approved_by ( full_name ),\n        employee_profiles:employee_id (\n          full_name,\n          site_id,\n          construction_sites:site_id ( name )\n        )\n      `, { count: 'exact' })\n      .order('created_at', { ascending: false });\n\n    if (status && status !== 'all') query = query.eq('status', status);\n    if (employeeId) query = query.eq('employee_id', employeeId);\n    if (search) query = query.ilike('description', `%${search}%`);\n    if (dateFrom) query = query.gte('date', dateFrom);\n    if (dateTo) query = query.lte('date', dateTo);\n\n    // paginación\n    const from = page * pageSize;\n    const to = from + pageSize - 1;\n    const { data, error, count } = await query.range(from, to);\n    if (error) return fail(error);\n\n    const rows = (data || []).map((r) => ({\n      id: r?.id,\n      employeeId: r?.employee_id,\n      employeeName: r?.employee_profiles?.full_name ?? '—',\n      site: r?.employee_profiles?.construction_sites?.name ?? '—',\n      type: r?.type,\n      date: r?.date,\n      description: r?.description,\n      status: r?.status,\n      approvedByName: r?.user_profiles?.full_name ?? null,\n      approvedAt: r?.approved_at ?? null,\n      createdAt: r?.created_at,\n      updatedAt: r?.updated_at,\n    }));\n\n    return ok({\n      rows,\n      count: count ?? rows.length,\n      page,\n      pageSize,\n    });\n  } catch (e) {\n    return fail(e);\n  }\n}\n\n/**\n * Obtiene un incidente por ID.\n */\nexport async function getIncidentById(id) {\n  try {\n    const { data, error } = await supabase\n      .from('incident_records')\n      .select(`\n        id,\n        employee_id,\n        type,\n        date,\n        description,\n        status,\n        approved_by,\n        approved_at,\n        created_at,\n        updated_at,\n        user_profiles:approved_by ( full_name ),\n        employee_profiles:employee_id (\n          full_name,\n          site_id,\n          construction_sites:site_id ( name )\n        )\n      `)\n      .eq('id', id)\n      .single();\n\n    if (error) return fail(error);\n\n    const result = data && {\n      id: data.id,\n      employeeId: data.employee_id,\n      employeeName: data?.employee_profiles?.full_name ?? '—',\n      site: data?.employee_profiles?.construction_sites?.name ?? '—',\n      type: data.type,\n      date: data.date,\n      description: data.description,\n      status: data.status,\n      approvedByName: data?.user_profiles?.full_name ?? null,\n      approvedAt: data?.approved_at ?? null,\n      createdAt: data.created_at,\n      updatedAt: data.updated_at,\n    };\n\n    return ok(result);\n  } catch (e) {\n    return fail(e);\n  }\n}\n\n/**\n * Crea un incidente.\n * Campos mínimos según esquema:\n *  - employeeId (uuid)\n *  - type (enum definido en DB)\n *  - date (YYYY-MM-DD)\n *  - description (texto)\n * *status* usa default 'pendiente' del enum (según tu schema).\n */\nexport async function createIncident({ employeeId, type, date, description }) {\n  try {\n    const payload = {\n      employee_id: employeeId,\n      type,\n      date,\n      description,\n      // status se deja al default en DB\n    };\n\n    const { data, error } = await supabase\n      .from('incident_records')\n      .insert(payload)\n      .select(`id, employee_id, type, date, description, status, created_at`)\n      .single();\n\n    if (error) return fail(error);\n\n    return ok({\n      id: data?.id,\n      employeeId: data?.employee_id,\n      type: data?.type,\n      date: data?.date,\n      description: data?.description,\n      status: data?.status,\n      createdAt: data?.created_at,\n    });\n  } catch (e) {\n    return fail(e);\n  }\n}\n\n/**\n * Aprueba un incidente: setea status, approved_by, approved_at.\n */\nexport async function approveIncident({ incidentId, approvedByUserId }) {\n  try {\n    const nowIso = new Date().toISOString();\n    const { data, error } = await supabase\n      .from('incident_records')\n      .update({\n        status: 'approved',\n        approved_by: approvedByUserId,\n        approved_at: nowIso,\n        updated_at: nowIso,\n      })\n      .eq('id', incidentId)\n      .select('id, status, approved_by, approved_at, updated_at')\n      .single();\n\n    if (error) return fail(error);\n\n    return ok({\n      id: data?.id,\n      status: data?.status,\n      approvedBy: data?.approved_by,\n      approvedAt: data?.approved_at,\n      updatedAt: data?.updated_at,\n    });\n  } catch (e) {\n    return fail(e);\n  }\n}\n\n/**\n * Rechaza un incidente. (Si quieres persistir el motivo, se concatena en description)\n */\nexport async function rejectIncident({ incidentId, reason = '' }) {\n  try {\n    // Leer descripción actual (opcional)\n    let current = '';\n    {\n      const { data, error } = await supabase\n        .from('incident_records')\n        .select('description')\n        .eq('id', incidentId)\n        .single();\n      if (error && error.code !== 'PGRST116') return fail(error);\n      current = data?.description || '';\n    }\n\n    const nowIso = new Date().toISOString();\n    const { data, error } = await supabase\n      .from('incident_records')\n      .update({\n        status: 'rejected',\n        description: reason ? `${current}\\n\\n[Rechazo]: ${reason}` : current,\n        updated_at: nowIso,\n      })\n      .eq('id', incidentId)\n      .select('id, status, description, updated_at')\n      .single();\n\n    if (error) return fail(error);\n\n    return ok({\n      id: data?.id,\n      status: data?.status,\n      description: data?.description,\n      updatedAt: data?.updated_at,\n    });\n  } catch (e) {\n    return fail(e);\n  }\n}\n\n/**\n * Sube adjuntos al Storage en la carpeta del incidente.\n * - files: Array<File|Blob> con { name, type, size }\n * Devuelve un arreglo con metadatos mínimos y URLs públicas si el bucket es público.\n */\nexport async function uploadIncidentAttachments(incidentId, files = []) {\n  try {\n    if (!incidentId) return fail(new Error('incidentId es requerido'));\n    if (!Array.isArray(files) || files.length === 0) return ok([]);\n\n    const bucket = supabase.storage.from(ATTACHMENTS_BUCKET);\n    const uploaded = [];\n\n    for (const file of files) {\n      const safeName = sanitizeFilename(file?.name || 'file');\n      const ext = safeName.includes('.') ? '' : (file?.type?.split('/')[1] ? `.${file.type.split('/')[1]}` : '');\n      const path = `${incidentId}/${Date.now()}_${safeName}${ext}`;\n\n      const { error: upErr } = await bucket.upload(path, file, {\n        contentType: file?.type || 'application/octet-stream',\n        upsert: false,\n      });\n      if (upErr) return fail(upErr);\n\n      // Intentar obtener URL pública (si el bucket es público)\n      let publicUrl = null;\n      try {\n        const { data: pub } = bucket.getPublicUrl(path);\n        publicUrl = pub?.publicUrl || null;\n      } catch (_) {\n        // ignorar si no es público\n      }\n\n      uploaded.push({\n        path,\n        name: safeName,\n        mimeType: file?.type || null,\n        size: file?.size ?? null,\n        publicUrl,\n      });\n\n      // Si llevas un registro en tabla \"incident_attachments\", descomenta esto:\n      // await supabase.from('incident_attachments').insert({\n      //   incident_id: incidentId,\n      //   path,\n      //   name: safeName,\n      //   mime_type: file?.type || null,\n      //   size: file?.size ?? null,\n      // });\n    }\n\n    return ok(uploaded);\n  } catch (e) {\n    return fail(e);\n  }\n}\n\n/**\n * Lista adjuntos desde Storage para un incidente (por prefijo).\n * Si usas tabla \"incident_attachments\", puedes migrar esta función a SELECT.\n */\nexport async function listIncidentAttachments(incidentId) {\n  try {\n    if (!incidentId) return fail(new Error('incidentId es requerido'));\n\n    const bucket = supabase.storage.from(ATTACHMENTS_BUCKET);\n    const { data, error } = await bucket.list(incidentId, { limit: 100, offset: 0 });\n    if (error) return fail(error);\n\n    const items = (data || []).map((f) => {\n      const path = `${incidentId}/${f.name}`;\n      const { data: pub } = bucket.getPublicUrl(path);\n      return {\n        path,\n        name: f.name,\n        size: f.metadata?.size ?? null,\n        lastModified: f.updated_at ?? null,\n        publicUrl: pub?.publicUrl || null,\n      };\n    });\n\n    return ok(items);\n  } catch (e) {\n    return fail(e);\n  }\n}\n\n/**\n * Elimina un adjunto del Storage por path (p.ej. \"incidentId/archivo.png\").\n */\nexport async function deleteIncidentAttachment(path) {\n  try {\n    if (!path) return fail(new Error('path es requerido'));\n    const bucket = supabase.storage.from(ATTACHMENTS_BUCKET);\n    const { error } = await bucket.remove([path]);\n    if (error) return fail(error);\n\n    // Si tienes tabla \"incident_attachments\", podrías también borrarlo allí:\n    // await supabase.from('incident_attachments').delete().eq('path', path);\n\n    return ok(true);\n  } catch (e) {\n    return fail(e);\n  }\n}\n\n// --- Agregador para soportar ambos estilos de import ---\nconst incidentService = {\n  listIncidents,\n  getIncidentById,\n  createIncident,\n  approveIncident,\n  rejectIncident,\n  uploadIncidentAttachments,\n  listIncidentAttachments,\n  deleteIncidentAttachment,\n};\n\nexport { incidentService };\nexport default incidentService;","size_bytes":10464},"src/services/incidentService_personal.js":{"content":"// src/services/incidentService.js\nimport { supabase } from '@/lib/supabase';\nimport { adaptSupabaseError } from '../../utils/errors';\n\nconst ok   = (data) => ({ ok: true, data });\nconst fail = (e)    => ({ ok: false, ...adaptSupabaseError(e) });\n\n// ⬇️ NUEVO: listado paginado de incidentes personales\nexport async function getPersonalIncidents({ employeeId, page = 0, status = 'all', pageSize = 20 }) {\n  try {\n    if (!employeeId) return ok({ rows: [], count: 0, pageSize });\n\n    let query = supabase\n      .from('incident_records') // 👈 acorde a tu esquema público\n      .select(`\n        id,\n        employee_id,\n        type,\n        date,\n        description,\n        status,\n        approved_by,\n        approved_at,\n        created_at,\n        updated_at,\n        user_profiles:approved_by ( id, full_name )\n      `, { count: 'exact' })\n      .eq('employee_id', employeeId)\n      .order('created_at', { ascending: false });\n\n    if (status && status !== 'all') {\n      query = query.eq('status', status);\n    }\n\n    const from = page * pageSize;\n    const to   = from + pageSize - 1;\n\n    const { data, error, count } = await query.range(from, to);\n    if (error) return fail(error);\n\n    const rows = (data || []).map(r => ({\n      id: r.id,\n      date: r.date,\n      type: r.type,\n      description: r.description || '',\n      status: r.status,\n      approvedBy: r?.user_profiles?.full_name || null,\n      approvedAt: r?.approved_at || null,\n      createdAt: r?.created_at,\n    }));\n\n    return ok({ rows, count: count ?? 0, pageSize });\n  } catch (e) {\n    return fail(e);\n  }\n}\n\n// ⬇️ Export por defecto si ya tienes un objeto service; agrega esta función al objeto si lo usas así.\nconst incidentService = { getPersonalIncidents };\nexport default incidentService;\n","size_bytes":1792},"src/services/obrasFinancialService.js":{"content":"import { supabase } from '@/lib/supabase';\nimport { adaptSupabaseError } from '@/utils/errors';\n\nconst ok   = (data) => ({ ok: true, data });\nconst fail = (e)    => ({ ok: false, ...adaptSupabaseError(e) });\n\n/* ================================\n * COMPANIES MANAGEMENT SERVICE\n * ================================ */\n\nexport const companiesService = {\n  async getAll() {\n    try {\n      const { data, error } = await supabase\n        .from('empresas')\n        .select('id,nombre,rfc,tipo,activo,created_at')\n        .order('nombre', { ascending: true });\n\n      if (error) return fail(error);\n      return ok(data ?? []);\n    } catch (e) {\n      return fail(e);\n    }\n  },\n\n  async create(companyData) {\n    try {\n      const payload = {\n        nombre: companyData?.nombre,\n        rfc: companyData?.rfc ?? null,\n        tipo: companyData?.tipo,\n        activo: companyData?.activo ?? true,\n      };\n\n      const { data, error } = await supabase\n        .from('empresas')\n        .insert([payload])\n        .select('id,nombre,rfc,tipo,activo,created_at')\n        .single();\n\n      if (error) return fail(error);\n      return ok(data);\n    } catch (e) {\n      return fail(e);\n    }\n  },\n\n  async update(companyId, companyData) {\n    try {\n      const payload = {\n        nombre: companyData?.nombre,\n        rfc: companyData?.rfc ?? null,\n        tipo: companyData?.tipo,\n        activo: companyData?.activo ?? true,\n      };\n\n      const { data, error } = await supabase\n        .from('empresas')\n        .update(payload)\n        .eq('id', companyId)\n        .select('id,nombre,rfc,tipo,activo,created_at')\n        .single();\n\n      if (error) return fail(error);\n      return ok(data);\n    } catch (e) {\n      return fail(e);\n    }\n  },\n\n  async delete(companyId) {\n    try {\n      const { error } = await supabase\n        .from('empresas')\n        .delete()\n        .eq('id', companyId);\n\n      if (error) return fail(error);\n      return ok(true);\n    } catch (e) {\n      return fail(e);\n    }\n  },\n};\n\n/* =================================\n * DEPENDENCIES (DEPENDENCIAS)\n * ================================= */\n\nexport const dependenciesService = {\n  async getAll() {\n    try {\n      const { data, error } = await supabase\n        .from('dependencias')\n        .select('id,nombre,created_at,activo')\n        .order('nombre', { ascending: true });\n\n      if (error) return fail(error);\n      return ok(data ?? []);\n    } catch (e) {\n      return fail(e);\n    }\n  },\n\n  async create(dependencyData) {\n    try {\n      const payload = {\n        nombre: dependencyData?.nombre,\n        activo: dependencyData?.activo ?? true,\n      };\n\n      const { data, error } = await supabase\n        .from('dependencias')\n        .insert([payload])\n        .select('id,nombre,activo,created_at')\n        .single();\n\n      if (error) return fail(error);\n      return ok(data);\n    } catch (e) {\n      return fail(e);\n    }\n  },\n};\n\n/* ================================\n * OBRAS (PROJECTS)\n * ================================ */\n\nconst OBRAS_VIEW_COLS = [\n  'obra_id',\n  'clave',\n  'nombre',\n  'estatus',\n  'empresa_nombre',\n  'dependencia_nombre',\n  'presupuesto_total',\n  'facturado_total',\n  'pagado_total',\n  'por_cobrar',\n  'gastos_total',\n  'costo_directo',\n  'utilidad_bruta',\n  'utilidad_vs_presupuesto',\n  'utilidad_pct_real',\n  'avance_financiero_pct',\n  'margen_presupuestado_pct',\n  'created_at',\n].join(',');\n\nexport const obrasService = {\n  // Soporta limit/offset opcionales (paginación)\n  async getAll({ limit = null, offset = null } = {}) {\n    try {\n      let query = supabase\n        .from('vw_obras_finanzas')\n        .select(OBRAS_VIEW_COLS)\n        .order('created_at', { ascending: false });\n\n      if (Number.isInteger(limit) && Number.isInteger(offset)) {\n        query = query.range(offset, offset + limit - 1);\n      }\n\n      const { data, error } = await query;\n      if (error) return fail(error);\n      return ok(data ?? []);\n    } catch (e) {\n      return fail(e);\n    }\n  },\n\n  async getById(obraId) {\n    try {\n      const { data, error } = await supabase\n        .from('vw_obras_finanzas')\n        .select(OBRAS_VIEW_COLS)\n        .eq('obra_id', obraId)\n        .single();\n\n      if (error) return fail(error);\n      return ok(data);\n    } catch (e) {\n      return fail(e);\n    }\n  },\n\n  async create(obraData) {\n    try {\n      const payload = {\n        clave: obraData?.clave,\n        nombre: obraData?.nombre,\n        estatus: obraData?.estatus ?? 'Planeación',\n        empresa_id: obraData?.empresa_id,\n        dependencia_id: obraData?.dependencia_id ?? null,\n        con_iva: obraData?.con_iva ?? true,\n        presupuesto_inicial: obraData?.presupuesto_inicial ?? 0,\n        anticipo: obraData?.anticipo ?? 0,\n        fecha_inicio: obraData?.fecha_inicio ?? null,\n        fecha_fin_compromiso: obraData?.fecha_fin_compromiso ?? null,\n        notas: obraData?.notas ?? null,\n      };\n\n      const { data, error } = await supabase\n        .from('obras_financiero')\n        .insert([payload])\n        .select('id,clave,nombre,estatus,empresa_id,dependencia_id,con_iva,presupuesto_inicial,anticipo,fecha_inicio,fecha_fin_compromiso,notas,created_at')\n        .single();\n\n      if (error) return fail(error);\n      return ok(data);\n    } catch (e) {\n      return fail(e);\n    }\n  },\n\n  async update(obraId, obraData) {\n    try {\n      const { data, error } = await supabase\n        .from('obras_financiero')\n        .update(obraData)\n        .eq('id', obraId)\n        .select('id,clave,nombre,estatus,empresa_id,dependencia_id,con_iva,presupuesto_inicial,anticipo,fecha_inicio,fecha_fin_compromiso,notas,updated_at,created_at')\n        .single();\n\n      if (error) return fail(error);\n      return ok(data);\n    } catch (e) {\n      return fail(e);\n    }\n  },\n\n  async delete(obraId) {\n    try {\n      const { error } = await supabase\n        .from('obras_financiero')\n        .delete()\n        .eq('id', obraId);\n\n      if (error) return fail(error);\n      return ok(true);\n    } catch (e) {\n      return fail(e);\n    }\n  },\n};\n\n/* ================================\n * CHANGE ORDERS\n * ================================ */\n\nexport const changeOrdersService = {\n  async getByObraId(obraId, { limit = null, offset = null } = {}) {\n    try {\n      let query = supabase\n        .from('ordenes_cambio')\n        .select('id,obra_id,folio,concepto,monto,fecha,estatus,created_at,updated_at')\n        .eq('obra_id', obraId)\n        .order('fecha', { ascending: false });\n\n      if (Number.isInteger(limit) && Number.isInteger(offset)) {\n        query = query.range(offset, offset + limit - 1);\n      }\n\n      const { data, error } = await query;\n      if (error) return fail(error);\n      return ok(data ?? []);\n    } catch (e) {\n      return fail(e);\n    }\n  },\n\n  async create(changeOrderData) {\n    try {\n      const { data, error } = await supabase\n        .from('ordenes_cambio')\n        .insert([changeOrderData])\n        .select('id,obra_id,folio,concepto,monto,fecha,estatus,created_at,updated_at')\n        .single();\n\n      if (error) return fail(error);\n      return ok(data);\n    } catch (e) {\n      return fail(e);\n    }\n  },\n\n  async update(changeOrderId, changeOrderData) {\n    try {\n      const { data, error } = await supabase\n        .from('ordenes_cambio')\n        .update(changeOrderData)\n        .eq('id', changeOrderId)\n        .select('id,obra_id,folio,concepto,monto,fecha,estatus,created_at,updated_at')\n        .single();\n\n      if (error) return fail(error);\n      return ok(data);\n    } catch (e) {\n      return fail(e);\n    }\n  },\n\n  async delete(changeOrderId) {\n    try {\n      const { error } = await supabase\n        .from('ordenes_cambio')\n        .delete()\n        .eq('id', changeOrderId);\n\n      if (error) return fail(error);\n      return ok(true);\n    } catch (e) {\n      return fail(e);\n    }\n  },\n};\n\n/* ================================\n * INVOICES / REQUISITIONS\n * ================================ */\n\nexport const invoicesService = {\n  async getByObraId(obraId, { limit = null, offset = null } = {}) {\n    try {\n      let query = supabase\n        .from('facturas_ventas')\n        .select('id,obra_id,folio,tipo,subtotal,iva,total,fecha_emision,fecha_vencimiento,estatus,created_at,updated_at')\n        .eq('obra_id', obraId)\n        .order('fecha_emision', { ascending: false });\n\n      if (Number.isInteger(limit) && Number.isInteger(offset)) {\n        query = query.range(offset, offset + limit - 1);\n      }\n\n      const { data, error } = await query;\n      if (error) return fail(error);\n      return ok(data ?? []);\n    } catch (e) {\n      return fail(e);\n    }\n  },\n\n  async create(invoiceData) {\n    try {\n      const { data, error } = await supabase\n        .from('facturas_ventas')\n        .insert([invoiceData])\n        .select('id,obra_id,folio,tipo,subtotal,iva,total,fecha_emision,fecha_vencimiento,estatus,created_at,updated_at')\n        .single();\n\n      if (error) return fail(error);\n      return ok(data);\n    } catch (e) {\n      return fail(e);\n    }\n  },\n\n  async update(invoiceId, invoiceData) {\n    try {\n      const { data, error } = await supabase\n        .from('facturas_ventas')\n        .update(invoiceData)\n        .eq('id', invoiceId)\n        .select('id,obra_id,folio,tipo,subtotal,iva,total,fecha_emision,fecha_vencimiento,estatus,created_at,updated_at')\n        .single();\n\n      if (error) return fail(error);\n      return ok(data);\n    } catch (e) {\n      return fail(e);\n    }\n  },\n};\n\n/* ================================\n * PAYMENTS\n * ================================ */\n\nexport const paymentsService = {\n  async getByObraId(obraId, { limit = null, offset = null } = {}) {\n    try {\n      let query = supabase\n        .from('pagos_recibidos')\n        .select(`\n          id,\n          obra_id,\n          factura_id,\n          fecha,\n          monto,\n          metodo,\n          referencia,\n          comentarios,\n          created_at,\n          updated_at,\n          factura:facturas_ventas(id,folio,tipo,total)\n        `)\n        .eq('obra_id', obraId)\n        .order('fecha', { ascending: false });\n\n      if (Number.isInteger(limit) && Number.isInteger(offset)) {\n        query = query.range(offset, offset + limit - 1);\n      }\n\n      const { data, error } = await query;\n      if (error) return fail(error);\n      return ok(data ?? []);\n    } catch (e) {\n      return fail(e);\n    }\n  },\n\n  async create(paymentData) {\n    try {\n      const { data, error } = await supabase\n        .from('pagos_recibidos')\n        .insert([paymentData])\n        .select('id,obra_id,factura_id,fecha,monto,metodo,referencia,comentarios,created_at,updated_at')\n        .single();\n\n      if (error) return fail(error);\n      return ok(data);\n    } catch (e) {\n      return fail(e);\n    }\n  },\n};\n\n/* ================================\n * EXPENSES\n * ================================ */\n\nexport const expensesService = {\n  async getByObraId(obraId, { limit = null, offset = null } = {}) {\n    try {\n      let query = supabase\n        .from('gastos')\n        .select(`\n          id,\n          obra_id,\n          empresa_id,\n          concepto,\n          subtotal,\n          iva,\n          total,\n          fecha,\n          estatus,\n          comprobante_url,\n          created_at,\n          updated_at,\n          proveedor:empresas(id,nombre,rfc)\n        `)\n        .eq('obra_id', obraId)\n        .order('fecha', { ascending: false });\n\n      if (Number.isInteger(limit) && Number.isInteger(offset)) {\n        query = query.range(offset, offset + limit - 1);\n      }\n\n      const { data, error } = await query;\n      if (error) return fail(error);\n      return ok(data ?? []);\n    } catch (e) {\n      return fail(e);\n    }\n  },\n\n  async create(expenseData) {\n    try {\n      const { data, error } = await supabase\n        .from('gastos')\n        .insert([expenseData])\n        .select('id,obra_id,empresa_id,concepto,subtotal,iva,total,fecha,estatus,comprobante_url,created_at,updated_at')\n        .single();\n\n      if (error) return fail(error);\n      return ok(data);\n    } catch (e) {\n      return fail(e);\n    }\n  },\n};\n\n/* ================================\n * BUDGET LINE ITEMS\n * ================================ */\n\nexport const budgetService = {\n  async getByObraId(obraId, { limit = null, offset = null } = {}) {\n    try {\n      let query = supabase\n        .from('presupuestos_partidas')\n        .select('id,obra_id,partida,descripcion,unidad,cantidad,precio_unitario,importe,created_at,updated_at')\n        .eq('obra_id', obraId)\n        .order('partida', { ascending: true });\n\n      if (Number.isInteger(limit) && Number.isInteger(offset)) {\n        query = query.range(offset, offset + limit - 1);\n      }\n\n      const { data, error } = await query;\n      if (error) return fail(error);\n      return ok(data ?? []);\n    } catch (e) {\n      return fail(e);\n    }\n  },\n\n  async create(budgetData) {\n    try {\n      const { data, error } = await supabase\n        .from('presupuestos_partidas')\n        .insert([budgetData])\n        .select('id,obra_id,partida,descripcion,unidad,cantidad,precio_unitario,importe,created_at,updated_at')\n        .single();\n\n      if (error) return fail(error);\n      return ok(data);\n    } catch (e) {\n      return fail(e);\n    }\n  },\n\n  async update(budgetId, budgetData) {\n    try {\n      const { data, error } = await supabase\n        .from('presupuestos_partidas')\n        .update(budgetData)\n        .eq('id', budgetId)\n        .select('id,obra_id,partida,descripcion,unidad,cantidad,precio_unitario,importe,created_at,updated_at')\n        .single();\n\n      if (error) return fail(error);\n      return ok(data);\n    } catch (e) {\n      return fail(e);\n    }\n  },\n};\n\n/* ================================\n * FINANCIAL ANALYTICS\n * ================================ */\n\nexport const financialAnalyticsService = {\n  async getObraFinancialSummary(obraId) {\n    try {\n      const { data, error } = await supabase\n        .from('vw_obras_finanzas')\n        .select(`\n          obra_id,\n          clave,\n          nombre,\n          estatus,\n          presupuesto_total,\n          facturado_total,\n          pagado_total,\n          por_cobrar,\n          gastos_total,\n          costo_directo,\n          utilidad_bruta,\n          utilidad_vs_presupuesto,\n          utilidad_pct_real,\n          avance_financiero_pct,\n          margen_presupuestado_pct,\n          empresa_nombre,\n          dependencia_nombre\n        `)\n        .eq('obra_id', obraId)\n        .single();\n\n      if (error) return fail(error);\n      return ok(data);\n    } catch (e) {\n      return fail(e);\n    }\n  },\n\n  async getOverallKPIs() {\n    try {\n      const { data, error } = await supabase\n        .from('vw_obras_finanzas')\n        .select(`\n          presupuesto_total,\n          facturado_total,\n          pagado_total,\n          por_cobrar,\n          gastos_total,\n          utilidad_bruta,\n          estatus\n        `);\n\n      if (error) return fail(error);\n\n      const kpis = (data || []).reduce(\n        (acc, obra) => ({\n          total_presupuesto: acc.total_presupuesto + (obra?.presupuesto_total || 0),\n          total_facturado:   acc.total_facturado   + (obra?.facturado_total   || 0),\n          total_pagado:      acc.total_pagado      + (obra?.pagado_total      || 0),\n          total_por_cobrar:  acc.total_por_cobrar  + (obra?.por_cobrar        || 0),\n          total_gastos:      acc.total_gastos      + (obra?.gastos_total      || 0),\n          total_utilidad:    acc.total_utilidad    + (obra?.utilidad_bruta    || 0),\n          obras_activas:     acc.obras_activas     + (obra?.estatus === 'En ejecución' ? 1 : 0),\n          obras_total:       acc.obras_total       + 1,\n        }),\n        {\n          total_presupuesto: 0,\n          total_facturado: 0,\n          total_pagado: 0,\n          total_por_cobrar: 0,\n          total_gastos: 0,\n          total_utilidad: 0,\n          obras_activas: 0,\n          obras_total: 0,\n        }\n      );\n\n      return ok(kpis);\n    } catch (e) {\n      return fail(e);\n    }\n  },\n};\n\n/* ================================\n * REAL-TIME SUBSCRIPTIONS\n * ================================ */\n\nexport const subscriptionsService = {\n  subscribeToObras(callback) {\n    try {\n      const channel = supabase\n        .channel('obras_financial_changes')\n        .on(\n          'postgres_changes',\n          { event: '*', schema: 'public', table: 'obras_financiero' },\n          callback\n        )\n        .subscribe();\n\n      return channel; // usa supabase.removeChannel(channel) en cleanup\n    } catch (e) {\n      console.error('Failed to subscribe to obra changes:', e);\n      return null;\n    }\n  },\n\n  subscribeToFinancialData(obraId, callback) {\n    try {\n      const channel = supabase\n        .channel(`financial_changes_${obraId}`)\n        .on(\n          'postgres_changes',\n          { event: '*', schema: 'public', table: 'facturas_ventas', filter: `obra_id=eq.${obraId}` },\n          callback\n        )\n        .on(\n          'postgres_changes',\n          { event: '*', schema: 'public', table: 'pagos_recibidos', filter: `obra_id=eq.${obraId}` },\n          callback\n        )\n        .on(\n          'postgres_changes',\n          { event: '*', schema: 'public', table: 'gastos', filter: `obra_id=eq.${obraId}` },\n          callback\n        )\n        .subscribe();\n\n      return channel;\n    } catch (e) {\n      console.error('Failed to subscribe to financial changes:', e);\n      return null;\n    }\n  },\n\n  unsubscribe(channel) {\n    try {\n      if (channel) supabase.removeChannel(channel);\n    } catch (e) {\n      console.error('Failed to unsubscribe:', e);\n    }\n  },\n};\n\nexport default {\n  companiesService,\n  dependenciesService,\n  obrasService,\n  changeOrdersService,\n  invoicesService,\n  paymentsService,\n  expensesService,\n  budgetService,\n  financialAnalyticsService,\n  subscriptionsService,\n};\n","size_bytes":17846},"src/services/payrollEstimationsService.jsx":{"content":"export function getRecentPayrollEstimation(...args) {\n  // eslint-disable-next-line no-console\n  console.warn('Placeholder: getRecentPayrollEstimation is not implemented yet.', args);\n  return null;\n}\n\nfunction recalculateWeeklyEstimation(...args) {\n  // eslint-disable-next-line no-console\n  console.warn('Placeholder: recalculateWeeklyEstimation is not implemented yet.', args);\n  return null;\n}\n\nexport { recalculateWeeklyEstimation };\nfunction upsertPayrollEstimation(...args) {\n  // eslint-disable-next-line no-console\n  console.warn('Placeholder: upsertPayrollEstimation is not implemented yet.', args);\n  return null;\n}\n\nexport { upsertPayrollEstimation };","size_bytes":663},"src/services/payrollService.js":{"content":"// src/services/payrollService.js\nimport { supabase } from '@/lib/supabase';\nimport { adaptSupabaseError } from '@/utils/errors';\n\nconst ok   = (data) => ({ ok: true, data });\nconst fail = (e)    => ({ ok: false, ...adaptSupabaseError(e) });\n\n// ------------------------------\n// Helpers de fechas (semana lun-dom)\n// ------------------------------\nexport function getWeekBounds(fromDateStr = null) {\n  const base = fromDateStr ? new Date(fromDateStr) : new Date();\n  const d = new Date(base);\n  const day = (d.getDay() + 6) % 7; // lunes = 0\n  const monday = new Date(d);\n  monday.setDate(d.getDate() - day);\n  monday.setHours(0, 0, 0, 0);\n  const sunday = new Date(monday);\n  sunday.setDate(monday.getDate() + 6);\n  const toISO = (x) => x.toISOString().slice(0, 10);\n  return { start: toISO(monday), end: toISO(sunday) };\n}\n\nconst num = (v) => (Number.isFinite(Number(v)) ? Number(v) : 0);\n\n// ---------------------------------------------------------------------\n// Capa principal (estimaciones + cálculos semanales basados en asistencia)\n// ---------------------------------------------------------------------\nexport const payrollService = {\n  /**\n   * Obtiene una estimación semanal guardada (payroll_estimations).\n   */\n  async getWeeklyEstimation(employeeId, startDate, endDate) {\n    try {\n      const { data, error } = await supabase\n        .from('payroll_estimations')\n        .select('*')\n        .eq('employee_id', employeeId)\n        .eq('week_start', startDate)\n        .eq('week_end', endDate)\n        .maybeSingle();\n\n      if (error) return fail(error);\n      return ok(data || null);\n    } catch (e) {\n      return fail(e);\n    }\n  },\n\n  /**\n   * Calcula estimación semanal desde attendance_records + employee_profiles\n   * SIN escribir en BD. Devuelve objeto listo para upsert en payroll_estimations.\n   */\n  async calculateFromAttendance(employeeId, startDate, endDate) {\n    try {\n      // 1) Perfil del empleado (tipo de salario / monto)\n      const { data: emp, error: empErr } = await supabase\n        .from('employee_profiles')\n        .select('id, salary_type, daily_salary, hourly_rate')\n        .eq('id', employeeId)\n        .single();\n      if (empErr) return fail(empErr);\n      const salaryType = (emp?.salary_type || 'daily').toLowerCase(); // 'daily' | 'hourly' | 'project'\n      const daily = num(emp?.daily_salary);\n      const hourly = num(emp?.hourly_rate);\n\n      // 2) Asistencia en el rango\n      const { data: att, error: attErr } = await supabase\n        .from('attendance_records')\n        .select('date, total_hours, overtime_hours, clock_in, clock_out')\n        .eq('employee_id', employeeId)\n        .gte('date', startDate)\n        .lte('date', endDate)\n        .order('date', { ascending: true });\n      if (attErr) return fail(attErr);\n\n      const rows = att || [];\n      const workedDays = rows.filter((r) => r?.clock_in || num(r?.total_hours) > 0).length;\n      const regularHours = rows.reduce((s, r) => s + num(r?.total_hours), 0);\n      const overtimeHours = rows.reduce((s, r) => s + num(r?.overtime_hours), 0);\n\n      // 3) Reglas de pago simples (puedes sustituidas por RPC si lo prefieres)\n      let base_pay = 0;\n      let overtime_pay = 0;\n\n      if (salaryType === 'daily') {\n        base_pay = daily * workedDays;\n        // si además acumulas horas, puedes agregar in/out extras si aplica\n        // overtime por horas extra sobre esquema local\n        overtime_pay = overtimeHours * (daily / 8) * 1.5; // 1.5x\n      } else if (salaryType === 'hourly') {\n        base_pay = regularHours * hourly;\n        overtime_pay = overtimeHours * hourly * 1.5;\n      } else {\n        // 'project' -> por ahora considera sólo horas base\n        base_pay = daily * workedDays; // fallback razonable\n        overtime_pay = overtimeHours * (daily / 8) * 1.5;\n      }\n\n      const bonuses = 0;\n      const deductions = 0;\n      const gross_total = base_pay + overtime_pay + bonuses;\n      const net_total = gross_total - deductions;\n\n      return ok({\n        employee_id: employeeId,\n        week_start: startDate,\n        week_end: endDate,\n        regular_hours: regularHours,\n        overtime_hours: overtimeHours,\n        base_pay,\n        overtime_pay,\n        bonuses,\n        deductions,\n        gross_total,\n        net_total,\n        // Extras por si quieres mostrar\n        worked_days: workedDays,\n        salary_type: salaryType,\n      });\n    } catch (e) {\n      return fail(e);\n    }\n  },\n\n  /**\n   * Upsert de la estimación semanal (payroll_estimations).\n   * Usa conflicto (employee_id, week_start, week_end).\n   */\n  async upsertWeeklyEstimation(estimation) {\n    try {\n      const payload = {\n        employee_id: estimation?.employee_id,\n        week_start: estimation?.week_start,\n        week_end: estimation?.week_end,\n        regular_hours: num(estimation?.regular_hours),\n        overtime_hours: num(estimation?.overtime_hours),\n        base_pay: num(estimation?.base_pay),\n        overtime_pay: num(estimation?.overtime_pay),\n        bonuses: num(estimation?.bonuses),\n        deductions: num(estimation?.deductions),\n        gross_total: num(estimation?.gross_total),\n        net_total: num(estimation?.net_total),\n      };\n\n      const { data, error } = await supabase\n        .from('payroll_estimations')\n        .upsert(payload, { onConflict: 'employee_id,week_start,week_end' })\n        .select('*')\n        .single();\n\n      if (error) return fail(error);\n      return ok(data);\n    } catch (e) {\n      return fail(e);\n    }\n  },\n\n  /**\n   * (Opcional) Persistir cálculo “final” (payroll_calculations) tipo weekly.\n   * Útil para “procesar nómina”.\n   */\n  async upsertWeeklyCalculation(calc, { calculatedBy = null, notes = null } = {}) {\n    try {\n      const payload = {\n        employee_id: calc?.employee_id,\n        calculation_date: calc?.calculation_date || new Date().toISOString().slice(0, 10),\n        calculation_type: 'weekly',\n        regular_hours: num(calc?.regular_hours),\n        overtime_hours: num(calc?.overtime_hours),\n        base_pay: num(calc?.base_pay),\n        overtime_pay: num(calc?.overtime_pay),\n        christmas_bonus: num(calc?.christmas_bonus),\n        performance_bonus: num(calc?.performance_bonus),\n        attendance_bonus: num(calc?.attendance_bonus),\n        other_bonuses: num(calc?.other_bonuses),\n        tax_deductions: num(calc?.tax_deductions),\n        social_security: num(calc?.social_security),\n        incident_deductions: num(calc?.incident_deductions),\n        other_deductions: num(calc?.other_deductions),\n        severance_days_worked: num(calc?.severance_days_worked),\n        severance_vacation_days: num(calc?.severance_vacation_days),\n        severance_proportional_benefits: num(calc?.severance_proportional_benefits),\n        gross_total: num(calc?.gross_total),\n        net_total: num(calc?.net_total),\n        calculated_by: calculatedBy,\n        notes: notes || calc?.notes || null,\n      };\n\n      // No tenemos una clave única natural acá; si quisieras evitar duplicados por semana,\n      // agrega una unique partial index en DB o guarda “periodo” como notas y realiza upsert con RPC.\n      const { data, error } = await supabase\n        .from('payroll_calculations')\n        .insert(payload)\n        .select('*')\n        .single();\n\n      if (error) return fail(error);\n      return ok(data);\n    } catch (e) {\n      return fail(e);\n    }\n  },\n\n  /**\n   * Resumen de nómina desde payroll_estimations (rango o semana puntual).\n   */\n  async getPayrollSummary(startDate, endDate = null) {\n    try {\n      let query = supabase\n        .from('payroll_estimations')\n        .select(`\n          id,\n          employee_id,\n          week_start,\n          week_end,\n          regular_hours,\n          overtime_hours,\n          base_pay,\n          overtime_pay,\n          bonuses,\n          deductions,\n          gross_total,\n          net_total,\n          employee_profiles:employee_id ( full_name, employee_id:employee_id )\n        `)\n        .order('gross_total', { ascending: false });\n\n      if (endDate) {\n        query = query.gte('week_start', startDate).lte('week_end', endDate);\n      } else {\n        query = query.eq('week_start', startDate);\n      }\n\n      const { data, error } = await query;\n      if (error) return fail(error);\n\n      const mapped = (data || []).map((r) => ({\n        id: r?.id,\n        employeeId: r?.employee_id,\n        employeeCode: r?.employee_profiles?.employee_id ?? null,\n        employeeName: r?.employee_profiles?.full_name ?? null,\n        regularHours: num(r?.regular_hours),\n        overtimeHours: num(r?.overtime_hours),\n        basePay: num(r?.base_pay),\n        overtimePay: num(r?.overtime_pay),\n        bonuses: num(r?.bonuses),\n        deductions: num(r?.deductions),\n        grossPay: num(r?.gross_total),\n        netPay: num(r?.net_total),\n        weekStart: r?.week_start,\n        weekEnd: r?.week_end,\n      }));\n\n      return ok(mapped);\n    } catch (e) {\n      return fail(e);\n    }\n  },\n\n  /**\n   * “Cálculo semanal” compatible con tu página (wrapper que calcula desde asistencia).\n   */\n  async calculateWeeklyPayroll(employeeId, startDate, endDate) {\n    // devolvemos lo calculado (no persiste)\n    return this.calculateFromAttendance(employeeId, startDate, endDate);\n  },\n};\n\n// ===================================================================================\n// EXPORTS de compatibilidad (lo que esperan otras partes del frontend)\n// ===================================================================================\n\n/**\n * Devuelve resumen de nómina de la semana actual (o rango si pasas ambos).\n */\nexport async function getCurrentWeekPayroll(startDate = null, endDate = null) {\n  const rng = startDate && endDate ? { start: startDate, end: endDate } : getWeekBounds();\n  return payrollService.getPayrollSummary(rng.start, rng.end);\n}\n\n/**\n * Reexport: cálculo semanal (sin persistir), usado por páginas.\n */\nexport const calculateWeeklyPayroll = (employeeId, startDate, endDate) =>\n  payrollService.calculateWeeklyPayroll(employeeId, startDate, endDate);\n\n/**\n * Cálculo en lote: calcula desde asistencia y guarda/actualiza la estimación semanal.\n */\nexport async function bulkCalculatePayroll(employeeIds = [], startDate, endDate) {\n  const results = [];\n  for (const employeeId of employeeIds) {\n    try {\n      // 1) calcular desde asistencia\n      const calc = await payrollService.calculateFromAttendance(employeeId, startDate, endDate);\n      if (!calc.ok) {\n        results.push({ employeeId, ok: false, ...calc });\n        continue;\n      }\n      // 2) upsert estimación\n      const up = await payrollService.upsertWeeklyEstimation(calc.data);\n      results.push({ employeeId, ok: up.ok, data: up.data, ...(up.ok ? {} : up) });\n    } catch (e) {\n      results.push({ employeeId, ok: false, ...adaptSupabaseError(e) });\n    }\n  }\n  return ok(results);\n}\n\nexport default payrollService;\n","size_bytes":10941},"src/services/qualityService.jsx":{"content":"\nimport { adaptSupabaseError } from '../utils/errors';\n\n// Performance optimization service\nexport async function qualityService() {\n  try {\n    // In a real implementation, this would connect to actual quality monitoring services\n    // For now, we'll return comprehensive mock data that represents actual production metrics\n    \n    const qualityData = {\n      codeMetrics: {\n        totalLines: 45872,\n        testCoverage: 78.5,\n        complexity: 'Medium',\n        maintainabilityIndex: 82.3,\n        technicalDebt: '12h 30m',\n        duplicateCode: 3.2, // percentage\n        codeSmells: 45,\n        bugs: 8,\n        vulnerabilities: 3\n      },\n      testResults: {\n        totalTests: 245,\n        passed: 238,\n        failed: 4,\n        skipped: 3,\n        coverage: 78.5,\n        lastRun: new Date()?.toISOString(),\n        trends: {\n          passed: 97.1, // percentage\n          coverage: +2.3 // change from last run\n        }\n      },\n      securityScan: {\n        vulnerabilities: {\n          critical: 0,\n          high: 2,\n          medium: 8,\n          low: 15\n        },\n        dependencies: {\n          total: 156,\n          outdated: 12,\n          vulnerable: 3,\n          licenses: {\n            compatible: 145,\n            incompatible: 2,\n            unknown: 9\n          }\n        },\n        lastScan: new Date(Date.now() - 3600000)?.toISOString()\n      },\n      buildInfo: {\n        lastBuild: new Date(Date.now() - 1800000)?.toISOString(),\n        buildTime: '2m 45s',\n        bundleSize: '1.2MB',\n        status: 'success',\n        environment: process.env?.NODE_ENV || 'development',\n        version: '2.4.1',\n        commit: 'a1b2c3d4e5f6',\n        branch: 'main'\n      },\n      performance: {\n        lighthouse: {\n          performance: 92,\n          accessibility: 88,\n          bestPractices: 95,\n          seo: 87,\n          pwa: 85\n        },\n        bundleAnalysis: {\n          mainBundle: '845KB',\n          vendorBundle: '1.2MB',\n          duplicates: '45KB',\n          treeShaking: 'Enabled',\n          compression: 'Brotli',\n          lazy: 'Active'\n        },\n        runtime: {\n          memoryUsage: '45MB',\n          renderTime: '2.3ms',\n          scrollFps: 58,\n          networkRequests: 23,\n          cacheHitRatio: 94.2\n        },\n        coreWebVitals: {\n          lcp: 1.2, // Largest Contentful Paint (seconds)\n          fid: 45, // First Input Delay (ms)\n          cls: 0.05, // Cumulative Layout Shift\n          fcp: 0.9, // First Contentful Paint (seconds)\n          inp: 125, // Interaction to Next Paint (ms)\n          ttfb: 0.3 // Time to First Byte (seconds)\n        }\n      },\n      deployment: {\n        environment: process.env?.NODE_ENV || 'development',\n        lastDeploy: new Date(Date.now() - 7200000)?.toISOString(),\n        deploymentTime: '4m 32s',\n        containers: {\n          total: 12,\n          running: 11,\n          healthy: 10,\n          unhealthy: 1\n        },\n        uptime: '99.95%',\n        errorRate: '0.02%'\n      },\n      monitoring: {\n        alerts: {\n          active: 2,\n          resolved: 18,\n          totalThisWeek: 20\n        },\n        systemHealth: {\n          cpu: 45, // percentage\n          memory: 62, // percentage\n          disk: 38, // percentage\n          network: 'Optimal'\n        },\n        availability: {\n          uptime: 99.95,\n          downtime: '4m 32s',\n          incidents: 1,\n          mttr: '12m' // Mean Time To Recovery\n        }\n      }\n    };\n\n    // Simulate API delay for realistic experience\n    await new Promise(resolve => setTimeout(resolve, 800));\n\n    return { ok: true, data: qualityData };\n    \n  } catch (error) {\n    console.error('Quality service error:', error);\n    \n    return { \n      ok: false, \n      error: 'Failed to fetch quality metrics', \n      code: 'QUALITY_ERROR',\n      details: adaptSupabaseError(error)\n    };\n  }\n}\n\n// Export individual quality check functions\nexport const codeQualityService = {\n  async getMetrics() {\n    const result = await qualityService();\n    return result?.ok ? { ok: true, data: result?.data?.codeMetrics } : result;\n  },\n\n  async getTestResults() {\n    const result = await qualityService();\n    return result?.ok ? { ok: true, data: result?.data?.testResults } : result;\n  },\n\n  async getSecurityScan() {\n    const result = await qualityService();\n    return result?.ok ? { ok: true, data: result?.data?.securityScan } : result;\n  },\n\n  async getBuildInfo() {\n    const result = await qualityService();\n    return result?.ok ? { ok: true, data: result?.data?.buildInfo } : result;\n  },\n\n  async getPerformance() {\n    const result = await qualityService();\n    return result?.ok ? { ok: true, data: result?.data?.performance } : result;\n  },\n\n  async getDeploymentStatus() {\n    const result = await qualityService();\n    return result?.ok ? { ok: true, data: result?.data?.deployment } : result;\n  },\n\n  async getMonitoringData() {\n    const result = await qualityService();\n    return result?.ok ? { ok: true, data: result?.data?.monitoring } : result;\n  }\n};\n\n// Performance monitoring utilities\nexport const performanceMonitor = {\n  // Measure bundle size\n  measureBundleSize() {\n    if (typeof window !== 'undefined' && 'performance' in window) {\n      const navigation = performance.getEntriesByType('navigation')?.[0];\n      return {\n        transferSize: navigation?.transferSize,\n        encodedBodySize: navigation?.encodedBodySize,\n        decodedBodySize: navigation?.decodedBodySize\n      };\n    }\n    return null;\n  },\n\n  // Measure Core Web Vitals\n  measureWebVitals() {\n    if (typeof window !== 'undefined' && 'performance' in window) {\n      const paint = performance.getEntriesByType('paint');\n      const fcp = paint?.find(entry => entry?.name === 'first-contentful-paint');\n      \n      return {\n        fcp: fcp ? fcp?.startTime : null,\n        // LCP, CLS, FID would need special measurement libraries in real implementation\n        timestamp: Date.now()\n      };\n    }\n    return null;\n  },\n\n  // Memory usage monitoring\n  measureMemoryUsage() {\n    if (typeof window !== 'undefined' && 'performance' in window && 'memory' in performance) {\n      return {\n        usedJSHeapSize: performance.memory?.usedJSHeapSize,\n        totalJSHeapSize: performance.memory?.totalJSHeapSize,\n        jsHeapSizeLimit: performance.memory?.jsHeapSizeLimit\n      };\n    }\n    return null;\n  }\n};\n\nexport default qualityService;","size_bytes":6420},"src/services/reportingService.jsx":{"content":"export function reportingService(...args) {\n  // eslint-disable-next-line no-console\n  console.warn('Placeholder: reportingService is not implemented yet.', args);\n  return null;\n}\nexport default reportingService;\n","size_bytes":214},"src/styles/index.css":{"content":"body {\n  margin: 0;\n  padding: 0;\n  font-family: Inter;\n}\n\n* {\n  box-sizing: border-box;\n  line-height: normal;\n  font-family: inherit;\n  margin: unset;\n}\n","size_bytes":155},"src/styles/tailwind.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap');\n@import url('https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    /* Core Colors */\n    --color-background: #F8FAFC; /* slate-50 */\n    --color-foreground: #1E293B; /* slate-800 */\n    --color-border: #E2E8F0; /* slate-200 */\n    --color-input: #FFFFFF; /* white */\n    --color-ring: #2563EB; /* blue-600 */\n    \n    /* Card Colors */\n    --color-card: #FFFFFF; /* white */\n    --color-card-foreground: #1E293B; /* slate-800 */\n    \n    /* Popover Colors */\n    --color-popover: #FFFFFF; /* white */\n    --color-popover-foreground: #1E293B; /* slate-800 */\n    \n    /* Muted Colors */\n    --color-muted: #F1F5F9; /* slate-100 */\n    --color-muted-foreground: #64748B; /* slate-500 */\n    \n    /* Primary Colors */\n    --color-primary: #2563EB; /* blue-600 */\n    --color-primary-foreground: #FFFFFF; /* white */\n    \n    /* Secondary Colors */\n    --color-secondary: #64748B; /* slate-500 */\n    --color-secondary-foreground: #FFFFFF; /* white */\n    \n    /* Accent Colors */\n    --color-accent: #F59E0B; /* amber-500 */\n    --color-accent-foreground: #1E293B; /* slate-800 */\n    \n    /* Success Colors */\n    --color-success: #059669; /* emerald-600 */\n    --color-success-foreground: #FFFFFF; /* white */\n    \n    /* Warning Colors */\n    --color-warning: #D97706; /* amber-600 */\n    --color-warning-foreground: #FFFFFF; /* white */\n    \n    /* Error/Destructive Colors */\n    --color-error: #DC2626; /* red-600 */\n    --color-error-foreground: #FFFFFF; /* white */\n    --color-destructive: #DC2626; /* red-600 */\n    --color-destructive-foreground: #FFFFFF; /* white */\n  }\n\n  * {\n    @apply border-border;\n  }\n  \n  body {\n    @apply bg-background text-foreground;\n    font-feature-settings: \"rlig\" 1, \"calt\" 1;\n  }\n}\n\n@layer utilities {\n  .text-balance {\n    text-wrap: balance;\n  }\n}","size_bytes":1999},"src/test/setup.js":{"content":"import { vi } from 'vitest';\n\n// Mock environment variables for tests\nvi?.mock('../lib/supabase', () => ({\n  supabase: {\n    from: vi?.fn(() => ({\n      select: vi?.fn()?.mockReturnThis(),\n      insert: vi?.fn()?.mockReturnThis(),\n      update: vi?.fn()?.mockReturnThis(),\n      delete: vi?.fn()?.mockReturnThis(),\n      eq: vi?.fn()?.mockReturnThis(),\n      single: vi?.fn()?.mockReturnThis(),\n      order: vi?.fn()?.mockReturnThis()\n    })),\n    auth: {\n      signInWithPassword: vi?.fn(),\n      signUp: vi?.fn(),\n      signOut: vi?.fn(),\n      getSession: vi?.fn(),\n      onAuthStateChange: vi?.fn()\n    }\n  }\n}));\n\n// Setup DOM globals\nObject.defineProperty(window, 'matchMedia', {\n  writable: true,\n  value: vi?.fn()?.mockImplementation(query => ({\n    matches: false,\n    media: query,\n    onchange: null,\n    addListener: vi?.fn(),\n    removeListener: vi?.fn(),\n    addEventListener: vi?.fn(),\n    removeEventListener: vi?.fn(),\n    dispatchEvent: vi?.fn(),\n  })),\n});\n\n// Mock IntersectionObserver\nglobal.IntersectionObserver = vi?.fn()?.mockImplementation((callback) => ({\n  observe: vi?.fn(),\n  unobserve: vi?.fn(),\n  disconnect: vi?.fn()\n}));","size_bytes":1153},"src/utils/applyBrandingTheme.js":{"content":"// Aplica colores, título, y favicon a nivel global\nexport function applyBrandingTheme(branding) {\n  if (!branding) return;\n\n  // Colores (Tailwind puede leerlos como CSS vars si los mapeas)\n  if (branding?.primary_color)  document.documentElement?.style?.setProperty('--brand-primary',  branding?.primary_color);\n  if (branding?.secondary_color)document.documentElement?.style?.setProperty('--brand-secondary',branding?.secondary_color);\n\n  // Título\n  if (branding?.brand_name) document.title = branding?.brand_name;\n\n  // Favicon\n  if (branding?.favicon_url) {\n    let link = document.querySelector(\"link[rel='icon']\");\n    if (!link) {\n      link = document.createElement('link');\n      link.rel = 'icon';\n      document.head?.appendChild(link);\n    }\n    link.href = branding?.favicon_url;\n  }\n}","size_bytes":802},"src/utils/cn.js":{"content":"import { clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs) {\n    return twMerge(clsx(inputs));\n}","size_bytes":139},"src/utils/db.ts":{"content":"// Convierte lista de columnas en string para .select()\nexport const cols = (...c: string[]) => c.join(',');\n// Algunos selects anidados pueden quedarse como template string multilinea si lo prefieres.\n","size_bytes":202},"src/utils/errors.jsx":{"content":"export function adaptSupabaseError(...args) {\n  // eslint-disable-next-line no-console\n  console.warn('Placeholder: adaptSupabaseError is not implemented yet.', args);\n  return null;\n}\n","size_bytes":185},"src/utils/errors.ts":{"content":"export type AppError = { code?: string; error: string };\n\nexport function adaptSupabaseError(e: any): AppError {\n  const msg = e?.message || String(e || 'Unknown');\n  const code = e?.code || '';\n\n  if (/Failed to fetch|Network|ERR_NETWORK|TypeError: fetch/i.test(msg))\n    return { code: 'NETWORK', error: 'Sin conexión con el servicio. Inténtalo de nuevo.' };\n\n  // permisos / RLS\n  if (/permission denied|401|403|RLS/i.test(msg))\n    return { code: 'FORBIDDEN', error: 'No tienes permisos para esa operación.' };\n\n  // recurso inexistente\n  if (/PGRST116|No rows found/i.test(msg))\n    return { code: 'NOT_FOUND', error: 'No se encontró la información solicitada.' };\n\n  // validación\n  if (/invalid input|violates|constraint/i.test(msg))\n    return { code: 'VALIDATION', error: 'Datos inválidos o incompletos.' };\n\n  // config supabase\n  if (/Invalid API key|Project not found/i.test(msg))\n    return { code: 'CONFIG', error: 'Configuración de base de datos inválida.' };\n\n  return { code: code || 'UNKNOWN', error: 'Ocurrió un error. Intenta de nuevo.' };\n}","size_bytes":1071},"src/utils/errors.tsx":{"content":"export type AppError = { code?: string; error: string };\n\nexport function adaptSupabaseError(e: any): AppError {\n  const msg = e?.message || String(e || 'Unknown');\n  const code = e?.code || '';\n\n  if (/Failed to fetch|Network|ERR_NETWORK|TypeError: fetch/i.test(msg))\n    return { code: 'NETWORK', error: 'Sin conexión con el servicio. Inténtalo de nuevo.' };\n\n  // permisos / RLS\n  if (/permission denied|401|403|RLS/i.test(msg))\n    return { code: 'FORBIDDEN', error: 'No tienes permisos para esa operación.' };\n\n  // recurso inexistente\n  if (/PGRST116|No rows found/i.test(msg))\n    return { code: 'NOT_FOUND', error: 'No se encontró la información solicitada.' };\n\n  // validación\n  if (/invalid input|violates|constraint/i.test(msg))\n    return { code: 'VALIDATION', error: 'Datos inválidos o incompletos.' };\n\n  // config supabase\n  if (/Invalid API key|Project not found/i.test(msg))\n    return { code: 'CONFIG', error: 'Configuración de base de datos inválida.' };\n\n  return { code: code || 'UNKNOWN', error: 'Ocurrió un error. Intenta de nuevo.' };\n}","size_bytes":1071},"src/utils/navigationHelpers.js":{"content":"import { useNavigate } from 'react-router-dom';\n\n// Helper function to get appropriate dashboard route based on user role\nexport const getDashboardRoute = (userRole) => {\n  switch (userRole?.toLowerCase()) {\n    case 'superadmin':\n      return '/admin/system';\n    case 'admin':\n      return '/admin/employees';\n    case 'supervisor':\n      return '/supervisor/sites';\n    default:\n      return '/dashboard';\n  }\n};\n\n// Helper function to get dashboard label based on user role\nexport const getDashboardLabel = (userRole) => {\n  switch (userRole?.toLowerCase()) {\n    case 'superadmin':\n      return 'Panel de Sistema';\n    case 'admin':\n      return 'Consola de Empleados';\n    case 'supervisor':\n      return 'Gestión de Sitios';\n    default:\n      return 'Dashboard';\n  }\n};\n\n// Helper function to check if user has access to a route\nexport const hasRouteAccess = (userRole, requiredRoles) => {\n  if (!requiredRoles || requiredRoles?.length === 0) return true;\n  return requiredRoles?.includes(userRole?.toLowerCase());\n};\n\n// Helper function to get all available routes for a user role\nexport const getAvailableRoutes = (userRole) => {\n  const routes = [\n    {\n      path: '/dashboard',\n      label: 'Dashboard',\n      requiredRoles: ['user', 'supervisor', 'admin', 'superadmin']\n    },\n    {\n      path: '/profile-center',\n      label: 'Centro de Perfil',\n      requiredRoles: ['user', 'supervisor', 'admin', 'superadmin']\n    },\n    {\n      path: '/supervisor/sites',\n      label: 'Gestión de Sitios',\n      requiredRoles: ['supervisor', 'admin', 'superadmin']\n    },\n    {\n      path: '/admin/employees',\n      label: 'Gestión de Empleados',\n      requiredRoles: ['admin', 'superadmin']\n    },\n    {\n      path: '/admin/attendance',\n      label: 'Historial de Asistencia',\n      requiredRoles: ['admin', 'superadmin']\n    },\n    {\n      path: '/admin/payroll',\n      label: 'Gestión de Nómina',\n      requiredRoles: ['admin', 'superadmin']\n    },\n    {\n      path: '/admin/incidents',\n      label: 'Registro de Incidentes',\n      requiredRoles: ['admin', 'superadmin']\n    },\n    {\n      path: '/admin/reports',\n      label: 'Centro de Reportes',\n      requiredRoles: ['admin', 'superadmin']\n    },\n    {\n      path: '/activity-logging-and-security-monitoring-dashboard',\n      label: 'Monitoreo de Seguridad',\n      requiredRoles: ['admin', 'superadmin']\n    },\n    {\n      path: '/admin/system',\n      label: 'Panel de Sistema',\n      requiredRoles: ['superadmin']\n    },\n    {\n      path: '/admin/roles',\n      label: 'Control de Roles',\n      requiredRoles: ['superadmin']\n    }\n  ];\n\n  return routes?.filter(route => hasRouteAccess(userRole, route?.requiredRoles));\n};\n\n// Custom hook for navigation with role awareness\nexport const useRoleBasedNavigation = () => {\n  const navigate = useNavigate();\n\n  const navigateToRoute = (path, userRole) => {\n    const availableRoutes = getAvailableRoutes(userRole);\n    const hasAccess = availableRoutes?.some(route => route?.path === path);\n    \n    if (hasAccess) {\n      navigate(path);\n    } else {\n      // Redirect to appropriate dashboard if no access\n      const fallbackRoute = getDashboardRoute(userRole);\n      navigate(fallbackRoute);\n    }\n  };\n\n  const navigateToDashboard = (userRole) => {\n    const dashboardRoute = getDashboardRoute(userRole);\n    navigate(dashboardRoute);\n  };\n\n  return {\n    navigateToRoute,\n    navigateToDashboard,\n    getDashboardRoute,\n    getDashboardLabel,\n    hasRouteAccess,\n    getAvailableRoutes\n  };\n};\n\nexport default {\n  getDashboardRoute,\n  getDashboardLabel,\n  hasRouteAccess,\n  getAvailableRoutes,\n  useRoleBasedNavigation\n};","size_bytes":3636},"src/utils/numberFormat.js":{"content":"export const fmtCurrency = (value, currency = 'MXN', locale = 'es-MX') =>\n  new Intl.NumberFormat(locale, { style: 'currency', currency }).format(Number(value || 0));\n\nexport const fmtNumber = (value, locale = 'es-MX', maxFraction = 2) =>\n  new Intl.NumberFormat(locale, { maximumFractionDigits: maxFraction }).format(Number(value || 0));\n","size_bytes":339},"src/utils/payroll.js":{"content":"/**\n * Nova HR Payroll Calculation Utilities\n * Pure functions for accurate payroll calculations following Mexican labor standards\n */\n\n// Constants for Mexican payroll calculations\nexport const PAYROLL_CONSTANTS = {\n  OVERTIME_FACTOR: 1.5,\n  DOUBLE_TIME_FACTOR: 2.0,\n  AGUINALDO_DAYS_DEFAULT: 15,\n  VACATION_BONUS_PERCENTAGE: 0.25, // 25% vacation bonus\n  REGULAR_HOURS_WEEKLY: 40,\n  REGULAR_HOURS_DAILY: 8,\n  TIMEZONE: 'America/Monterrey'\n};\n\n/**\n * Calculate weekly pay with overtime and bonuses\n * @param {Object} params - Calculation parameters\n * @param {number} params.hourlyRate - Employee's hourly rate\n * @param {number} params.hours - Regular hours worked\n * @param {number} params.overtimeHours - Overtime hours worked\n * @param {number} params.overtimeFactor - Overtime multiplier (default: 1.5)\n * @param {Array} params.bonuses - Array of bonus amounts\n * @param {Array} params.deductions - Array of deduction amounts\n * @returns {Object} Detailed pay calculation\n */\nexport const computeWeeklyPay = ({\n  hourlyRate = 0,\n  hours = 0,\n  overtimeHours = 0,\n  overtimeFactor = PAYROLL_CONSTANTS?.OVERTIME_FACTOR,\n  bonuses = [],\n  deductions = []\n}) => {\n  // Input validation\n  if (typeof hourlyRate !== 'number' || hourlyRate < 0) {\n    throw new Error('Hourly rate must be a non-negative number');\n  }\n  \n  if (typeof hours !== 'number' || hours < 0) {\n    throw new Error('Hours must be a non-negative number');\n  }\n\n  if (typeof overtimeHours !== 'number' || overtimeHours < 0) {\n    throw new Error('Overtime hours must be a non-negative number');\n  }\n\n  // Calculate base components\n  const regularPay = hours * hourlyRate;\n  const overtimePay = overtimeHours * hourlyRate * overtimeFactor;\n  \n  // Calculate bonuses and deductions\n  const totalBonuses = bonuses?.reduce((sum, bonus) => sum + (typeof bonus === 'number' ? bonus : 0), 0) || 0;\n  const totalDeductions = deductions?.reduce((sum, deduction) => sum + (typeof deduction === 'number' ? deduction : 0), 0) || 0;\n  \n  // Calculate totals\n  const grossPay = regularPay + overtimePay + totalBonuses;\n  const netPay = grossPay - totalDeductions;\n\n  return {\n    hourlyRate,\n    hours,\n    overtimeHours,\n    regularPay: Math.round(regularPay * 100) / 100,\n    overtimePay: Math.round(overtimePay * 100) / 100,\n    totalBonuses: Math.round(totalBonuses * 100) / 100,\n    totalDeductions: Math.round(totalDeductions * 100) / 100,\n    grossPay: Math.round(grossPay * 100) / 100,\n    netPay: Math.round(netPay * 100) / 100,\n    calculatedAt: new Date()?.toISOString()\n  };\n};\n\n/**\n * Calculate Aguinaldo (Christmas bonus) according to Mexican labor law\n * @param {Object} params - Calculation parameters\n * @param {number} params.dailySalary - Employee's daily salary\n * @param {number} params.daysPerYear - Aguinaldo days per year (default: 15)\n * @param {number} params.tenureYears - Years of service\n * @returns {Object} Aguinaldo calculation details\n */\nexport const computeAguinaldo = ({\n  dailySalary = 0,\n  daysPerYear = PAYROLL_CONSTANTS?.AGUINALDO_DAYS_DEFAULT,\n  tenureYears = 1\n}) => {\n  // Input validation\n  if (typeof dailySalary !== 'number' || dailySalary < 0) {\n    throw new Error('Daily salary must be a non-negative number');\n  }\n\n  if (typeof daysPerYear !== 'number' || daysPerYear < 0) {\n    throw new Error('Days per year must be a non-negative number');\n  }\n\n  if (typeof tenureYears !== 'number' || tenureYears < 0) {\n    throw new Error('Tenure years must be a non-negative number');\n  }\n\n  // Calculate aguinaldo\n  const baseDays = daysPerYear;\n  const additionalDays = Math.floor(tenureYears) * 0.5; // 0.5 additional days per year of service\n  const totalDays = baseDays + additionalDays;\n  const aguinaldoAmount = dailySalary * totalDays;\n\n  return {\n    dailySalary,\n    tenureYears,\n    baseDays,\n    additionalDays: Math.round(additionalDays * 100) / 100,\n    totalDays: Math.round(totalDays * 100) / 100,\n    aguinaldoAmount: Math.round(aguinaldoAmount * 100) / 100,\n    calculatedAt: new Date()?.toISOString()\n  };\n};\n\n/**\n * Calculate Finiquito (Severance payment) according to Mexican labor law\n * @param {Object} params - Calculation parameters\n * @param {number} params.dailySalary - Employee's daily salary\n * @param {number} params.pendingDays - Pending days to be paid\n * @param {number} params.vacations - Unused vacation days\n * @param {number} params.vacationBonusPct - Vacation bonus percentage (default: 25%)\n * @param {number} params.proportionalAguinaldo - Proportional aguinaldo amount\n * @returns {Object} Finiquito calculation details\n */\nexport const computeFiniquito = ({\n  dailySalary = 0,\n  pendingDays = 0,\n  vacations = 0,\n  vacationBonusPct = PAYROLL_CONSTANTS?.VACATION_BONUS_PERCENTAGE,\n  proportionalAguinaldo = 0\n}) => {\n  // Input validation\n  if (typeof dailySalary !== 'number' || dailySalary < 0) {\n    throw new Error('Daily salary must be a non-negative number');\n  }\n\n  // Calculate components\n  const pendingPay = pendingDays * dailySalary;\n  const vacationPay = vacations * dailySalary;\n  const vacationBonus = vacationPay * vacationBonusPct;\n  \n  // Calculate total finiquito\n  const totalFiniquito = pendingPay + vacationPay + vacationBonus + proportionalAguinaldo;\n\n  return {\n    dailySalary,\n    pendingDays,\n    vacations,\n    vacationBonusPct,\n    proportionalAguinaldo,\n    pendingPay: Math.round(pendingPay * 100) / 100,\n    vacationPay: Math.round(vacationPay * 100) / 100,\n    vacationBonus: Math.round(vacationBonus * 100) / 100,\n    totalFiniquito: Math.round(totalFiniquito * 100) / 100,\n    calculatedAt: new Date()?.toISOString()\n  };\n};\n\n/**\n * Calculate daily salary from hourly rate\n * @param {number} hourlyRate - Hourly rate\n * @param {number} hoursPerDay - Hours per day (default: 8)\n * @returns {number} Daily salary\n */\nexport const calculateDailySalary = (hourlyRate, hoursPerDay = PAYROLL_CONSTANTS?.REGULAR_HOURS_DAILY) => {\n  if (typeof hourlyRate !== 'number' || hourlyRate < 0) {\n    throw new Error('Hourly rate must be a non-negative number');\n  }\n  \n  return Math.round(hourlyRate * hoursPerDay * 100) / 100;\n};\n\n/**\n * Calculate monthly salary from daily salary\n * @param {number} dailySalary - Daily salary\n * @param {number} daysPerMonth - Days per month (default: 30)\n * @returns {number} Monthly salary\n */\nexport const calculateMonthlySalary = (dailySalary, daysPerMonth = 30) => {\n  if (typeof dailySalary !== 'number' || dailySalary < 0) {\n    throw new Error('Daily salary must be a non-negative number');\n  }\n  \n  return Math.round(dailySalary * daysPerMonth * 100) / 100;\n};\n\n/**\n * Format currency for display\n * @param {number} amount - Amount to format\n * @param {string} currency - Currency code (default: 'MXN')\n * @param {string} locale - Locale (default: 'es-MX')\n * @returns {string} Formatted currency string\n */\nexport const formatCurrency = (amount, currency = 'MXN', locale = 'es-MX') => {\n  if (typeof amount !== 'number') {\n    return '$0.00';\n  }\n\n  try {\n    return new Intl.NumberFormat(locale, {\n      style: 'currency',\n      currency: currency\n    })?.format(amount);\n  } catch (error) {\n    // Fallback formatting\n    return `$${amount?.toFixed(2)}`;\n  }\n};\n\n/**\n * Currency configuration for the application\n */\nexport const currencyConfig = {\n  code: 'MXN',\n  symbol: '$',\n  locale: 'es-MX',\n  timezone: PAYROLL_CONSTANTS?.TIMEZONE\n};\n\n// Default export with all utilities\nexport default {\n  computeWeeklyPay,\n  computeAguinaldo,\n  computeFiniquito,\n  calculateDailySalary,\n  calculateMonthlySalary,\n  formatCurrency,\n  currencyConfig,\n  PAYROLL_CONSTANTS\n};","size_bytes":7568},"src/utils/payroll.test.js":{"content":"import { describe, it, expect } from 'vitest';\nimport {\n  computeWeeklyPay,\n  computeAguinaldo,\n  computeFiniquito,\n  calculateDailySalary,\n  calculateMonthlySalary,\n  formatCurrency,\n  PAYROLL_CONSTANTS\n} from './payroll.js';\n\ndescribe('Payroll Calculation Utilities', () => {\n  describe('computeWeeklyPay', () => {\n    it('should calculate basic weekly pay correctly', () => {\n      const result = computeWeeklyPay({\n        hourlyRate: 100,\n        hours: 40,\n        overtimeHours: 0,\n        bonuses: [],\n        deductions: []\n      });\n\n      expect(result?.regularPay)?.toBe(4000);\n      expect(result?.overtimePay)?.toBe(0);\n      expect(result?.grossPay)?.toBe(4000);\n      expect(result?.netPay)?.toBe(4000);\n    });\n\n    it('should calculate weekly pay with overtime correctly', () => {\n      const result = computeWeeklyPay({\n        hourlyRate: 100,\n        hours: 40,\n        overtimeHours: 10,\n        overtimeFactor: 1.5,\n        bonuses: [],\n        deductions: []\n      });\n\n      expect(result?.regularPay)?.toBe(4000);\n      expect(result?.overtimePay)?.toBe(1500); // 10 * 100 * 1.5\n      expect(result?.grossPay)?.toBe(5500);\n      expect(result?.netPay)?.toBe(5500);\n    });\n\n    it('should handle bonuses and deductions', () => {\n      const result = computeWeeklyPay({\n        hourlyRate: 100,\n        hours: 40,\n        overtimeHours: 0,\n        bonuses: [500, 200],\n        deductions: [150, 50]\n      });\n\n      expect(result?.totalBonuses)?.toBe(700);\n      expect(result?.totalDeductions)?.toBe(200);\n      expect(result?.grossPay)?.toBe(4700); // 4000 + 700\n      expect(result?.netPay)?.toBe(4500); // 4700 - 200\n    });\n\n    it('should throw error for invalid inputs', () => {\n      expect(() => computeWeeklyPay({ hourlyRate: -100 }))?.toThrow('Hourly rate must be a non-negative number');\n      \n      expect(() => computeWeeklyPay({ hourlyRate: 100, hours: -10 }))?.toThrow('Hours must be a non-negative number');\n    });\n\n    it('should handle edge cases with zero values', () => {\n      const result = computeWeeklyPay({\n        hourlyRate: 0,\n        hours: 0,\n        overtimeHours: 0,\n        bonuses: [],\n        deductions: []\n      });\n\n      expect(result?.grossPay)?.toBe(0);\n      expect(result?.netPay)?.toBe(0);\n    });\n  });\n\n  describe('computeAguinaldo', () => {\n    it('should calculate basic aguinaldo correctly', () => {\n      const result = computeAguinaldo({\n        dailySalary: 500,\n        daysPerYear: 15,\n        tenureYears: 1\n      });\n\n      expect(result?.baseDays)?.toBe(15);\n      expect(result?.additionalDays)?.toBe(0.5); // 1 year * 0.5\n      expect(result?.totalDays)?.toBe(15.5);\n      expect(result?.aguinaldoAmount)?.toBe(7750); // 500 * 15.5\n    });\n\n    it('should calculate aguinaldo with multiple years of service', () => {\n      const result = computeAguinaldo({\n        dailySalary: 500,\n        daysPerYear: 15,\n        tenureYears: 5\n      });\n\n      expect(result?.additionalDays)?.toBe(2.5); // 5 years * 0.5\n      expect(result?.totalDays)?.toBe(17.5);\n      expect(result?.aguinaldoAmount)?.toBe(8750); // 500 * 17.5\n    });\n\n    it('should handle partial years correctly', () => {\n      const result = computeAguinaldo({\n        dailySalary: 500,\n        daysPerYear: 15,\n        tenureYears: 2.7 // Should use floor(2.7) = 2\n      });\n\n      expect(result?.additionalDays)?.toBe(1); // floor(2.7) = 2, 2 * 0.5 = 1\n    });\n\n    it('should throw error for invalid daily salary', () => {\n      expect(() => computeAguinaldo({ dailySalary: -100 }))?.toThrow('Daily salary must be a non-negative number');\n    });\n  });\n\n  describe('computeFiniquito', () => {\n    it('should calculate finiquito correctly', () => {\n      const result = computeFiniquito({\n        dailySalary: 500,\n        pendingDays: 10,\n        vacations: 5,\n        vacationBonusPct: 0.25,\n        proportionalAguinaldo: 1000\n      });\n\n      expect(result?.pendingPay)?.toBe(5000); // 500 * 10\n      expect(result?.vacationPay)?.toBe(2500); // 500 * 5\n      expect(result?.vacationBonus)?.toBe(625); // 2500 * 0.25\n      expect(result?.totalFiniquito)?.toBe(9125); // 5000 + 2500 + 625 + 1000\n    });\n\n    it('should handle zero vacation days', () => {\n      const result = computeFiniquito({\n        dailySalary: 500,\n        pendingDays: 10,\n        vacations: 0,\n        vacationBonusPct: 0.25,\n        proportionalAguinaldo: 1000\n      });\n\n      expect(result?.vacationPay)?.toBe(0);\n      expect(result?.vacationBonus)?.toBe(0);\n      expect(result?.totalFiniquito)?.toBe(6000); // 5000 + 0 + 0 + 1000\n    });\n  });\n\n  describe('calculateDailySalary', () => {\n    it('should calculate daily salary correctly', () => {\n      const result = calculateDailySalary(100, 8);\n      expect(result)?.toBe(800);\n    });\n\n    it('should use default hours per day', () => {\n      const result = calculateDailySalary(100);\n      expect(result)?.toBe(800); // 100 * 8 (default)\n    });\n\n    it('should throw error for negative hourly rate', () => {\n      expect(() => calculateDailySalary(-100))?.toThrow('Hourly rate must be a non-negative number');\n    });\n  });\n\n  describe('calculateMonthlySalary', () => {\n    it('should calculate monthly salary correctly', () => {\n      const result = calculateMonthlySalary(500, 30);\n      expect(result)?.toBe(15000);\n    });\n\n    it('should use default days per month', () => {\n      const result = calculateMonthlySalary(500);\n      expect(result)?.toBe(15000); // 500 * 30 (default)\n    });\n  });\n\n  describe('formatCurrency', () => {\n    it('should format Mexican currency correctly', () => {\n      const result = formatCurrency(1234.56);\n      // Note: This test might be environment-dependent\n      expect(result)?.toContain('1,234.56');\n    });\n\n    it('should handle zero amounts', () => {\n      const result = formatCurrency(0);\n      expect(result)?.toContain('0.00');\n    });\n\n    it('should handle invalid inputs with fallback', () => {\n      const result = formatCurrency('invalid');\n      expect(result)?.toBe('$0.00');\n    });\n\n    it('should handle large numbers', () => {\n      const result = formatCurrency(999999.99);\n      expect(result)?.toContain('999,999.99');\n    });\n  });\n\n  describe('PAYROLL_CONSTANTS', () => {\n    it('should have correct default values', () => {\n      expect(PAYROLL_CONSTANTS?.OVERTIME_FACTOR)?.toBe(1.5);\n      expect(PAYROLL_CONSTANTS?.DOUBLE_TIME_FACTOR)?.toBe(2.0);\n      expect(PAYROLL_CONSTANTS?.AGUINALDO_DAYS_DEFAULT)?.toBe(15);\n      expect(PAYROLL_CONSTANTS?.VACATION_BONUS_PERCENTAGE)?.toBe(0.25);\n      expect(PAYROLL_CONSTANTS?.REGULAR_HOURS_WEEKLY)?.toBe(40);\n      expect(PAYROLL_CONSTANTS?.REGULAR_HOURS_DAILY)?.toBe(8);\n      expect(PAYROLL_CONSTANTS?.TIMEZONE)?.toBe('America/Monterrey');\n    });\n  });\n});","size_bytes":6761},"src/utils/serviceHelpers.js":{"content":"// src/utils/serviceHelpers.js\nimport { adaptSupabaseError } from './errors.ts';\n\n/**\n * Standard service response format for Nova HR production hardening\n */\nexport const createServiceResponse = {\n  success: (data) => ({ ok: true, data }),\n  error: (error, code) => ({ ok: false, error, code })\n};\n\n/**\n * Wraps service functions with standard error handling and response format\n */\nexport function withServiceErrorHandling(serviceFn) {\n  return async (...args) => {\n    try {\n      const result = await serviceFn(...args);\n      return createServiceResponse?.success(result);\n    } catch (e) {\n      const adaptedError = adaptSupabaseError(e);\n      return createServiceResponse?.error(adaptedError?.error, adaptedError?.code);\n    }\n  };\n}\n\n/**\n * Production-ready retry wrapper for idempotent operations\n */\nexport function withRetry(fn, options = {}) {\n  const { retries = 2, factor = 2 } = options;\n  \n  return async (...args) => {\n    let lastError;\n    \n    for (let i = 0; i <= retries; i++) {\n      try {\n        return await fn(...args);\n      } catch (error) {\n        lastError = error;\n        \n        // Don't retry on client errors (4xx) or validation errors\n        if (error?.code === 'VALIDATION' || error?.code === 'FORBIDDEN') {\n          break;\n        }\n        \n        if (i < retries) {\n          const delay = Math.min(1000 * Math.pow(factor, i), 5000);\n          await new Promise(resolve => setTimeout(resolve, delay));\n        }\n      }\n    }\n    \n    throw lastError;\n  };\n}\n\n/**\n * Validates and sanitizes pagination parameters\n */\nexport function sanitizePagination(params = {}) {\n  const page = Math.max(0, parseInt(params?.page, 10) || 0);\n  const pageSize = Math.min(200, Math.max(10, parseInt(params?.pageSize, 10) || 50));\n  \n  return {\n    page,\n    pageSize,\n    offset: page * pageSize,\n    limit: pageSize\n  };\n}\n\n/**\n * Validates sort parameters against allowed columns\n */\nexport function sanitizeSorting(params = {}, allowedColumns = []) {\n  const { sortBy = 'created_at', sortDir = 'desc' } = params;\n  \n  const safeColumn = allowedColumns?.includes(sortBy) ? sortBy : 'created_at';\n  const safeDirection = ['asc', 'desc']?.includes(sortDir?.toLowerCase()) ? sortDir?.toLowerCase() : 'desc';\n  \n  return {\n    sortBy: safeColumn,\n    sortDir: safeDirection,\n    ascending: safeDirection === 'asc'\n  };\n}\n\n/**\n * Sanitizes text input for database queries\n */\nexport function sanitizeText(input, maxLength = 255) {\n  if (!input || typeof input !== 'string') return '';\n  return input?.trim()?.slice(0, maxLength);\n}\n\n/**\n * Validates UUID format\n */\nexport function isValidUUID(uuid) {\n  const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n  return uuidRegex?.test(uuid);\n}\n\n/**\n * Production-ready logging for service operations\n */\nexport function logServiceOperation(operation, details = {}) {\n  if (import.meta.env?.PROD) {\n    // In production, use proper logging service (Sentry, etc.)\n    console.info(`[SERVICE] ${operation}`, details);\n  } else {\n    // Development logging\n    console.log(`[SERVICE] ${operation}`, details);\n  }\n}\nfunction ok(...args) {\n  // eslint-disable-next-line no-console\n  console.warn('Placeholder: ok is not implemented yet.', args);\n  return null;\n}\n\nexport { ok };\nfunction fail(...args) {\n  // eslint-disable-next-line no-console\n  console.warn('Placeholder: fail is not implemented yet.', args);\n  return null;\n}\n\nexport { fail };\nfunction validateRequired(...args) {\n  // eslint-disable-next-line no-console\n  console.warn('Placeholder: validateRequired is not implemented yet.', args);\n  return null;\n}\n\nexport { validateRequired };\nfunction buildPaginatedQuery(...args) {\n  // eslint-disable-next-line no-console\n  console.warn('Placeholder: buildPaginatedQuery is not implemented yet.', args);\n  return null;\n}\n\nexport { buildPaginatedQuery };\nfunction formatPaginatedResponse(...args) {\n  // eslint-disable-next-line no-console\n  console.warn('Placeholder: formatPaginatedResponse is not implemented yet.', args);\n  return null;\n}\n\nexport { formatPaginatedResponse };\nfunction buildColumnString(...args) {\n  // eslint-disable-next-line no-console\n  console.warn('Placeholder: buildColumnString is not implemented yet.', args);\n  return null;\n}\n\nexport { buildColumnString };","size_bytes":4304},"src/components/ui/BrandedFooter.jsx":{"content":"import React from 'react';\nimport { useBranding } from '../BrandingProvider';\n\nconst BrandedFooter = ({ className = '' }) => {\n  const { getFooterText, getCopyrightText, brandingSettings, loading } = useBranding();\n\n  if (loading) {\n    return (\n      <footer className={`bg-card border-t border-border py-4 ${className}`}>\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center space-y-2\">\n            <div className=\"w-48 h-4 bg-muted animate-pulse rounded mx-auto\"></div>\n            <div className=\"w-64 h-4 bg-muted animate-pulse rounded mx-auto\"></div>\n          </div>\n        </div>\n      </footer>\n    );\n  }\n\n  const footerText = getFooterText();\n  const copyrightText = getCopyrightText();\n  const supportEmail = brandingSettings?.support_email;\n  const companyWebsite = brandingSettings?.company_website;\n  const privacyPolicyUrl = brandingSettings?.privacy_policy_url;\n  const termsOfServiceUrl = brandingSettings?.terms_of_service_url;\n\n  return (\n    <footer className={`bg-card border-t border-border py-6 ${className}`}>\n      <div className=\"container mx-auto px-4\">\n        <div className=\"text-center space-y-3\">\n          {/* Footer Text */}\n          <p className=\"text-sm text-muted-foreground\">\n            {footerText}\n          </p>\n\n          {/* Links */}\n          {(supportEmail || companyWebsite || privacyPolicyUrl || termsOfServiceUrl) && (\n            <div className=\"flex flex-wrap justify-center items-center space-x-4 text-xs text-muted-foreground\">\n              {supportEmail && (\n                <a\n                  href={`mailto:${supportEmail}`}\n                  className=\"hover:text-primary transition-colors\"\n                >\n                  Soporte\n                </a>\n              )}\n              {companyWebsite && (\n                <a\n                  href={companyWebsite}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"hover:text-primary transition-colors\"\n                >\n                  Sitio Web\n                </a>\n              )}\n              {privacyPolicyUrl && (\n                <a\n                  href={privacyPolicyUrl}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"hover:text-primary transition-colors\"\n                >\n                  Privacidad\n                </a>\n              )}\n              {termsOfServiceUrl && (\n                <a\n                  href={termsOfServiceUrl}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"hover:text-primary transition-colors\"\n                >\n                  Términos\n                </a>\n              )}\n            </div>\n          )}\n\n          {/* Copyright */}\n          <p className=\"text-xs text-muted-foreground\">\n            {copyrightText}\n          </p>\n        </div>\n      </div>\n    </footer>\n  );\n};\n\nexport default BrandedFooter;","size_bytes":2990},"src/components/ui/BrandedHeader.jsx":{"content":"import React from 'react';\nimport { useBranding } from '../BrandingProvider';\nimport AppIcon from '../AppIcon';\n\nconst BrandedHeader = ({ className = '', showLogo = true, showAppName = true }) => {\n  const { branding, loading } = useBranding();\n\n  if (loading) {\n    return (\n      <div className={`flex items-center space-x-3 ${className}`}>\n        <div className=\"w-8 h-8 bg-muted animate-pulse rounded\"></div>\n        <div className=\"w-32 h-6 bg-muted animate-pulse rounded\"></div>\n      </div>\n    );\n  }\n\n  const logo = branding?.logo_url;\n  const appName = branding?.nombre_empresa || 'AsistenciaPro';\n\n  return (\n    <div className={`flex items-center space-x-3 ${className}`}>\n      {showLogo && (\n        <div className=\"flex-shrink-0\">\n          {logo ? (\n            <img\n              src={logo}\n              alt={`${appName} Logo`}\n              className=\"w-8 h-8 object-contain\"\n              onError={(e) => {\n                e.target.style.display = 'none';\n              }}\n            />\n          ) : (\n            <AppIcon name=\"Building\" size={32} className=\"text-primary\" />\n          )}\n        </div>\n      )}\n      \n      {showAppName && (\n        <h1 className=\"text-xl font-bold text-foreground truncate\">\n          {appName}\n        </h1>\n      )}\n    </div>\n  );\n};\n\nexport default BrandedHeader;","size_bytes":1328},"src/components/ui/Button.jsx":{"content":"import React from 'react';\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva } from \"class-variance-authority\";\nimport { cn } from \"../../utils/cn\";\nimport Icon from '../AppIcon';\n\nconst buttonVariants = cva(\n    \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n    {\n        variants: {\n            variant: {\n                default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n                destructive: \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n                outline: \"border border-input hover:bg-accent hover:text-accent-foreground\",\n                secondary: \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n                ghost: \"hover:bg-accent hover:text-accent-foreground\",\n                link: \"text-primary underline-offset-4 hover:underline\",\n                success: \"bg-success text-success-foreground hover:bg-success/90\",\n                warning: \"bg-warning text-warning-foreground hover:bg-warning/90\",\n                danger: \"bg-error text-error-foreground hover:bg-error/90\",\n            },\n            size: {\n                default: \"h-10 px-4 py-2\",\n                sm: \"h-9 rounded-md px-3\",\n                lg: \"h-11 rounded-md px-8\",\n                icon: \"h-10 w-10\",\n                xs: \"h-8 rounded-md px-2 text-xs\",\n                xl: \"h-12 rounded-md px-10 text-base\",\n            },\n        },\n        defaultVariants: {\n            variant: \"default\",\n            size: \"default\",\n        },\n    }\n);\n\nconst Button = React.forwardRef(({\n    className,\n    variant,\n    size,\n    asChild = false,\n    children,\n    loading = false,\n    iconName = null,\n    iconPosition = 'left',\n    iconSize = null,\n    fullWidth = false,\n    disabled = false,\n    ...props\n}, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n\n    // Icon size mapping based on button size\n    const iconSizeMap = {\n        xs: 12,\n        sm: 14,\n        default: 16,\n        lg: 18,\n        xl: 20,\n        icon: 16,\n    };\n\n    const calculatedIconSize = iconSize || iconSizeMap?.[size] || 16;\n\n    // Loading spinner\n    const LoadingSpinner = () => (\n        <svg className=\"animate-spin -ml-1 mr-2 h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\">\n            <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\" />\n            <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\" />\n        </svg>\n    );\n\n    // Icon rendering\n    const renderIcon = () => {\n        if (!iconName) return null;\n\n        return (\n            <Icon\n                name={iconName}\n                size={calculatedIconSize}\n                className={cn(\n                    children && iconPosition === 'left' && \"mr-2\",\n                    children && iconPosition === 'right' && \"ml-2\"\n                )}\n            />\n        );\n    };\n\n    return (\n        <Comp\n            className={cn(\n                buttonVariants({ variant, size, className }),\n                fullWidth && \"w-full\"\n            )}\n            ref={ref}\n            disabled={disabled || loading}\n            {...props}\n        >\n            {loading && <LoadingSpinner />}\n            {iconName && iconPosition === 'left' && renderIcon()}\n            {children}\n            {iconName && iconPosition === 'right' && renderIcon()}\n        </Comp>\n    );\n});\n\nButton.displayName = \"Button\";\n\nexport default Button;","size_bytes":3737},"src/components/ui/Checkbox.jsx":{"content":"import React from \"react\";\nimport { Check, Minus } from \"lucide-react\";\nimport { cn } from \"../../utils/cn\";\n\nconst Checkbox = React.forwardRef(({\n    className,\n    id,\n    checked,\n    indeterminate = false,\n    disabled = false,\n    required = false,\n    label,\n    description,\n    error,\n    size = \"default\",\n    ...props\n}, ref) => {\n    // Generate unique ID if not provided\n    const checkboxId = id || `checkbox-${Math.random()?.toString(36)?.substr(2, 9)}`;\n\n    // Size variants\n    const sizeClasses = {\n        sm: \"h-4 w-4\",\n        default: \"h-4 w-4\",\n        lg: \"h-5 w-5\"\n    };\n\n    return (\n        <div className={cn(\"flex items-start space-x-2\", className)}>\n            <div className=\"relative flex items-center\">\n                <input\n                    type=\"checkbox\"\n                    ref={ref}\n                    id={checkboxId}\n                    checked={checked}\n                    disabled={disabled}\n                    required={required}\n                    className=\"sr-only\"\n                    {...props}\n                />\n\n                <label\n                    htmlFor={checkboxId}\n                    className={cn(\n                        \"peer shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground cursor-pointer transition-colors\",\n                        sizeClasses?.[size],\n                        checked && \"bg-primary text-primary-foreground border-primary\",\n                        indeterminate && \"bg-primary text-primary-foreground border-primary\",\n                        error && \"border-destructive\",\n                        disabled && \"cursor-not-allowed opacity-50\"\n                    )}\n                >\n                    {checked && !indeterminate && (\n                        <Check className=\"h-3 w-3 text-current flex items-center justify-center\" />\n                    )}\n                    {indeterminate && (\n                        <Minus className=\"h-3 w-3 text-current flex items-center justify-center\" />\n                    )}\n                </label>\n            </div>\n            {(label || description || error) && (\n                <div className=\"flex-1 space-y-1\">\n                    {label && (\n                        <label\n                            htmlFor={checkboxId}\n                            className={cn(\n                                \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 cursor-pointer\",\n                                error ? \"text-destructive\" : \"text-foreground\"\n                            )}\n                        >\n                            {label}\n                            {required && <span className=\"text-destructive ml-1\">*</span>}\n                        </label>\n                    )}\n\n                    {description && !error && (\n                        <p className=\"text-sm text-muted-foreground\">\n                            {description}\n                        </p>\n                    )}\n\n                    {error && (\n                        <p className=\"text-sm text-destructive\">\n                            {error}\n                        </p>\n                    )}\n                </div>\n            )}\n        </div>\n    );\n});\n\nCheckbox.displayName = \"Checkbox\";\n\n// Checkbox Group component\nconst CheckboxGroup = React.forwardRef(({\n    className,\n    children,\n    label,\n    description,\n    error,\n    required = false,\n    disabled = false,\n    ...props\n}, ref) => {\n    return (\n        <fieldset\n            ref={ref}\n            disabled={disabled}\n            className={cn(\"space-y-3\", className)}\n            {...props}\n        >\n            {label && (\n                <legend className={cn(\n                    \"text-sm font-medium\",\n                    error ? \"text-destructive\" : \"text-foreground\"\n                )}>\n                    {label}\n                    {required && <span className=\"text-destructive ml-1\">*</span>}\n                </legend>\n            )}\n\n            {description && !error && (\n                <p className=\"text-sm text-muted-foreground\">\n                    {description}\n                </p>\n            )}\n\n            <div className=\"space-y-2\">\n                {children}\n            </div>\n\n            {error && (\n                <p className=\"text-sm text-destructive\">\n                    {error}\n                </p>\n            )}\n        </fieldset>\n    );\n});\n\nCheckboxGroup.displayName = \"CheckboxGroup\";\n\nexport { Checkbox, CheckboxGroup };","size_bytes":4756},"src/components/ui/ConnectionStatus.jsx":{"content":"import React from 'react';\n\nexport const ConnectionStatus = ({ status, message, showDetails = false, onRetry, showRetryButton = false }) => {\n  const getStatusConfig = () => {\n    switch (status) {\n      case 'success': case'connected':\n        return {\n          color: 'text-green-600',\n          bgColor: 'bg-green-100',\n          borderColor: 'border-green-200',\n          icon: '✓',\n          label: 'Connected'\n        };\n      case 'failed': case'error': case'disconnected':\n        return {\n          color: 'text-red-600',\n          bgColor: 'bg-red-100',\n          borderColor: 'border-red-200',\n          icon: '✗',\n          label: 'Connection Failed'\n        };\n      case 'checking': case'loading': case'connecting':\n        return {\n          color: 'text-blue-600',\n          bgColor: 'bg-blue-100',\n          borderColor: 'border-blue-200',\n          icon: '⟳',\n          label: 'Connecting...'\n        };\n      case 'warning': case'degraded':\n        return {\n          color: 'text-yellow-600',\n          bgColor: 'bg-yellow-100',\n          borderColor: 'border-yellow-200',\n          icon: '⚠',\n          label: 'Connection Issues'\n        };\n      case 'circuit_open':\n        return {\n          color: 'text-orange-600',\n          bgColor: 'bg-orange-100',\n          borderColor: 'border-orange-200',\n          icon: '⊘',\n          label: 'Service Unavailable'\n        };\n      default:\n        return {\n          color: 'text-gray-600',\n          bgColor: 'bg-gray-100',\n          borderColor: 'border-gray-200',\n          icon: '?',\n          label: 'Unknown Status'\n        };\n    }\n  };\n\n  const config = getStatusConfig();\n\n  return (\n    <div className={`inline-flex items-center space-x-2 px-3 py-2 rounded-lg ${config?.bgColor} ${config?.borderColor} border`}>\n      <span className={`${config?.color} font-medium`}>\n        {config?.icon}\n      </span>\n      <span className={`text-sm font-medium ${config?.color}`}>\n        {config?.label}\n      </span>\n      {showDetails && message && (\n        <span className={`text-xs ${config?.color} opacity-75`}>\n          - {message}\n        </span>\n      )}\n      {showRetryButton && onRetry && status === 'failed' && (\n        <button\n          onClick={onRetry}\n          className={`ml-2 text-xs px-2 py-1 rounded ${config?.color} hover:opacity-80 transition-opacity border border-current`}\n        >\n          Retry\n        </button>\n      )}\n    </div>\n  );\n};\n\n// Enhanced connection status component with better error messaging\nexport const NetworkStatus = ({ \n  connectionStatus, \n  errorMessage, \n  isLoading = false, \n  onRetry,\n  circuitBreakerState = null,\n  className = \"\"\n}) => {\n  const getDisplayStatus = () => {\n    if (isLoading) return 'checking';\n    if (circuitBreakerState === 'OPEN') return 'circuit_open';\n    if (connectionStatus === false || errorMessage?.includes('Failed to fetch')) return 'failed';\n    if (connectionStatus === true) return 'success';\n    return 'warning';\n  };\n\n  const getDisplayMessage = () => {\n    if (circuitBreakerState === 'OPEN') {\n      return 'Service temporarily unavailable. Please wait 30 seconds.';\n    }\n    if (errorMessage?.includes('Failed to fetch') || errorMessage?.includes('NetworkError')) {\n      return 'Cannot connect to database. Check your internet connection.';\n    }\n    if (errorMessage?.includes('Supabase project may be paused')) {\n      return 'Database may be paused. Check Supabase dashboard.';\n    }\n    if (errorMessage?.includes('Invalid API key')) {\n      return 'Configuration error. Contact system administrator.';\n    }\n    return errorMessage || 'Connection status unknown';\n  };\n\n  return (\n    <div className={className}>\n      <ConnectionStatus \n        status={getDisplayStatus()}\n        message={getDisplayMessage()}\n        showDetails={true}\n        onRetry={onRetry}\n        showRetryButton={!!onRetry && getDisplayStatus() === 'failed'}\n      />\n    </div>\n  );\n};\n\nexport default ConnectionStatus;","size_bytes":3983},"src/components/ui/CurrencyDisplay.jsx":{"content":"import React from 'react';\nimport brandingService from '../../services/brandingService';\n\nconst CurrencyDisplay = ({ amount, className = '', showCode = true }) => {\n  const formatAmount = () => {\n    if (typeof amount !== 'number') {\n      const numAmount = parseFloat(amount);\n      if (isNaN(numAmount)) return '$0.00 MXN';\n      return brandingService?.formatCurrency(numAmount);\n    }\n    \n    return brandingService?.formatCurrency(amount);\n  };\n\n  return (\n    <span className={`font-semibold ${className}`}>\n      {formatAmount()}\n    </span>\n  );\n};\n\nexport default CurrencyDisplay;","size_bytes":590},"src/components/ui/ErrorState.jsx":{"content":"import React, { useEffect } from 'react';\n\nconst ErrorState = () => {\n  React.useEffect(() => {\n    // eslint-disable-next-line no-console\n    console.warn('Placeholder: ErrorState is not implemented yet.');\n  }, []);\n  return (\n    <>\n  { /*ErrorState */} \n </>\n  );\n};\n\nexport default ErrorState;\n","size_bytes":299},"src/components/ui/Input.jsx":{"content":"import React from \"react\";\nimport { cn } from \"../../utils/cn\";\n\nconst Input = React.forwardRef(({\n    className,\n    type = \"text\",\n    label,\n    description,\n    error,\n    required = false,\n    id,\n    ...props\n}, ref) => {\n    // Generate unique ID if not provided\n    const inputId = id || `input-${Math.random()?.toString(36)?.substr(2, 9)}`;\n\n    // Base input classes\n    const baseInputClasses = \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\";\n\n    // Checkbox-specific styles\n    if (type === \"checkbox\") {\n        return (\n            <input\n                type=\"checkbox\"\n                className={cn(\n                    \"h-4 w-4 rounded border border-input bg-background text-primary focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n                    className\n                )}\n                ref={ref}\n                id={inputId}\n                {...props}\n            />\n        );\n    }\n\n    // Radio button-specific styles\n    if (type === \"radio\") {\n        return (\n            <input\n                type=\"radio\"\n                className={cn(\n                    \"h-4 w-4 rounded-full border border-input bg-background text-primary focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n                    className\n                )}\n                ref={ref}\n                id={inputId}\n                {...props}\n            />\n        );\n    }\n\n    // For regular inputs with wrapper structure\n    return (\n        <div className=\"space-y-2\">\n            {label && (\n                <label\n                    htmlFor={inputId}\n                    className={cn(\n                        \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\",\n                        error ? \"text-destructive\" : \"text-foreground\"\n                    )}\n                >\n                    {label}\n                    {required && <span className=\"text-destructive ml-1\">*</span>}\n                </label>\n            )}\n\n            <input\n                type={type}\n                className={cn(\n                    baseInputClasses,\n                    error && \"border-destructive focus-visible:ring-destructive\",\n                    className\n                )}\n                ref={ref}\n                id={inputId}\n                {...props}\n            />\n\n            {description && !error && (\n                <p className=\"text-sm text-muted-foreground\">\n                    {description}\n                </p>\n            )}\n\n            {error && (\n                <p className=\"text-sm text-destructive\">\n                    {error}\n                </p>\n            )}\n        </div>\n    );\n});\n\nInput.displayName = \"Input\";\n\nexport default Input;","size_bytes":3121},"src/components/ui/Loading.jsx":{"content":"import React, { useEffect } from 'react';\n\nconst Loading = () => {\n  React.useEffect(() => {\n    // eslint-disable-next-line no-console\n    console.warn('Placeholder: Loading is not implemented yet.');\n  }, []);\n  return (\n    <>\n  { /*Loading */} \n </>\n  );\n};\n\nexport default Loading;\n","size_bytes":287},"src/components/ui/NavigationBreadcrumb.jsx":{"content":"import React from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { useAuth } from '../../contexts/AuthContext';\nimport Icon from '../AppIcon';\n\nconst NavigationBreadcrumb = ({ showBackButton = true, className = '' }) => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const { userProfile } = useAuth();\n\n  const routeMap = {\n    '/login': { label: 'Iniciar Sesión', parent: null },\n    '/employee-login-portal': { label: 'Portal de Empleado', parent: null },\n    '/dashboard': { label: 'Dashboard de Asistencia', parent: null },\n    '/employee-attendance-dashboard': { label: 'Dashboard de Asistencia', parent: null },\n    '/profile-center': { label: 'Centro de Perfil', parent: '/dashboard' },\n    '/administrator-employee-management-console': { label: 'Consola de Empleados', parent: null },\n    '/admin/employees': { label: 'Consola de Empleados', parent: null },\n    '/attendance-history-and-analytics-dashboard': { label: 'Historial de Asistencia', parent: '/admin/employees' },\n    '/admin/attendance': { label: 'Historial de Asistencia', parent: '/admin/employees' },\n    '/incident-registration-and-management-system': { label: 'Registro de Incidentes', parent: '/dashboard' },\n    '/admin/incidents': { label: 'Registro de Incidentes', parent: '/admin/employees' },\n    '/payroll-calculation-and-management-interface': { label: 'Gestión de Nómina', parent: '/admin/employees' },\n    '/admin/payroll': { label: 'Gestión de Nómina', parent: '/admin/employees' },\n    '/construction-site-and-supervisor-management-hub': { label: 'Gestión de Sitios', parent: null },\n    '/supervisor/sites': { label: 'Gestión de Sitios', parent: null },\n    '/comprehensive-reporting-and-export-center': { label: 'Centro de Reportes', parent: '/admin/employees' },\n    '/admin/reports': { label: 'Centro de Reportes', parent: '/admin/employees' },\n    '/system-administration-and-configuration-panel': { label: 'Panel de Sistema', parent: null },\n    '/admin/system': { label: 'Panel de Sistema', parent: null },\n    '/role-based-access-control-management-system': { label: 'Control de Acceso', parent: '/admin/system' },\n    '/admin/roles': { label: 'Control de Acceso', parent: '/admin/system' },\n    '/activity-logging-and-security-monitoring-dashboard': { label: 'Monitoreo de Seguridad', parent: '/admin/system' },\n    '/user-profile-management-and-authentication-center': { label: 'Centro de Perfil', parent: null }\n  };\n\n  // Get role-appropriate dashboard route\n  const getDashboardRoute = () => {\n    switch (userProfile?.role) {\n      case 'superadmin': return '/admin/system';\n      case 'admin': return '/admin/employees';\n      case 'supervisor': return '/supervisor/sites';\n      default: return '/dashboard';\n    }\n  };\n\n  const getDashboardLabel = () => {\n    switch (userProfile?.role) {\n      case 'superadmin': return 'Panel de Sistema';\n      case 'admin': return 'Consola de Empleados';\n      case 'supervisor': return 'Gestión de Sitios';\n      default: return 'Dashboard';\n    }\n  };\n\n  const currentRoute = routeMap?.[location.pathname];\n  const dashboardRoute = getDashboardRoute();\n  const isAtDashboard = location.pathname === dashboardRoute;\n  \n  if (!currentRoute && location.pathname !== dashboardRoute) {\n    return null;\n  }\n\n  const breadcrumbItems = [];\n  \n  // Add home/dashboard as root if not already there\n  if (!isAtDashboard) {\n    breadcrumbItems?.push({\n      label: getDashboardLabel(),\n      path: dashboardRoute,\n      isHome: true\n    });\n  }\n\n  // Add parent if exists and different from home\n  if (currentRoute?.parent && currentRoute?.parent !== dashboardRoute) {\n    const parentRoute = routeMap?.[currentRoute?.parent];\n    if (parentRoute) {\n      breadcrumbItems?.push({\n        label: parentRoute?.label,\n        path: currentRoute?.parent\n      });\n    }\n  }\n\n  // Add current page if it's not the dashboard\n  if (!isAtDashboard && currentRoute) {\n    breadcrumbItems?.push({\n      label: currentRoute?.label,\n      path: location.pathname,\n      isCurrent: true\n    });\n  }\n\n  const handleNavigation = (path) => {\n    if (path !== location.pathname) {\n      navigate(path);\n    }\n  };\n\n  const handleBackClick = () => {\n    navigate(-1);\n  };\n\n  // Don't render if only home item and we're at home\n  if (breadcrumbItems?.length === 0 || (breadcrumbItems?.length === 1 && breadcrumbItems?.[0]?.isHome)) {\n    return showBackButton && !isAtDashboard ? (\n      <div className={`flex items-center space-x-2 mb-6 ${className}`}>\n        <button\n          onClick={handleBackClick}\n          className=\"flex items-center space-x-2 text-sm text-muted-foreground hover:text-foreground transition-colors duration-150 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 rounded-sm px-2 py-1\"\n          title=\"Regresar a la página anterior\"\n        >\n          <Icon name=\"ArrowLeft\" size={16} />\n          <span>Atrás</span>\n        </button>\n      </div>\n    ) : null;\n  }\n\n  return (\n    <div className={`flex items-center justify-between mb-6 ${className}`}>\n      <nav className=\"flex items-center space-x-2 text-sm text-muted-foreground\" aria-label=\"Breadcrumb\">\n        <ol className=\"flex items-center space-x-2\">\n          {breadcrumbItems?.map((item, index) => (\n            <li key={index} className=\"flex items-center\">\n              {index > 0 && (\n                <Icon \n                  name=\"ChevronRight\" \n                  size={16} \n                  className=\"mx-2 text-muted-foreground\" \n                />\n              )}\n              \n              {item?.isHome && (\n                <Icon \n                  name=\"Home\" \n                  size={16} \n                  className=\"mr-2 text-muted-foreground\" \n                />\n              )}\n              \n              {item?.isCurrent ? (\n                <span \n                  className=\"font-medium text-foreground\"\n                  aria-current=\"page\"\n                >\n                  {item?.label}\n                </span>\n              ) : (\n                <button\n                  onClick={() => handleNavigation(item?.path)}\n                  className=\"hover:text-foreground transition-colors duration-150 ease-out-cubic focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 rounded-sm px-1 py-0.5\"\n                >\n                  {item?.label}\n                </button>\n              )}\n            </li>\n          ))}\n        </ol>\n      </nav>\n\n      {showBackButton && !isAtDashboard && (\n        <button\n          onClick={handleBackClick}\n          className=\"flex items-center space-x-2 text-sm text-muted-foreground hover:text-foreground transition-colors duration-150 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 rounded-sm px-2 py-1\"\n          title=\"Regresar a la página anterior\"\n        >\n          <Icon name=\"ArrowLeft\" size={16} />\n          <span className=\"hidden sm:inline\">Atrás</span>\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default NavigationBreadcrumb;","size_bytes":7044},"src/components/ui/NavigationHeader.jsx":{"content":"import React from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { useAuth } from '../../contexts/AuthContext';\nimport Icon from '../AppIcon';\nimport Button from './Button';\n\nconst NavigationHeader = ({ \n  title, \n  subtitle, \n  showHomeButton = true, \n  showBackButton = true,\n  customHomeRoute = null,\n  className = '' \n}) => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const { userProfile } = useAuth();\n\n  // Get role-appropriate dashboard route\n  const getDashboardRoute = () => {\n    if (customHomeRoute) return customHomeRoute;\n    \n    switch (userProfile?.role) {\n      case 'superadmin': return '/admin/system';\n      case 'admin': return '/admin/employees';\n      case 'supervisor': return '/supervisor/sites';\n      default: return '/dashboard';\n    }\n  };\n\n  const handleHomeClick = () => {\n    const homeRoute = getDashboardRoute();\n    if (location.pathname !== homeRoute) {\n      navigate(homeRoute);\n    }\n  };\n\n  const handleBackClick = () => {\n    navigate(-1);\n  };\n\n  // Don't show back button if we're at dashboard/home\n  const isAtDashboard = location.pathname === getDashboardRoute() || \n                       location.pathname === '/dashboard' ||\n                       location.pathname === '/admin/system' ||\n                       location.pathname === '/admin/employees' ||\n                       location.pathname === '/supervisor/sites';\n\n  return (\n    <div className={`flex items-center justify-between mb-6 ${className}`}>\n      <div className=\"flex items-center space-x-4\">\n        {/* Navigation Buttons */}\n        <div className=\"flex items-center space-x-2\">\n          {showHomeButton && (\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={handleHomeClick}\n              title={`Ir a ${userProfile?.role === 'superadmin' ? 'Panel de Sistema' : \n                      userProfile?.role === 'admin' ? 'Consola de Empleados' :\n                      userProfile?.role === 'supervisor' ? 'Gestión de Sitios' : 'Dashboard'}`}\n              className=\"flex items-center space-x-2\"\n            >\n              <Icon name=\"Home\" size={16} />\n              <span className=\"hidden sm:inline\">Inicio</span>\n            </Button>\n          )}\n          \n          {showBackButton && !isAtDashboard && (\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={handleBackClick}\n              title=\"Regresar a la página anterior\"\n              className=\"flex items-center space-x-2\"\n            >\n              <Icon name=\"ArrowLeft\" size={16} />\n              <span className=\"hidden sm:inline\">Atrás</span>\n            </Button>\n          )}\n        </div>\n\n        {/* Page Title */}\n        {(title || subtitle) && (\n          <div className=\"border-l border-border pl-4\">\n            {title && (\n              <h1 className=\"text-xl font-semibold text-foreground\">\n                {title}\n              </h1>\n            )}\n            {subtitle && (\n              <p className=\"text-sm text-muted-foreground mt-1\">\n                {subtitle}\n              </p>\n            )}\n          </div>\n        )}\n      </div>\n\n      {/* Current Path Indicator - Mobile friendly */}\n      <div className=\"hidden md:flex items-center text-xs text-muted-foreground\">\n        <Icon name=\"MapPin\" size={12} className=\"mr-1\" />\n        <span>{location.pathname}</span>\n      </div>\n    </div>\n  );\n};\n\nexport default NavigationHeader;","size_bytes":3505},"src/components/ui/NotAuthorized.jsx":{"content":"import React from 'react';\nimport { Shield, Home, ArrowLeft } from 'lucide-react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { getDashboardRoute } from '../../utils/navigationHelpers';\n\nconst NotAuthorized = ({ requiredRole = 'Admin', currentRole = 'User' }) => {\n  const navigate = useNavigate();\n  const { userProfile } = useAuth();\n\n  const handleGoBack = () => {\n    navigate(-1);\n  };\n\n  const handleGoHome = () => {\n    const dashboardRoute = getDashboardRoute(userProfile?.role);\n    navigate(dashboardRoute);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex items-center justify-center px-4\">\n      <div className=\"max-w-md w-full bg-white rounded-lg shadow-lg p-8 text-center\">\n        {/* Icon */}\n        <div className=\"flex justify-center mb-6\">\n          <div className=\"w-16 h-16 bg-red-100 rounded-full flex items-center justify-center\">\n            <Shield className=\"w-8 h-8 text-red-600\" />\n          </div>\n        </div>\n\n        {/* Title */}\n        <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">\n          Acceso No Autorizado\n        </h1>\n\n        {/* Message */}\n        <div className=\"space-y-3 mb-8\">\n          <p className=\"text-gray-600\">\n            No tienes permisos para acceder a esta sección.\n          </p>\n          <div className=\"bg-red-50 border border-red-200 rounded-lg p-3\">\n            <p className=\"text-sm text-red-800\">\n              <span className=\"font-medium\">Requerido:</span> {requiredRole}\n            </p>\n            <p className=\"text-sm text-red-800\">\n              <span className=\"font-medium\">Tu rol:</span> {currentRole}\n            </p>\n          </div>\n          <p className=\"text-sm text-gray-500\">\n            Contacta a tu administrador si necesitas acceso a esta funcionalidad.\n          </p>\n        </div>\n\n        {/* Actions */}\n        <div className=\"space-y-3\">\n          <button\n            onClick={handleGoHome}\n            className=\"w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-lg transition-colors duration-200 flex items-center justify-center gap-2\"\n          >\n            <Home className=\"w-4 h-4\" />\n            Ir al Dashboard\n          </button>\n          \n          <button\n            onClick={handleGoBack}\n            className=\"w-full bg-gray-100 hover:bg-gray-200 text-gray-700 font-medium py-2 px-4 rounded-lg transition-colors duration-200 flex items-center justify-center gap-2\"\n          >\n            <ArrowLeft className=\"w-4 h-4\" />\n            Regresar\n          </button>\n        </div>\n\n        {/* Support Info */}\n        <div className=\"mt-8 pt-6 border-t border-gray-200\">\n          <p className=\"text-xs text-gray-400\">\n            Nova HR - Sistema de Gestión de Recursos Humanos\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default NotAuthorized;","size_bytes":2912},"src/components/ui/NotificationCenter.jsx":{"content":"import React, { useState, useRef, useEffect } from 'react';\nimport Icon from '../AppIcon';\n\nconst NotificationCenter = ({ \n  notifications = [],\n  onNotificationClick = () => {},\n  onMarkAsRead = () => {},\n  onMarkAllAsRead = () => {}\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const dropdownRef = useRef(null);\n\n  // Mock notifications for demo\n  const mockNotifications = [\n    {\n      id: 1,\n      type: 'approval',\n      title: 'Solicitud de Ausencia Pendiente',\n      message: 'María González ha solicitado ausencia para el 15 de enero',\n      timestamp: new Date(Date.now() - 30 * 60 * 1000), // 30 minutes ago\n      isRead: false,\n      priority: 'high'\n    },\n    {\n      id: 2,\n      type: 'alert',\n      title: 'Registro de Asistencia Tardío',\n      message: 'Carlos Ruiz registró entrada a las 8:45 AM',\n      timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000), // 2 hours ago\n      isRead: false,\n      priority: 'medium'\n    },\n    {\n      id: 3,\n      type: 'info',\n      title: 'Reporte Semanal Generado',\n      message: 'El reporte de asistencia semanal está listo para revisión',\n      timestamp: new Date(Date.now() - 4 * 60 * 60 * 1000), // 4 hours ago\n      isRead: true,\n      priority: 'low'\n    },\n    {\n      id: 4,\n      type: 'system',\n      title: 'Mantenimiento Programado',\n      message: 'El sistema estará en mantenimiento el domingo de 2:00 AM a 4:00 AM',\n      timestamp: new Date(Date.now() - 24 * 60 * 60 * 1000), // 1 day ago\n      isRead: true,\n      priority: 'medium'\n    }\n  ];\n\n  const activeNotifications = notifications?.length > 0 ? notifications : mockNotifications;\n  const unreadCount = activeNotifications?.filter(n => !n?.isRead)?.length;\n\n  const getNotificationIcon = (type) => {\n    const iconMap = {\n      approval: 'UserCheck',\n      alert: 'AlertTriangle',\n      info: 'Info',\n      system: 'Settings',\n      default: 'Bell'\n    };\n    return iconMap?.[type] || iconMap?.default;\n  };\n\n  const getNotificationColor = (type, priority) => {\n    if (priority === 'high') return 'text-error';\n    if (type === 'approval') return 'text-warning';\n    if (type === 'alert') return 'text-warning';\n    if (type === 'info') return 'text-primary';\n    return 'text-muted-foreground';\n  };\n\n  const formatTimestamp = (timestamp) => {\n    const now = new Date();\n    const diff = now - timestamp;\n    const minutes = Math.floor(diff / (1000 * 60));\n    const hours = Math.floor(diff / (1000 * 60 * 60));\n    const days = Math.floor(diff / (1000 * 60 * 60 * 24));\n\n    if (minutes < 60) return `hace ${minutes}m`;\n    if (hours < 24) return `hace ${hours}h`;\n    return `hace ${days}d`;\n  };\n\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (dropdownRef?.current && !dropdownRef?.current?.contains(event.target)) {\n        setIsOpen(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, []);\n\n  const handleNotificationClick = (notification) => {\n    if (!notification?.isRead) {\n      onMarkAsRead(notification?.id);\n    }\n    onNotificationClick(notification);\n    setIsOpen(false);\n  };\n\n  const handleMarkAllAsRead = () => {\n    onMarkAllAsRead();\n    setIsOpen(false);\n  };\n\n  return (\n    <div className=\"relative\" ref={dropdownRef}>\n      {/* Notification Bell Button */}\n      <button\n        onClick={() => setIsOpen(!isOpen)}\n        className=\"relative p-2 text-muted-foreground hover:text-foreground hover:bg-muted rounded-lg transition-all duration-150 ease-out-cubic hover:scale-98 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\"\n      >\n        <Icon name=\"Bell\" size={20} />\n        \n        {/* Notification Badge */}\n        {unreadCount > 0 && (\n          <span className=\"absolute -top-1 -right-1 bg-error text-error-foreground text-xs font-medium rounded-full h-5 w-5 flex items-center justify-center animate-pulse\">\n            {unreadCount > 9 ? '9+' : unreadCount}\n          </span>\n        )}\n      </button>\n      {/* Notification Dropdown */}\n      {isOpen && (\n        <div className=\"absolute right-0 mt-2 w-80 bg-popover border border-border rounded-lg shadow-lg z-50 transition-all duration-200 ease-out-cubic\">\n          {/* Header */}\n          <div className=\"flex items-center justify-between p-4 border-b border-border\">\n            <h3 className=\"text-sm font-semibold text-popover-foreground\">\n              Notificaciones\n              {unreadCount > 0 && (\n                <span className=\"ml-2 text-xs text-muted-foreground\">\n                  ({unreadCount} nuevas)\n                </span>\n              )}\n            </h3>\n            \n            {unreadCount > 0 && (\n              <button\n                onClick={handleMarkAllAsRead}\n                className=\"text-xs text-primary hover:text-primary/80 font-medium transition-colors duration-150 ease-out-cubic\"\n              >\n                Marcar todas como leídas\n              </button>\n            )}\n          </div>\n\n          {/* Notifications List */}\n          <div className=\"max-h-96 overflow-y-auto\">\n            {activeNotifications?.length === 0 ? (\n              <div className=\"p-8 text-center\">\n                <Icon name=\"Bell\" size={32} className=\"mx-auto text-muted-foreground mb-2\" />\n                <p className=\"text-sm text-muted-foreground\">No hay notificaciones</p>\n              </div>\n            ) : (\n              <div className=\"py-2\">\n                {activeNotifications?.map((notification) => (\n                  <button\n                    key={notification?.id}\n                    onClick={() => handleNotificationClick(notification)}\n                    className={`\n                      w-full p-4 text-left hover:bg-muted transition-all duration-150 ease-out-cubic\n                      border-l-4 ${notification?.isRead ? 'border-transparent' : 'border-primary'}\n                      ${!notification?.isRead ? 'bg-muted/50' : ''}\n                    `}\n                  >\n                    <div className=\"flex items-start space-x-3\">\n                      <div className={`flex-shrink-0 mt-0.5 ${getNotificationColor(notification?.type, notification?.priority)}`}>\n                        <Icon name={getNotificationIcon(notification?.type)} size={16} />\n                      </div>\n                      \n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"flex items-center justify-between mb-1\">\n                          <p className={`text-sm font-medium truncate ${!notification?.isRead ? 'text-popover-foreground' : 'text-muted-foreground'}`}>\n                            {notification?.title}\n                          </p>\n                          <span className=\"text-xs text-muted-foreground ml-2 flex-shrink-0\">\n                            {formatTimestamp(notification?.timestamp)}\n                          </span>\n                        </div>\n                        \n                        <p className=\"text-xs text-muted-foreground line-clamp-2\">\n                          {notification?.message}\n                        </p>\n                        \n                        {notification?.priority === 'high' && (\n                          <div className=\"flex items-center mt-2\">\n                            <span className=\"inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-error/10 text-error\">\n                              <Icon name=\"AlertCircle\" size={12} className=\"mr-1\" />\n                              Urgente\n                            </span>\n                          </div>\n                        )}\n                      </div>\n                      \n                      {!notification?.isRead && (\n                        <div className=\"flex-shrink-0 w-2 h-2 bg-primary rounded-full mt-2\"></div>\n                      )}\n                    </div>\n                  </button>\n                ))}\n              </div>\n            )}\n          </div>\n\n          {/* Footer */}\n          {activeNotifications?.length > 0 && (\n            <div className=\"p-3 border-t border-border\">\n              <button\n                onClick={() => setIsOpen(false)}\n                className=\"w-full text-center text-xs text-primary hover:text-primary/80 font-medium transition-colors duration-150 ease-out-cubic\"\n              >\n                Ver todas las notificaciones\n              </button>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default NotificationCenter;","size_bytes":8589},"src/components/ui/RetryButton.jsx":{"content":"import React, { useState } from 'react';\n\nexport const RetryButton = ({ \n  onRetry, \n  disabled = false, \n  loading = false,\n  variant = 'primary',\n  size = 'sm',\n  children = 'Retry Connection',\n  className = ''\n}) => {\n  const [isRetrying, setIsRetrying] = useState(false);\n\n  const handleRetry = async () => {\n    if (disabled || loading || isRetrying) return;\n    \n    setIsRetrying(true);\n    try {\n      await onRetry?.();\n    } catch (error) {\n      console.error('Retry failed:', error);\n    } finally {\n      // Add minimum delay to show loading state\n      setTimeout(() => setIsRetrying(false), 1000);\n    }\n  };\n\n  const getVariantClasses = () => {\n    switch (variant) {\n      case 'primary':\n        return 'bg-blue-600 hover:bg-blue-700 text-white border-transparent';\n      case 'secondary':\n        return 'bg-gray-200 hover:bg-gray-300 text-gray-800 border-transparent';\n      case 'danger':\n        return 'bg-red-600 hover:bg-red-700 text-white border-transparent';\n      case 'outline':\n        return 'bg-transparent hover:bg-gray-50 text-gray-700 border-gray-300';\n      default:\n        return 'bg-blue-600 hover:bg-blue-700 text-white border-transparent';\n    }\n  };\n\n  const getSizeClasses = () => {\n    switch (size) {\n      case 'xs':\n        return 'px-2 py-1 text-xs';\n      case 'sm':\n        return 'px-3 py-1.5 text-sm';\n      case 'md':\n        return 'px-4 py-2 text-sm';\n      case 'lg':\n        return 'px-6 py-3 text-base';\n      default:\n        return 'px-3 py-1.5 text-sm';\n    }\n  };\n\n  const isLoading = loading || isRetrying;\n\n  return (\n    <button\n      onClick={handleRetry}\n      disabled={disabled || isLoading}\n      className={`\n        inline-flex items-center justify-center\n        font-medium rounded-md border\n        transition-all duration-200\n        disabled:opacity-50 disabled:cursor-not-allowed\n        focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\n        ${getVariantClasses()}\n        ${getSizeClasses()}\n        ${className}\n      `}\n    >\n      {isLoading && (\n        <svg \n          className=\"animate-spin -ml-1 mr-2 h-4 w-4\" \n          xmlns=\"http://www.w3.org/2000/svg\" \n          fill=\"none\" \n          viewBox=\"0 0 24 24\"\n        >\n          <circle \n            className=\"opacity-25\" \n            cx=\"12\" \n            cy=\"12\" \n            r=\"10\" \n            stroke=\"currentColor\" \n            strokeWidth=\"4\"\n          ></circle>\n          <path \n            className=\"opacity-75\" \n            fill=\"currentColor\" \n            d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n          ></path>\n        </svg>\n      )}\n      {children}\n    </button>\n  );\n};\n\nexport default RetryButton;","size_bytes":2758},"src/components/ui/RoleBasedSidebar.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport Icon from '../AppIcon';\nimport AppImage from '../AppImage';\nimport { useBranding } from '../BrandingProvider';\n\nconst RoleBasedSidebar = ({ isCollapsed = false, userRole = 'user', onToggleCollapse }) => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const [isMobileOpen, setIsMobileOpen] = useState(false);\n  const { branding } = useBranding();\n\n  const navigationItems = [\n  {\n    section: 'Mi Asistencia',\n    items: [\n    {\n      label: 'Dashboard',\n      path: '/dashboard',\n      icon: 'Clock',\n      requiredRole: ['user', 'supervisor', 'admin', 'superadmin'],\n      tooltip: 'Dashboard personal de asistencia'\n    },\n    {\n      label: 'Centro de Perfil',\n      path: '/profile-center',\n      icon: 'User',\n      requiredRole: ['user', 'supervisor', 'admin', 'superadmin'],\n      tooltip: 'Gestión de perfil personal'\n    }]\n\n  },\n  {\n    section: 'Supervisión',\n    items: [\n    {\n      label: 'Gestión de Sitios',\n      path: '/supervisor/sites',\n      icon: 'Building2',\n      requiredRole: ['supervisor', 'admin', 'superadmin'],\n      tooltip: 'Administración de sitios de construcción'\n    }]\n\n  },\n  {\n    section: 'Administración',\n    items: [\n    {\n      label: 'Gestión de Empleados',\n      path: '/admin/employees',\n      icon: 'Users',\n      requiredRole: ['admin', 'superadmin'],\n      tooltip: 'Administración de empleados'\n    },\n    {\n      label: 'Historial de Asistencia',\n      path: '/admin/attendance',\n      icon: 'BarChart3',\n      requiredRole: ['admin', 'superadmin'],\n      tooltip: 'Análisis de asistencia y productividad'\n    },\n    {\n      label: 'Gestión de Nómina',\n      path: '/admin/payroll',\n      icon: 'Calculator',\n      requiredRole: ['admin', 'superadmin'],\n      tooltip: 'Cálculo y procesamiento de nómina'\n    },\n    {\n      label: 'Registro de Incidentes',\n      path: '/admin/incidents',\n      icon: 'AlertTriangle',\n      requiredRole: ['admin', 'superadmin'],\n      tooltip: 'Gestión de incidentes de seguridad'\n    },\n    {\n      label: 'Centro de Reportes',\n      path: '/admin/reports',\n      icon: 'FileText',\n      requiredRole: ['admin', 'superadmin'],\n      tooltip: 'Generación y exportación de reportes'\n    },\n    {\n      label: 'Monitoreo de Seguridad',\n      path: '/activity-logging-and-security-monitoring-dashboard',\n      icon: 'Shield',\n      requiredRole: ['admin', 'superadmin'],\n      tooltip: 'Monitoreo de actividad y seguridad'\n    }]\n\n  },\n  {\n    section: 'SuperAdmin',\n    items: [\n    {\n      label: 'Panel de Sistema',\n      path: '/admin/system',\n      icon: 'Settings',\n      requiredRole: ['superadmin'],\n      tooltip: 'Configuración avanzada del sistema'\n    },\n    {\n      label: 'Control de Roles',\n      path: '/admin/roles',\n      icon: 'Lock',\n      requiredRole: ['superadmin'],\n      tooltip: 'Gestión de roles y permisos'\n    }]\n\n  }];\n\n\n  const filteredNavigation = navigationItems?.map((section) => ({\n    ...section,\n    items: section?.items?.filter((item) => item?.requiredRole?.includes(userRole))\n  }))?.filter((section) => section?.items?.length > 0);\n\n  const handleNavigation = (path) => {\n    navigate(path);\n    setIsMobileOpen(false);\n  };\n\n  const handleLogoClick = () => {\n    // Navigate to appropriate dashboard based on user role\n    switch (userRole) {\n      case 'superadmin':\n        navigate('/admin/system');\n        break;\n      case 'admin':\n        navigate('/admin/employees');\n        break;\n      case 'supervisor':\n        navigate('/supervisor/sites');\n        break;\n      default:\n        navigate('/dashboard');\n    }\n    setIsMobileOpen(false);\n  };\n\n  const handleToggle = () => {\n    onToggleCollapse?.();\n  };\n\n  const isActivePath = (path) => {\n    return location?.pathname === path;\n  };\n\n  useEffect(() => {\n    const handleResize = () => {\n      if (window.innerWidth >= 768) {\n        setIsMobileOpen(false);\n      }\n    };\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return (\n    <>\n      {/* Mobile Toggle Button */}\n      <button\n        onClick={() => setIsMobileOpen(!isMobileOpen)}\n        className=\"md:hidden fixed top-4 left-4 z-50 p-2 bg-primary text-primary-foreground rounded-md shadow-md transition-transform duration-150 ease-out-cubic hover:scale-98\">\n\n        <Icon name={isMobileOpen ? 'X' : 'Menu'} size={24} />\n      </button>\n      {/* Mobile Overlay */}\n      {isMobileOpen &&\n      <div\n        className=\"md:hidden fixed inset-0 bg-black bg-opacity-50 z-40 transition-opacity duration-200 ease-out-cubic\"\n        onClick={() => setIsMobileOpen(false)} />\n\n      }\n      {/* Sidebar */}\n      <aside\n        className={`\n          fixed left-0 top-0 h-full bg-card border-r border-border z-40\n          transition-all duration-300 ease-out-cubic\n          ${isCollapsed ? 'w-16' : 'w-64'}\n          ${isMobileOpen ? 'translate-x-0' : '-translate-x-full md:translate-x-0'}\n        `}>\n\n        {/* Logo Section */}\n        <div className=\"flex items-center h-16 px-4 border-b border-border\">\n          <div\n            className=\"flex items-center cursor-pointer transition-transform duration-150 ease-out-cubic hover:scale-98\"\n            onClick={handleLogoClick}>\n\n            <div className=\"flex items-center justify-center w-8 h-8 bg-primary rounded-md flex-shrink-0 overflow-hidden\">\n              <AppImage \n                src={branding?.logo_url || \"/assets/images/logo.png\"} \n                alt={branding?.nombre_empresa ? `${branding?.nombre_empresa} Logo` : \"Company Logo\"}\n                className=\"w-full h-full object-contain\"\n              />\n            </div>\n            {!isCollapsed &&\n            <div className=\"ml-3\">\n                <h1 className=\"text-lg font-semibold text-foreground\">\n                  {branding?.nombre_empresa || 'GY&ID App'}\n                </h1>\n              </div>\n            }\n          </div>\n        </div>\n\n        {/* Navigation */}\n        <nav className=\"flex-1 overflow-y-auto py-4\">\n          {filteredNavigation?.map((section, sectionIndex) => (\n          <div key={sectionIndex} className=\"mb-6\">\n              {!isCollapsed && (\n            <h3 className=\"px-4 mb-2 text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                  {section?.section}\n                </h3>\n            )}\n              <ul className=\"space-y-1 px-2\">\n                {section?.items?.map((item, itemIndex) => (\n              <li key={itemIndex}>\n                    <button\n                  onClick={() => handleNavigation(item?.path)}\n                  title={isCollapsed ? item?.tooltip : ''}\n                  className={`\n                        w-full flex items-center px-3 py-2.5 text-sm font-medium rounded-md\n                        transition-all duration-150 ease-out-cubic\n                        hover:bg-muted hover:scale-[0.98]\n                        ${isActivePath(item?.path) ?\n                  'bg-primary text-primary-foreground shadow-sm' :\n                  'text-foreground hover:text-foreground'}\n                      `\n                  }>\n\n                      <Icon\n                    name={item?.icon}\n                    size={20}\n                    className={`\n                          ${isCollapsed ? 'mx-auto' : 'mr-3'}\n                          ${isActivePath(item?.path) ? 'text-primary-foreground' : 'text-muted-foreground'}\n                          flex-shrink-0\n                        `} />\n\n                      {!isCollapsed && (\n                  <span className=\"truncate\">{item?.label}</span>\n                  )}\n                    </button>\n                  </li>\n              ))}\n              </ul>\n            </div>\n          ))}\n        </nav>\n\n        {/* Collapse Toggle (Desktop Only) */}\n        {!isMobileOpen && (\n        <div className=\"hidden md:block p-4 border-t border-border\">\n            <button\n            onClick={handleToggle}\n            className=\"w-full flex items-center justify-center p-2 text-muted-foreground hover:text-foreground hover:bg-muted rounded-md transition-all duration-150 ease-out-cubic hover:scale-98\"\n            title={isCollapsed ? 'Expandir sidebar' : 'Contraer sidebar'}>\n\n              <Icon\n              name={isCollapsed ? 'ChevronRight' : 'ChevronLeft'}\n              size={20} />\n\n            </button>\n          </div>\n        )}\n      </aside>\n      {/* Mobile Bottom Navigation */}\n      <div className=\"md:hidden fixed bottom-0 left-0 right-0 bg-card border-t border-border z-30\">\n        <div className=\"flex items-center justify-around py-2\">\n          {filteredNavigation?.slice(0, 4)?.map((section) =>\n          section?.items?.slice(0, 1)?.map((item, index) => (\n          <button\n            key={index}\n            onClick={() => handleNavigation(item?.path)}\n            className={`\n                  flex flex-col items-center p-2 min-w-0 flex-1\n                  transition-all duration-150 ease-out-cubic\n                  ${isActivePath(item?.path) ?\n            'text-primary' : 'text-muted-foreground hover:text-foreground'}\n                `\n            }>\n\n                <Icon name={item?.icon} size={20} />\n                <span className=\"text-xs mt-1 truncate\">{item?.label?.split(' ')?.[0]}</span>\n              </button>\n          ))\n          )}\n        </div>\n      </div>\n    </>\n  );\n\n};\n\nexport default RoleBasedSidebar;","size_bytes":9551},"src/components/ui/Select.jsx":{"content":"// components/ui/Select.jsx - Shadcn style Select\nimport React, { useState } from \"react\";\nimport { ChevronDown, Check, Search, X } from \"lucide-react\";\nimport { cn } from \"../../utils/cn\";\nimport Button from \"./Button\";\nimport Input from \"./Input\";\n\nconst Select = React.forwardRef(({\n    className,\n    options = [],\n    value,\n    defaultValue,\n    placeholder = \"Select an option\",\n    multiple = false,\n    disabled = false,\n    required = false,\n    label,\n    description,\n    error,\n    searchable = false,\n    clearable = false,\n    loading = false,\n    id,\n    name,\n    onChange,\n    onOpenChange,\n    ...props\n}, ref) => {\n    const [isOpen, setIsOpen] = useState(false);\n    const [searchTerm, setSearchTerm] = useState(\"\");\n\n    // Generate unique ID if not provided\n    const selectId = id || `select-${Math.random()?.toString(36)?.substr(2, 9)}`;\n\n    // Filter options based on search\n    const filteredOptions = searchable && searchTerm\n        ? options?.filter(option =>\n            option?.label?.toLowerCase()?.includes(searchTerm?.toLowerCase()) ||\n            (option?.value && option?.value?.toString()?.toLowerCase()?.includes(searchTerm?.toLowerCase()))\n        )\n        : options;\n\n    // Get selected option(s) for display\n    const getSelectedDisplay = () => {\n        if (!value) return placeholder;\n\n        if (multiple) {\n            const selectedOptions = options?.filter(opt => value?.includes(opt?.value));\n            if (selectedOptions?.length === 0) return placeholder;\n            if (selectedOptions?.length === 1) return selectedOptions?.[0]?.label;\n            return `${selectedOptions?.length} items selected`;\n        }\n\n        const selectedOption = options?.find(opt => opt?.value === value);\n        return selectedOption ? selectedOption?.label : placeholder;\n    };\n\n    const handleToggle = () => {\n        if (!disabled) {\n            const newIsOpen = !isOpen;\n            setIsOpen(newIsOpen);\n            onOpenChange?.(newIsOpen);\n            if (!newIsOpen) {\n                setSearchTerm(\"\");\n            }\n        }\n    };\n\n    const handleOptionSelect = (option) => {\n        if (multiple) {\n            const newValue = value || [];\n            const updatedValue = newValue?.includes(option?.value)\n                ? newValue?.filter(v => v !== option?.value)\n                : [...newValue, option?.value];\n            onChange?.(updatedValue);\n        } else {\n            onChange?.(option?.value);\n            setIsOpen(false);\n            onOpenChange?.(false);\n        }\n    };\n\n    const handleClear = (e) => {\n        e?.stopPropagation();\n        onChange?.(multiple ? [] : '');\n    };\n\n    const handleSearchChange = (e) => {\n        setSearchTerm(e?.target?.value);\n    };\n\n    const isSelected = (optionValue) => {\n        if (multiple) {\n            return value?.includes(optionValue) || false;\n        }\n        return value === optionValue;\n    };\n\n    const hasValue = multiple ? value?.length > 0 : value !== undefined && value !== '';\n\n    return (\n        <div className={cn(\"relative\", className)}>\n            {label && (\n                <label\n                    htmlFor={selectId}\n                    className={cn(\n                        \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 mb-2 block\",\n                        error ? \"text-destructive\" : \"text-foreground\"\n                    )}\n                >\n                    {label}\n                    {required && <span className=\"text-destructive ml-1\">*</span>}\n                </label>\n            )}\n            <div className=\"relative\">\n                <button\n                    ref={ref}\n                    id={selectId}\n                    type=\"button\"\n                    className={cn(\n                        \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-white text-black px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n                        error && \"border-destructive focus:ring-destructive\",\n                        !hasValue && \"text-muted-foreground\"\n                    )}\n                    onClick={handleToggle}\n                    disabled={disabled}\n                    aria-expanded={isOpen}\n                    aria-haspopup=\"listbox\"\n                    {...props}\n                >\n                    <span className=\"truncate\">{getSelectedDisplay()}</span>\n\n                    <div className=\"flex items-center gap-1\">\n                        {loading && (\n                            <svg className=\"animate-spin h-4 w-4\" viewBox=\"0 0 24 24\">\n                                <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\" fill=\"none\" />\n                                <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\" />\n                            </svg>\n                        )}\n\n                        {clearable && hasValue && !loading && (\n                            <Button\n                                variant=\"ghost\"\n                                size=\"icon\"\n                                className=\"h-4 w-4\"\n                                onClick={handleClear}\n                            >\n                                <X className=\"h-3 w-3\" />\n                            </Button>\n                        )}\n\n                        <ChevronDown className={cn(\"h-4 w-4 transition-transform\", isOpen && \"rotate-180\")} />\n                    </div>\n                </button>\n\n                {/* Hidden native select for form submission */}\n                <select\n                    name={name}\n                    value={value || ''}\n                    onChange={() => { }} // Controlled by our custom logic\n                    className=\"sr-only\"\n                    tabIndex={-1}\n                    multiple={multiple}\n                    required={required}\n                >\n                    <option value=\"\">Select...</option>\n                    {options?.map(option => (\n                        <option key={option?.value} value={option?.value}>\n                            {option?.label}\n                        </option>\n                    ))}\n                </select>\n\n                {/* Dropdown */}\n                {isOpen && (\n                    <div className=\"absolute z-50 w-full mt-1 bg-white text-black border border-border rounded-md shadow-md\">\n                        {searchable && (\n                            <div className=\"p-2 border-b\">\n                                <div className=\"relative\">\n                                    <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n                                    <Input\n                                        placeholder=\"Search options...\"\n                                        value={searchTerm}\n                                        onChange={handleSearchChange}\n                                        className=\"pl-8\"\n                                    />\n                                </div>\n                            </div>\n                        )}\n\n                        <div className=\"py-1 max-h-60 overflow-auto\">\n                            {filteredOptions?.length === 0 ? (\n                                <div className=\"px-3 py-2 text-sm text-muted-foreground\">\n                                    {searchTerm ? 'No options found' : 'No options available'}\n                                </div>\n                            ) : (\n                                filteredOptions?.map((option) => (\n                                    <div\n                                        key={option?.value}\n                                        className={cn(\n                                            \"relative flex cursor-pointer select-none items-center rounded-sm px-3 py-2 text-sm outline-none hover:bg-accent hover:text-accent-foreground\",\n                                            isSelected(option?.value) && \"bg-primary text-primary-foreground\",\n                                            option?.disabled && \"pointer-events-none opacity-50\"\n                                        )}\n                                        onClick={() => !option?.disabled && handleOptionSelect(option)}\n                                    >\n                                        <span className=\"flex-1\">{option?.label}</span>\n                                        {multiple && isSelected(option?.value) && (\n                                            <Check className=\"h-4 w-4\" />\n                                        )}\n                                        {option?.description && (\n                                            <span className=\"text-xs text-muted-foreground ml-2\">\n                                                {option?.description}\n                                            </span>\n                                        )}\n                                    </div>\n                                ))\n                            )}\n                        </div>\n                    </div>\n                )}\n            </div>\n            {description && !error && (\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                    {description}\n                </p>\n            )}\n            {error && (\n                <p className=\"text-sm text-destructive mt-1\">\n                    {error}\n                </p>\n            )}\n        </div>\n    );\n});\n\nSelect.displayName = \"Select\";\n\nexport default Select;","size_bytes":9820},"src/components/ui/ToastHub.jsx":{"content":"export function showToast(...args) {\n  // eslint-disable-next-line no-console\n  console.warn('Placeholder: showToast is not implemented yet.', args);\n  return null;\n}\n","size_bytes":167},"src/components/ui/UserContextHeader.jsx":{"content":"import React, { useState } from 'react';\nimport Icon from '../AppIcon';\nimport { useAuth } from '../../contexts/AuthContext';\n\nconst UserContextHeader = ({ onLogout }) => {\n  const { getCurrentUserContext, signOut, loading } = useAuth();\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n  const [isLoggingOut, setIsLoggingOut] = useState(false);\n\n  const userContext = getCurrentUserContext();\n\n  const handleLogout = async () => {\n    if (isLoggingOut) return;\n    \n    setIsLoggingOut(true);\n    try {\n      await signOut();\n      if (onLogout) {\n        onLogout();\n      }\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      setIsLoggingOut(false);\n      setIsDropdownOpen(false);\n    }\n  };\n\n  // Show loading state if user context is still loading\n  if (loading || !userContext) {\n    return (\n      <div className=\"flex items-center space-x-3\">\n        <div className=\"animate-pulse flex items-center space-x-3\">\n          <div className=\"w-8 h-8 bg-gray-300 rounded-full\"></div>\n          <div className=\"hidden md:block\">\n            <div className=\"w-24 h-4 bg-gray-300 rounded mb-1\"></div>\n            <div className=\"w-16 h-3 bg-gray-200 rounded\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const getRoleDisplayName = (role) => {\n    const roleMap = {\n      'superadmin': 'Super Admin',\n      'admin': 'Administrador',\n      'supervisor': 'Supervisor',\n      'user': 'Empleado'\n    };\n    return roleMap?.[role] || role;\n  };\n\n  const getRoleColor = (role) => {\n    const colorMap = {\n      'superadmin': 'text-purple-600',\n      'admin': 'text-red-600',\n      'supervisor': 'text-blue-600',\n      'user': 'text-green-600'\n    };\n    return colorMap?.[role] || 'text-gray-600';\n  };\n\n  return (\n    <div className=\"relative\">\n      <button\n        onClick={() => setIsDropdownOpen(!isDropdownOpen)}\n        className=\"flex items-center space-x-3 p-2 rounded-lg hover:bg-gray-50 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2\"\n      >\n        {/* Avatar */}\n        <div className=\"w-8 h-8 rounded-full bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center text-white text-sm font-medium\">\n          {userContext?.name?.charAt(0)?.toUpperCase() || 'U'}\n        </div>\n\n        {/* User Info - Hidden on mobile */}\n        <div className=\"hidden md:block text-left\">\n          <div className=\"text-sm font-medium text-gray-900\">\n            {userContext?.name || 'Usuario'}\n          </div>\n          <div className={`text-xs font-medium ${getRoleColor(userContext?.role)}`}>\n            {getRoleDisplayName(userContext?.role)}\n            {userContext?.isEmployee && userContext?.site && (\n              <span className=\"text-gray-500 ml-1\">• {userContext?.site}</span>\n            )}\n          </div>\n        </div>\n\n        {/* Dropdown Icon */}\n        <Icon \n          name={isDropdownOpen ? \"ChevronUp\" : \"ChevronDown\"} \n          size={16} \n          className=\"text-gray-400 hidden md:block\" \n        />\n      </button>\n\n      {/* Dropdown Menu */}\n      {isDropdownOpen && (\n        <>\n          {/* Backdrop */}\n          <div \n            className=\"fixed inset-0 z-40\" \n            onClick={() => setIsDropdownOpen(false)}\n          />\n          \n          {/* Dropdown Content */}\n          <div className=\"absolute right-0 mt-2 w-80 bg-white rounded-lg shadow-lg border border-gray-200 z-50\">\n            <div className=\"p-4 border-b border-gray-200\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-12 h-12 rounded-full bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center text-white text-lg font-medium\">\n                  {userContext?.name?.charAt(0)?.toUpperCase() || 'U'}\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"text-sm font-medium text-gray-900 truncate\">\n                    {userContext?.name || 'Usuario'}\n                  </div>\n                  <div className=\"text-xs text-gray-500 truncate\">\n                    {userContext?.email}\n                  </div>\n                  <div className={`text-xs font-medium ${getRoleColor(userContext?.role)}`}>\n                    {getRoleDisplayName(userContext?.role)}\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* User Details */}\n            <div className=\"p-4 space-y-3 text-sm\">\n              {userContext?.isEmployee && (\n                <>\n                  <div className=\"flex items-center space-x-2\">\n                    <Icon name=\"Building2\" size={16} className=\"text-gray-400\" />\n                    <span className=\"text-gray-600\">Obra:</span>\n                    <span className=\"font-medium\">{userContext?.site}</span>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-2\">\n                    <Icon name=\"User\" size={16} className=\"text-gray-400\" />\n                    <span className=\"text-gray-600\">Supervisor:</span>\n                    <span className=\"font-medium\">{userContext?.supervisor}</span>\n                  </div>\n\n                  {userContext?.position && (\n                    <div className=\"flex items-center space-x-2\">\n                      <Icon name=\"Briefcase\" size={16} className=\"text-gray-400\" />\n                      <span className=\"text-gray-600\">Puesto:</span>\n                      <span className=\"font-medium capitalize\">{userContext?.position?.replace('_', ' ')}</span>\n                    </div>\n                  )}\n\n                  {userContext?.employeeId && (\n                    <div className=\"flex items-center space-x-2\">\n                      <Icon name=\"Hash\" size={16} className=\"text-gray-400\" />\n                      <span className=\"text-gray-600\">ID Empleado:</span>\n                      <span className=\"font-medium\">{userContext?.employeeId}</span>\n                    </div>\n                  )}\n                </>\n              )}\n\n              {userContext?.phone && (\n                <div className=\"flex items-center space-x-2\">\n                  <Icon name=\"Phone\" size={16} className=\"text-gray-400\" />\n                  <span className=\"text-gray-600\">Teléfono:</span>\n                  <span className=\"font-medium\">{userContext?.phone}</span>\n                </div>\n              )}\n            </div>\n\n            {/* Actions */}\n            <div className=\"border-t border-gray-200\">\n              <button\n                onClick={handleLogout}\n                disabled={isLoggingOut}\n                className=\"w-full px-4 py-3 text-left text-sm text-red-600 hover:bg-red-50 transition-colors flex items-center space-x-2 disabled:opacity-50\"\n              >\n                {isLoggingOut ? (\n                  <>\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-red-600\"></div>\n                    <span>Cerrando sesión...</span>\n                  </>\n                ) : (\n                  <>\n                    <Icon name=\"LogOut\" size={16} />\n                    <span>Cerrar Sesión</span>\n                  </>\n                )}\n              </button>\n            </div>\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default UserContextHeader;","size_bytes":7379},"src/pages/activity-logging-and-security-monitoring-dashboard/index.jsx":{"content":"// src/modules/activity-logging-and-security-monitoring-dashboard/index.jsx\nimport React, { useState, useEffect, useMemo, useRef } from 'react';\nimport { Search, Filter, Download, Shield, Eye, Activity, RefreshCw } from 'lucide-react';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { supabase } from '../../lib/supabase';\nimport BrandedHeader from '../../components/ui/BrandedHeader';\nimport BrandedFooter from '../../components/ui/BrandedFooter';\nimport RoleBasedSidebar from '../../components/ui/RoleBasedSidebar';\nimport ActivityGrid from './components/ActivityGrid';\nimport SecurityAlertPanel from './components/SecurityAlertPanel';\nimport FilterPanel from './components/FilterPanel';\nimport ExportPanel from './components/ExportPanel';\nimport StatisticsCards from './components/StatisticsCards';\n\nimport { activityLogService } from '@/services/activityLogService';\n\n// Columnas explícitas para traer usuario embebido (join) SIN usar *\nconst LOG_COLUMNS = `\n  id,\n  usuario_id,\n  rol,\n  accion,\n  modulo,\n  descripcion,\n  ip_address,\n  user_agent,\n  metadata,\n  fecha,\n  usuarios:usuario_id (\n    nombre,\n    correo\n  )\n`;\n\nexport default function ActivityLoggingAndSecurityMonitoringDashboard() {\n  const { hasRole } = useAuth();\n  const hasAdminAccess = hasRole?.('admin') || hasRole?.('superadmin');\n\n  const [logs, setLogs] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  // búsqueda con debounce\n  const [searchTerm, setSearchTerm] = useState('');\n  const [debouncedSearch, setDebouncedSearch] = useState('');\n  useEffect(() => {\n    const t = setTimeout(() => setDebouncedSearch(searchTerm.trim()), 350);\n    return () => clearTimeout(t);\n  }, [searchTerm]);\n\n  const [filters, setFilters] = useState({\n    dateRange: 'today', // today | week | month | all\n    module: 'all',\n    action: 'all',\n    role: 'all',\n    severity: 'all'\n  });\n\n  const [showFilters, setShowFilters] = useState(false);\n  const [showExport, setShowExport] = useState(false);\n  const [realTimeEnabled, setRealTimeEnabled] = useState(true);\n\n  const [statistics, setStatistics] = useState({\n    totalLogs: 0,\n    todayLogs: 0,\n    securityAlerts: 0,\n    activeUsers: 0\n  });\n\n  // ---------- NUEVO: opciones dinámicas para filtros ----------\n  const [moduleOptions, setModuleOptions] = useState([]);\n  const [actionOptions, setActionOptions] = useState([]);\n  const [roleOptions, setRoleOptions] = useState([]);\n  const severityOptions = [\n    { value: 'critical', label: 'Crítica' },\n    { value: 'high', label: 'Alta' },\n    { value: 'medium', label: 'Media' },\n    { value: 'low', label: 'Baja' },\n    { value: 'info', label: 'Información' }\n  ];\n\n  useEffect(() => {\n    if (!hasAdminAccess) return;\n    loadFilterOptions();\n  }, [hasAdminAccess]);\n\n  const loadFilterOptions = async () => {\n    // Traemos columnas y deduplicamos en cliente\n    const { data, error } = await supabase\n      .from('logs_actividad')\n      .select('modulo, accion, rol')\n      .not('modulo', 'is', null)\n      .not('accion', 'is', null)\n      .not('rol', 'is', null)\n      .limit(5000); // ajusta si es necesario\n\n    if (error) {\n      console.error('Error loading filter options:', error);\n      return;\n    }\n\n    const uniq = (arr) => [...new Set(arr.filter(Boolean))].sort((a, b) => `${a}`.localeCompare(`${b}`));\n\n    const modules = uniq(data.map(d => d.modulo)).map(v => ({ value: v, label: v }));\n    const actions = uniq(data.map(d => d.accion)).map(v => ({ value: v, label: v.replace(/_/g, ' ') }));\n    const roles = uniq(data.map(d => d.rol)).map(v => ({ value: v, label: v }));\n\n    setModuleOptions(modules);\n    setActionOptions(actions);\n    setRoleOptions(roles);\n  };\n  // ---------- FIN NUEVO ----------\n\n  // paginación\n  const [page, setPage] = useState(1);\n  const [pageSize] = useState(20);\n  const [totalPages, setTotalPages] = useState(1);\n\n  // Mantener referencia a la suscripción para limpiarla\n  const realtimeRef = useRef(null);\n\n  // Calcula rango de fechas según filtro\n  const { startDateISO, endDateISO } = useMemo(() => {\n    if (filters.dateRange === 'all') return { startDateISO: null, endDateISO: null };\n    const now = new Date();\n    let start;\n    if (filters.dateRange === 'today') {\n      start = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n    } else if (filters.dateRange === 'week') {\n      start = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n    } else if (filters.dateRange === 'month') {\n      start = new Date(now.getFullYear(), now.getMonth(), 1);\n    }\n    return { startDateISO: start?.toISOString() ?? null, endDateISO: null };\n  }, [filters.dateRange]);\n\n  // Carga de logs (vía service) con filtros + paginación\n  const loadActivityLogs = async () => {\n    try {\n      setLoading(true);\n\n      // Mapear filtros del UI a service\n      const serviceFilters = {\n        page,\n        pageSize,\n        userId: null,\n        module: filters.module !== 'all' ? filters.module : null,\n        action: filters.action !== 'all' ? filters.action : null,\n        startDate: startDateISO,\n        endDate: endDateISO\n      };\n\n      const result = await activityLogService.listLogs(serviceFilters);\n      if (!result?.success) {\n        console.error('Error loading logs:', result?.error);\n        setLogs([]);\n        setTotalPages(1);\n        return;\n      }\n\n      const ids = (result?.data?.data || []).map(l => l.id);\n      if (ids.length === 0) {\n        setLogs([]);\n        setTotalPages(result?.data?.totalPages || 1);\n        return;\n      }\n\n      const { data: joined, error } = await supabase\n        .from('logs_actividad')\n        .select(LOG_COLUMNS)\n        .in('id', ids)\n        .order('fecha', { ascending: false });\n\n      if (error) {\n        console.error('Join error:', error);\n        setLogs(result?.data?.data || []);\n      } else {\n        setLogs(joined || []);\n      }\n\n      setTotalPages(result?.data?.totalPages || 1);\n    } catch (e) {\n      console.error('Error in loadActivityLogs:', e);\n      setLogs([]);\n      setTotalPages(1);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Carga estadísticas (con selects explícitos)\n  const loadStatistics = async () => {\n    try {\n      const today = new Date();\n      const startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate()).toISOString();\n\n      // total\n      const { count: totalCount } = await supabase\n        .from('logs_actividad')\n        .select('id', { count: 'exact', head: true });\n\n      // hoy\n      const { count: todayCount } = await supabase\n        .from('logs_actividad')\n        .select('id', { count: 'exact', head: true })\n        .gte('fecha', startOfDay);\n\n      // alertas\n      const { count: alertsCount } = await supabase\n        .from('logs_actividad')\n        .select('id', { count: 'exact', head: true })\n        .in('accion', ['failed_login', 'unauthorized_access', 'security_violation'])\n        .gte('fecha', startOfDay);\n\n      // usuarios activos hoy\n      const { data: activeUsersData } = await supabase\n        .from('logs_actividad')\n        .select('usuario_id')\n        .gte('fecha', startOfDay)\n        .not('usuario_id', 'is', null);\n\n      const uniqueUsers = new Set((activeUsersData || []).map(l => l.usuario_id)).size;\n\n      setStatistics({\n        totalLogs: totalCount || 0,\n        todayLogs: todayCount || 0,\n        securityAlerts: alertsCount || 0,\n        activeUsers: uniqueUsers || 0\n      });\n    } catch (e) {\n      console.error('Error loading statistics:', e);\n    }\n  };\n\n  // Tiempo real (INSERT) — solo si enabled\n  useEffect(() => {\n    if (!hasAdminAccess) return;\n\n    // Carga inicial\n    loadActivityLogs();\n    loadStatistics();\n\n    if (!realTimeEnabled) {\n      // Si estaba suscrito, limpiar\n      if (realtimeRef.current) {\n        supabase.removeChannel(realtimeRef.current);\n        realtimeRef.current = null;\n      }\n      return;\n    }\n\n    // Suscripción a inserts\n    const sub = supabase\n      .channel('logs_actividad_changes')\n      .on('postgres_changes', { event: 'INSERT', schema: 'public', table: 'logs_actividad' }, async (payload) => {\n        const newLog = payload?.new;\n        if (!newLog) return;\n\n        // Traerlo con relación de usuario usando columnas explícitas\n        const { data: fullLog } = await supabase\n          .from('logs_actividad')\n          .select(LOG_COLUMNS)\n          .eq('id', newLog.id)\n          .single();\n\n        setLogs(prev => [fullLog || newLog, ...prev]);\n        updateStatistics(newLog);\n      })\n      .subscribe();\n\n    realtimeRef.current = sub;\n\n    return () => {\n      if (realtimeRef.current) {\n        supabase.removeChannel(realtimeRef.current);\n        realtimeRef.current = null;\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [hasAdminAccess, realTimeEnabled, page, pageSize, filters.dateRange, filters.module, filters.action]);\n\n  // Re-cargar al cambiar filtros “sin tiempo real” y al cambiar búsqueda (debounced)\n  useEffect(() => {\n    if (!hasAdminAccess) return;\n    loadActivityLogs();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [debouncedSearch, filters.role, filters.severity]);\n\n  const updateStatistics = (newLog) => {\n    setStatistics(prev => ({\n      ...prev,\n      totalLogs: (prev.totalLogs || 0) + 1,\n      todayLogs: (prev.todayLogs || 0) + 1,\n      securityAlerts: ['failed_login', 'unauthorized_access', 'security_violation'].includes(newLog?.accion)\n        ? (prev.securityAlerts || 0) + 1\n        : prev.securityAlerts\n    }));\n  };\n\n  const handleSearch = (term) => setSearchTerm(term);\n  const handleFilterChange = (newFilters) => {\n    setFilters(newFilters);\n    setPage(1);\n  };\n  const refreshLogs = () => { loadActivityLogs(); loadStatistics(); };\n\n  // Guard: sin permisos\n  if (!hasAdminAccess) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <Shield className=\"h-16 w-16 text-red-500 mx-auto mb-4\" />\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">Acceso Denegado</h1>\n          <p className=\"text-gray-600\">No tienes permisos para acceder a esta sección.</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <BrandedHeader />\n      <div className=\"flex\">\n        <RoleBasedSidebar />\n        <main className=\"flex-1 p-6\">\n          {/* Header */}\n          <div className=\"mb-8\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div>\n                <h1 className=\"text-3xl font-bold text-gray-900 flex items-center\">\n                  <Activity className=\"h-8 w-8 text-blue-600 mr-3\" />\n                  Monitoreo de Actividad y Seguridad\n                </h1>\n                <p className=\"text-gray-600 mt-1\">\n                  Seguimiento completo de actividades del sistema y alertas de seguridad\n                </p>\n              </div>\n\n              <div className=\"flex items-center space-x-3\">\n                <button\n                  onClick={() => setRealTimeEnabled(v => !v)}\n                  className={`px-4 py-2 rounded-lg font-medium transition-colors ${\n                    realTimeEnabled\n                      ? 'bg-green-100 text-green-700 hover:bg-green-200'\n                      : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n                  }`}\n                >\n                  <div className=\"flex items-center\">\n                    <div className={`h-2 w-2 rounded-full mr-2 ${realTimeEnabled ? 'bg-green-500' : 'bg-gray-400'}`} />\n                    Tiempo Real\n                  </div>\n                </button>\n\n                <button\n                  onClick={refreshLogs}\n                  className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors flex items-center\"\n                >\n                  <RefreshCw className=\"h-4 w-4 mr-2\" />\n                  Actualizar\n                </button>\n              </div>\n            </div>\n\n            <StatisticsCards statistics={statistics} />\n          </div>\n\n          {/* Controles */}\n          <div className=\"bg-white rounded-lg shadow-sm border p-6 mb-6\">\n            <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between space-y-4 lg:space-y-0\">\n              <div className=\"relative flex-1 max-w-md\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                <input\n                  type=\"text\"\n                  placeholder=\"Buscar en actividades...\"\n                  value={searchTerm}\n                  onChange={(e) => handleSearch(e.target.value)}\n                  className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                />\n              </div>\n\n              <div className=\"flex items-center space-x-3\">\n                <button\n                  onClick={() => setShowFilters(v => !v)}\n                  className={`px-4 py-2 rounded-lg border transition-colors flex items-center ${\n                    showFilters ? 'bg-blue-50 border-blue-300 text-blue-700' : 'bg-white border-gray-300 text-gray-700 hover:bg-gray-50'\n                  }`}\n                >\n                  <Filter className=\"h-4 w-4 mr-2\" />\n                  Filtros\n                </button>\n\n                <button\n                  onClick={() => setShowExport(v => !v)}\n                  className=\"bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors flex items-center\"\n                >\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Exportar\n                </button>\n              </div>\n            </div>\n\n            {showFilters && (\n              <div className=\"mt-6 pt-6 border-t\">\n                {/* Pasamos opciones aunque el panel actual no las use aún, por compatibilidad futura */}\n                <FilterPanel\n                  filters={filters}\n                  onFilterChange={handleFilterChange}\n                  moduleOptions={moduleOptions}\n                  actionOptions={actionOptions}\n                  roleOptions={roleOptions}\n                  severityOptions={severityOptions}\n                />\n              </div>\n            )}\n\n            {showExport && (\n              <div className=\"mt-6 pt-6 border-t\">\n                <ExportPanel logs={logs} filters={filters} />\n              </div>\n            )}\n          </div>\n\n          {/* Grid principal */}\n          <div className=\"grid grid-cols-1 xl:grid-cols-4 gap-6\">\n            <div className=\"xl:col-span-1\">\n              <SecurityAlertPanel logs={logs} />\n            </div>\n\n            <div className=\"xl:col-span-3\">\n              <div className=\"bg-white rounded-lg shadow-sm border\">\n                <div className=\"p-6 border-b border-gray-200\">\n                  <h2 className=\"text-xl font-semibold text-gray-900 flex items-center\">\n                    <Eye className=\"h-5 w-5 text-blue-600 mr-2\" />\n                    Registro de Actividades\n                    {loading && (\n                      <div className=\"ml-3 animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600\" />\n                    )}\n                  </h2>\n                  <p className=\"text-sm text-gray-500 mt-1\">\n                    {logs?.length || 0} registros encontrados\n                  </p>\n                </div>\n\n                <ActivityGrid logs={logs} loading={loading} searchTerm={debouncedSearch} />\n\n                {/* Paginación simple */}\n                <div className=\"px-6 py-4 border-t flex items-center justify-between\">\n                  <button\n                    onClick={() => setPage(p => Math.max(1, p - 1))}\n                    disabled={page === 1}\n                    className=\"px-3 py-2 border rounded disabled:opacity-50\"\n                  >\n                    Anterior\n                  </button>\n                  <span className=\"text-sm text-gray-600\">\n                    Página {page} de {totalPages}\n                  </span>\n                  <button\n                    onClick={() => setPage(p => (p < totalPages ? p + 1 : p))}\n                    disabled={page >= totalPages}\n                    className=\"px-3 py-2 border rounded disabled:opacity-50\"\n                  >\n                    Siguiente\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </main>\n      </div>\n\n      <BrandedFooter />\n    </div>\n  );\n}\n","size_bytes":16632},"src/pages/administrator-employee-management-console/index.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport RoleBasedSidebar from '../../components/ui/RoleBasedSidebar';\nimport NavigationHeader from '../../components/ui/NavigationHeader';\nimport UserContextHeader from '../../components/ui/UserContextHeader';\nimport NotificationCenter from '../../components/ui/NotificationCenter';\nimport Icon from '../../components/AppIcon';\nimport Button from '../../components/ui/Button';\nimport Input from '../../components/ui/Input';\nimport EmployeeFilters from './components/EmployeeFilters';\nimport EmployeeTable from './components/EmployeeTable';\nimport EmployeeDetailPanel from './components/EmployeeDetailPanel';\nimport BulkActionsToolbar from './components/BulkActionsToolbar';\nimport EmployeeCreationModal from './components/EmployeeCreationModal';\nimport { useAuth } from '../../contexts/AuthContext';\nimport enhancedEmployeeService from '../../services/enhancedEmployeeService';\n\nconst AdministratorEmployeeManagementConsole = () => {\n  const navigate = useNavigate();\n  const { getCurrentUserContext, loading: authLoading } = useAuth();\n  \n  // State management\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\n  const [selectedEmployees, setSelectedEmployees] = useState([]);\n  const [selectedEmployee, setSelectedEmployee] = useState(null);\n  const [isDetailPanelOpen, setIsDetailPanelOpen] = useState(false);\n  const [isEditingEmployee, setIsEditingEmployee] = useState(false);\n  const [isCreationModalOpen, setIsCreationModalOpen] = useState(false);\n  const [globalSearch, setGlobalSearch] = useState('');\n  \n  // Data state\n  const [employees, setEmployees] = useState([]);\n  const [filteredEmployees, setFilteredEmployees] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [stats, setStats] = useState(null);\n  \n  // Filter state\n  const [filters, setFilters] = useState({\n    search: '',\n    site: 'all',\n    supervisor: 'all',\n    status: [],\n    position: 'all',\n    hireDateFrom: '',\n    hireDateTo: ''\n  });\n  \n  const [sortConfig, setSortConfig] = useState({\n    column: 'name',\n    direction: 'asc'\n  });\n  \n  const [savedFilters, setSavedFilters] = useState([]);\n\n  const currentUser = getCurrentUserContext();\n\n  // Load employees data\n  const loadEmployees = async () => {\n    try {\n      setLoading(true);\n      setError('');\n      const employeesData = await enhancedEmployeeService?.getEmployees();\n      setEmployees(employeesData);\n    } catch (err) {\n      console.error('Error loading employees:', err);\n      setError(err?.message || 'Failed to load employees');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Load statistics\n  const loadStats = async () => {\n    try {\n      const statsData = await enhancedEmployeeService?.getEmployeeStats();\n      setStats(statsData);\n    } catch (err) {\n      console.error('Error loading stats:', err);\n    }\n  };\n\n  // Initial data load\n  useEffect(() => {\n    if (!authLoading && currentUser) {\n      loadEmployees();\n      loadStats();\n    }\n  }, [authLoading, currentUser]);\n\n  // Filter and sort employees\n  useEffect(() => {\n    let filtered = [...employees];\n\n    // Apply filters\n    if (filters?.search) {\n      const searchTerm = filters?.search?.toLowerCase();\n      filtered = filtered?.filter(employee =>\n        employee?.name?.toLowerCase()?.includes(searchTerm) ||\n        employee?.email?.toLowerCase()?.includes(searchTerm) ||\n        employee?.employeeId?.toLowerCase()?.includes(searchTerm) ||\n        employee?.phone?.toLowerCase()?.includes(searchTerm)\n      );\n    }\n\n    if (filters?.site !== 'all') {\n      filtered = filtered?.filter(employee => employee?.site === filters?.site);\n    }\n\n    if (filters?.supervisor !== 'all') {\n      filtered = filtered?.filter(employee => employee?.supervisor === filters?.supervisor);\n    }\n\n    if (filters?.status?.length > 0) {\n      filtered = filtered?.filter(employee => filters?.status?.includes(employee?.status));\n    }\n\n    if (filters?.position !== 'all') {\n      filtered = filtered?.filter(employee => employee?.position === filters?.position);\n    }\n\n    if (filters?.hireDateFrom) {\n      filtered = filtered?.filter(employee => \n        new Date(employee?.hireDate) >= new Date(filters?.hireDateFrom)\n      );\n    }\n\n    if (filters?.hireDateTo) {\n      filtered = filtered?.filter(employee => \n        new Date(employee?.hireDate) <= new Date(filters?.hireDateTo)\n      );\n    }\n\n    // Apply sorting\n    filtered?.sort((a, b) => {\n      const aValue = a?.[sortConfig?.column];\n      const bValue = b?.[sortConfig?.column];\n      \n      if (sortConfig?.direction === 'asc') {\n        return aValue < bValue ? -1 : aValue > bValue ? 1 : 0;\n      } else {\n        return aValue > bValue ? -1 : aValue < bValue ? 1 : 0;\n      }\n    });\n\n    setFilteredEmployees(filtered);\n  }, [employees, filters, sortConfig]);\n\n  // Update global search in filters\n  useEffect(() => {\n    setFilters(prev => ({ ...prev, search: globalSearch }));\n  }, [globalSearch]);\n\n  // Event handlers\n  const handleEmployeeSelect = (employeeId, selected) => {\n    if (selected) {\n      setSelectedEmployees(prev => [...prev, employeeId]);\n    } else {\n      setSelectedEmployees(prev => prev?.filter(id => id !== employeeId));\n    }\n  };\n\n  const handleSelectAll = (selected) => {\n    if (selected) {\n      setSelectedEmployees(filteredEmployees?.map(emp => emp?.id));\n    } else {\n      setSelectedEmployees([]);\n    }\n  };\n\n  const handleEmployeeClick = async (employee) => {\n    try {\n      // Fetch complete employee details\n      const fullEmployee = await enhancedEmployeeService?.getEmployeeById(employee?.id);\n      setSelectedEmployee(fullEmployee);\n      setIsDetailPanelOpen(true);\n      setIsEditingEmployee(false);\n    } catch (err) {\n      console.error('Error loading employee details:', err);\n      setError('Failed to load employee details');\n    }\n  };\n\n  const handleCloseDetailPanel = () => {\n    setIsDetailPanelOpen(false);\n    setSelectedEmployee(null);\n    setIsEditingEmployee(false);\n  };\n\n  const handleSaveEmployee = async (updatedEmployee) => {\n    try {\n      await enhancedEmployeeService?.updateEmployee(updatedEmployee?.id, updatedEmployee);\n      setSelectedEmployee(updatedEmployee);\n      // Reload employees list\n      await loadEmployees();\n      await loadStats();\n    } catch (err) {\n      console.error('Error updating employee:', err);\n      setError('Failed to update employee');\n    }\n  };\n\n  const handleCreateEmployee = async (newEmployeeData) => {\n    try {\n      await enhancedEmployeeService?.createEmployee(newEmployeeData);\n      // Reload employees list\n      await loadEmployees();\n      await loadStats();\n      setIsCreationModalOpen(false);\n    } catch (err) {\n      console.error('Error creating employee:', err);\n      setError('Failed to create employee');\n    }\n  };\n\n  const handleBulkAction = async (action) => {\n    try {\n      if (action === 'delete' && selectedEmployees?.length > 0) {\n        // Implement bulk delete\n        for (const employeeId of selectedEmployees) {\n          await enhancedEmployeeService?.deleteEmployee(employeeId, currentUser?.id);\n        }\n        await loadEmployees();\n        await loadStats();\n        setSelectedEmployees([]);\n      } else if (action === 'activate' && selectedEmployees?.length > 0) {\n        await enhancedEmployeeService?.bulkUpdateEmployees(selectedEmployees, { status: 'active' });\n        await loadEmployees();\n        setSelectedEmployees([]);\n      } else if (action === 'deactivate' && selectedEmployees?.length > 0) {\n        await enhancedEmployeeService?.bulkUpdateEmployees(selectedEmployees, { status: 'inactive' });\n        await loadEmployees();\n        setSelectedEmployees([]);\n      }\n    } catch (err) {\n      console.error('Error in bulk action:', err);\n      setError(`Failed to ${action} employees`);\n    }\n  };\n\n  const handleSaveFilter = (filterData) => {\n    setSavedFilters(prev => [...prev, filterData]);\n  };\n\n  const handleLoadFilter = (savedFilter) => {\n    setFilters(savedFilter?.filters);\n  };\n\n  const handleClearFilters = () => {\n    setFilters({\n      search: '',\n      site: 'all',\n      supervisor: 'all',\n      status: [],\n      position: 'all',\n      hireDateFrom: '',\n      hireDateTo: ''\n    });\n    setGlobalSearch('');\n  };\n\n  const handleViewAttendance = (employee) => {\n    navigate('/attendance-history-and-analytics-dashboard', { \n      state: { employeeId: employee?.id } \n    });\n  };\n\n  const handleViewPayroll = (employee) => {\n    navigate('/payroll-calculation-and-management-interface', { \n      state: { employeeId: employee?.id } \n    });\n  };\n\n  const handleViewIncidents = (employee) => {\n    navigate('/incident-registration-and-management-system', { \n      state: { employeeId: employee?.id } \n    });\n  };\n\n  const handleExportData = () => {\n    const dataToExport = selectedEmployees?.length > 0 \n      ? employees?.filter(emp => selectedEmployees?.includes(emp?.id))\n      : filteredEmployees;\n    \n    // Create CSV content\n    const csvContent = [\n      // Headers\n      ['ID Empleado', 'Nombre', 'Email', 'Teléfono', 'Obra', 'Supervisor', 'Puesto', 'Estado', 'Salario Diario']?.join(','),\n      // Data rows\n      ...dataToExport?.map(emp => [\n        emp?.employeeId || '',\n        `\"${emp?.name || ''}\"`,\n        emp?.email || '',\n        emp?.phone || '',\n        `\"${emp?.site || ''}\"`,\n        `\"${emp?.supervisor || ''}\"`,\n        emp?.position || '',\n        emp?.status || '',\n        emp?.dailySalary || 0\n      ]?.join(','))\n    ]?.join('\\n');\n\n    // Download file\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n    const link = document.createElement('a');\n    const url = URL.createObjectURL(blob);\n    link?.setAttribute('href', url);\n    link?.setAttribute('download', `empleados_${new Date()?.toISOString()?.split('T')?.[0]}.csv`);\n    link.style.visibility = 'hidden';\n    document.body?.appendChild(link);\n    link?.click();\n    document.body?.removeChild(link);\n  };\n\n  // Show loading state\n  if (authLoading || loading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"flex flex-col items-center space-y-4\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n          <span className=\"text-gray-600\">Cargando empleados...</span>\n        </div>\n      </div>\n    );\n  }\n\n  // Show error state\n  if (error && !loading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <Icon name=\"AlertCircle\" size={48} className=\"text-red-500 mx-auto mb-4\" />\n          <h2 className=\"text-lg font-semibold text-gray-900 mb-2\">Error al cargar datos</h2>\n          <p className=\"text-gray-600 mb-4\">{error}</p>\n          <Button onClick={loadEmployees} variant=\"outline\">\n            Reintentar\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Sidebar */}\n      <RoleBasedSidebar \n        isCollapsed={sidebarCollapsed}\n        onToggleCollapse={() => setSidebarCollapsed(!sidebarCollapsed)}\n        userRole={currentUser?.role?.toLowerCase()}\n      />\n\n      {/* Main Content */}\n      <div className={`transition-all duration-300 ease-out-cubic ${sidebarCollapsed ? 'ml-16' : 'ml-60'} pb-16 md:pb-0`}>\n        {/* Header */}\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => setSidebarCollapsed(!sidebarCollapsed)}\n                className=\"hidden md:flex\"\n                iconName={sidebarCollapsed ? 'PanelLeftOpen' : 'PanelLeftClose'}\n                iconSize={20}\n              />\n              \n              <div>\n                <h1 className=\"text-2xl font-bold text-foreground\">Consola de Empleados</h1>\n                <p className=\"text-muted-foreground\">Gestión integral de empleados y estructura organizacional</p>\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-4\">\n              {/* Global Search */}\n              <div className=\"hidden md:block w-80\">\n                <Input\n                  type=\"search\"\n                  placeholder=\"Buscar empleados...\"\n                  value={globalSearch}\n                  onChange={(e) => setGlobalSearch(e?.target?.value)}\n                  className=\"w-full\"\n                />\n              </div>\n\n              <NotificationCenter />\n              <UserContextHeader \n                onLogout={() => navigate('/employee-login-portal')}\n              />\n            </div>\n          </div>\n        </header>\n\n        {/* Content */}\n        <main className=\"p-6\">\n          {/* Navigation Header */}\n          <NavigationHeader \n            title=\"Consola de Empleados\"\n            subtitle=\"Gestión integral de empleados y estructura organizacional\"\n            showBackButton={false}\n            showHomeButton={false}\n          />\n\n          {/* Stats Cards */}\n          {stats && (\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n              <div className=\"bg-card rounded-lg p-4 border border-border\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"p-2 bg-blue-100 rounded-lg\">\n                    <Icon name=\"Users\" size={20} className=\"text-blue-600\" />\n                  </div>\n                  <div>\n                    <div className=\"text-2xl font-bold text-foreground\">{stats?.total}</div>\n                    <div className=\"text-sm text-muted-foreground\">Total Empleados</div>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"bg-card rounded-lg p-4 border border-border\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"p-2 bg-green-100 rounded-lg\">\n                    <Icon name=\"CheckCircle\" size={20} className=\"text-green-600\" />\n                  </div>\n                  <div>\n                    <div className=\"text-2xl font-bold text-foreground\">{stats?.active}</div>\n                    <div className=\"text-sm text-muted-foreground\">Activos</div>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"bg-card rounded-lg p-4 border border-border\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"p-2 bg-gray-100 rounded-lg\">\n                    <Icon name=\"Pause\" size={20} className=\"text-gray-600\" />\n                  </div>\n                  <div>\n                    <div className=\"text-2xl font-bold text-foreground\">{stats?.inactive}</div>\n                    <div className=\"text-sm text-muted-foreground\">Inactivos</div>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"bg-card rounded-lg p-4 border border-border\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"p-2 bg-red-100 rounded-lg\">\n                    <Icon name=\"AlertCircle\" size={20} className=\"text-red-600\" />\n                  </div>\n                  <div>\n                    <div className=\"text-2xl font-bold text-foreground\">{stats?.suspended}</div>\n                    <div className=\"text-sm text-muted-foreground\">Suspendidos</div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Action Bar */}\n          <div className=\"flex items-center justify-between mb-6\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-2 text-muted-foreground\">\n                <Icon name=\"Users\" size={20} />\n                <span className=\"text-sm\">\n                  {filteredEmployees?.length} empleado{filteredEmployees?.length !== 1 ? 's' : ''} \n                  {filteredEmployees?.length !== employees?.length && ` de ${employees?.length} total`}\n                </span>\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-2\">\n              <Button\n                variant=\"outline\"\n                onClick={handleExportData}\n                iconName=\"Download\"\n                iconSize={16}\n              >\n                Exportar\n              </Button>\n              \n              <Button\n                onClick={() => setIsCreationModalOpen(true)}\n                iconName=\"Plus\"\n                iconSize={16}\n              >\n                Nuevo Empleado\n              </Button>\n            </div>\n          </div>\n\n          {/* Bulk Actions */}\n          <BulkActionsToolbar\n            selectedCount={selectedEmployees?.length}\n            onBulkAction={handleBulkAction}\n            onClearSelection={() => setSelectedEmployees([])}\n            userRole={currentUser?.role?.toLowerCase()}\n          />\n\n          {/* Main Layout */}\n          <div className=\"grid grid-cols-1 xl:grid-cols-4 gap-6\">\n            {/* Filters Sidebar */}\n            <div className=\"xl:col-span-1\">\n              <EmployeeFilters\n                filters={filters}\n                onFiltersChange={setFilters}\n                onClearFilters={handleClearFilters}\n                savedFilters={savedFilters}\n                onSaveFilter={handleSaveFilter}\n                onLoadFilter={handleLoadFilter}\n              />\n            </div>\n\n            {/* Employee Table */}\n            <div className={`${isDetailPanelOpen ? 'xl:col-span-2' : 'xl:col-span-3'}`}>\n              <EmployeeTable\n                employees={filteredEmployees}\n                selectedEmployees={selectedEmployees}\n                onEmployeeSelect={handleEmployeeSelect}\n                onSelectAll={handleSelectAll}\n                onEmployeeClick={handleEmployeeClick}\n                onSort={setSortConfig}\n                sortConfig={sortConfig}\n                onDelete={async (employeeId) => {\n                  try {\n                    await enhancedEmployeeService?.deleteEmployee(employeeId, currentUser?.id);\n                    await loadEmployees();\n                    await loadStats();\n                  } catch (err) {\n                    console.error('Error deleting employee:', err);\n                    setError('Failed to delete employee');\n                  }\n                }}\n                onRestore={async (employeeId) => {\n                  try {\n                    await enhancedEmployeeService?.updateEmployee(employeeId, { status: 'active' });\n                    await loadEmployees();\n                    await loadStats();\n                  } catch (err) {\n                    console.error('Error restoring employee:', err);\n                    setError('Failed to restore employee');\n                  }\n                }}\n                userRole={currentUser?.role?.toLowerCase()}\n                loading={loading}\n              />\n            </div>\n\n            {/* Detail Panel */}\n            {isDetailPanelOpen && (\n              <div className=\"xl:col-span-1\">\n                <EmployeeDetailPanel\n                  employee={selectedEmployee}\n                  onClose={handleCloseDetailPanel}\n                  onSave={handleSaveEmployee}\n                  onViewAttendance={handleViewAttendance}\n                  onViewPayroll={handleViewPayroll}\n                  onViewIncidents={handleViewIncidents}\n                  userRole={currentUser?.role?.toLowerCase()}\n                  isEditing={isEditingEmployee}\n                  onToggleEdit={() => setIsEditingEmployee(!isEditingEmployee)}\n                />\n              </div>\n            )}\n          </div>\n        </main>\n      </div>\n\n      {/* Employee Creation Modal */}\n      <EmployeeCreationModal\n        isOpen={isCreationModalOpen}\n        onClose={() => setIsCreationModalOpen(false)}\n        onSave={handleCreateEmployee}\n        userRole={currentUser?.role?.toLowerCase()}\n      />\n    </div>\n  );\n};\n\nexport default AdministratorEmployeeManagementConsole;","size_bytes":20420},"src/pages/advanced-payroll-calculation-engine-with-comprehensive-wage-management/index.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Calculator, DollarSign, Clock, TrendingUp, Users, FileText, AlertCircle, CheckCircle2 } from 'lucide-react';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { payrollService } from '../../services/payrollService';\nimport { employeeService } from '../../services/employeeService';\nimport BrandedHeader from '../../components/ui/BrandedHeader';\nimport PayrollCalculationDashboard from './components/PayrollCalculationDashboard';\nimport EmployeePayrollGrid from './components/EmployeePayrollGrid';\nimport BulkProcessingTools from './components/BulkProcessingTools';\nimport PayrollAuditTrail from './components/PayrollAuditTrail';\nimport CurrencyDisplay from '../../components/ui/CurrencyDisplay';\n\nexport default function AdvancedPayrollCalculationEngineWithComprehensiveWageManagement() {\n  const { user, userProfile } = useAuth();\n  const [employees, setEmployees] = useState([]);\n  const [selectedEmployees, setSelectedEmployees] = useState([]);\n  const [payrollData, setPayrollData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [processing, setProcessing] = useState(false);\n  const [activeView, setActiveView] = useState('dashboard');\n  const [auditEntries, setAuditEntries] = useState([]);\n  const [weekRange, setWeekRange] = useState({\n    start: new Date(),\n    end: new Date()\n  });\n\n  // Initialize week range to current week\n  useEffect(() => {\n    const now = new Date();\n    const startOfWeek = new Date(now);\n    startOfWeek?.setDate(now?.getDate() - now?.getDay());\n    const endOfWeek = new Date(startOfWeek);\n    endOfWeek?.setDate(startOfWeek?.getDate() + 6);\n    \n    setWeekRange({\n      start: startOfWeek,\n      end: endOfWeek\n    });\n  }, []);\n\n  // Load employees with payroll data\n  useEffect(() => {\n    if (!user) return;\n\n    const loadEmployeesAndPayroll = async () => {\n      try {\n        setLoading(true);\n        const employeeData = await employeeService?.getAllEmployees();\n        setEmployees(employeeData || []);\n\n        // Load existing payroll data for current week\n        const startDate = weekRange?.start?.toISOString()?.split('T')?.[0];\n        const payrollSummary = await payrollService?.getPayrollSummary(startDate, startDate);\n        setPayrollData(payrollSummary || []);\n      } catch (error) {\n        console.error('Error loading data:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadEmployeesAndPayroll();\n  }, [user, weekRange]);\n\n  // Calculate payroll for single employee\n  const calculateSinglePayroll = async (employeeId) => {\n    try {\n      setProcessing(true);\n      const startDate = weekRange?.start?.toISOString()?.split('T')?.[0];\n      \n      const calculation = await payrollService?.calculateWeeklyPayroll(\n        employeeId, \n        startDate, \n        weekRange?.end?.toISOString()?.split('T')?.[0]\n      );\n\n      // Update payroll data\n      setPayrollData(prev => {\n        const updated = prev?.filter(p => p?.employeeId !== employeeId);\n        return [...updated, calculation];\n      });\n\n      // Add audit entry\n      const employee = employees?.find(e => e?.id === employeeId);\n      setAuditEntries(prev => [...prev, {\n        id: Date.now(),\n        action: 'calculate_payroll',\n        employee: employee?.full_name || 'Unknown',\n        amount: calculation?.grossPay || 0,\n        timestamp: new Date(),\n        user: userProfile?.full_name || 'System'\n      }]);\n\n    } catch (error) {\n      console.error('Error calculating payroll:', error);\n    } finally {\n      setProcessing(false);\n    }\n  };\n\n  // Bulk calculate payroll for selected employees\n  const calculateBulkPayroll = async () => {\n    if (selectedEmployees?.length === 0) return;\n\n    try {\n      setProcessing(true);\n      const calculations = [];\n      \n      for (const employeeId of selectedEmployees) {\n        const startDate = weekRange?.start?.toISOString()?.split('T')?.[0];\n        const calculation = await payrollService?.calculateWeeklyPayroll(\n          employeeId,\n          startDate,\n          weekRange?.end?.toISOString()?.split('T')?.[0]\n        );\n        calculations?.push(calculation);\n      }\n\n      // Update payroll data\n      setPayrollData(prev => {\n        const filtered = prev?.filter(p => !selectedEmployees?.includes(p?.employeeId));\n        return [...filtered, ...calculations];\n      });\n\n      // Add bulk audit entry\n      setAuditEntries(prev => [...prev, {\n        id: Date.now(),\n        action: 'bulk_calculate',\n        employee: `${selectedEmployees?.length} employees`,\n        amount: calculations?.reduce((sum, calc) => sum + (calc?.grossPay || 0), 0),\n        timestamp: new Date(),\n        user: userProfile?.full_name || 'System'\n      }]);\n\n    } catch (error) {\n      console.error('Error in bulk calculation:', error);\n    } finally {\n      setProcessing(false);\n    }\n  };\n\n  // Calculate Christmas bonus (Aguinaldo)\n  const calculateAguinaldo = async (employeeId, daysWorked = 365) => {\n    try {\n      const employee = employees?.find(e => e?.id === employeeId);\n      if (!employee) return;\n\n      // 15-day minimum requirement based on daily salary\n      const dailySalary = employee?.daily_salary || 0;\n      const aguinaldo = (dailySalary * 15 * daysWorked) / 365;\n\n      setAuditEntries(prev => [...prev, {\n        id: Date.now(),\n        action: 'calculate_aguinaldo',\n        employee: employee?.full_name,\n        amount: aguinaldo,\n        timestamp: new Date(),\n        user: userProfile?.full_name || 'System',\n        details: `${daysWorked} days worked`\n      }]);\n\n      return aguinaldo;\n    } catch (error) {\n      console.error('Error calculating aguinaldo:', error);\n    }\n  };\n\n  // Calculate severance payment (Finiquito)\n  const calculateSeverance = async (employeeId, terminationReason = 'voluntary') => {\n    try {\n      const employee = employees?.find(e => e?.id === employeeId);\n      if (!employee) return;\n\n      const dailySalary = employee?.daily_salary || 0;\n      let severanceAmount = 0;\n\n      // Different calculations based on termination type\n      switch (terminationReason) {\n        case 'without_cause':\n          severanceAmount = dailySalary * 90; // 90-day salary\n          break;\n        case 'voluntary':\n          severanceAmount = dailySalary * 20; // 20-day vacation premium\n          break;\n        default:\n          severanceAmount = dailySalary * 30;\n      }\n\n      setAuditEntries(prev => [...prev, {\n        id: Date.now(),\n        action: 'calculate_severance',\n        employee: employee?.full_name,\n        amount: severanceAmount,\n        timestamp: new Date(),\n        user: userProfile?.full_name || 'System',\n        details: `Reason: ${terminationReason}`\n      }]);\n\n      return severanceAmount;\n    } catch (error) {\n      console.error('Error calculating severance:', error);\n    }\n  };\n\n  // Process payroll (mark as approved)\n  const processPayroll = async (payrollId) => {\n    try {\n      await payrollService?.processPayroll(payrollId, user?.id);\n      \n      // Update local state\n      setPayrollData(prev => \n        prev?.map(p => \n          p?.id === payrollId \n            ? { ...p, processed: true, processedBy: user?.id, processedAt: new Date() }\n            : p\n        )\n      );\n    } catch (error) {\n      console.error('Error processing payroll:', error);\n    }\n  };\n\n  const stats = {\n    totalEmployees: employees?.length,\n    processedPayroll: payrollData?.filter(p => p?.processed)?.length,\n    totalGrossPay: payrollData?.reduce((sum, p) => sum + (p?.grossPay || 0), 0),\n    totalNetPay: payrollData?.reduce((sum, p) => sum + (p?.netPay || 0), 0)\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"flex flex-col items-center space-y-4\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n          <span className=\"text-gray-600\">Cargando motor de nóminas...</span>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <BrandedHeader \n        title=\"Motor Avanzado de Cálculo de Nóminas\"\n        subtitle=\"Gestión integral de salarios con cálculos automatizados\"\n        icon={Calculator}\n        user={userProfile}\n      />\n      {/* Stats Cards */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <div className=\"bg-white p-6 rounded-lg shadow\">\n            <div className=\"flex items-center\">\n              <Users className=\"h-8 w-8 text-blue-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Total Empleados</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{stats?.totalEmployees}</p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-white p-6 rounded-lg shadow\">\n            <div className=\"flex items-center\">\n              <CheckCircle2 className=\"h-8 w-8 text-green-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Nóminas Procesadas</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{stats?.processedPayroll}</p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-white p-6 rounded-lg shadow\">\n            <div className=\"flex items-center\">\n              <DollarSign className=\"h-8 w-8 text-emerald-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Salario Bruto</p>\n                <p className=\"text-2xl font-bold text-gray-900\">\n                  <CurrencyDisplay amount={stats?.totalGrossPay} />\n                </p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-white p-6 rounded-lg shadow\">\n            <div className=\"flex items-center\">\n              <TrendingUp className=\"h-8 w-8 text-purple-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Salario Neto</p>\n                <p className=\"text-2xl font-bold text-gray-900\">\n                  <CurrencyDisplay amount={stats?.totalNetPay} />\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Navigation Tabs */}\n        <div className=\"bg-white rounded-lg shadow mb-8\">\n          <div className=\"border-b border-gray-200\">\n            <nav className=\"-mb-px flex\">\n              <button\n                onClick={() => setActiveView('dashboard')}\n                className={`px-6 py-3 font-medium text-sm border-b-2 ${\n                  activeView === 'dashboard' ?'border-blue-500 text-blue-600' :'border-transparent text-gray-500 hover:text-gray-700'\n                }`}\n              >\n                <Calculator className=\"h-4 w-4 inline mr-2\" />\n                Panel de Cálculo\n              </button>\n\n              <button\n                onClick={() => setActiveView('employees')}\n                className={`px-6 py-3 font-medium text-sm border-b-2 ${\n                  activeView === 'employees' ?'border-blue-500 text-blue-600' :'border-transparent text-gray-500 hover:text-gray-700'\n                }`}\n              >\n                <Users className=\"h-4 w-4 inline mr-2\" />\n                Lista de Empleados\n              </button>\n\n              <button\n                onClick={() => setActiveView('bulk')}\n                className={`px-6 py-3 font-medium text-sm border-b-2 ${\n                  activeView === 'bulk' ?'border-blue-500 text-blue-600' :'border-transparent text-gray-500 hover:text-gray-700'\n                }`}\n              >\n                <FileText className=\"h-4 w-4 inline mr-2\" />\n                Procesamiento Masivo\n              </button>\n\n              <button\n                onClick={() => setActiveView('audit')}\n                className={`px-6 py-3 font-medium text-sm border-b-2 ${\n                  activeView === 'audit' ?'border-blue-500 text-blue-600' :'border-transparent text-gray-500 hover:text-gray-700'\n                }`}\n              >\n                <AlertCircle className=\"h-4 w-4 inline mr-2\" />\n                Auditoría\n              </button>\n            </nav>\n          </div>\n        </div>\n\n        {/* Content Area */}\n        <div className=\"grid grid-cols-12 gap-8\">\n          {/* Main Content (60%) */}\n          <div className=\"col-span-12 lg:col-span-7\">\n            {activeView === 'dashboard' && (\n              <PayrollCalculationDashboard\n                weekRange={weekRange}\n                onWeekRangeChange={setWeekRange}\n                payrollData={payrollData}\n                onCalculatePayroll={calculateSinglePayroll}\n                onCalculateAguinaldo={calculateAguinaldo}\n                onCalculateSeverance={calculateSeverance}\n                processing={processing}\n              />\n            )}\n\n            {activeView === 'employees' && (\n              <EmployeePayrollGrid\n                employees={employees}\n                payrollData={payrollData}\n                selectedEmployees={selectedEmployees}\n                onSelectionChange={setSelectedEmployees}\n                onCalculatePayroll={calculateSinglePayroll}\n                onProcessPayroll={processPayroll}\n                processing={processing}\n              />\n            )}\n\n            {activeView === 'bulk' && (\n              <BulkProcessingTools\n                selectedEmployees={selectedEmployees}\n                employees={employees}\n                onBulkCalculate={calculateBulkPayroll}\n                processing={processing}\n                weekRange={weekRange}\n              />\n            )}\n\n            {activeView === 'audit' && (\n              <PayrollAuditTrail\n                auditEntries={auditEntries}\n                onClearAudit={() => setAuditEntries([])}\n              />\n            )}\n          </div>\n\n          {/* Sidebar (40%) */}\n          <div className=\"col-span-12 lg:col-span-5\">\n            <div className=\"bg-white rounded-lg shadow\">\n              <div className=\"p-6\">\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n                  <Clock className=\"h-5 w-5 inline mr-2\" />\n                  Actualizaciones en Tiempo Real\n                </h3>\n                \n                <div className=\"space-y-4\">\n                  {payrollData?.slice(0, 5)?.map((payroll, index) => (\n                    <div key={index} className=\"flex items-center justify-between p-3 bg-gray-50 rounded\">\n                      <div>\n                        <p className=\"font-medium text-sm\">{payroll?.employeeName || 'Empleado'}</p>\n                        <p className=\"text-xs text-gray-500\">\n                          {payroll?.regularHours || 0}h normales, {payroll?.overtimeHours || 0}h extra\n                        </p>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"font-bold text-sm\">\n                          <CurrencyDisplay amount={payroll?.grossPay || 0} />\n                        </p>\n                        <span className={`inline-flex px-2 py-1 rounded-full text-xs font-medium ${\n                          payroll?.processed \n                            ? 'bg-green-100 text-green-800' :'bg-yellow-100 text-yellow-800'\n                        }`}>\n                          {payroll?.processed ? 'Procesada' : 'Pendiente'}\n                        </span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n\n                {payrollData?.length === 0 && (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    <Calculator className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                    <p>No hay cálculos de nómina disponibles</p>\n                    <p className=\"text-sm\">Selecciona empleados para comenzar</p>\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* Quick Actions */}\n            <div className=\"bg-white rounded-lg shadow mt-6\">\n              <div className=\"p-6\">\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Acciones Rápidas</h3>\n                \n                <div className=\"space-y-3\">\n                  <button\n                    onClick={calculateBulkPayroll}\n                    disabled={selectedEmployees?.length === 0 || processing}\n                    className=\"w-full px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    Calcular Nómina Semanal\n                  </button>\n\n                  <button\n                    onClick={() => calculateBulkPayroll()}\n                    disabled={processing}\n                    className=\"w-full px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50\"\n                  >\n                    Generar Aguinaldos\n                  </button>\n\n                  <button\n                    onClick={() => calculateBulkPayroll()}\n                    disabled={processing}\n                    className=\"w-full px-4 py-2 bg-orange-600 text-white rounded-lg hover:bg-orange-700 disabled:opacity-50\"\n                  >\n                    Calcular Finiquitos\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":17638},"src/pages/attendance-history-and-analytics-dashboard/index.jsx":{"content":"// src/modules/attendance-history-and-analytics-dashboard/index.jsx\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport RoleBasedSidebar from '../../components/ui/RoleBasedSidebar';\nimport NavigationBreadcrumb from '../../components/ui/NavigationBreadcrumb';\nimport UserContextHeader from '../../components/ui/UserContextHeader';\nimport NotificationCenter from '../../components/ui/NotificationCenter';\nimport Icon from '../../components/AppIcon';\nimport Button from '../../components/ui/Button';\n\n// Page components\nimport KPICard from './components/KPICard';\nimport FilterPanel from './components/FilterPanel';\nimport AttendanceGrid from './components/AttendanceGrid';\nimport AttendanceChart from './components/AttendanceChart';\nimport ExportPanel from './components/ExportPanel';\n\n// Service (con listAttendancePaginated)\nimport attendanceService from '@/services/attendanceService';\n\n// ---------- Helpers ----------\nconst sortKeyMap = {\n  // mapeo de claves del grid -> service\n  employee: 'employee',\n  date: 'date',\n  clockIn: 'clockIn',\n  clockOut: 'clockOut',\n  totalHours: 'totalHours',\n  overtime: 'overtime',\n  status: 'status',\n};\n\n// Mapea filtros de UI -> parámetros del servicio\nconst mapUiFiltersToService = (f) => {\n  const norm = (s) => (s && String(s).trim().length ? s : null);\n  return {\n    startDate: norm(f?.dateFrom) || null,\n    endDate: norm(f?.dateTo) || null,\n    siteId: f?.site && f?.site !== 'all' ? f?.site : null,\n    // Si en tu UI tienes un selector de empleado por id, úsalo aquí.\n    employeeId: f?.employeeId || null,\n    status: f?.status && f?.status !== 'all' ? f?.status : null,\n    search: norm(f?.employee) || null, // búsqueda por nombre de empleado (string libre)\n  };\n};\n\n// ---------- Dashboard ----------\nconst AttendanceHistoryAndAnalyticsDashboard = () => {\n  const navigate = useNavigate();\n\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\n  const [filterPanelCollapsed, setFilterPanelCollapsed] = useState(false);\n\n  // Chart selector (el componente usa datos mock internos, así que esto es visual)\n  const [chartType, setChartType] = useState('bar');\n\n  // Grid selection + sort\n  const [selectedRecords, setSelectedRecords] = useState([]);\n  const [sortConfig, setSortConfig] = useState({ key: 'date', direction: 'desc' });\n\n  // Export\n  const [isExporting, setIsExporting] = useState(false);\n\n  // Usuario actual (mock)\n  const currentUser = {\n    name: 'Ana Rodríguez',\n    role: 'Supervisor',\n    site: 'Obra Central',\n    avatar: null,\n  };\n\n  // Filtros UI\n  const [filters, setFilters] = useState({\n    dateFrom: '2025-01-01',\n    dateTo: '2025-01-04',\n    site: 'all',\n    supervisor: 'all',\n    status: 'all',\n    employee: '',\n    includeIncidents: false,\n    includeOvertime: true,\n    savedView: '',\n  });\n\n  // Datos del grid (desde servicio)\n  const [records, setRecords] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [page, setPage] = useState(1);\n  const pageSize = 20;\n  const [totalPages, setTotalPages] = useState(1);\n  const [totalCount, setTotalCount] = useState(0);\n\n  // KPI data (mock visual)\n  const kpiData = [\n    {\n      title: 'Asistencia General',\n      value: '94.2',\n      unit: '%',\n      trend: 'up',\n      trendValue: '+2.1%',\n      icon: 'Users',\n      color: 'success',\n      description: 'vs. mes anterior',\n    },\n    {\n      title: 'Tardanzas',\n      value: '6.8',\n      unit: '%',\n      trend: 'down',\n      trendValue: '-1.2%',\n      icon: 'Clock',\n      color: 'warning',\n      description: 'Reducción significativa',\n    },\n    {\n      title: 'Horas Extra',\n      value: '142.5',\n      unit: 'hrs',\n      trend: 'up',\n      trendValue: '+8.3%',\n      icon: 'Zap',\n      color: 'primary',\n      description: 'Esta semana',\n    },\n    {\n      title: 'Días Incompletos',\n      value: '12',\n      unit: '',\n      trend: 'down',\n      trendValue: '-3',\n      icon: 'AlertTriangle',\n      color: 'error',\n      description: 'Pendientes de validación',\n    },\n  ];\n\n  // --------- Handlers de filtros / orden ----------\n  const handleFiltersChange = (newFilters) => {\n    setFilters(newFilters);\n  };\n\n  const handleApplyFilters = (appliedFilters) => {\n    setFilters(appliedFilters);\n    setPage(1);\n  };\n\n  const handleResetFilters = () => {\n    const resetFilters = {\n      dateFrom: '',\n      dateTo: '',\n      site: 'all',\n      supervisor: 'all',\n      status: 'all',\n      employee: '',\n      includeIncidents: false,\n      includeOvertime: true,\n      savedView: '',\n    };\n    setFilters(resetFilters);\n    setPage(1);\n  };\n\n  const handleSort = (key) => {\n    setSortConfig((prev) => ({\n      key,\n      direction: prev?.key === key && prev?.direction === 'asc' ? 'desc' : 'asc',\n    }));\n    setPage(1);\n  };\n\n  // --------- Bulk / Edición / Export ----------\n  const handleBulkAction = (action) => {\n    // Aquí puedes enviar a un endpoint o abrir modal de confirmación\n    console.log(`Bulk action: ${action} on records:`, selectedRecords);\n  };\n\n  const handleRecordEdit = (record) => {\n    console.log('Editing record:', record);\n    // Aquí puedes navegar a un formulario o abrir modal\n  };\n\n  const handleExport = async (exportConfig) => {\n    setIsExporting(true);\n    console.log('Exporting with config:', exportConfig);\n    setTimeout(() => {\n      setIsExporting(false);\n      // Notificación de éxito\n    }, 2000);\n  };\n\n  // --------- Sesión / sitio ----------\n  const handleLogout = () => {\n    navigate('/employee-login-portal');\n  };\n\n  const handleSiteChange = (site) => {\n    console.log('Site changed to:', site);\n  };\n\n  // --------- Carga de datos ----------\n  const serviceParams = useMemo(() => {\n    const base = mapUiFiltersToService(filters);\n    return {\n      ...base,\n      page,\n      pageSize,\n      sortKey: sortKeyMap[sortConfig?.key] || 'date',\n      sortDir: sortConfig?.direction || 'desc',\n    };\n  }, [filters, page, pageSize, sortConfig]);\n\n  useEffect(() => {\n    let cancelled = false;\n    (async () => {\n      setLoading(true);\n      const { ok, data, error } = await attendanceService.listAttendancePaginated(serviceParams);\n      if (cancelled) return;\n      setLoading(false);\n\n      if (!ok) {\n        console.error('Error loading attendance:', error);\n        setRecords([]);\n        setTotalCount(0);\n        setTotalPages(1);\n        return;\n      }\n\n      setRecords(data?.data || []);\n      setTotalCount(data?.totalCount || 0);\n      setTotalPages(data?.totalPages || 1);\n    })();\n    return () => {\n      cancelled = true;\n    };\n  }, [serviceParams]);\n\n  // --------- Atajos de teclado ----------\n  useEffect(() => {\n    const handleKeyPress = (e) => {\n      if (e?.ctrlKey || e?.metaKey) {\n        switch (e?.key) {\n          case 'f':\n            e?.preventDefault();\n            setFilterPanelCollapsed((v) => !v);\n            break;\n          case 'e':\n            e?.preventDefault();\n            handleExport({ format: 'excel', dateRange: 'current' });\n            break;\n          default:\n            break;\n        }\n      }\n    };\n    window.addEventListener('keydown', handleKeyPress);\n    return () => window.removeEventListener('keydown', handleKeyPress);\n  }, [filterPanelCollapsed]);\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Sidebar */}\n      <RoleBasedSidebar\n        isCollapsed={sidebarCollapsed}\n        userRole={currentUser?.role?.toLowerCase()}\n      />\n\n      {/* Main Content */}\n      <div className={`transition-all duration-300 ${sidebarCollapsed ? 'ml-16' : 'ml-60'} pb-16 md:pb-0`}>\n        {/* Header */}\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => setSidebarCollapsed(!sidebarCollapsed)}\n                className=\"hidden md:flex\"\n              >\n                <Icon name={sidebarCollapsed ? 'ChevronRight' : 'ChevronLeft'} size={20} />\n              </Button>\n\n              <div>\n                <h1 className=\"text-xl font-semibold text-foreground\">Historial y Análisis de Asistencia</h1>\n                <p className=\"text-sm text-muted-foreground\">\n                  Análisis detallado y tendencias de asistencia laboral\n                </p>\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-4\">\n              <NotificationCenter />\n              <UserContextHeader\n                user={currentUser}\n                onLogout={handleLogout}\n                onSiteChange={handleSiteChange}\n              />\n            </div>\n          </div>\n        </header>\n\n        {/* Content */}\n        <main className=\"p-6\">\n          <NavigationBreadcrumb />\n\n          {/* KPI Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n            {kpiData?.map((kpi, index) => (\n              <KPICard\n                key={index}\n                title={kpi?.title}\n                value={kpi?.value}\n                unit={kpi?.unit}\n                trend={kpi?.trend}\n                trendValue={kpi?.trendValue}\n                icon={kpi?.icon}\n                color={kpi?.color}\n                description={kpi?.description}\n              />\n            ))}\n          </div>\n\n          {/* Main Dashboard Layout */}\n          <div className=\"flex gap-6\">\n            {/* Filter Panel */}\n            <FilterPanel\n              isCollapsed={filterPanelCollapsed}\n              onToggleCollapse={() => setFilterPanelCollapsed(!filterPanelCollapsed)}\n              filters={filters}\n              onFiltersChange={handleFiltersChange}\n              onApplyFilters={handleApplyFilters}\n              onResetFilters={handleResetFilters}\n            />\n\n            {/* Analytics Area */}\n            <div className=\"flex-1 space-y-6\">\n              {/* Charts Section (visual; usa datos internos del componente) */}\n              <AttendanceChart\n                data={records} // el componente usa mocks internos; mantenemos la prop para futura integración\n                chartType={chartType}\n                onChartTypeChange={setChartType}\n              />\n\n              {/* Data Grid */}\n              <AttendanceGrid\n                data={records}\n                onSort={handleSort}\n                sortConfig={sortConfig}\n                onBulkAction={handleBulkAction}\n                selectedRecords={selectedRecords}\n                onRecordSelect={setSelectedRecords}\n                onRecordEdit={handleRecordEdit}\n              />\n\n              {/* Paginación (nivel dashboard, porque el grid actual muestra una barra estática) */}\n              <div className=\"flex items-center justify-between p-4 border border-border rounded-lg bg-card\">\n                <div className=\"text-sm text-muted-foreground\">\n                  Mostrando {records?.length} de {totalCount} registros\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setPage((p) => Math.max(1, p - 1))}\n                    disabled={page === 1 || loading}\n                  >\n                    <Icon name=\"ChevronLeft\" size={16} />\n                  </Button>\n                  <span className=\"px-3 py-1 text-sm bg-primary text-primary-foreground rounded\">\n                    {page}\n                  </span>\n                  <span className=\"px-3 py-1 text-sm text-muted-foreground\">\n                    / {totalPages}\n                  </span>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setPage((p) => (p < totalPages ? p + 1 : p))}\n                    disabled={page >= totalPages || loading}\n                  >\n                    <Icon name=\"ChevronRight\" size={16} />\n                  </Button>\n                </div>\n              </div>\n            </div>\n\n            {/* Export Panel - Desktop Only */}\n            <div className=\"hidden xl:block w-80\">\n              <ExportPanel\n                onExport={handleExport}\n                isExporting={isExporting}\n              />\n            </div>\n          </div>\n\n          {/* Mobile Export Button */}\n          <div className=\"xl:hidden mt-6\">\n            <Button\n              variant=\"default\"\n              fullWidth\n              iconName=\"Download\"\n              iconPosition=\"left\"\n              onClick={() => handleExport({ format: 'excel', dateRange: 'current' })}\n              loading={isExporting}\n            >\n              Exportar Datos\n            </Button>\n          </div>\n\n          {/* Keyboard Shortcuts Help */}\n          <div className=\"hidden md:block fixed bottom-4 right-4\">\n            <div className=\"bg-card border border-border rounded-lg p-3 shadow-lg\">\n              <div className=\"text-xs text-muted-foreground space-y-1\">\n                <div><kbd className=\"px-1 py-0.5 bg-muted rounded text-xs\">Ctrl+F</kbd> Filtros</div>\n                <div><kbd className=\"px-1 py-0.5 bg-muted rounded text-xs\">Ctrl+E</kbd> Exportar</div>\n              </div>\n            </div>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n};\n\nexport default AttendanceHistoryAndAnalyticsDashboard;\n","size_bytes":13515},"src/pages/comprehensive-employee-registration-and-profile-management/index.jsx":{"content":"import React, { useEffect, useMemo, useState } from 'react';\nimport { Users, UserPlus, Search, Download, RefreshCw, Building2, UserCheck, AlertTriangle } from 'lucide-react';\n\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useBranding } from '@/components/BrandingProvider';\n\nimport BrandedHeader from '@/components/ui/BrandedHeader';\nimport BrandedFooter from '@/components/ui/BrandedFooter';\nimport Button from '@/components/ui/Button';\nimport Input from '@/components/ui/Input';\nimport Select from '@/components/ui/Select';\nimport NavigationBreadcrumb from '@/components/ui/NavigationBreadcrumb';\nimport UserContextHeader from '@/components/ui/UserContextHeader';\nimport NotificationCenter from '@/components/ui/NotificationCenter';\nimport CurrencyDisplay from '@/components/ui/CurrencyDisplay';\nimport Loading from '../../components/ui/Loading';\nimport ErrorState from '../../components/ui/ErrorState';\nimport { showToast } from '../../components/ui/ToastHub';\n\nimport { EmployeeRegistrationWizard } from './components/EmployeeRegistrationWizard';\nimport { EmployeeProfileEditor } from './components/EmployeeProfileEditor';\nimport { EmployeeListGrid } from './components/EmployeeListGrid';\n\nimport { supabase } from '@/lib/supabase';\nimport enhancedEmployeeService from '@/services/enhancedEmployeeService';\nimport { useQuery } from '../../hooks/useQuery';\n\nexport default function ComprehensiveEmployeeRegistrationAndProfileManagement() {\n  const { isAdmin, isSuperAdmin } = useAuth();\n  const { branding, formatCurrency } = useBranding();\n\n  // UI State\n  const [showRegistrationWizard, setShowRegistrationWizard] = useState(false);\n  const [showProfileEditor, setShowProfileEditor] = useState(false);\n  const [selectedEmployee, setSelectedEmployee] = useState(null);\n\n  // Filtros y búsqueda\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filters, setFilters] = useState({\n    site: 'all',\n    position: 'all',\n    status: 'active',\n    role: 'all',\n    supervisor: 'all'\n  });\n\n  const breadcrumbItems = useMemo(() => ([\n    { label: 'Gestión', href: '/admin' },\n    { label: 'Empleados', href: '/comprehensive-employee-registration-and-profile-management' }\n  ]), []);\n\n  // ------------ QUERIES ------------\n  // Empleados\n  const {\n    data: employeesData,\n    isLoading: employeesLoading,\n    error: employeesError,\n    refetch: refetchEmployees\n  } = useQuery(\n    enhancedEmployeeService.getEmployees.bind(enhancedEmployeeService),\n    {\n      params: {\n        search: searchTerm || undefined,\n        site: filters.site,\n        position: filters.position,\n        status: filters.status === 'all' ? [] : [filters.status],\n        supervisor: filters.supervisor\n      },\n      deps: [searchTerm, JSON.stringify(filters)],\n      retry: 1,\n      keepPreviousData: true,\n      onError: (e) => showToast({ title: 'Error al cargar empleados', message: e.message, type: 'error' })\n    }\n  );\n\n  // Sitios\n  const {\n    data: sitesData,\n    isLoading: sitesLoading,\n    error: sitesError,\n    refetch: refetchSites\n  } = useQuery(\n    enhancedEmployeeService.getSites.bind(enhancedEmployeeService),\n    {\n      deps: [],\n      retry: 1,\n      keepPreviousData: true,\n      onError: (e) => showToast({ title: 'Error al cargar sitios', message: e.message, type: 'error' })\n    }\n  );\n\n  // Supervisores\n  const {\n    data: supervisorsData,\n    isLoading: supervisorsLoading,\n    error: supervisorsError,\n    refetch: refetchSupervisors\n  } = useQuery(\n    enhancedEmployeeService.getSupervisors.bind(enhancedEmployeeService),\n    {\n      deps: [],\n      retry: 1,\n      keepPreviousData: true,\n      onError: (e) => showToast({ title: 'Error al cargar supervisores', message: e.message, type: 'error' })\n    }\n  );\n\n  // Estadísticas\n  const {\n    data: statsData,\n    isLoading: statsLoading,\n    error: statsError,\n    refetch: refetchStats\n  } = useQuery(\n    enhancedEmployeeService.getEmployeeStats.bind(enhancedEmployeeService),\n    {\n      deps: [],\n      retry: 1,\n      keepPreviousData: true,\n      onError: (e) => showToast({ title: 'Error al calcular estadísticas', message: e.message, type: 'error' })\n    }\n  );\n\n  const loading = employeesLoading || sitesLoading || supervisorsLoading || statsLoading;\n  const anyError = employeesError || sitesError || supervisorsError || statsError;\n\n  // Derivados\n  const employees = employeesData ?? [];\n  const constructionSites = sitesData ?? [];\n  const supervisors = supervisorsData ?? [];\n\n  const statistics = useMemo(() => ({\n    totalEmployees: statsData?.total ?? 0,\n    activeEmployees: statsData?.active ?? 0,\n    totalSites: constructionSites?.length ?? 0,\n    averageSalary: (() => {\n      if (!employees?.length) return 0;\n      let total = 0;\n      let count = 0;\n      employees.forEach(emp => {\n        if (emp?.salaryType === 'hourly' && emp?.hourlyRate > 0) {\n          total += Number(emp?.hourlyRate);\n          count++;\n        } else if (emp?.salaryType === 'daily' && emp?.dailySalary > 0) {\n          total += Number(emp?.dailySalary) / 8;\n          count++;\n        }\n      });\n      return count ? total / count : 0;\n    })()\n  }), [statsData, constructionSites, employees]);\n\n  // Re-fetch agrupado\n  const refreshAll = async () => {\n    await Promise.all([refetchEmployees(), refetchSites(), refetchSupervisors(), refetchStats()]);\n  };\n\n  // ------------ ACCIONES ------------\n  const handleEmployeeRegistration = async (employeeData) => {\n    try {\n      // 1) Crear usuario (opcional)\n      let userId = null;\n      if (employeeData?.email) {\n        const { data: authData, error: authError } = await supabase?.auth?.signUp({\n          email: employeeData?.email,\n          password: employeeData?.tempPassword || 'AsistenciaPro2024',\n          options: { data: { full_name: employeeData?.fullName, role: employeeData?.role || 'user' } }\n        });\n        if (authError && !authError?.message?.includes('already registered')) throw authError;\n        userId = authData?.user?.id ?? null;\n      }\n\n      // 2) Crear perfil\n      const payload = {\n        userId,\n        name: employeeData?.fullName,\n        employeeId: employeeData?.employeeId || `EMP-${Date.now()}`,\n        phone: employeeData?.phone,\n        address: employeeData?.address,\n        birthDate: employeeData?.birthDate,\n        hireDate: employeeData?.hireDate || new Date().toISOString().split('T')[0],\n        position: employeeData?.position || 'albañil',\n        salaryType: employeeData?.salaryType || 'daily',\n        hourlyRate: employeeData?.salaryType === 'hourly' ? Number(employeeData?.hourlyRate || 0) : 0,\n        dailySalary: employeeData?.salaryType === 'daily' ? Number(employeeData?.dailySalary || 0) : 0,\n        siteId: employeeData?.siteId || null,\n        supervisorId: employeeData?.supervisorId || null,\n        emergencyContact: employeeData?.emergencyContact,\n        idNumber: employeeData?.idNumber,\n        avatar: employeeData?.profilePicture || null\n      };\n\n      await enhancedEmployeeService.createEmployee(payload);\n\n      showToast({ title: 'Listo', message: 'Empleado registrado exitosamente', type: 'success' });\n      setShowRegistrationWizard(false);\n      await Promise.all([refetchEmployees(), refetchStats()]);\n      return { success: true };\n    } catch (error) {\n      showToast({ title: 'Error al registrar', message: error?.message, type: 'error' });\n      return { success: false, error: error?.message };\n    }\n  };\n\n  const handleEmployeeUpdate = async (employeeId, updateData) => {\n    try {\n      const payload = {\n        name: updateData?.fullName,\n        phone: updateData?.phone,\n        address: updateData?.address,\n        birthDate: updateData?.birthDate,\n        position: updateData?.position,\n        salaryType: updateData?.salaryType,\n        hourlyRate: updateData?.salaryType === 'hourly' ? Number(updateData?.hourlyRate || 0) : 0,\n        dailySalary: updateData?.salaryType === 'daily' ? Number(updateData?.dailySalary || 0) : 0,\n        siteId: updateData?.siteId,\n        supervisorId: updateData?.supervisorId,\n        emergencyContact: updateData?.emergencyContact,\n        idNumber: updateData?.idNumber,\n        avatar: updateData?.profilePicture\n      };\n\n      await enhancedEmployeeService.updateEmployee(employeeId, payload);\n\n      showToast({ title: 'Actualizado', message: 'Perfil del empleado actualizado', type: 'success' });\n      setShowProfileEditor(false);\n      setSelectedEmployee(null);\n      await refetchEmployees();\n      return { success: true };\n    } catch (error) {\n      showToast({ title: 'Error al actualizar', message: error?.message, type: 'error' });\n      return { success: false, error: error?.message };\n    }\n  };\n\n  const handleEmployeeAction = async (employeeId, action) => {\n    try {\n      let status = null;\n      if (action === 'activate') status = 'active';\n      if (action === 'suspend') status = 'suspended';\n      if (action === 'deactivate') status = 'inactive';\n      if (!status) return;\n\n      await enhancedEmployeeService.updateEmployee(employeeId, { status });\n      showToast({ title: 'Hecho', message: 'Estado actualizado', type: 'success' });\n      await Promise.all([refetchEmployees(), refetchStats()]);\n    } catch (error) {\n      showToast({ title: 'Error', message: error?.message, type: 'error' });\n    }\n  };\n\n  const exportEmployeeData = async () => {\n    try {\n      if (!employees?.length) return;\n      const csvRows = employees.map(emp => ({\n        'ID Empleado': emp?.employeeId || '',\n        'Nombre Completo': emp?.name || '',\n        'Email': emp?.email || 'N/A',\n        'Teléfono': emp?.phone || 'N/A',\n        'Puesto': emp?.position || '',\n        'Sitio': emp?.site || 'Sin asignar',\n        'Supervisor': emp?.supervisor || 'Sin asignar',\n        'Salario por Hora': formatCurrency(emp?.hourlyRate || 0),\n        'Salario Diario': formatCurrency(emp?.dailySalary || 0),\n        'Estado': emp?.status || '',\n        'Fecha de Contratación': emp?.hireDate || ''\n      }));\n\n      const header = Object.keys(csvRows[0] || {}).join(',');\n      const body = csvRows\n        .map(r =>\n          Object.values(r)\n            .map(v => `\"${String(v).replace(/\"/g, '\"\"')}\"`)\n            .join(',')\n        )\n        .join('\\n');\n      const csvContent = `${header}\\n${body}`;\n\n      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `empleados_${new Date().toISOString().split('T')[0]}.csv`;\n      link.click();\n      URL.revokeObjectURL(url);\n\n      showToast({ title: 'Listo', message: 'Datos exportados', type: 'success' });\n    } catch (_) {\n      showToast({ title: 'Error', message: 'No se pudo exportar', type: 'error' });\n    }\n  };\n\n  // ------------ GUARD DE ACCESO ------------\n  if (!isAdmin() && !isSuperAdmin()) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <AlertTriangle className=\"mx-auto h-12 w-12 text-red-500 mb-4\" />\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">Acceso Denegado</h1>\n          <p className=\"text-gray-600\">No tienes permisos para acceder a esta sección.</p>\n        </div>\n      </div>\n    );\n  }\n\n  // ------------ LOADING / ERROR ------------\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <Loading label=\"Cargando empleados y catálogos…\" />\n      </div>\n    );\n  }\n\n  if (anyError) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <ErrorState message=\"No se pudieron cargar los datos.\" onRetry={refreshAll} />\n      </div>\n    );\n  }\n\n  // ------------ RENDER ------------\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <BrandedHeader />\n      <UserContextHeader />\n      <NavigationBreadcrumb items={breadcrumbItems} />\n\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Page Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900 flex items-center gap-3\">\n                <Users className=\"h-8 w-8\" style={{ color: branding?.color_primario }} />\n                Gestión Integral de Empleados\n              </h1>\n              <p className=\"text-gray-600 mt-2\">\n                Registro, edición y administración completa de perfiles de empleados\n              </p>\n            </div>\n            <div className=\"flex gap-3\">\n              <Button\n                onClick={() => setShowRegistrationWizard(true)}\n                className=\"flex items-center gap-2\"\n                style={{ backgroundColor: branding?.color_primario }}\n              >\n                <UserPlus className=\"h-4 w-4\" />\n                Registrar Empleado\n              </Button>\n\n              <Button\n                variant=\"outline\"\n                onClick={exportEmployeeData}\n                className=\"flex items-center gap-2\"\n                disabled={employees?.length === 0}\n              >\n                <Download className=\"h-4 w-4\" />\n                Exportar\n              </Button>\n\n              <Button\n                variant=\"outline\"\n                onClick={refreshAll}\n                className=\"flex items-center gap-2\"\n              >\n                <RefreshCw className=\"h-4 w-4\" />\n                Actualizar\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Statistics Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Total Empleados</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{statistics?.totalEmployees}</p>\n              </div>\n              <div className=\"bg-blue-100 p-3 rounded-full\">\n                <Users className=\"h-6 w-6 text-blue-600\" />\n              </div>\n            </div>\n            <p className=\"text-xs text-gray-500 mt-2\">Empleados registrados en el sistema</p>\n          </div>\n\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Empleados Activos</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{statistics?.activeEmployees}</p>\n              </div>\n              <div className=\"bg-green-100 p-3 rounded-full\">\n                <UserCheck className=\"h-6 w-6 text-green-600\" />\n              </div>\n            </div>\n            <p className=\"text-xs text-gray-500 mt-2\">Con estado activo</p>\n          </div>\n\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Sitios de Construcción</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{statistics?.totalSites}</p>\n              </div>\n              <div className=\"bg-orange-100 p-3 rounded-full\">\n                <Building2 className=\"h-6 w-6 text-orange-600\" />\n              </div>\n            </div>\n            <p className=\"text-xs text-gray-500 mt-2\">Obras activas</p>\n          </div>\n\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Salario Promedio</p>\n                <p className=\"text-2xl font-bold text-gray-900\">\n                  <CurrencyDisplay amount={statistics?.averageSalary} />\n                </p>\n              </div>\n              <div className=\"bg-purple-100 p-3 rounded-full\">\n                <div className=\"h-6 w-6 text-purple-600 flex items-center justify-center text-sm font-bold\">\n                  {branding?.simbolo_moneda}\n                </div>\n              </div>\n            </div>\n            <p className=\"text-xs text-gray-500 mt-2\">Por hora promedio</p>\n          </div>\n        </div>\n\n        {/* Search and Filter Bar */}\n        <div className=\"bg-white rounded-lg shadow mb-8\">\n          <div className=\"p-6\">\n            <div className=\"flex flex-col lg:flex-row gap-4\">\n              <div className=\"flex-1\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                  <Input\n                    type=\"text\"\n                    placeholder=\"Buscar por nombre, ID, correo o teléfono...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e?.target?.value)}\n                    className=\"pl-10\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"flex gap-3 flex-wrap\">\n                <Select\n                  value={filters?.site}\n                  onChange={(e) => setFilters((f) => ({ ...f, site: e?.target?.value }))}\n                  options={[\n                    { value: 'all', label: 'Todos los sitios' },\n                    ...constructionSites?.map(site => ({ value: site?.id, label: site?.name }))\n                  ]}\n                  className=\"w-48\"\n                />\n\n                <Select\n                  value={filters?.position}\n                  onChange={(e) => setFilters((f) => ({ ...f, position: e?.target?.value }))}\n                  options={[\n                    { value: 'all', label: 'Todos los puestos' },\n                    { value: 'albañil', label: 'Albañil' },\n                    { value: 'ayudante', label: 'Ayudante' },\n                    { value: 'supervisor', label: 'Supervisor' },\n                    { value: 'administrativo', label: 'Administrativo' },\n                    { value: 'electricista', label: 'Electricista' },\n                    { value: 'plomero', label: 'Plomero' },\n                    { value: 'pintor', label: 'Pintor' },\n                    { value: 'carpintero', label: 'Carpintero' },\n                    { value: 'soldador', label: 'Soldador' },\n                    { value: 'operador_maquinaria', label: 'Operador de Maquinaria' }\n                  ]}\n                  className=\"w-48\"\n                />\n\n                <Select\n                  value={filters?.status}\n                  onChange={(e) => setFilters((f) => ({ ...f, status: e?.target?.value }))}\n                  options={[\n                    { value: 'all', label: 'Todos los estados' },\n                    { value: 'active', label: 'Activo' },\n                    { value: 'inactive', label: 'Inactivo' },\n                    { value: 'suspended', label: 'Suspendido' }\n                  ]}\n                  className=\"w-48\"\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Employee List Grid */}\n        <EmployeeListGrid\n          employees={employees}\n          constructionSites={constructionSites}\n          supervisors={supervisors}\n          onEditEmployee={(employee) => {\n            setSelectedEmployee(employee);\n            setShowProfileEditor(true);\n          }}\n          onEmployeeAction={handleEmployeeAction}\n          loading={loading}\n          formatCurrency={formatCurrency}\n        />\n      </main>\n\n      {/* Modales */}\n      {showRegistrationWizard && (\n        <EmployeeRegistrationWizard\n          constructionSites={constructionSites}\n          supervisors={supervisors}\n          onSubmit={handleEmployeeRegistration}\n          onClose={() => setShowRegistrationWizard(false)}\n          branding={branding}\n        />\n      )}\n\n      {showProfileEditor && selectedEmployee && (\n        <EmployeeProfileEditor\n          employee={selectedEmployee}\n          constructionSites={constructionSites}\n          supervisors={supervisors}\n          onSubmit={(updateData) => handleEmployeeUpdate(selectedEmployee?.id, updateData)}\n          onClose={() => {\n            setShowProfileEditor(false);\n            setSelectedEmployee(null);\n          }}\n          branding={branding}\n        />\n      )}\n\n      {/* Notificaciones globales */}\n      <NotificationCenter />\n\n      <BrandedFooter />\n    </div>\n  );\n}\n","size_bytes":20581},"src/pages/comprehensive-reporting-and-export-center/index.jsx":{"content":"// src/pages/comprehensive-reporting-and-export-center/index.jsx\nimport React, { useMemo, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport RoleBasedSidebar from '@/components/ui/RoleBasedSidebar';\nimport NavigationBreadcrumb from '@/components/ui/NavigationBreadcrumb';\nimport UserContextHeader from '@/components/ui/UserContextHeader';\nimport NotificationCenter from '@/components/ui/NotificationCenter';\nimport Icon from '@/components/AppIcon';\nimport Button from '@/components/ui/Button';\nimport Loading from '@/components/ui/Loading';\nimport ErrorState from '@/components/ui/ErrorState';\nimport { showToast } from '@/components/ui/ToastHub';\n\nimport ReportTemplateLibrary from './components/ReportTemplateLibrary';\nimport ReportBuilder from './components/ReportBuilder';\nimport ReportPreview from './components/ReportPreview';\nimport ScheduledReports from './components/ScheduledReports';\nimport ReportHistory from './components/ReportHistory';\n\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useQuery } from '@/hooks/useQuery';\nimport reportingService from '../../services/reportingService';\n\nconst TABS = [\n  { id: 'builder', name: 'Constructor', icon: 'Settings', description: 'Crear y personalizar reportes' },\n  { id: 'templates', name: 'Plantillas', icon: 'FileText', description: 'Plantillas predefinidas' },\n  { id: 'scheduled', name: 'Programados', icon: 'Calendar', description: 'Reportes automáticos' },\n  { id: 'history', name: 'Historial', icon: 'Clock', description: 'Reportes generados' },\n];\n\nconst ComprehensiveReportingAndExportCenter = () => {\n  const navigate = useNavigate();\n  const { getCurrentUserContext } = useAuth();\n  const currentUser = getCurrentUserContext();\n\n  // UI state\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\n  const [activeTab, setActiveTab] = useState('builder');\n  const [selectedTemplate, setSelectedTemplate] = useState(null);\n  const [reportConfig, setReportConfig] = useState(null);\n\n  // Query: Stats (para los “Quick Stats”)\n  const {\n    data: stats,\n    isLoading: statsLoading,\n    error: statsError,\n    refetch: refetchStats,\n  } = useQuery(reportingService.getReportingStats, {\n    deps: [], // se carga al entrar\n    retry: 1,\n    onError: (e) => showToast({ title: 'Error al cargar estadísticas', message: e.message, type: 'error' }),\n  });\n\n  // Query: Plantillas\n  const {\n    data: templates,\n    isLoading: templatesLoading,\n    error: templatesError,\n    refetch: refetchTemplates,\n  } = useQuery(reportingService.getTemplates, {\n    deps: [],\n    retry: 1,\n    onError: (e) => showToast({ title: 'Error al cargar plantillas', message: e.message, type: 'error' }),\n  });\n\n  // Query: Programaciones\n  const {\n    data: scheduled,\n    isLoading: scheduledLoading,\n    error: scheduledError,\n    refetch: refetchScheduled,\n  } = useQuery(reportingService.getScheduledReports, {\n    deps: [],\n    retry: 1,\n    onError: (e) => showToast({ title: 'Error al cargar programaciones', message: e.message, type: 'error' }),\n  });\n\n  // Query: Historial (paginado)\n  const [historyPage, setHistoryPage] = useState(0);\n  const {\n    data: historyData,\n    isLoading: historyLoading,\n    error: historyError,\n    refetch: refetchHistory,\n  } = useQuery(reportingService.getReportHistory, {\n    params: { page: historyPage, pageSize: 25 },\n    deps: [historyPage],\n    keepPreviousData: true,\n    retry: 1,\n    onError: (e) => showToast({ title: 'Error al cargar historial', message: e.message, type: 'error' }),\n  });\n\n  const historyRows = historyData?.rows ?? [];\n  const historyCount = historyData?.count ?? 0;\n  const historyPageSize = historyData?.pageSize ?? 25;\n  const historyTotalPages = useMemo(\n    () => Math.max(1, Math.ceil(historyCount / historyPageSize)),\n    [historyCount, historyPageSize]\n  );\n\n  const anyError = statsError || templatesError || scheduledError || historyError;\n  const loading =\n    statsLoading || templatesLoading || scheduledLoading || historyLoading;\n\n  const refreshAll = async () => {\n    await Promise.all([refetchStats(), refetchTemplates(), refetchScheduled(), refetchHistory()]);\n    showToast({ title: 'Actualizado', message: 'Datos de reportes actualizados', type: 'success' });\n  };\n\n  const handleTemplateSelect = (template) => {\n    setSelectedTemplate(template);\n    setActiveTab('builder');\n  };\n\n  const handleReportConfigChange = (config) => setReportConfig(config);\n\n  const handleLogout = () => navigate('/employee-login-portal');\n  const handleProfileClick = () => navigate('/profile');\n  const handleSiteChange = (site) => {\n    // Si tu header permite cambiar sitio, podrías re-filtrar plantillas o programaciones por site.id\n    // Por ahora, sólo mostramos un toast.\n    showToast({ title: 'Sitio cambiado', message: site?.name || '—', type: 'info' });\n  };\n\n  // Quick stats derivados\n  const quickStats = {\n    templates: stats?.templates ?? 0,\n    scheduled: stats?.scheduled ?? 0,\n    generatedThisMonth: stats?.generatedThisMonth ?? 0,\n    successRate: stats?.successRate ?? 0, // porcentaje ya calculado en el service\n  };\n\n  // Loading / Error global (UI simple)\n  if (loading && !historyRows.length && !templates?.length) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <Loading label=\"Cargando centro de reportes…\" />\n      </div>\n    );\n  }\n\n  if (anyError && !historyRows.length && !templates?.length) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <ErrorState message=\"No se pudieron cargar los datos del centro de reportes.\" onRetry={refreshAll} />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Sidebar */}\n      <RoleBasedSidebar\n        isCollapsed={sidebarCollapsed}\n        userRole={currentUser?.role?.toLowerCase()}\n      />\n\n      {/* Main Content */}\n      <div className={`transition-all duration-300 ease-out-cubic ${sidebarCollapsed ? 'ml-16' : 'ml-60'} pb-16 md:pb-0`}>\n        {/* Header */}\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                iconName={sidebarCollapsed ? 'ChevronRight' : 'ChevronLeft'}\n                onClick={() => setSidebarCollapsed(!sidebarCollapsed)}\n                className=\"hidden md:flex\"\n              />\n              <div>\n                <h1 className=\"text-xl font-semibold text-foreground\">Centro de Reportes</h1>\n                <p className=\"text-sm text-muted-foreground\">Generación y exportación de reportes empresariales</p>\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-4\">\n              <Button variant=\"outline\" iconName=\"RefreshCw\" onClick={refreshAll}>\n                Actualizar\n              </Button>\n              <NotificationCenter />\n              <UserContextHeader\n                user={currentUser}\n                onLogout={handleLogout}\n                onProfileClick={handleProfileClick}\n                onSiteChange={handleSiteChange}\n              />\n            </div>\n          </div>\n        </header>\n\n        {/* Content */}\n        <main className=\"p-6\">\n          <NavigationBreadcrumb />\n\n          {/* Quick Stats */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n            <div className=\"bg-card rounded-lg border border-border p-6\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"p-2 bg-primary/10 rounded-lg\">\n                  <Icon name=\"FileText\" size={24} className=\"text-primary\" />\n                </div>\n                <div>\n                  <p className=\"text-2xl font-bold text-foreground\">{quickStats.templates}</p>\n                  <p className=\"text-sm text-muted-foreground\">Plantillas Disponibles</p>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"bg-card rounded-lg border border-border p-6\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"p-2 bg-success/10 rounded-lg\">\n                  <Icon name=\"Calendar\" size={24} className=\"text-success\" />\n                </div>\n                <div>\n                  <p className=\"text-2xl font-bold text-foreground\">{quickStats.scheduled}</p>\n                  <p className=\"text-sm text-muted-foreground\">Reportes Programados</p>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"bg-card rounded-lg border border-border p-6\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"p-2 bg-warning/10 rounded-lg\">\n                  <Icon name=\"Download\" size={24} className=\"text-warning\" />\n                </div>\n                <div>\n                  <p className=\"text-2xl font-bold text-foreground\">{quickStats.generatedThisMonth}</p>\n                  <p className=\"text-sm text-muted-foreground\">Reportes Este Mes</p>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"bg-card rounded-lg border border-border p-6\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"p-2 bg-accent/10 rounded-lg\">\n                  <Icon name=\"TrendingUp\" size={24} className=\"text-accent\" />\n                </div>\n                <div>\n                  <p className=\"text-2xl font-bold text-foreground\">\n                    {Number(quickStats.successRate).toFixed(1)}%\n                  </p>\n                  <p className=\"text-sm text-muted-foreground\">Tasa de Éxito</p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Navigation Tabs */}\n          <div className=\"bg-card rounded-lg border border-border mb-6\">\n            <div className=\"border-b border-border\">\n              <nav className=\"flex space-x-8 px-6\">\n                {TABS.map((tab) => (\n                  <button\n                    key={tab.id}\n                    onClick={() => setActiveTab(tab.id)}\n                    className={`flex items-center space-x-2 py-4 px-1 border-b-2 font-medium text-sm transition-colors duration-150 ease-out-cubic ${\n                      activeTab === tab.id\n                        ? 'border-primary text-primary'\n                        : 'border-transparent text-muted-foreground hover:text-foreground hover:border-muted-foreground'\n                    }`}\n                  >\n                    <Icon name={tab.icon} size={16} />\n                    <span>{tab.name}</span>\n                  </button>\n                ))}\n              </nav>\n            </div>\n\n            <div className=\"p-6\">\n              <div className=\"mb-2\">\n                <h2 className=\"text-lg font-semibold text-foreground\">\n                  {TABS.find((t) => t.id === activeTab)?.name}\n                </h2>\n                <p className=\"text-sm text-muted-foreground\">\n                  {TABS.find((t) => t.id === activeTab)?.description}\n                </p>\n              </div>\n            </div>\n          </div>\n\n          {/* Tab Content */}\n          <div className=\"space-y-6\">\n            {activeTab === 'builder' && (\n              <div className=\"grid grid-cols-1 lg:grid-cols-5 gap-6\">\n                <div className=\"lg:col-span-2\">\n                  <ReportBuilder\n                    selectedTemplate={selectedTemplate}\n                    onReportChange={setReportConfig}\n                    onGenerate={async (config) => {\n                      try {\n                        const res = await reportingService.previewReport(config);\n                        showToast({ title: 'Vista previa', message: 'Reporte generado en vista previa', type: 'success' });\n                        setReportConfig({ ...(config || {}), previewUrl: res?.previewUrl });\n                      } catch (e) {\n                        showToast({ title: 'Error', message: e.message, type: 'error' });\n                      }\n                    }}\n                  />\n                </div>\n                <div className=\"lg:col-span-3\">\n                  <ReportPreview reportConfig={reportConfig} />\n                </div>\n              </div>\n            )}\n\n            {activeTab === 'templates' && (\n              <ReportTemplateLibrary\n                templates={templates || []}\n                loading={templatesLoading}\n                onSelectTemplate={handleTemplateSelect}\n                selectedTemplate={selectedTemplate}\n                onRefresh={refetchTemplates}\n              />\n            )}\n\n            {activeTab === 'scheduled' && (\n              <ScheduledReports\n                items={scheduled || []}\n                loading={scheduledLoading}\n                onRefresh={refetchScheduled}\n                onCreate={async (payload) => {\n                  try {\n                    await reportingService.createScheduledReport(payload);\n                    showToast({ title: 'Programado', message: 'Reporte programado con éxito', type: 'success' });\n                    await refetchScheduled();\n                    await refetchStats();\n                  } catch (e) {\n                    showToast({ title: 'Error', message: e.message, type: 'error' });\n                  }\n                }}\n                onToggleActive={async (id, nextActive) => {\n                  try {\n                    await reportingService.updateScheduledReport(id, { active: nextActive });\n                    await refetchScheduled();\n                  } catch (e) {\n                    showToast({ title: 'Error', message: e.message, type: 'error' });\n                  }\n                }}\n                onDelete={async (id) => {\n                  try {\n                    await reportingService.deleteScheduledReport(id);\n                    await refetchScheduled();\n                    await refetchStats();\n                  } catch (e) {\n                    showToast({ title: 'Error', message: e.message, type: 'error' });\n                  }\n                }}\n              />\n            )}\n\n            {activeTab === 'history' && (\n              <ReportHistory\n                rows={historyRows}\n                loading={historyLoading}\n                page={historyPage}\n                totalPages={historyTotalPages}\n                onPrev={() => setHistoryPage((p) => Math.max(0, p - 1))}\n                onNext={() => setHistoryPage((p) => (p + 1 < historyTotalPages ? p + 1 : p))}\n                onRefresh={refetchHistory}\n                onDownload={async (row) => {\n                  try {\n                    const url = await reportingService.getReportDownloadUrl(row.id);\n                    if (url) window.open(url, '_blank', 'noopener,noreferrer');\n                  } catch (e) {\n                    showToast({ title: 'Error', message: e.message, type: 'error' });\n                  }\n                }}\n              />\n            )}\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n};\n\nexport default ComprehensiveReportingAndExportCenter;\n","size_bytes":15267},"src/pages/construction-site-and-supervisor-management-hub/index.jsx":{"content":"// src/pages/construction-site-and-supervisor-management-hub/index.jsx\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport RoleBasedSidebar from '@/components/ui/RoleBasedSidebar';\nimport NavigationBreadcrumb from '@/components/ui/NavigationBreadcrumb';\nimport UserContextHeader from '@/components/ui/UserContextHeader';\nimport NotificationCenter from '@/components/ui/NotificationCenter';\nimport Icon from '@/components/AppIcon';\nimport Button from '@/components/ui/Button';\nimport Input from '@/components/ui/Input';\nimport Select from '@/components/ui/Select';\nimport Loading from '@/components/ui/Loading';\nimport ErrorState from '@/components/ui/ErrorState';\nimport { showToast } from '@/components/ui/ToastHub';\n\nimport SiteCard from './components/SiteCard';\nimport SupervisorCard from './components/SupervisorCard';\nimport OrganizationalTree from './components/OrganizationalTree';\nimport BulkAssignmentPanel from './components/BulkAssignmentPanel';\nimport QuickStatsPanel from './components/QuickStatsPanel';\n\nimport { useQuery } from '@/hooks/useQuery';\nimport { getAllSites } from '@/services/constructionSiteService';\nimport enhancedEmployeeService from '@/services/enhancedEmployeeService';\nimport { useAuth } from '@/contexts/AuthContext';\n\nconst DEBOUNCE_MS = 350;\n\nconst ConstructionSiteAndSupervisorManagementHub = () => {\n  const navigate = useNavigate();\n  const { getCurrentUserContext } = useAuth();\n  const currentUser = getCurrentUserContext();\n  const userRole = currentUser?.role?.toLowerCase?.() || 'user';\n\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\n  const [activeTab, setActiveTab] = useState('sites'); // 'sites' | 'supervisors'\n  const [searchTerm, setSearchTerm] = useState('');\n  const [debouncedSearch, setDebouncedSearch] = useState('');\n  const [filterStatus, setFilterStatus] = useState('all');\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [showBulkAssignment, setShowBulkAssignment] = useState(false);\n\n  // ------------------------------\n  // Debounce búsqueda\n  // ------------------------------\n  useEffect(() => {\n    const t = setTimeout(() => setDebouncedSearch(searchTerm?.trim()), DEBOUNCE_MS);\n    return () => clearTimeout(t);\n  }, [searchTerm]);\n\n  // ------------------------------\n  // SITIOS (paginación + búsqueda)\n  // ------------------------------\n  const [page, setPage] = useState(0);\n\n  const {\n    data: sitesData,\n    isLoading: sitesLoading,\n    isFetching: sitesFetching,\n    error: sitesError,\n    refetch: refetchSites,\n  } = useQuery(getAllSites, {\n    params: { page, search: debouncedSearch || undefined },\n    deps: [page, debouncedSearch],\n    keepPreviousData: true,\n    retry: 1,\n    onError: (e) =>\n      showToast({\n        title: 'Error al cargar sitios',\n        message: e?.message || 'Intenta nuevamente',\n        type: 'error',\n      }),\n  });\n\n  const sitesRows = sitesData?.rows ?? [];\n  const sitesCount = sitesData?.count ?? 0;\n  const pageSize = sitesData?.pageSize ?? 50;\n  const totalPages = Math.max(1, Math.ceil(sitesCount / pageSize));\n\n  // Filtro de estado (cliente): 'active' -> is_active true\n  const filteredSites = useMemo(() => {\n    const term = (debouncedSearch || '').toLowerCase();\n    return (sitesRows || []).filter((site) => {\n      const matchesSearch =\n        !term ||\n        site?.name?.toLowerCase()?.includes(term) ||\n        site?.location?.toLowerCase()?.includes(term) ||\n        (site?.code ? site.code.toLowerCase().includes(term) : false);\n\n      const matchesStatus =\n        filterStatus === 'all'\n          ? true\n          : filterStatus === 'active'\n          ? !!site?.is_active\n          : true; // otros estados aún no existen en DB\n\n      return matchesSearch && matchesStatus;\n    });\n  }, [sitesRows, debouncedSearch, filterStatus]);\n\n  // ------------------------------\n  // SUPERVISORES (reales)\n  // ------------------------------\n  const {\n    data: supervisorsData,\n    isLoading: supervisorsLoading,\n    error: supervisorsError,\n    refetch: refetchSupervisors,\n  } = useQuery(enhancedEmployeeService.getSupervisors, {\n    deps: [],\n    retry: 1,\n    onError: (e) =>\n      showToast({\n        title: 'Error al cargar supervisores',\n        message: e?.message || 'Intenta nuevamente',\n        type: 'error',\n      }),\n  });\n\n  const supervisors = supervisorsData ?? [];\n\n  const filteredSupervisors = useMemo(() => {\n    const term = (debouncedSearch || '').toLowerCase();\n\n    return (supervisors || []).filter((supervisor) => {\n      const matchesSearch =\n        !term ||\n        supervisor?.full_name?.toLowerCase()?.includes(term) ||\n        supervisor?.email?.toLowerCase()?.includes(term);\n\n      // Si tu tabla de usuarios/perfiles tiene status, mapéalo aquí.\n      // Por ahora, no filtramos por estado (sólo 'all').\n      const matchesStatus = filterStatus === 'all' ? true : true;\n\n      return matchesSearch && matchesStatus;\n    });\n  }, [supervisors, debouncedSearch, filterStatus]);\n\n  // ------------------------------\n  // Handlers (sin mocks)\n  // ------------------------------\n  const handleSiteEdit = (site) => {\n    // navigate(`/construction-sites/${site.id}/edit`);\n    showToast({ title: 'Acción', message: `Editar sitio ${site?.name}`, type: 'info' });\n  };\n\n  const handleSiteDelete = (site) => {\n    showToast({ title: 'Pendiente', message: 'Eliminar sitio (conectar servicio)', type: 'warning' });\n  };\n\n  const handleSiteViewDetails = (site) => {\n    // navigate(`/construction-sites/${site.id}`);\n    showToast({ title: 'Detalle', message: `Sitio: ${site?.name}`, type: 'info' });\n  };\n\n  const handleAssignSupervisor = (site) => {\n    showToast({ title: 'Asignación', message: `Asignar supervisor a ${site?.name}`, type: 'info' });\n  };\n\n  const handleSupervisorEdit = (supervisor) => {\n    showToast({ title: 'Acción', message: `Editar supervisor ${supervisor?.full_name}`, type: 'info' });\n  };\n\n  const handleSupervisorDelete = (supervisor) => {\n    showToast({ title: 'Pendiente', message: 'Eliminar supervisor (conectar servicio)', type: 'warning' });\n  };\n\n  const handleSupervisorViewDetails = (supervisor) => {\n    showToast({ title: 'Detalle', message: `Supervisor: ${supervisor?.full_name}`, type: 'info' });\n  };\n\n  const handleAssignSites = (supervisor) => {\n    setShowBulkAssignment(true);\n    setSelectedNode({ type: 'supervisor', id: supervisor?.id, label: supervisor?.full_name });\n  };\n\n  const handleNodeSelect = (node) => setSelectedNode(node);\n\n  const handleDragDrop = (draggedItem, targetItem) => {\n    showToast({ title: 'Reordenar', message: 'Arrastrar y soltar pendiente de servicio', type: 'info' });\n  };\n\n  const handleBulkAssign = async (assignmentData) => {\n    showToast({ title: 'Asignando…', message: 'Procesando asignación masiva', type: 'info' });\n    await new Promise((r) => setTimeout(r, 800));\n    showToast({ title: 'Listo', message: 'Asignación completada', type: 'success' });\n  };\n\n  const handleViewReports = (node) => {\n    navigate('/comprehensive-reporting-and-export-center');\n  };\n\n  const handleExportData = () => {\n    showToast({ title: 'Exportar', message: 'Exportación pendiente de implementar', type: 'info' });\n  };\n\n  const handleLogout = () => navigate('/employee-login-portal');\n\n  useEffect(() => {\n    document.title = 'Gestión de Sitios y Supervisores - AsistenciaPro';\n  }, []);\n\n  const anyError = sitesError || supervisorsError;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <RoleBasedSidebar isCollapsed={sidebarCollapsed} userRole={userRole} />\n\n      <div className={`transition-all duration-300 ease-out-cubic ${sidebarCollapsed ? 'md:ml-16' : 'md:ml-60'}`}>\n        {/* Header */}\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => setSidebarCollapsed(!sidebarCollapsed)}\n                className=\"hidden md:flex\"\n                aria-label=\"Alternar barra lateral\"\n              >\n                <Icon name={sidebarCollapsed ? 'ChevronRight' : 'ChevronLeft'} size={20} />\n              </Button>\n\n              <div>\n                <h1 className=\"text-2xl font-bold text-foreground\">Gestión de Sitios y Supervisores</h1>\n                <p className=\"text-sm text-muted-foreground\">Administra la estructura organizacional y asignaciones</p>\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                variant=\"outline\"\n                iconName=\"RefreshCw\"\n                onClick={() => {\n                  refetchSites();\n                  refetchSupervisors();\n                }}\n              >\n                Actualizar\n              </Button>\n              <NotificationCenter />\n              <UserContextHeader onLogout={handleLogout} />\n            </div>\n          </div>\n        </header>\n\n        {/* Main Content */}\n        <main className=\"p-6\">\n          <NavigationBreadcrumb />\n\n          {anyError && (\n            <div className=\"mb-4\">\n              <ErrorState\n                message=\"No se pudieron cargar algunos datos.\"\n                onRetry={() => {\n                  refetchSites();\n                  refetchSupervisors();\n                }}\n              />\n            </div>\n          )}\n\n          <div className=\"grid grid-cols-12 gap-6 h-[calc(100vh-200px)]\">\n            {/* Left Panel - Organizational Tree */}\n            <div className=\"col-span-12 lg:col-span-4 xl:col-span-3\">\n              <OrganizationalTree\n                sites={sitesRows}\n                supervisors={supervisors}\n                onNodeSelect={handleNodeSelect}\n                selectedNode={selectedNode}\n                onDragDrop={handleDragDrop}\n                userRole={userRole}\n                isLoading={sitesLoading || supervisorsLoading}\n              />\n            </div>\n\n            {/* Center Panel */}\n            <div className=\"col-span-12 lg:col-span-5 xl:col-span-6\">\n              <div className=\"bg-card border border-border rounded-lg h-full flex flex-col\">\n                {/* Tabs */}\n                <div className=\"flex items-center justify-between p-4 border-b border-border\">\n                  <div className=\"flex items-center space-x-1\">\n                    <Button\n                      variant={activeTab === 'sites' ? 'default' : 'ghost'}\n                      size=\"sm\"\n                      onClick={() => setActiveTab('sites')}\n                      iconName=\"Building2\"\n                      iconPosition=\"left\"\n                    >\n                      Sitios ({sitesCount})\n                    </Button>\n                    <Button\n                      variant={activeTab === 'supervisors' ? 'default' : 'ghost'}\n                      size=\"sm\"\n                      onClick={() => setActiveTab('supervisors')}\n                      iconName=\"UserCheck\"\n                      iconPosition=\"left\"\n                    >\n                      Supervisores ({supervisors.length})\n                    </Button>\n                  </div>\n\n                  <div className=\"flex items-center space-x-2\">\n                    {userRole === 'admin' && (\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => setShowBulkAssignment((v) => !v)}\n                        iconName=\"Users\"\n                        iconPosition=\"left\"\n                      >\n                        Asignación masiva\n                      </Button>\n                    )}\n\n                    <Button variant=\"default\" size=\"sm\" iconName=\"Plus\" iconPosition=\"left\">\n                      {activeTab === 'sites' ? 'Nuevo sitio' : 'Nuevo supervisor'}\n                    </Button>\n                  </div>\n                </div>\n\n                {/* Filters */}\n                <div className=\"p-4 border-b border-border\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"flex-1\">\n                      <Input\n                        type=\"search\"\n                        placeholder={`Buscar ${activeTab === 'sites' ? 'sitios' : 'supervisores'}...`}\n                        value={searchTerm}\n                        onChange={(e) => {\n                          setPage(0); // reset página al cambiar búsqueda\n                          setSearchTerm(e?.target?.value);\n                        }}\n                      />\n                    </div>\n                    <div className=\"w-48\">\n                      <Select\n                        options={\n                          activeTab === 'sites'\n                            ? [\n                                { value: 'all', label: 'Todos los estados' },\n                                { value: 'active', label: 'Activo' },\n                                // placeholders (si más adelante agregas columna status)\n                                { value: 'planning', label: 'Planificación' },\n                                { value: 'completed', label: 'Completado' },\n                                { value: 'suspended', label: 'Suspendido' },\n                              ]\n                            : [\n                                { value: 'all', label: 'Todos los estados' },\n                                // Mapea aquí si tuvieras status en perfiles/usuarios.\n                              ]\n                        }\n                        value={filterStatus}\n                        onChange={(val) => {\n                          setPage(0);\n                          setFilterStatus(val);\n                        }}\n                        placeholder=\"Filtrar por estado\"\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                {/* Content */}\n                <div className=\"flex-1 overflow-y-auto p-4\">\n                  {showBulkAssignment ? (\n                    <BulkAssignmentPanel\n                      sites={sitesRows}\n                      supervisors={supervisors}\n                      employees={[]}\n                      onBulkAssign={handleBulkAssign}\n                      onClose={() => setShowBulkAssignment(false)}\n                      userRole={userRole}\n                    />\n                  ) : activeTab === 'sites' ? (\n                    sitesLoading ? (\n                      <Loading label=\"Cargando sitios…\" />\n                    ) : sitesError ? (\n                      <ErrorState message={sitesError?.message} onRetry={refetchSites} />\n                    ) : filteredSites.length > 0 ? (\n                      <>\n                        <div className=\"space-y-4\">\n                          {filteredSites.map((site) => (\n                            <SiteCard\n                              key={site?.id}\n                              site={{\n                                ...site,\n                                status: site?.is_active ? 'active' : 'inactive',\n                                progress: site?.progress ?? undefined,\n                                supervisor: site?.supervisor || null,\n                              }}\n                              onEdit={handleSiteEdit}\n                              onDelete={handleSiteDelete}\n                              onViewDetails={handleSiteViewDetails}\n                              onAssignSupervisor={handleAssignSupervisor}\n                              userRole={userRole}\n                            />\n                          ))}\n                        </div>\n\n                        {/* Paginación */}\n                        <div className=\"flex items-center justify-between mt-4\">\n                          <div className=\"text-xs text-muted-foreground\">\n                            {sitesFetching ? 'Actualizando… ' : ''} Total: {sitesCount} · Página {page + 1} de {totalPages}\n                          </div>\n                          <div className=\"flex gap-2\">\n                            <button\n                              onClick={() => setPage((p) => Math.max(0, p - 1))}\n                              disabled={page === 0}\n                              className=\"px-3 py-1.5 rounded border disabled:opacity-50\"\n                            >\n                              Anterior\n                            </button>\n                            <button\n                              onClick={() => setPage((p) => (p + 1 < totalPages ? p + 1 : p))}\n                              disabled={page + 1 >= totalPages}\n                              className=\"px-3 py-1.5 rounded border disabled:opacity-50\"\n                            >\n                              Siguiente\n                            </button>\n                          </div>\n                        </div>\n                      </>\n                    ) : (\n                      <div className=\"text-center py-12\">\n                        <Icon name=\"Building2\" size={48} className=\"mx-auto text-muted-foreground mb-4\" />\n                        <h3 className=\"text-lg font-semibold text-foreground mb-2\">No se encontraron sitios</h3>\n                        <p className=\"text-muted-foreground mb-4\">\n                          {debouncedSearch ? 'Intenta con otros términos de búsqueda' : 'Comienza creando tu primer sitio de construcción'}\n                        </p>\n                        {userRole === 'admin' && (\n                          <Button iconName=\"Plus\" iconPosition=\"left\">\n                            Crear nuevo sitio\n                          </Button>\n                        )}\n                      </div>\n                    )\n                  ) : supervisorsLoading ? (\n                    <Loading label=\"Cargando supervisores…\" />\n                  ) : supervisorsError ? (\n                    <ErrorState message={supervisorsError?.message} onRetry={refetchSupervisors} />\n                  ) : filteredSupervisors.length > 0 ? (\n                    filteredSupervisors.map((supervisor) => (\n                      <SupervisorCard\n                        key={supervisor?.id}\n                        supervisor={{\n                          id: supervisor?.id,\n                          name: supervisor?.full_name,\n                          email: supervisor?.email,\n                          phone: supervisor?.phone,\n                          // Métricas por supervisor: si las tienes en el service, mápéalas aquí.\n                          assignedSites: supervisor?.assignedSites ?? 0,\n                          totalEmployees: supervisor?.totalEmployees ?? 0,\n                          status: 'active',\n                          avatar: supervisor?.avatar || null,\n                        }}\n                        onEdit={handleSupervisorEdit}\n                        onDelete={handleSupervisorDelete}\n                        onViewDetails={handleSupervisorViewDetails}\n                        onAssignSites={handleAssignSites}\n                        userRole={userRole}\n                      />\n                    ))\n                  ) : (\n                    <div className=\"text-center py-12\">\n                      <Icon name=\"UserCheck\" size={48} className=\"mx-auto text-muted-foreground mb-4\" />\n                      <h3 className=\"text-lg font-semibold text-foreground mb-2\">No se encontraron supervisores</h3>\n                      <p className=\"text-muted-foreground mb-4\">\n                        {debouncedSearch ? 'Intenta con otros términos de búsqueda' : 'Comienza agregando supervisores a tu equipo'}\n                      </p>\n                      {userRole === 'admin' && (\n                        <Button iconName=\"Plus\" iconPosition=\"left\">\n                          Agregar supervisor\n                        </Button>\n                      )}\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n\n            {/* Right Panel - Quick Stats */}\n            <div className=\"col-span-12 lg:col-span-3\">\n              <QuickStatsPanel\n                sites={sitesRows}\n                supervisors={supervisors}\n                onViewReports={handleViewReports}\n                onExportData={handleExportData}\n                selectedNode={selectedNode}\n                isLoading={sitesLoading || supervisorsLoading}\n              />\n            </div>\n          </div>\n        </main>\n      </div>\n\n      {/* Mobile Bottom Navigation Spacer */}\n      <div className=\"md:hidden h-16\" />\n    </div>\n  );\n};\n\nexport default ConstructionSiteAndSupervisorManagementHub;\n","size_bytes":20827},"src/pages/data/employeeDataService.js":{"content":"// src/pages/data/employeeDataService.js\n// Shim de compatibilidad para EmployeeDetailPanel (y otros).\n// Expone helpers comunes y usa Supabase directamente.\n// Ajusta nombres de tabla/columnas si tu esquema difiere.\n\nimport { supabase } from '@/lib/supabase';\n\nconst EMP_TABLE = 'employees'; // cámbialo si tu tabla real es 'user_profiles' u otra\n\n// Mantén columnas explícitas (evita '*')\nconst EMP_COLS = [\n  'id',\n  'full_name',\n  'email',\n  'phone',\n  'position',\n  'status',\n  'site_id',\n  'supervisor_id',\n  'avatar',\n  'hire_date',\n  'employee_code',\n  'salary_type',\n  'hourly_rate',\n  'daily_salary',\n  'role',\n  'updated_at',\n  'created_at',\n].join(',');\n\n/** Obtiene un empleado por ID */\nasync function getEmployeeById(id) {\n  try {\n    const { data, error } = await supabase\n      .from(EMP_TABLE)\n      .select(EMP_COLS)\n      .eq('id', id)\n      .maybeSingle();\n\n    if (error) throw error;\n    return data || null;\n  } catch (e) {\n    console.error('employeeDataService.getEmployeeById error:', e);\n    return null;\n  }\n}\n\n/** Lista empleados (búsqueda/paginación opcional) */\nasync function listEmployees({ page = 0, pageSize = 50, search = '' } = {}) {\n  try {\n    let query = supabase.from(EMP_TABLE).select(EMP_COLS, { count: 'exact' });\n\n    if (search?.trim()) {\n      const s = search.trim();\n      query = query.or(\n        `full_name.ilike.%${s}%,email.ilike.%${s}%,employee_code.ilike.%${s}%`\n      );\n    }\n\n    // Orden por nombre (ajusta si prefieres hire_date desc, etc.)\n    query = query.order('full_name', { ascending: true });\n\n    // Paginación\n    const from = page * pageSize;\n    const to = from + pageSize - 1;\n    const { data, error, count } = await query.range(from, to);\n\n    if (error) throw error;\n    return {\n      rows: data || [],\n      count: count ?? 0,\n      page,\n      pageSize,\n    };\n  } catch (e) {\n    console.error('employeeDataService.listEmployees error:', e);\n    return { rows: [], count: 0, page: 0, pageSize: 50 };\n  }\n}\n\n/** Opciones para Select (id/label) */\nasync function getEmployeeOptions({ search = '' } = {}) {\n  try {\n    const { rows } = await listEmployees({ page: 0, pageSize: 500, search });\n    return (rows || []).map((e) => ({\n      value: e?.id,\n      label: e?.full_name || e?.email || 'Empleado',\n      email: e?.email || '',\n    }));\n  } catch (e) {\n    console.error('employeeDataService.getEmployeeOptions error:', e);\n    return [];\n  }\n}\n\n/** Actualiza datos del empleado (patch) */\nasync function updateEmployee(id, patch = {}) {\n  try {\n    const stamp = new Date().toISOString();\n    const payload = { ...patch, updated_at: stamp };\n\n    const { data, error } = await supabase\n      .from(EMP_TABLE)\n      .update(payload)\n      .eq('id', id)\n      .select(EMP_COLS)\n      .maybeSingle();\n\n    if (error) throw error;\n    return data || null;\n  } catch (e) {\n    console.error('employeeDataService.updateEmployee error:', e);\n    return null;\n  }\n}\n\n/** Asigna sitio al empleado */\nasync function assignSite(employeeId, siteId) {\n  return updateEmployee(employeeId, { site_id: siteId });\n}\n\n/** Asigna supervisor al empleado */\nasync function assignSupervisor(employeeId, supervisorId) {\n  return updateEmployee(employeeId, { supervisor_id: supervisorId });\n}\n\n/** Cambia estado del empleado */\nasync function setEmployeeStatus(employeeId, status) {\n  return updateEmployee(employeeId, { status });\n}\n\n/** Elimina (soft/hard) — por defecto soft */\nasync function deleteEmployee(employeeId, { hard = false } = {}) {\n  try {\n    if (hard) {\n      const { error } = await supabase.from(EMP_TABLE).delete().eq('id', employeeId);\n      if (error) throw error;\n      return true;\n    }\n    const res = await updateEmployee(employeeId, { status: 'inactive' });\n    return !!res;\n  } catch (e) {\n    console.error('employeeDataService.deleteEmployee error:', e);\n    return false;\n  }\n}\n\nexport const employeeDataService = {\n  getEmployeeById,\n  listEmployees,\n  getEmployeeOptions,\n  updateEmployee,\n  assignSite,\n  assignSupervisor,\n  setEmployeeStatus,\n  deleteEmployee,\n};\n\nexport default employeeDataService;\n","size_bytes":4107},"src/pages/data/siteDataService.js":{"content":"// Shim de compatibilidad para filtros (sitios).\n// Expone helpers mínimos y reencamina a servicios reales si existen.\n\nimport { supabase } from '@/lib/supabase';\nimport { getAllSites } from '@/services/constructionSiteService';\n\n// Columnas explícitas para sitios (no usar *)\nconst SITE_COLS = [\n  'id',\n  'name',\n  'location',\n  'latitude',\n  'longitude',\n  'allowed_radius_meters',\n  'gps_enabled',\n  'is_active',\n  'code',\n  'progress',\n].join(',');\n\n/** Devuelve lista de sitios (para UIs que necesiten datos completos) */\nasync function getSites(params = {}) {\n  try {\n    // Si tienes un service con paginado/búsqueda:\n    if (typeof getAllSites === 'function') {\n      const res = await getAllSites({ page: 0, search: undefined, ...params });\n      // normaliza según tu servicio getAllSites\n      const rows = res?.rows ?? res?.data ?? res ?? [];\n      return rows;\n    }\n\n    // Fallback directo a supabase\n    const { data, error } = await supabase\n      .from('construction_sites')\n      .select(SITE_COLS)\n      .limit(1000);\n\n    if (error) throw error;\n    return data || [];\n  } catch (e) {\n    console.error('siteDataService.getSites error:', e);\n    return [];\n  }\n}\n\n/** Devuelve opciones id/label para Selects */\nasync function getSiteOptions(params = {}) {\n  try {\n    const sites = await getSites(params);\n    return (sites || []).map((s) => ({\n      value: s?.id,\n      label: s?.name || 'Sitio',\n      location: s?.location ?? '',\n      active: !!s?.is_active,\n    }));\n  } catch (e) {\n    console.error('siteDataService.getSiteOptions error:', e);\n    return [];\n  }\n}\n\nexport const siteDataService = {\n  getSites,\n  getSiteOptions,\n};\n\nexport default siteDataService;\n","size_bytes":1698},"src/pages/data/supervisorDataService.js":{"content":"// Shim de compatibilidad para filtros (supervisores).\n// Expone helpers mínimos y reencamina a servicios reales si existen.\n\nimport enhancedEmployeeService from '@/services/enhancedEmployeeService';\nimport { supabase } from '@/lib/supabase';\n\n// Columnas explícitas básicas si se usa fallback\nconst SUP_COLS = [\n  'id',\n  'full_name',\n  'email',\n  'phone',\n  'role',\n  'status',\n].join(',');\n\n/** Lista de supervisores (datos completos si se requieren) */\nasync function getSupervisors(params = {}) {\n  try {\n    if (enhancedEmployeeService?.getSupervisors) {\n      const res = await enhancedEmployeeService.getSupervisors(params);\n      // normaliza\n      return Array.isArray(res) ? res : (res?.data ?? []);\n    }\n\n    // Fallback directo: filtra por rol = 'supervisor' si aplica a tu esquema\n    const { data, error } = await supabase\n      .from('employees')\n      .select(SUP_COLS)\n      .eq('role', 'supervisor')\n      .limit(1000);\n\n    if (error) throw error;\n    return data || [];\n  } catch (e) {\n    console.error('supervisorDataService.getSupervisors error:', e);\n    return [];\n  }\n}\n\n/** Opciones para Selects */\nasync function getSupervisorOptions(params = {}) {\n  try {\n    const supList = await getSupervisors(params);\n    return (supList || []).map((s) => ({\n      value: s?.id,\n      label: s?.full_name || s?.name || 'Supervisor',\n      email: s?.email || '',\n      phone: s?.phone || '',\n    }));\n  } catch (e) {\n    console.error('supervisorDataService.getSupervisorOptions error:', e);\n    return [];\n  }\n}\n\nexport const supervisorDataService = {\n  getSupervisors,\n  getSupervisorOptions,\n};\n\nexport default supervisorDataService;\n","size_bytes":1658},"src/pages/employee-attendance-dashboard/index.jsx":{"content":"import React, { useState } from 'react';\nimport { useAuth } from '../../contexts/AuthContext';\nimport AttendanceActionButtons from './components/AttendanceActionButtons';\nimport PayrollSummaryCard from './components/PayrollSummaryCard';\nimport PersonalIncidentLog from './components/PersonalIncidentLog';\nimport WeeklyTimecardTable from './components/WeeklyTimecardTable';\nimport ProjectAssignmentCard from './components/ProjectAssignmentCard';\nimport HistoricalAttendanceViewer from './components/HistoricalAttendanceViewer';\n\nexport default function EmployeeAttendanceDashboard() {\n  const { user, userProfile } = useAuth();\n  const [refreshKey, setRefreshKey] = useState(0);\n\n  const handleAttendanceUpdate = () => {\n    setRefreshKey(prev => prev + 1);\n  };\n\n  if (!user || !userProfile) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"flex flex-col items-center space-y-4\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n          <span className=\"text-gray-600\">Cargando tu información...</span>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"container mx-auto px-4 py-6 max-w-7xl\">\n        <div className=\"mb-6\">\n          <h1 className=\"text-2xl font-bold text-gray-900\">\n            Bienvenido, {userProfile?.full_name || user?.email}\n          </h1>\n          <p className=\"text-sm text-gray-600 mt-1\">\n            Panel de asistencia personal\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          <div className=\"lg:col-span-2 space-y-6\">\n            <AttendanceActionButtons\n              siteId={userProfile?.site_id}\n              onAttendanceUpdate={handleAttendanceUpdate}\n            />\n            \n            <WeeklyTimecardTable\n              userId={user?.id}\n              refreshKey={refreshKey}\n            />\n            \n            <HistoricalAttendanceViewer\n              userId={user?.id}\n            />\n          </div>\n\n          <div className=\"space-y-6\">\n            <ProjectAssignmentCard\n              siteId={userProfile?.site_id}\n              supervisorId={userProfile?.supervisor_id}\n            />\n            \n            <PayrollSummaryCard\n              userId={user?.id}\n              refreshKey={refreshKey}\n            />\n            \n            <PersonalIncidentLog\n              userId={user?.id}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2574},"src/pages/employee-login-portal/index.jsx":{"content":"// /src/pages/employee-login-portal/index.jsx\nimport React, { useEffect, useState } from \"react\";\nimport { useNavigate, useSearchParams } from \"react-router-dom\";\nimport { Helmet } from \"react-helmet\";\nimport { useAuth } from \"../../contexts/AuthContext\";\n\nconst safeInternalPath = (p) =>\n  typeof p === \"string\" && p.startsWith(\"/\") ? p : \"/dashboard\";\n\nexport default function EmployeeLoginPortal() {\n  const navigate = useNavigate();\n  const [q] = useSearchParams();\n  const next = safeInternalPath(q.get(\"next\") || \"/dashboard\");\n\n  const {\n    user,\n    loading,\n    authError,\n    setAuthError,\n    signIn,        // email/password\n    sendOTP,       // OTP solicitación\n    verifyOTP,     // OTP verificación\n    resetPassword, // NUEVO: enviar email de restablecimiento\n  } = useAuth();\n\n  // --- UI state ---\n  const [mode, setMode] = useState(\"password\"); // \"password\" | \"otp\"\n  const [form, setForm] = useState({ email: \"\", password: \"\", phone: \"\", otp: \"\" });\n  const [submitting, setSubmitting] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [info, setInfo] = useState(\"\");\n\n  // Si ya está autenticado, redirige al destino solicitado\n  useEffect(() => {\n    if (!loading && user) navigate(next, { replace: true });\n  }, [user, loading, next, navigate]);\n\n  const onChange = (e) => {\n    setAuthError?.(\"\");\n    setMessage(\"\");\n    setInfo(\"\");\n    setForm((s) => ({ ...s, [e.target.name]: e.target.value }));\n  };\n\n  // --- Email/Password login ---\n  const handleEmailLogin = async (e) => {\n    e.preventDefault();\n    setSubmitting(true);\n    setMessage(\"\");\n    setInfo(\"\");\n    setAuthError?.(\"\");\n    try {\n      const { email, password } = form;\n      const res = await signIn(email, password);\n      if (!res?.success) {\n        throw new Error(res?.error || \"No fue posible iniciar sesión\");\n      }\n      navigate(next, { replace: true });\n    } catch (err) {\n      setMessage(err.message || \"Error de autenticación\");\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  // --- OTP: solicitar código (por email o teléfono) ---\n  const handleSendOtp = async () => {\n    setSubmitting(true);\n    setMessage(\"\");\n    setInfo(\"\");\n    setAuthError?.(\"\");\n    try {\n      const phone = form.phone?.trim() || null;\n      const email = form.email?.trim() || null;\n      if (!phone && !email) throw new Error(\"Ingresa teléfono o correo para enviar el código.\");\n      const res = await sendOTP(phone, email);\n      if (!res?.success) throw new Error(res?.error || \"No se pudo enviar el código\");\n      setInfo(\"Código enviado. Revisa tu bandeja o SMS.\");\n    } catch (err) {\n      setMessage(err.message || \"No se pudo enviar el código\");\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  // --- OTP: verificar código ---\n  const handleVerifyOtp = async () => {\n    setSubmitting(true);\n    setMessage(\"\");\n    setInfo(\"\");\n    setAuthError?.(\"\");\n    try {\n      const { phone, email, otp } = form;\n      if (!otp) throw new Error(\"Ingresa el código recibido.\");\n      const res = await verifyOTP(phone?.trim() || null, email?.trim() || null, otp.trim());\n      if (!res?.success) throw new Error(res?.error || \"No se pudo verificar el código\");\n      navigate(next, { replace: true });\n    } catch (err) {\n      setMessage(err.message || \"No se pudo verificar el código\");\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  // --- Reset password por correo ---\n  const handleResetPassword = async () => {\n    setSubmitting(true);\n    setMessage(\"\");\n    setInfo(\"\");\n    setAuthError?.(\"\");\n    try {\n      const email = form.email?.trim();\n      if (!email) throw new Error(\"Escribe tu correo para enviar el enlace de restablecimiento.\");\n      const res = await resetPassword(email, `${window.location.origin}/auth/reset`);\n      if (!res?.success) throw new Error(res?.error || \"No se pudo enviar el enlace\");\n      setInfo(\"Te enviamos un enlace para restablecer tu contraseña. Revisa tu correo.\");\n    } catch (err) {\n      setMessage(err.message || \"No se pudo enviar el enlace\");\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  const title = \"Portal de Acceso · Nova HR\";\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background p-6\">\n      <Helmet>\n        <title>{title}</title>\n        <meta name=\"description\" content=\"Accede para continuar a tu panel.\" />\n      </Helmet>\n\n      <div className=\"w-full max-w-md bg-card border border-border rounded-2xl shadow p-6\">\n        <h1 className=\"text-xl font-semibold text-foreground mb-1\">Iniciar sesión</h1>\n        <p className=\"text-sm text-muted-foreground mb-6\">\n          Serás redirigido a: <span className=\"font-medium\">{next}</span>\n        </p>\n\n        {(authError || message) && (\n          <div className=\"mb-4 text-sm text-red-600 bg-red-50 border border-red-200 rounded-md p-3\">\n            {authError || message}\n          </div>\n        )}\n        {info && (\n          <div className=\"mb-4 text-sm text-green-700 bg-green-50 border border-green-200 rounded-md p-3\">\n            {info}\n          </div>\n        )}\n\n        {/* Switch de modo */}\n        <div className=\"flex items-center justify-center gap-2 mb-4\">\n          <button\n            type=\"button\"\n            onClick={() => { setMode(\"password\"); setMessage(\"\"); setInfo(\"\"); setAuthError?.(\"\"); }}\n            className={`px-3 py-1 rounded-md border ${mode === \"password\" ? \"bg-primary text-primary-foreground border-primary\" : \"border-input\"}`}\n            disabled={submitting || loading}\n          >\n            Correo y contraseña\n          </button>\n          <button\n            type=\"button\"\n            onClick={() => { setMode(\"otp\"); setMessage(\"\"); setInfo(\"\"); setAuthError?.(\"\"); }}\n            className={`px-3 py-1 rounded-md border ${mode === \"otp\" ? \"bg-primary text-primary-foreground border-primary\" : \"border-input\"}`}\n            disabled={submitting || loading}\n          >\n            Código (OTP)\n          </button>\n        </div>\n\n        {/* --- FORM: EMAIL/PASSWORD --- */}\n        {mode === \"password\" && (\n          <form onSubmit={handleEmailLogin} className=\"space-y-4\">\n            <div>\n              <label className=\"block text-sm mb-1\" htmlFor=\"email\">\n                Correo\n              </label>\n              <input\n                id=\"email\"\n                name=\"email\"\n                type=\"email\"\n                required\n                autoComplete=\"email\"\n                className=\"w-full rounded-lg border border-input bg-background px-3 py-2\"\n                value={form.email}\n                onChange={onChange}\n                disabled={submitting || loading}\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm mb-1\" htmlFor=\"password\">\n                Contraseña\n              </label>\n              <input\n                id=\"password\"\n                name=\"password\"\n                type=\"password\"\n                required\n                autoComplete=\"current-password\"\n                className=\"w-full rounded-lg border border-input bg-background px-3 py-2\"\n                value={form.password}\n                onChange={onChange}\n                disabled={submitting || loading}\n              />\n            </div>\n\n            <button\n              type=\"submit\"\n              disabled={submitting || loading}\n              className=\"w-full rounded-lg bg-primary text-primary-foreground px-3 py-2 font-medium\"\n            >\n              {submitting ? \"Ingresando…\" : \"Ingresar\"}\n            </button>\n\n            {/* enlace para restablecer contraseña */}\n            <div className=\"flex items-center justify-between text-sm pt-1\">\n              <span className=\"text-muted-foreground\">¿Olvidaste tu contraseña?</span>\n              <button\n                type=\"button\"\n                onClick={handleResetPassword}\n                disabled={submitting || loading}\n                className=\"underline underline-offset-2 hover:opacity-80 disabled:opacity-60\"\n                title=\"Te enviaremos un enlace al correo escrito arriba\"\n              >\n                Enviar enlace\n              </button>\n            </div>\n          </form>\n        )}\n\n        {/* --- FORM: OTP --- */}\n        {mode === \"otp\" && (\n          <div className=\"space-y-4\">\n            <div className=\"text-xs text-muted-foreground\">\n              Puedes recibir un código por <b>teléfono</b> (SMS) o por <b>correo</b>. Ingresa uno de los dos.\n            </div>\n\n            <div>\n              <label className=\"block text-sm mb-1\" htmlFor=\"phone\">\n                Teléfono (con lada, opcional)\n              </label>\n              <input\n                id=\"phone\"\n                name=\"phone\"\n                type=\"tel\"\n                placeholder=\"+52XXXXXXXXXX\"\n                className=\"w-full rounded-lg border border-input bg-background px-3 py-2\"\n                value={form.phone}\n                onChange={onChange}\n                disabled={submitting || loading}\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm mb-1\" htmlFor=\"otp_email\">\n                Correo (opcional si usas teléfono)\n              </label>\n              <input\n                id=\"otp_email\"\n                name=\"email\"\n                type=\"email\"\n                className=\"w-full rounded-lg border border-input bg-background px-3 py-2\"\n                value={form.email}\n                onChange={onChange}\n                disabled={submitting || loading}\n              />\n            </div>\n\n            <div className=\"flex gap-2\">\n              <button\n                type=\"button\"\n                onClick={handleSendOtp}\n                disabled={submitting || loading}\n                className=\"flex-1 rounded-lg border border-input px-3 py-2\"\n              >\n                {submitting ? \"Enviando…\" : \"Enviar código\"}\n              </button>\n            </div>\n\n            <div>\n              <label className=\"block text-sm mb-1\" htmlFor=\"otp\">\n                Código recibido\n              </label>\n              <input\n                id=\"otp\"\n                name=\"otp\"\n                type=\"text\"\n                className=\"w-full rounded-lg border border-input bg-background px-3 py-2\"\n                value={form.otp}\n                onChange={onChange}\n                disabled={submitting || loading}\n              />\n            </div>\n\n            <button\n              type=\"button\"\n              onClick={handleVerifyOtp}\n              disabled={submitting || loading}\n              className=\"w-full rounded-lg bg-primary text-primary-foreground px-3 py-2 font-medium\"\n            >\n              {submitting ? \"Verificando…\" : \"Verificar y entrar\"}\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":10879},"src/pages/enhanced-employee-management-console-with-deletion-controls/index.jsx":{"content":"// src/pages/enhanced-employee-management-console-with-deletion-controls/index.jsx\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport { useAuth } from '../../contexts/AuthContext';\nimport RoleBasedSidebar from '../../components/ui/RoleBasedSidebar';\nimport NavigationHeader from '../../components/ui/NavigationHeader';\nimport UserContextHeader from '../../components/ui/UserContextHeader';\nimport NotificationCenter from '../../components/ui/NotificationCenter';\nimport Icon from '../../components/AppIcon';\nimport Button from '../../components/ui/Button';\nimport Input from '../../components/ui/Input';\n\nimport EmployeeFilters from '../administrator-employee-management-console/components/EmployeeFilters';\nimport EmployeeTable from '../administrator-employee-management-console/components/EmployeeTable';\nimport EmployeeDetailPanel from '../administrator-employee-management-console/components/EmployeeDetailPanel';\nimport BulkActionsToolbar from '../administrator-employee-management-console/components/BulkActionsToolbar';\nimport EmployeeCreationModal from '../administrator-employee-management-console/components/EmployeeCreationModal';\nimport DeleteConfirmationModal from './components/DeleteConfirmationModal';\n\nimport enhancedEmployeeService from '@/services/enhancedEmployeeService';\nimport { useQuery } from '@/hooks/useQuery';\nimport { showToast } from '@/components/ui/ToastHub';\n\nconst EnhancedEmployeeManagementConsoleWithDeletionControls = () => {\n  const navigate = useNavigate();\n  const { userProfile, isSuperAdmin, signOut } = useAuth();\n\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\n  const [selectedEmployees, setSelectedEmployees] = useState([]);\n  const [selectedEmployee, setSelectedEmployee] = useState(null);\n  const [isDetailPanelOpen, setIsDetailPanelOpen] = useState(false);\n  const [isEditingEmployee, setIsEditingEmployee] = useState(false);\n  const [isCreationModalOpen, setIsCreationModalOpen] = useState(false);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [employeeToDelete, setEmployeeToDelete] = useState(null);\n\n  const [globalSearch, setGlobalSearch] = useState('');\n  const searchDebounceRef = useRef(null);\n\n  const [filters, setFilters] = useState({\n    search: '',\n    status: ['active'],\n    siteId: '',\n    supervisorId: '',\n    hireDateFrom: '',\n    hireDateTo: '',\n    includeDeleted: false\n  });\n\n  const [sortConfig, setSortConfig] = useState({ column: 'name', direction: 'asc' });\n\n  // Sincroniza buscador global con filtro \"search\" con debounce\n  useEffect(() => {\n    if (searchDebounceRef.current) clearTimeout(searchDebounceRef.current);\n    searchDebounceRef.current = setTimeout(() => {\n      setFilters((prev) => ({ ...prev, search: globalSearch }));\n    }, 400);\n    return () => searchDebounceRef.current && clearTimeout(searchDebounceRef.current);\n  }, [globalSearch]);\n\n  // Mapea filtros → params del service\n  const serviceParams = useMemo(() => {\n    return {\n      search: filters.search || '',\n      site: filters.siteId || 'all',\n      supervisor: filters.supervisorId || 'all',\n      status: Array.isArray(filters.status) ? filters.status : [],\n      position: 'all',\n      hireDateFrom: filters.hireDateFrom || '',\n      hireDateTo: filters.hireDateTo || '',\n      limit: 1000,\n    };\n  }, [filters]);\n\n  // Data: empleados (desde service)\n  const {\n    data: employeesRaw = [],\n    isLoading,\n    error,\n    refetch,\n  } = useQuery(enhancedEmployeeService.getEmployees.bind(enhancedEmployeeService), serviceParams, {\n    deps: [JSON.stringify(serviceParams)],\n    keepPreviousData: true,\n    retry: 1,\n    onError: (e) =>\n      showToast({ title: 'Error al cargar empleados', message: e.message, type: 'error' }),\n  });\n\n  // Incluir/ocultar eliminados (el service siempre excluye deleted; si includeDeleted=true, no podemos traerlos directo sin cambiar el service, así que lo dejamos documentado)\n  // Si necesitas ver \"deleted\" realmente, amplía el service para aceptar includeDeleted y quitar el .neq('status','deleted')\n  const employees = useMemo(() => {\n    if (filters.includeDeleted) {\n      // Nota: actualmente el service no trae 'deleted'; este branch queda para cuando habilites la opción en el service.\n      return employeesRaw;\n    }\n    return employeesRaw.filter((e) => e.status !== 'deleted');\n  }, [employeesRaw, filters.includeDeleted]);\n\n  // Ordenamiento en memoria\n  const sortedEmployees = useMemo(() => {\n    const arr = [...employees];\n    const { column, direction } = sortConfig || {};\n    arr.sort((a, b) => {\n      const av = (a?.[column] ?? '').toString().toLowerCase();\n      const bv = (b?.[column] ?? '').toString().toLowerCase();\n      if (direction === 'asc') return av < bv ? -1 : av > bv ? 1 : 0;\n      return av > bv ? -1 : av < bv ? 1 : 0;\n    });\n    return arr;\n  }, [employees, sortConfig]);\n\n  // Selección fila\n  const handleEmployeeSelect = (employeeId, selected) => {\n    setSelectedEmployees((prev) => (selected ? [...prev, employeeId] : prev.filter((id) => id !== employeeId)));\n  };\n  const handleSelectAll = (selected) => {\n    setSelectedEmployees(selected ? sortedEmployees.map((e) => e.id) : []);\n  };\n\n  // Abrir detalle\n  const handleEmployeeClick = async (employee) => {\n    setSelectedEmployee(employee);\n    setIsDetailPanelOpen(true);\n    setIsEditingEmployee(false);\n  };\n  const handleCloseDetailPanel = () => {\n    setIsDetailPanelOpen(false);\n    setSelectedEmployee(null);\n    setIsEditingEmployee(false);\n  };\n\n  // Guardar cambios (usa service)\n  const handleSaveEmployee = async (updatedEmployee) => {\n    try {\n      await enhancedEmployeeService.updateEmployee(updatedEmployee.id, {\n        name: updatedEmployee?.name,\n        phone: updatedEmployee?.phone,\n        position: updatedEmployee?.position,\n        status: updatedEmployee?.status,\n        siteId: updatedEmployee?.siteId,\n        supervisorId: updatedEmployee?.supervisorId,\n        dailySalary: updatedEmployee?.dailySalary,\n        hourlyRate: updatedEmployee?.hourlyRate,\n      });\n      showToast({ title: 'Empleado actualizado', type: 'success' });\n      await refetch();\n      setSelectedEmployee(updatedEmployee);\n    } catch (e) {\n      showToast({ title: 'Error al actualizar', message: e.message, type: 'error' });\n    }\n  };\n\n  // Crear empleado (deja el modal tal cual: el propio modal puede usar service.createEmployee)\n  const handleCreateEmployee = async (newEmployeeData) => {\n    try {\n      await enhancedEmployeeService.createEmployee(newEmployeeData);\n      showToast({ title: 'Empleado creado', type: 'success' });\n      await refetch();\n      setIsCreationModalOpen(false);\n    } catch (e) {\n      showToast({ title: 'Error al crear', message: e.message, type: 'error' });\n    }\n  };\n\n  // Eliminar (soft delete)\n  const requestDelete = (employee) => {\n    if (!isSuperAdmin()) {\n      showToast({ title: 'Permisos insuficientes', message: 'Solo SuperAdmins pueden eliminar', type: 'warning' });\n      return;\n    }\n    setEmployeeToDelete(employee);\n    setIsDeleteModalOpen(true);\n  };\n\n  const handleDeleteConfirm = async () => {\n    if (!employeeToDelete) return;\n    try {\n      await enhancedEmployeeService.deleteEmployee(employeeToDelete.id, userProfile?.id);\n      showToast({ title: 'Empleado eliminado', message: employeeToDelete?.name, type: 'success' });\n      setIsDeleteModalOpen(false);\n      setEmployeeToDelete(null);\n      setSelectedEmployees((prev) => prev.filter((id) => id !== employeeToDelete.id));\n      if (selectedEmployee?.id === employeeToDelete.id) handleCloseDetailPanel();\n      await refetch();\n    } catch (e) {\n      showToast({ title: 'Error al eliminar', message: e.message, type: 'error' });\n    }\n  };\n\n  // Restaurar (status → active)\n  const handleRestoreEmployee = async (employee) => {\n    if (!isSuperAdmin()) {\n      showToast({ title: 'Permisos insuficientes', message: 'Solo SuperAdmins pueden restaurar', type: 'warning' });\n      return;\n    }\n    try {\n      await enhancedEmployeeService.updateEmployee(employee.id, { status: 'active' });\n      showToast({ title: 'Empleado restaurado', message: employee?.name, type: 'success' });\n      await refetch();\n    } catch (e) {\n      showToast({ title: 'Error al restaurar', message: e.message, type: 'error' });\n    }\n  };\n\n  // Acciones masivas\n  const handleBulkAction = async (action) => {\n    if (!selectedEmployees.length) return;\n\n    if (action === 'delete') {\n      if (!isSuperAdmin()) {\n        showToast({ title: 'Permisos insuficientes', message: 'Solo SuperAdmins pueden eliminar', type: 'warning' });\n        return;\n      }\n      try {\n        // Soft delete en lote\n        await enhancedEmployeeService.bulkUpdateEmployees(selectedEmployees, { status: 'deleted' });\n        showToast({ title: 'Eliminación masiva completada', message: `${selectedEmployees.length} empleados`, type: 'success' });\n        setSelectedEmployees([]);\n        await refetch();\n      } catch (e) {\n        showToast({ title: 'Error en eliminación masiva', message: e.message, type: 'error' });\n      }\n      return;\n    }\n\n    if (action === 'export') {\n      handleExportData();\n      return;\n    }\n\n    // Otros (activar/inactivar)\n    if (action === 'activate') {\n      try {\n        await enhancedEmployeeService.bulkUpdateEmployees(selectedEmployees, { status: 'active' });\n        showToast({ title: 'Activados', message: `${selectedEmployees.length} empleados`, type: 'success' });\n        setSelectedEmployees([]);\n        await refetch();\n      } catch (e) {\n        showToast({ title: 'Error al activar', message: e.message, type: 'error' });\n      }\n      return;\n    }\n\n    if (action === 'deactivate') {\n      try {\n        await enhancedEmployeeService.bulkUpdateEmployees(selectedEmployees, { status: 'inactive' });\n        showToast({ title: 'Desactivados', message: `${selectedEmployees.length} empleados`, type: 'success' });\n        setSelectedEmployees([]);\n        await refetch();\n      } catch (e) {\n        showToast({ title: 'Error al desactivar', message: e.message, type: 'error' });\n      }\n      return;\n    }\n  };\n\n  // Navegación a vistas relacionadas\n  const handleViewAttendance = (employee) => {\n    navigate('/attendance-history-and-analytics-dashboard', { state: { employeeId: employee?.id } });\n  };\n  const handleViewPayroll = (employee) => {\n    navigate('/advanced-payroll-calculation-engine-with-comprehensive-wage-management', { state: { employeeId: employee?.id } });\n  };\n  const handleViewIncidents = (employee) => {\n    navigate('/incident-registration-and-management-system', { state: { employeeId: employee?.id } });\n  };\n\n  // Exportación CSV simple\n  const handleExportData = () => {\n    const dataToExport = selectedEmployees.length\n      ? sortedEmployees.filter((emp) => selectedEmployees.includes(emp.id))\n      : sortedEmployees;\n\n    if (!dataToExport.length) {\n      showToast({ title: 'Sin datos', message: 'No hay empleados para exportar', type: 'info' });\n      return;\n    }\n\n    const rows = dataToExport.map((emp) => ({\n      'ID Empleado': emp?.employeeId || '',\n      'Nombre': emp?.name || '',\n      'Email': emp?.email || '',\n      'Teléfono': emp?.phone || '',\n      'Obra': emp?.site || '',\n      'Supervisor': emp?.supervisor || '',\n      'Puesto': emp?.position || '',\n      'Estado': emp?.status || '',\n      'Salario Diario': emp?.dailySalary ?? 0,\n      'Salario Hora': emp?.hourlyRate ?? 0,\n      'Fecha Contratación': emp?.hireDate || ''\n    }));\n    const header = Object.keys(rows[0]).join(',');\n    const body = rows\n      .map((r) =>\n        Object.values(r)\n          .map((v) => `\"${String(v).replace(/\"/g, '\"\"')}\"`)\n          .join(',')\n      )\n      .join('\\n');\n\n    const csv = `${header}\\n${body}`;\n    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `empleados_${new Date().toISOString().split('T')[0]}.csv`;\n    a.click();\n    URL.revokeObjectURL(url);\n\n    showToast({ title: 'Exportado', message: 'CSV generado', type: 'success' });\n  };\n\n  const handleLogout = async () => {\n    try {\n      await signOut();\n      navigate('/employee-login-portal');\n    } catch (e) {\n      navigate('/employee-login-portal');\n    }\n  };\n\n  // Cargando inicial\n  if (isLoading && !employeesRaw.length) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"flex flex-col items-center space-y-4\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n          <span className=\"text-gray-600\">Cargando empleados...</span>\n        </div>\n      </div>\n    );\n  }\n\n  const anyError = error;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Sidebar */}\n      <RoleBasedSidebar\n        isCollapsed={sidebarCollapsed}\n        userRole={userProfile?.role?.toLowerCase()}\n      />\n\n      {/* Main Content */}\n      <div className={`transition-all duration-300 ease-out-cubic ${sidebarCollapsed ? 'ml-16' : 'ml-60'} pb-16 md:pb-0`}>\n        {/* Header */}\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => setSidebarCollapsed(!sidebarCollapsed)}\n                className=\"hidden md:flex\"\n                iconName={sidebarCollapsed ? 'PanelLeftOpen' : 'PanelLeftClose'}\n                iconSize={20}\n              />\n              <div>\n                <h1 className=\"text-2xl font-bold text-foreground\">Gestión Avanzada de Empleados</h1>\n                <p className=\"text-muted-foreground\">Control con eliminación y recuperación (soft delete)</p>\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"hidden md:block w-80\">\n                <Input\n                  type=\"search\"\n                  placeholder=\"Buscar empleados...\"\n                  value={globalSearch}\n                  onChange={(e) => setGlobalSearch(e?.target?.value)}\n                  className=\"w-full\"\n                />\n              </div>\n              <NotificationCenter />\n              <UserContextHeader\n                user={{\n                  name: userProfile?.full_name || 'Usuario',\n                  role:\n                    userProfile?.role === 'superadmin'\n                      ? 'SuperAdmin'\n                      : userProfile?.role === 'admin'\n                      ? 'Admin'\n                      : userProfile?.role?.charAt(0)?.toUpperCase() + userProfile?.role?.slice(1),\n                  site: 'Sistema Central',\n                }}\n                onLogout={handleLogout}\n              />\n            </div>\n          </div>\n        </header>\n\n        {/* Content */}\n        <main className=\"p-6\">\n          <NavigationHeader showBackButton={false} showHomeButton={false} />\n\n          {/* Estado de error (si aplica) */}\n          {anyError && (\n            <div className=\"mb-4 rounded-md border border-red-200 bg-red-50 px-4 py-3 text-red-700\">\n              {String(anyError)}\n              <Button variant=\"link\" className=\"ml-2\" onClick={() => refetch()}>\n                Reintentar\n              </Button>\n            </div>\n          )}\n\n          {/* Action Bar */}\n          <div className=\"flex items-center justify-between mb-6\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-2 text-muted-foreground\">\n                <Icon name=\"Users\" size={20} />\n                <span className=\"text-sm\">\n                  {sortedEmployees.length} empleado{sortedEmployees.length !== 1 ? 's' : ''}{' '}\n                  {sortedEmployees.length !== employees.length && ` de ${employees.length} filtrado(s)`}\n                </span>\n              </div>\n\n              {filters?.includeDeleted && (\n                <div className=\"flex items-center space-x-2 text-amber-600 text-sm bg-amber-50 px-2 py-1 rounded-md\">\n                  <Icon name=\"AlertTriangle\" size={16} />\n                  <span>Incluyendo empleados eliminados*</span>\n                </div>\n              )}\n            </div>\n\n            <div className=\"flex items-center space-x-2\">\n              <Button variant=\"outline\" onClick={handleExportData} iconName=\"Download\" iconSize={16}>\n                Exportar\n              </Button>\n              <Button onClick={() => setIsCreationModalOpen(true)} iconName=\"Plus\" iconSize={16}>\n                Nuevo Empleado\n              </Button>\n            </div>\n          </div>\n\n          {/* Bulk Actions */}\n          <BulkActionsToolbar\n            selectedCount={selectedEmployees.length}\n            onBulkAction={handleBulkAction}\n            onClearSelection={() => setSelectedEmployees([])}\n            userRole={userProfile?.role?.toLowerCase()}\n            showDeleteActions={isSuperAdmin()}\n          />\n\n          {/* Main Layout */}\n          <div className=\"grid grid-cols-1 xl:grid-cols-4 gap-6\">\n            {/* Filters Sidebar */}\n            <div className=\"xl:col-span-1\">\n              <EmployeeFilters\n                filters={filters}\n                onFiltersChange={setFilters}\n                onClearFilters={() =>\n                  setFilters({\n                    search: '',\n                    status: ['active'],\n                    siteId: '',\n                    supervisorId: '',\n                    hireDateFrom: '',\n                    hireDateTo: '',\n                    includeDeleted: false,\n                  })\n                }\n                showDeletedFilter={isSuperAdmin()}\n              />\n            </div>\n\n            {/* Employee Table */}\n            <div className={`${isDetailPanelOpen ? 'xl:col-span-2' : 'xl:col-span-3'}`}>\n              <EmployeeTable\n                employees={sortedEmployees}\n                selectedEmployees={selectedEmployees}\n                onEmployeeSelect={handleEmployeeSelect}\n                onSelectAll={handleSelectAll}\n                onEmployeeClick={handleEmployeeClick}\n                onSort={setSortConfig}\n                sortConfig={sortConfig}\n                onDelete={requestDelete}\n                onRestore={handleRestoreEmployee}\n                userRole={userProfile?.role?.toLowerCase()}\n                showDeleteActions={isSuperAdmin()}\n                loading={isLoading}\n              />\n            </div>\n\n            {/* Detail Panel */}\n            {isDetailPanelOpen && (\n              <div className=\"xl:col-span-1\">\n                <EmployeeDetailPanel\n                  employee={selectedEmployee}\n                  onClose={handleCloseDetailPanel}\n                  onSave={handleSaveEmployee}\n                  onDelete={requestDelete}\n                  onRestore={handleRestoreEmployee}\n                  onViewAttendance={handleViewAttendance}\n                  onViewPayroll={handleViewPayroll}\n                  onViewIncidents={handleViewIncidents}\n                  userRole={userProfile?.role?.toLowerCase()}\n                  showDeleteActions={isSuperAdmin()}\n                  isEditing={isEditingEmployee}\n                  onToggleEdit={() => setIsEditingEmployee(!isEditingEmployee)}\n                />\n              </div>\n            )}\n          </div>\n        </main>\n      </div>\n\n      {/* Employee Creation Modal */}\n      <EmployeeCreationModal\n        isOpen={isCreationModalOpen}\n        onClose={() => setIsCreationModalOpen(false)}\n        onSave={handleCreateEmployee}\n        userRole={userProfile?.role?.toLowerCase()}\n      />\n\n      {/* Delete Confirmation Modal */}\n      <DeleteConfirmationModal\n        isOpen={isDeleteModalOpen}\n        employee={employeeToDelete}\n        onClose={() => {\n          setIsDeleteModalOpen(false);\n          setEmployeeToDelete(null);\n        }}\n        onConfirm={handleDeleteConfirm}\n        loading={isLoading}\n      />\n    </div>\n  );\n};\n\nexport default EnhancedEmployeeManagementConsoleWithDeletionControls;\n","size_bytes":20317},"src/pages/enhanced-employee-payroll-management-with-detailed-calculations/index.jsx":{"content":"// src/pages/enhanced-employee-payroll-management-with-detailed-calculations/index.jsx\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\n\nimport { useAuth } from '@/contexts/AuthContext';\nimport RoleBasedSidebar from '@/components/ui/RoleBasedSidebar';\nimport NavigationHeader from '@/components/ui/NavigationHeader';\nimport UserContextHeader from '@/components/ui/UserContextHeader';\nimport NotificationCenter from '@/components/ui/NotificationCenter';\nimport Button from '@/components/ui/Button';\nimport Input from '@/components/ui/Input';\nimport Icon from '@/components/AppIcon';\nimport { useQuery } from '@/hooks/useQuery';\nimport { showToast } from '@/components/ui/ToastHub';\n\nimport enhancedEmployeeService from '@/services/enhancedEmployeeService';\nimport { payrollService } from '@/services/payrollService';\n\n// Components\nimport EmployeeSelectionGrid from './components/EmployeeSelectionGrid';\nimport PayrollCalculationView from './components/PayrollCalculationView';\nimport PayrollSummaryCards from './components/PayrollSummaryCards';\nimport AuditTrailPanel from './components/AuditTrailPanel';\n\n// ---------- Helpers de fechas ----------\nconst toISODate = (d) => (d instanceof Date ? d : new Date(d)).toISOString().split('T')[0];\nfunction getCurrentWeekStart() {\n  const t = new Date();\n  const day = t.getDay(); // 0..6 (0=Dom)\n  const monday = new Date(t);\n  monday.setDate(t.getDate() - ((day + 6) % 7));\n  monday.setHours(0, 0, 0, 0);\n  return toISODate(monday);\n}\nfunction getCurrentWeekEnd() {\n  const start = new Date(getCurrentWeekStart());\n  const sunday = new Date(start);\n  sunday.setDate(start.getDate() + 6);\n  sunday.setHours(23, 59, 59, 999);\n  return toISODate(sunday);\n}\n\nconst EnhancedEmployeePayrollManagementWithDetailedCalculations = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const { user, userProfile, hasRole } = useAuth();\n\n  // UI state\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\n  const [selectedEmployee, setSelectedEmployee] = useState(null);\n  const [processing, setProcessing] = useState(false);\n  const [error, setError] = useState('');\n  const [calculations, setCalculations] = useState(null);\n  const [adjustments, setAdjustments] = useState([]);\n\n  // Filtros\n  const [filters, setFilters] = useState({ search: '', obra: 'all', status: 'all' });\n\n  // Rango semanal\n  const [weekRange, setWeekRange] = useState({\n    start: getCurrentWeekStart(),\n    end: getCurrentWeekEnd(),\n  });\n\n  // Config de moneda (si tienes BrandingProvider, podrías leer de ahí)\n  const [currencyConfig] = useState({ symbol: '$', currency: 'MXN' });\n\n  // --------- Guards de acceso ----------\n  useEffect(() => {\n    if (!user || !userProfile) {\n      navigate('/employee-login-portal', { replace: true });\n      return;\n    }\n    if (!hasRole?.('admin')) {\n      navigate('/dashboard', { replace: true });\n    }\n  }, [user, userProfile, hasRole, navigate]);\n\n  // --------- Empleados (service) ----------\n  const employeeParams = useMemo(\n    () => ({\n      search: filters.search || '',\n      site: 'all',\n      supervisor: 'all',\n      status: filters.status === 'all' ? [] : [filters.status],\n      position: 'all',\n      hireDateFrom: '',\n      hireDateTo: '',\n      limit: 1000,\n    }),\n    [filters.search, filters.status]\n  );\n\n  const {\n    data: employeesRaw = [],\n    isLoading: loadingEmployees,\n    error: employeesError,\n    refetch: refetchEmployees,\n  } = useQuery(enhancedEmployeeService.getEmployees.bind(enhancedEmployeeService), employeeParams, {\n    deps: [JSON.stringify(employeeParams)],\n    keepPreviousData: true,\n    retry: 1,\n    onError: (e) => showToast({ title: 'Error al cargar empleados', message: e.message, type: 'error' }),\n  });\n\n  // Adaptamos empleados al grid (employeeSelection)\n  const employees = useMemo(\n    () =>\n      (employeesRaw || []).map((emp) => ({\n        id: emp.id,\n        employeeCode: emp.employeeId,\n        name: emp.name || '—',\n        email: emp.email,\n        phone: emp.phone,\n        dailySalary: Number(emp.dailySalary || 0),\n        status: emp.status || 'active',\n        site: emp.site || 'Sin asignar',\n        supervisor: emp.supervisor || '—',\n        // campos que el grid usa para mostrar totales (se llenan luego con cálculo por empleado)\n        workedDays: 0,\n        regularHours: 0,\n        overtimeHours: 0,\n        basePay: 0,\n        overtimePay: 0,\n        grossPay: 0,\n      })),\n    [employeesRaw]\n  );\n\n  // Enlace profundo por employeeId (desde navigate state)\n  useEffect(() => {\n    const deepId = location?.state?.employeeId;\n    if (deepId && employees.length) {\n      const found = employees.find((e) => e.id === deepId);\n      if (found) setSelectedEmployee(found);\n    }\n  }, [location?.state?.employeeId, employees]);\n\n  // --------- Auditoría (service) ----------\n  const {\n    data: auditLogs = [],\n    isLoading: loadingAudit,\n    error: auditError,\n    refetch: refetchAudit,\n  } = useQuery(payrollService.getAuditLogs, {\n    params: { module: 'Payroll', limit: 50 },\n    deps: [weekRange.start, weekRange.end],\n    retry: 1,\n  });\n\n  // --------- Handlers ----------\n  const handleEmployeeSelect = async (employee) => {\n    setSelectedEmployee(employee);\n    setProcessing(true);\n    setError('');\n    try {\n      // Cálculo detallado por empleado y semana\n      const calc = await payrollService.calculateWeeklyPayroll(\n        employee.id,\n        weekRange.start,\n        weekRange.end\n      );\n      const normalized = {\n        workedDays: Number(calc?.workedDays || calc?.diasTrabajados || 0),\n        regularHours: Number(calc?.regularHours || calc?.horasRegulares || 0),\n        overtimeHours: Number(calc?.overtimeHours || calc?.horasExtra || 0),\n        basePay: Number(calc?.basePay || calc?.salarioBase || 0),\n        overtimePay: Number(calc?.overtimePay || calc?.pagoHorasExtra || 0),\n        grossPay: Number(calc?.grossPay || calc?.salarioBruto || 0),\n        bonuses: Number(calc?.bonuses || 0),\n        deductions: Number(calc?.deductions || 0),\n        netPay: Number(calc?.netPay || calc?.salarioNeto || calc?.salarioBruto || 0),\n      };\n      setCalculations(normalized);\n\n      // Ajustes existentes\n      const adjs = await payrollService.getAdjustments(employee.id, weekRange.start, weekRange.end);\n      setAdjustments(\n        (adjs || []).map((a) => ({\n          id: a.id,\n          type: a.type,\n          category: a.category,\n          amount: Number(a.amount || 0),\n          description: a.description,\n          timestamp: a.created_at || a.timestamp,\n        }))\n      );\n    } catch (e) {\n      setError(`Error al cargar detalles: ${e?.message || e}`);\n    } finally {\n      setProcessing(false);\n    }\n  };\n\n  const handleSaveAdjustment = async (adjustment) => {\n    if (!selectedEmployee) return;\n    try {\n      await payrollService.addAdjustment({\n        employeeId: selectedEmployee.id,\n        startDate: weekRange.start,\n        endDate: weekRange.end,\n        type: adjustment?.type,\n        category: adjustment?.category,\n        amount: Number(adjustment?.amount || 0),\n        description: adjustment?.description,\n        authorizedBy: user?.id,\n      });\n\n      // Re-cargar datos del empleado seleccionado\n      await handleEmployeeSelect(selectedEmployee);\n      await payrollService.logActivity({\n        userId: user?.id,\n        role: userProfile?.role || 'user',\n        action: 'adjustment_added',\n        module: 'Payroll',\n        description: `Ajuste: ${adjustment?.description}`,\n      });\n      showToast({ title: 'Ajuste guardado', type: 'success' });\n    } catch (e) {\n      setError(`Error al guardar ajuste: ${e?.message || e}`);\n    }\n  };\n\n  const handleBulkCalculation = async () => {\n    if (!employees.length) return;\n    setProcessing(true);\n    setError('');\n    try {\n      let processed = 0;\n      // (Si tu backend soporta bulk, crea payrollService.calculateWeeklyPayrollBulk)\n      for (const emp of employees) {\n        await payrollService.calculateWeeklyPayroll(emp.id, weekRange.start, weekRange.end);\n        processed++;\n      }\n      await payrollService.logActivity({\n        userId: user?.id,\n        role: userProfile?.role || 'user',\n        action: 'bulk_calculation',\n        module: 'Payroll',\n        description: `Cálculo masivo completado para ${processed} empleados`,\n      });\n      showToast({ title: 'Cálculo masivo completado', type: 'success' });\n      await refetchEmployees();\n      await refetchAudit();\n    } catch (e) {\n      setError(`Error en cálculo masivo: ${e?.message || e}`);\n    } finally {\n      setProcessing(false);\n    }\n  };\n\n  const handleExport = async (format = 'csv') => {\n    try {\n      const subset = selectedEmployee ? [selectedEmployee] : employees;\n      if (!subset.length) {\n        showToast({ title: 'Sin datos', message: 'No hay empleados para exportar', type: 'info' });\n        return;\n      }\n      const header = [\n        'Código',\n        'Nombre',\n        'Sitio',\n        'Días Trabajados',\n        'Horas Regulares',\n        'Horas Extra',\n        'Salario Base',\n        'Pago Horas Extra',\n        'Salario Bruto',\n      ].join(',');\n      const lines = subset.map((emp) => {\n        const c = emp.id === selectedEmployee?.id ? calculations : null;\n        const workedDays = c?.workedDays ?? emp?.workedDays ?? 0;\n        const regularHours = c?.regularHours ?? emp?.regularHours ?? 0;\n        const overtimeHours = c?.overtimeHours ?? emp?.overtimeHours ?? 0;\n        const basePay = c?.basePay ?? emp?.basePay ?? 0;\n        const overtimePay = c?.overtimePay ?? emp?.overtimePay ?? 0;\n        const grossPay = c?.grossPay ?? emp?.grossPay ?? 0;\n\n        return [\n          emp.employeeCode || '',\n          `\"${(emp.name || '').replace(/\"/g, '\"\"')}\"`,\n          `\"${(emp.site || '').replace(/\"/g, '\"\"')}\"`,\n          workedDays,\n          regularHours,\n          overtimeHours,\n          basePay,\n          overtimePay,\n          grossPay,\n        ].join(',');\n      });\n      const csv = [header, ...lines].join('\\n');\n      const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\n      const a = document.createElement('a');\n      a.href = URL.createObjectURL(blob);\n      a.download = `nomina_${weekRange.start}_${weekRange.end}.csv`;\n      a.click();\n      URL.revokeObjectURL(a.href);\n\n      await payrollService.logActivity({\n        userId: user?.id,\n        role: userProfile?.role || 'user',\n        action: 'export',\n        module: 'Payroll',\n        description: `Datos exportados en formato ${format}`,\n      });\n      showToast({ title: 'Exportación lista', type: 'success' });\n    } catch (e) {\n      setError(`Error al exportar: ${e?.message || e}`);\n    }\n  };\n\n  // Filtrado cliente adicional (obra/status por etiquetas de texto)\n  const filteredEmployees = useMemo(() => {\n    return (employees || []).filter((employee) => {\n      const matchesSearch =\n        !filters.search ||\n        employee.name?.toLowerCase().includes(filters.search.toLowerCase()) ||\n        employee.employeeCode?.toLowerCase().includes(filters.search.toLowerCase());\n      const matchesObra = filters.obra === 'all' || employee.site === filters.obra;\n      const matchesStatus = filters.status === 'all' || employee.status === filters.status;\n      return matchesSearch && matchesObra && matchesStatus;\n    });\n  }, [employees, filters]);\n\n  // Loading inicial\n  if (loadingEmployees) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"flex flex-col items-center space-y-4\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\" />\n          <span className=\"text-muted-foreground\">Cargando sistema de nómina...</span>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Sidebar */}\n      <RoleBasedSidebar\n        isCollapsed={sidebarCollapsed}\n        userRole={userProfile?.role?.toLowerCase()}\n      />\n\n      {/* Main Content */}\n      <div className={`transition-all duration-300 ease-out-cubic ${sidebarCollapsed ? 'ml-16' : 'ml-60'} pb-16 md:pb-0`}>\n        {/* Header */}\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => setSidebarCollapsed(!sidebarCollapsed)}\n                className=\"hidden md:flex\"\n                iconName={sidebarCollapsed ? 'PanelLeftOpen' : 'PanelLeftClose'}\n                iconSize={20}\n              />\n              <div>\n                <h1 className=\"text-2xl font-bold text-foreground\">Gestión de Nómina Detallada</h1>\n                <p className=\"text-muted-foreground\">Cálculos detallados y gestión integral de nómina</p>\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-4\">\n              <NotificationCenter />\n              <UserContextHeader\n                user={{\n                  name: userProfile?.full_name || 'Usuario',\n                  role: userProfile?.role || 'user',\n                  site: 'Oficina Central',\n                }}\n                onLogout={() => navigate('/employee-login-portal')}\n              />\n            </div>\n          </div>\n        </header>\n\n        {/* Content */}\n        <main className=\"p-6\">\n          <NavigationHeader showBackButton={false} />\n\n          {/* Error */}\n          {error && (\n            <div className=\"mb-6 p-4 bg-destructive/10 border border-destructive/20 rounded-lg\">\n              <div className=\"flex items-center space-x-2\">\n                <Icon name=\"AlertCircle\" size={20} className=\"text-destructive\" />\n                <span className=\"text-destructive font-medium\">Error</span>\n              </div>\n              <p className=\"text-destructive mt-1\">{error}</p>\n            </div>\n          )}\n          {employeesError && (\n            <div className=\"mb-6 p-3 text-sm rounded bg-red-50 border border-red-200 text-red-700\">\n              {String(employeesError)}\n            </div>\n          )}\n          {auditError && (\n            <div className=\"mb-6 p-3 text-sm rounded bg-yellow-50 border border-yellow-200 text-yellow-800\">\n              {String(auditError)}\n            </div>\n          )}\n\n          {/* Controls Bar */}\n          <div className=\"mb-6 bg-card border border-border rounded-lg p-4\">\n            <div className=\"flex flex-col md:flex-row md:items-center md:justify-between space-y-4 md:space-y-0\">\n              <div className=\"flex flex-col md:flex-row md:items-center space-y-4 md:space-y-0 md:space-x-4\">\n                {/* Week Range */}\n                <div className=\"flex items-center space-x-2\">\n                  <Icon name=\"Calendar\" size={16} className=\"text-muted-foreground\" />\n                  <Input\n                    type=\"date\"\n                    label=\"Inicio\"\n                    value={weekRange.start}\n                    onChange={(e) => setWeekRange((p) => ({ ...p, start: e.target.value }))}\n                    className=\"w-auto\"\n                  />\n                  <span className=\"text-muted-foreground\">-</span>\n                  <Input\n                    type=\"date\"\n                    label=\"Fin\"\n                    value={weekRange.end}\n                    onChange={(e) => setWeekRange((p) => ({ ...p, end: e.target.value }))}\n                    className=\"w-auto\"\n                  />\n                </div>\n\n                {/* Search */}\n                <Input\n                  type=\"search\"\n                  placeholder=\"Buscar empleado...\"\n                  value={filters.search}\n                  onChange={(e) => setFilters((prev) => ({ ...prev, search: e.target.value }))}\n                  className=\"w-64\"\n                />\n              </div>\n\n              <div className=\"flex items-center space-x-2\">\n                <Button variant=\"outline\" iconName=\"Download\" onClick={() => handleExport('csv')}>\n                  Exportar\n                </Button>\n                <Button variant=\"default\" iconName=\"Calculator\" onClick={handleBulkCalculation} disabled={processing}>\n                  {processing ? 'Procesando...' : 'Calcular Todo'}\n                </Button>\n              </div>\n            </div>\n          </div>\n\n          {/* Summary Cards */}\n          <PayrollSummaryCards employees={filteredEmployees} currencyConfig={currencyConfig} weekRange={weekRange} />\n\n          {/* Main */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-5 gap-6 mt-6\">\n            {/* Employee Selection */}\n            <div className=\"lg:col-span-2\">\n              <EmployeeSelectionGrid\n                employees={filteredEmployees}\n                selectedEmployee={selectedEmployee}\n                onEmployeeSelect={handleEmployeeSelect}\n                processing={processing}\n                currencyConfig={currencyConfig}\n              />\n            </div>\n\n            {/* Calculation View */}\n            <div className=\"lg:col-span-3\">\n              {selectedEmployee ? (\n                <PayrollCalculationView\n                  employee={selectedEmployee}\n                  calculations={calculations}\n                  adjustments={adjustments}\n                  onSaveAdjustment={handleSaveAdjustment}\n                  processing={processing}\n                  currencyConfig={currencyConfig}\n                  weekRange={weekRange}\n                />\n              ) : (\n                <div className=\"bg-card border border-border rounded-lg p-8 text-center\">\n                  <Icon name=\"Calculator\" size={48} className=\"mx-auto text-muted-foreground mb-4\" />\n                  <h3 className=\"text-lg font-semibold text-foreground mb-2\">Selecciona un Empleado</h3>\n                  <p className=\"text-muted-foreground\">Elige un empleado de la lista para ver los cálculos detallados de nómina</p>\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Audit Trail */}\n          {selectedEmployee && (\n            <div className=\"mt-6\">\n              <AuditTrailPanel logs={auditLogs} employeeId={selectedEmployee?.id} isLoading={loadingAudit} />\n            </div>\n          )}\n        </main>\n      </div>\n    </div>\n  );\n};\n\nexport default EnhancedEmployeePayrollManagementWithDetailedCalculations;\n","size_bytes":18567},"src/pages/enterprise-code-quality-and-testing-center/index.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Code, TestTube, Bug, Shield, Zap, FileCheck, GitBranch, AlertCircle, CheckCircle, XCircle, Clock, TrendingUp, TrendingDown, RefreshCw, Play, Download } from 'lucide-react';\nimport RequireRole from '../../auth/RequireRole';\nimport TestResultsGrid from './components/TestResultsGrid';\nimport CodeMetricsPanel from './components/CodeMetricsPanel';\nimport SecurityScanResults from './components/SecurityScanResults';\nimport Icon from '../../components/AppIcon';\n\n\nconst EnterpriseCodeQualityAndTestingCenter = () => {\n  const [loading, setLoading] = useState(false);\n  const [activeView, setActiveView] = useState('overview');\n  const [testResults, setTestResults] = useState(null);\n  const [codeMetrics, setCodeMetrics] = useState(null);\n  const [buildStatus, setBuildStatus] = useState('success');\n  const [deploymentStatus, setDeploymentStatus] = useState('ready');\n\n  // Load initial data\n  useEffect(() => {\n    loadQualityData();\n  }, []);\n\n  const loadQualityData = async () => {\n    setLoading(true);\n    try {\n      // Simulate loading quality metrics\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      setTestResults({\n        total: 47,\n        passed: 45,\n        failed: 2,\n        coverage: 85.4,\n        duration: 12.3,\n        lastRun: new Date()?.toISOString()\n      });\n\n      setCodeMetrics({\n        eslint: {\n          errors: 0,\n          warnings: 3,\n          status: 'good',\n          files: 127\n        },\n        prettier: {\n          formatted: 100,\n          unformatted: 0,\n          status: 'excellent'\n        },\n        typescript: {\n          errors: 0,\n          warnings: 1,\n          status: 'good'\n        },\n        complexity: {\n          average: 3.2,\n          max: 8,\n          status: 'good'\n        },\n        duplicates: {\n          percentage: 2.1,\n          lines: 156,\n          status: 'good'\n        },\n        maintainability: {\n          index: 74,\n          status: 'good'\n        }\n      });\n    } catch (error) {\n      console.error('Error loading quality data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const runTests = async () => {\n    setLoading(true);\n    try {\n      // Simulate test execution\n      await new Promise(resolve => setTimeout(resolve, 3000));\n      await loadQualityData();\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getStatusIcon = (status) => {\n    switch (status) {\n      case 'excellent': case'good': case'success':\n        return <CheckCircle className=\"w-5 h-5 text-green-600\" />;\n      case 'warning':\n        return <AlertCircle className=\"w-5 h-5 text-yellow-600\" />;\n      case 'error': case'failed':\n        return <XCircle className=\"w-5 h-5 text-red-600\" />;\n      default:\n        return <Clock className=\"w-5 h-5 text-gray-400\" />;\n    }\n  };\n\n  const getStatusColor = (status) => {\n    switch (status) {\n      case 'excellent': case'good': case'success':\n        return 'bg-green-50 border-green-200 text-green-800';\n      case 'warning':\n        return 'bg-yellow-50 border-yellow-200 text-yellow-800';\n      case 'error': case'failed':\n        return 'bg-red-50 border-red-200 text-red-800';\n      default:\n        return 'bg-gray-50 border-gray-200 text-gray-800';\n    }\n  };\n\n  const renderOverview = () => (\n    <div className=\"space-y-6\">\n      {/* Quick Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <div className=\"bg-white p-6 rounded-lg border border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Test Coverage</p>\n              <p className=\"text-2xl font-semibold text-gray-900\">\n                {testResults?.coverage}%\n              </p>\n            </div>\n            <div className=\"p-2 bg-green-100 rounded-lg\">\n              <TestTube className=\"w-6 h-6 text-green-600\" />\n            </div>\n          </div>\n          <div className=\"mt-2 flex items-center\">\n            <TrendingUp className=\"w-4 h-4 text-green-600 mr-1\" />\n            <span className=\"text-sm text-green-600\">+2.4% desde la última semana</span>\n          </div>\n        </div>\n\n        <div className=\"bg-white p-6 rounded-lg border border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">ESLint Errors</p>\n              <p className=\"text-2xl font-semibold text-gray-900\">\n                {codeMetrics?.eslint?.errors}\n              </p>\n            </div>\n            <div className=\"p-2 bg-blue-100 rounded-lg\">\n              <Bug className=\"w-6 h-6 text-blue-600\" />\n            </div>\n          </div>\n          <div className=\"mt-2 flex items-center\">\n            <CheckCircle className=\"w-4 h-4 text-green-600 mr-1\" />\n            <span className=\"text-sm text-green-600\">Sin errores críticos</span>\n          </div>\n        </div>\n\n        <div className=\"bg-white p-6 rounded-lg border border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Build Status</p>\n              <p className=\"text-2xl font-semibold text-gray-900 capitalize\">\n                {buildStatus}\n              </p>\n            </div>\n            <div className={`p-2 rounded-lg ${buildStatus === 'success' ? 'bg-green-100' : 'bg-red-100'}`}>\n              {getStatusIcon(buildStatus)}\n            </div>\n          </div>\n          <div className=\"mt-2 flex items-center\">\n            <Clock className=\"w-4 h-4 text-gray-500 mr-1\" />\n            <span className=\"text-sm text-gray-500\">Último build: hace 2 horas</span>\n          </div>\n        </div>\n\n        <div className=\"bg-white p-6 rounded-lg border border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Bundle Size</p>\n              <p className=\"text-2xl font-semibold text-gray-900\">1.2MB</p>\n            </div>\n            <div className=\"p-2 bg-purple-100 rounded-lg\">\n              <Zap className=\"w-6 h-6 text-purple-600\" />\n            </div>\n          </div>\n          <div className=\"mt-2 flex items-center\">\n            <TrendingDown className=\"w-4 h-4 text-green-600 mr-1\" />\n            <span className=\"text-sm text-green-600\">-15KB optimización</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Test Results Summary */}\n      <div className=\"bg-white rounded-lg border border-gray-200\">\n        <div className=\"px-6 py-4 border-b border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">\n              Resumen de Pruebas\n            </h3>\n            <div className=\"flex items-center gap-3\">\n              <button\n                onClick={runTests}\n                disabled={loading}\n                className=\"px-4 py-2 bg-blue-600 text-white text-sm rounded-lg hover:bg-blue-700 disabled:opacity-50 flex items-center gap-2\"\n              >\n                {loading ? <RefreshCw className=\"w-4 h-4 animate-spin\" /> : <Play className=\"w-4 h-4\" />}\n                {loading ? 'Ejecutando...' : 'Ejecutar Pruebas'}\n              </button>\n            </div>\n          </div>\n        </div>\n        <div className=\"p-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-6\">\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-green-600 mb-2\">\n                {testResults?.passed}\n              </div>\n              <div className=\"text-sm text-gray-600\">Pruebas Exitosas</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-red-600 mb-2\">\n                {testResults?.failed}\n              </div>\n              <div className=\"text-sm text-gray-600\">Pruebas Fallidas</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-blue-600 mb-2\">\n                {testResults?.duration}s\n              </div>\n              <div className=\"text-sm text-gray-600\">Duración Total</div>\n            </div>\n          </div>\n\n          {/* Test Categories */}\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n              <div className=\"flex items-center gap-3\">\n                <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                <div>\n                  <div className=\"font-medium text-gray-900\">Payroll Utils Tests</div>\n                  <div className=\"text-sm text-gray-500\">Cálculos de nómina y utilidades</div>\n                </div>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-sm font-medium text-green-600\">25/25 pasando</span>\n              </div>\n            </div>\n\n            <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n              <div className=\"flex items-center gap-3\">\n                <XCircle className=\"w-5 h-5 text-red-600\" />\n                <div>\n                  <div className=\"font-medium text-gray-900\">Component Tests</div>\n                  <div className=\"text-sm text-gray-500\">Pruebas de componentes React</div>\n                </div>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-sm font-medium text-red-600\">18/20 pasando</span>\n                <button className=\"text-sm text-blue-600 hover:underline\">Ver fallos</button>\n              </div>\n            </div>\n\n            <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n              <div className=\"flex items-center gap-3\">\n                <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                <div>\n                  <div className=\"font-medium text-gray-900\">Integration Tests</div>\n                  <div className=\"text-sm text-gray-500\">Pruebas de integración API</div>\n                </div>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-sm font-medium text-green-600\">2/2 pasando</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Code Quality Metrics */}\n      <div className=\"bg-white rounded-lg border border-gray-200\">\n        <div className=\"px-6 py-4 border-b border-gray-200\">\n          <h3 className=\"text-lg font-semibold text-gray-900\">\n            Métricas de Calidad del Código\n          </h3>\n        </div>\n        <div className=\"p-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            <div className={`p-4 rounded-lg border ${getStatusColor(codeMetrics?.eslint?.status)}`}>\n              <div className=\"flex items-center justify-between mb-3\">\n                <h4 className=\"font-semibold\">ESLint</h4>\n                {getStatusIcon(codeMetrics?.eslint?.status)}\n              </div>\n              <div className=\"space-y-2 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span>Errores:</span>\n                  <span className=\"font-medium\">{codeMetrics?.eslint?.errors}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Advertencias:</span>\n                  <span className=\"font-medium\">{codeMetrics?.eslint?.warnings}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Archivos:</span>\n                  <span className=\"font-medium\">{codeMetrics?.eslint?.files}</span>\n                </div>\n              </div>\n            </div>\n\n            <div className={`p-4 rounded-lg border ${getStatusColor(codeMetrics?.prettier?.status)}`}>\n              <div className=\"flex items-center justify-between mb-3\">\n                <h4 className=\"font-semibold\">Prettier</h4>\n                {getStatusIcon(codeMetrics?.prettier?.status)}\n              </div>\n              <div className=\"space-y-2 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span>Formateado:</span>\n                  <span className=\"font-medium\">{codeMetrics?.prettier?.formatted}%</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Sin formatear:</span>\n                  <span className=\"font-medium\">{codeMetrics?.prettier?.unformatted}</span>\n                </div>\n              </div>\n            </div>\n\n            <div className={`p-4 rounded-lg border ${getStatusColor(codeMetrics?.typescript?.status)}`}>\n              <div className=\"flex items-center justify-between mb-3\">\n                <h4 className=\"font-semibold\">TypeScript</h4>\n                {getStatusIcon(codeMetrics?.typescript?.status)}\n              </div>\n              <div className=\"space-y-2 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span>Errores:</span>\n                  <span className=\"font-medium\">{codeMetrics?.typescript?.errors}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Advertencias:</span>\n                  <span className=\"font-medium\">{codeMetrics?.typescript?.warnings}</span>\n                </div>\n              </div>\n            </div>\n\n            <div className={`p-4 rounded-lg border ${getStatusColor(codeMetrics?.complexity?.status)}`}>\n              <div className=\"flex items-center justify-between mb-3\">\n                <h4 className=\"font-semibold\">Complejidad</h4>\n                {getStatusIcon(codeMetrics?.complexity?.status)}\n              </div>\n              <div className=\"space-y-2 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span>Promedio:</span>\n                  <span className=\"font-medium\">{codeMetrics?.complexity?.average}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Máximo:</span>\n                  <span className=\"font-medium\">{codeMetrics?.complexity?.max}</span>\n                </div>\n              </div>\n            </div>\n\n            <div className={`p-4 rounded-lg border ${getStatusColor(codeMetrics?.duplicates?.status)}`}>\n              <div className=\"flex items-center justify-between mb-3\">\n                <h4 className=\"font-semibold\">Duplicados</h4>\n                {getStatusIcon(codeMetrics?.duplicates?.status)}\n              </div>\n              <div className=\"space-y-2 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span>Porcentaje:</span>\n                  <span className=\"font-medium\">{codeMetrics?.duplicates?.percentage}%</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Líneas:</span>\n                  <span className=\"font-medium\">{codeMetrics?.duplicates?.lines}</span>\n                </div>\n              </div>\n            </div>\n\n            <div className={`p-4 rounded-lg border ${getStatusColor(codeMetrics?.maintainability?.status)}`}>\n              <div className=\"flex items-center justify-between mb-3\">\n                <h4 className=\"font-semibold\">Mantenibilidad</h4>\n                {getStatusIcon(codeMetrics?.maintainability?.status)}\n              </div>\n              <div className=\"space-y-2 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span>Índice:</span>\n                  <span className=\"font-medium\">{codeMetrics?.maintainability?.index}/100</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderTestDetails = () => (\n    <TestResultsGrid testResults={testResults} onRunTests={runTests} loading={loading} />\n  );\n\n  const renderCodeMetrics = () => (\n    <CodeMetricsPanel metrics={codeMetrics} onRefresh={loadQualityData} loading={loading} />\n  );\n\n  const renderSecurity = () => (\n    <SecurityScanResults />\n  );\n\n  const renderDeploymentReadiness = () => (\n    <div className=\"space-y-6\">\n      <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n          Lista de Verificación de Despliegue\n        </h3>\n        \n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between p-3 bg-green-50 border border-green-200 rounded-lg\">\n            <div className=\"flex items-center gap-3\">\n              <CheckCircle className=\"w-5 h-5 text-green-600\" />\n              <div>\n                <div className=\"font-medium text-gray-900\">Variables de entorno configuradas</div>\n                <div className=\"text-sm text-gray-500\">VITE_SUPABASE_URL y VITE_SUPABASE_ANON_KEY</div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex items-center justify-between p-3 bg-green-50 border border-green-200 rounded-lg\">\n            <div className=\"flex items-center gap-3\">\n              <CheckCircle className=\"w-5 h-5 text-green-600\" />\n              <div>\n                <div className=\"font-medium text-gray-900\">Todas las pruebas pasan</div>\n                <div className=\"text-sm text-gray-500\">45/47 pruebas exitosas (96% success rate)</div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex items-center justify-between p-3 bg-green-50 border border-green-200 rounded-lg\">\n            <div className=\"flex items-center gap-3\">\n              <CheckCircle className=\"w-5 h-5 text-green-600\" />\n              <div>\n                <div className=\"font-medium text-gray-900\">Build optimizado</div>\n                <div className=\"text-sm text-gray-500\">Bundle size: 1.2MB con vendor chunks</div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex items-center justify-between p-3 bg-green-50 border border-green-200 rounded-lg\">\n            <div className=\"flex items-center gap-3\">\n              <CheckCircle className=\"w-5 h-5 text-green-600\" />\n              <div>\n                <div className=\"font-medium text-gray-900\">Dockerfile configurado</div>\n                <div className=\"text-sm text-gray-500\">Multi-stage build con Nginx</div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex items-center justify-between p-3 bg-yellow-50 border border-yellow-200 rounded-lg\">\n            <div className=\"flex items-center gap-3\">\n              <AlertCircle className=\"w-5 h-5 text-yellow-600\" />\n              <div>\n                <div className=\"font-medium text-gray-900\">Migración de base de datos</div>\n                <div className=\"text-sm text-gray-500\">Verificar que las migraciones estén aplicadas</div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"mt-6 pt-6 border-t border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h4 className=\"font-medium text-gray-900\">Estado de Despliegue</h4>\n              <p className=\"text-sm text-gray-500\">\n                Sistema listo para producción con advertencias menores\n              </p>\n            </div>\n            <span className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${getStatusColor('warning')}`}>\n              {getStatusIcon('warning')}\n              <span className=\"ml-1\">Listo con Advertencias</span>\n            </span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  const views = [\n    { id: 'overview', label: 'Resumen', icon: FileCheck },\n    { id: 'tests', label: 'Pruebas Detalladas', icon: TestTube },\n    { id: 'metrics', label: 'Métricas de Código', icon: Code },\n    { id: 'security', label: 'Seguridad', icon: Shield },\n    { id: 'deployment', label: 'Preparación Deploy', icon: GitBranch }\n  ];\n\n  const renderContent = () => {\n    switch (activeView) {\n      case 'overview': return renderOverview();\n      case 'tests': return renderTestDetails();\n      case 'metrics': return renderCodeMetrics();\n      case 'security': return renderSecurity();\n      case 'deployment': return renderDeploymentReadiness();\n      default: return renderOverview();\n    }\n  };\n\n  return (\n    <RequireRole allowedRoles={['Admin', 'SuperAdmin']}>\n      <div className=\"min-h-screen bg-gray-50\">\n        {/* Header */}\n        <div className=\"bg-white shadow-sm\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900\">\n                  Centro de Calidad de Código y Pruebas\n                </h1>\n                <p className=\"text-gray-600 mt-1\">\n                  Supervisión integral de la salud del código Nova HR\n                </p>\n              </div>\n              <div className=\"flex items-center gap-3\">\n                <button\n                  onClick={loadQualityData}\n                  disabled={loading}\n                  className=\"px-4 py-2 bg-gray-600 text-white text-sm rounded-lg hover:bg-gray-700 disabled:opacity-50 flex items-center gap-2\"\n                >\n                  {loading ? <RefreshCw className=\"w-4 h-4 animate-spin\" /> : <RefreshCw className=\"w-4 h-4\" />}\n                  Actualizar\n                </button>\n                <button className=\"px-4 py-2 bg-blue-600 text-white text-sm rounded-lg hover:bg-blue-700 flex items-center gap-2\">\n                  <Download className=\"w-4 h-4\" />\n                  Exportar Reporte\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Navigation */}\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"border-b border-gray-200 bg-white\">\n            <nav className=\"flex space-x-8\" aria-label=\"Tabs\">\n              {views?.map((view) => {\n                const Icon = view?.icon;\n                return (\n                  <button\n                    key={view?.id}\n                    onClick={() => setActiveView(view?.id)}\n                    className={`py-4 px-1 border-b-2 font-medium text-sm flex items-center gap-2 ${\n                      activeView === view?.id\n                        ? 'border-blue-500 text-blue-600' :'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                    }`}\n                  >\n                    <Icon className=\"w-4 h-4\" />\n                    {view?.label}\n                  </button>\n                );\n              })}\n            </nav>\n          </div>\n        </div>\n\n        {/* Content */}\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          {renderContent()}\n        </div>\n      </div>\n    </RequireRole>\n  );\n};\n\nexport default EnterpriseCodeQualityAndTestingCenter;","size_bytes":23196},"src/pages/enterprise-security-and-rbac-implementation-center/index.jsx":{"content":"import React, { useState, useEffect, useCallback } from 'react';\nimport { Shield, Users, AlertTriangle, CheckCircle, XCircle, Eye, Key, Database, Clock, Activity, RefreshCw } from 'lucide-react';\n\n// Import existing components\nimport { useBranding } from '@/hooks/useBranding';\nimport { useAuth } from '@/contexts/AuthContext';\nimport BrandedHeader from '@/components/ui/BrandedHeader';\nimport Loading from '@/components/ui/Loading';\nimport ErrorState from '@/components/ui/ErrorState';\nimport Button from '@/components/ui/Button';\nimport NotAuthorized from '@/components/ui/NotAuthorized';\n\n// Import services\n\nimport { supabase } from '@/lib/supabase';\n\nconst EnterpriseSecurityImplementationCenter = () => {\n  const { branding, loading: brandingLoading } = useBranding();\n  const { user, userProfile } = useAuth();\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [activeTab, setActiveTab] = useState('security-overview');\n  const [refreshing, setRefreshing] = useState(false);\n\n  // State for security monitoring\n  const [securityMetrics, setSecurityMetrics] = useState({});\n  const [rlsPolicies, setRlsPolicies] = useState([]);\n  const [roleHierarchy, setRoleHierarchy] = useState([]);\n  const [securityAudit, setSecurityAudit] = useState({});\n  const [threatDetection, setThreatDetection] = useState({});\n  const [accessAttempts, setAccessAttempts] = useState([]);\n\n  // Check if user has superadmin access\n  const hasAccess = userProfile?.role === 'superadmin';\n\n  // Security monitoring functions\n  const checkSecurityMetrics = useCallback(async () => {\n    try {\n      // Get system statistics\n      const { data: stats, error: statsError } = await supabase?.rpc('get_system_stats');\n      if (statsError) throw statsError;\n\n      // Get recent activity logs for security analysis\n      const { data: logs, error: logsError } = await supabase\n        ?.from('logs_actividad')\n        ?.select('accion, fecha, ip_address, metadata')\n        ?.order('fecha', { ascending: false })\n        ?.limit(100);\n\n      if (logsError) throw logsError;\n\n      // Analyze security metrics\n      const failedLogins = logs?.filter(log => \n        log?.accion === 'login' && log?.metadata?.success === false\n      )?.length || 0;\n\n      const suspiciousActivity = logs?.filter(log => \n        log?.ip_address && (\n          log?.metadata?.multiple_attempts || \n          log?.metadata?.unusual_location\n        )\n      )?.length || 0;\n\n      const recentUsers = logs?.filter(log => \n        log?.fecha && new Date(log?.fecha) > new Date(Date.now() - 24 * 60 * 60 * 1000)\n      )?.length || 0;\n\n      setSecurityMetrics({\n        totalUsers: stats?.total_users || 0,\n        activeAdmins: stats?.total_admins || 0,\n        activeSupervisors: stats?.total_supervisors || 0,\n        regularUsers: stats?.total_regular_users || 0,\n        unassignedUsers: stats?.unassigned_users || 0,\n        failedLogins,\n        suspiciousActivity,\n        recentActivity: recentUsers,\n        lastActivity: stats?.last_activity,\n        securityScore: Math.max(0, 100 - (failedLogins * 5) - (suspiciousActivity * 10))\n      });\n\n    } catch (err) {\n      console.error('Security metrics check failed:', err?.message);\n      setError('Failed to load security metrics');\n    }\n  }, []);\n\n  const checkRLSPolicies = useCallback(async () => {\n    try {\n      // Get RLS policy information (simplified for demo)\n      const policies = [\n        {\n          table: 'usuarios',\n          policy: 'users_manage_own_usuarios',\n          type: 'ALL',\n          role: 'authenticated',\n          status: 'active',\n          description: 'Users can manage their own profile data'\n        },\n        {\n          table: 'usuarios', \n          policy: 'admins_view_all_usuarios',\n          type: 'SELECT',\n          role: 'authenticated',\n          status: 'active',\n          description: 'Admins can view all user profiles'\n        },\n        {\n          table: 'logs_actividad',\n          policy: 'users_view_own_logs',\n          type: 'SELECT', \n          role: 'authenticated',\n          status: 'active',\n          description: 'Users can view their own activity logs'\n        },\n        {\n          table: 'logs_actividad',\n          policy: 'admins_view_all_logs',\n          type: 'SELECT',\n          role: 'authenticated', \n          status: 'active',\n          description: 'Admins can view all activity logs'\n        },\n        {\n          table: 'configuracion_aplicacion',\n          policy: 'superadmin_manage_config',\n          type: 'ALL',\n          role: 'authenticated',\n          status: 'active',\n          description: 'SuperAdmins can manage app configuration'\n        }\n      ];\n\n      setRlsPolicies(policies);\n    } catch (err) {\n      console.error('RLS policies check failed:', err?.message);\n    }\n  }, []);\n\n  const checkRoleHierarchy = useCallback(async () => {\n    try {\n      const { data: roles, error } = await supabase\n        ?.from('roles')\n        ?.select('*')\n        ?.order('nivel', { ascending: true });\n\n      if (error) throw error;\n\n      setRoleHierarchy(roles || []);\n    } catch (err) {\n      console.error('Role hierarchy check failed:', err?.message);\n    }\n  }, []);\n\n  const performSecurityAudit = useCallback(async () => {\n    try {\n      const auditResults = {\n        authentication: {\n          status: 'secure',\n          issues: [],\n          recommendations: []\n        },\n        authorization: {\n          status: 'secure', \n          issues: [],\n          recommendations: []\n        },\n        dataProtection: {\n          status: 'secure',\n          issues: [],\n          recommendations: []\n        },\n        auditTrail: {\n          status: 'secure',\n          issues: [],\n          recommendations: []\n        }\n      };\n\n      // Check for common security issues\n      const { data: unencryptedData } = await supabase\n        ?.from('usuarios')\n        ?.select('correo')\n        ?.limit(1);\n\n      if (unencryptedData) {\n        // In a real implementation, check for sensitive data exposure\n        auditResults.dataProtection.status = 'warning';\n        auditResults?.dataProtection?.issues?.push('Email addresses stored in plain text');\n        auditResults?.dataProtection?.recommendations?.push('Consider implementing email encryption');\n      }\n\n      // Check for users without proper role assignment\n      const { data: unassignedUsers } = await supabase\n        ?.from('usuarios')\n        ?.select('id')\n        ?.is('rol', null);\n\n      if (unassignedUsers?.length > 0) {\n        auditResults.authorization.status = 'warning';\n        auditResults?.authorization?.issues?.push(`${unassignedUsers?.length} users without assigned roles`);\n        auditResults?.authorization?.recommendations?.push('Assign proper roles to all users');\n      }\n\n      setSecurityAudit(auditResults);\n    } catch (err) {\n      console.error('Security audit failed:', err?.message);\n    }\n  }, []);\n\n  // Initialize security monitoring\n  useEffect(() => {\n    if (!hasAccess) return;\n\n    const initializeSecurity = async () => {\n      setLoading(true);\n      try {\n        await Promise.all([\n          checkSecurityMetrics(),\n          checkRLSPolicies(),\n          checkRoleHierarchy(),\n          performSecurityAudit()\n        ]);\n      } catch (err) {\n        setError(err?.message || 'Failed to initialize security monitoring');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    initializeSecurity();\n\n    // Set up periodic security checks\n    const interval = setInterval(() => {\n      checkSecurityMetrics();\n      performSecurityAudit();\n    }, 60000); // Every minute\n\n    return () => clearInterval(interval);\n  }, [hasAccess, checkSecurityMetrics, checkRLSPolicies, checkRoleHierarchy, performSecurityAudit]);\n\n  // Manual refresh function\n  const handleRefresh = async () => {\n    setRefreshing(true);\n    try {\n      await Promise.all([\n        checkSecurityMetrics(),\n        checkRLSPolicies(), \n        checkRoleHierarchy(),\n        performSecurityAudit()\n      ]);\n    } catch (err) {\n      setError(err?.message || 'Refresh failed');\n    } finally {\n      setRefreshing(false);\n    }\n  };\n\n  // Security overview component\n  const SecurityOverview = () => (\n    <div className=\"space-y-6\">\n      {/* Security Score Card */}\n      <div className=\"bg-gradient-to-r from-blue-500 to-purple-600 rounded-lg text-white p-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h3 className=\"text-lg font-semibold mb-2\">Security Score</h3>\n            <p className=\"text-3xl font-bold\">{securityMetrics?.securityScore || 0}/100</p>\n            <p className=\"text-blue-100\">Overall system security rating</p>\n          </div>\n          <Shield className=\"h-16 w-16 text-blue-200\" />\n        </div>\n      </div>\n\n      {/* Security Metrics Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <div className=\"bg-white rounded-lg border p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-gray-600\">Total Users</p>\n              <p className=\"text-2xl font-bold text-gray-900\">{securityMetrics?.totalUsers || 0}</p>\n            </div>\n            <Users className=\"h-8 w-8 text-blue-600\" />\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-lg border p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-gray-600\">Failed Logins</p>\n              <p className=\"text-2xl font-bold text-red-600\">{securityMetrics?.failedLogins || 0}</p>\n            </div>\n            <AlertTriangle className=\"h-8 w-8 text-red-600\" />\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-lg border p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-gray-600\">Active Admins</p>\n              <p className=\"text-2xl font-bold text-green-600\">{securityMetrics?.activeAdmins || 0}</p>\n            </div>\n            <Key className=\"h-8 w-8 text-green-600\" />\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-lg border p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-gray-600\">Suspicious Activity</p>\n              <p className=\"text-2xl font-bold text-yellow-600\">{securityMetrics?.suspiciousActivity || 0}</p>\n            </div>\n            <Eye className=\"h-8 w-8 text-yellow-600\" />\n          </div>\n        </div>\n      </div>\n\n      {/* Role Distribution */}\n      <div className=\"bg-white rounded-lg border\">\n        <div className=\"px-6 py-4 border-b\">\n          <h3 className=\"text-lg font-semibold text-gray-900\">Role Distribution</h3>\n        </div>\n        <div className=\"p-6\">\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <div className=\"text-center\">\n              <p className=\"text-2xl font-bold text-purple-600\">{securityMetrics?.activeAdmins || 0}</p>\n              <p className=\"text-sm text-gray-600\">SuperAdmins</p>\n            </div>\n            <div className=\"text-center\">\n              <p className=\"text-2xl font-bold text-blue-600\">{securityMetrics?.activeAdmins || 0}</p>\n              <p className=\"text-sm text-gray-600\">Admins</p>\n            </div>\n            <div className=\"text-center\">\n              <p className=\"text-2xl font-bold text-green-600\">{securityMetrics?.activeSupervisors || 0}</p>\n              <p className=\"text-sm text-gray-600\">Supervisors</p>\n            </div>\n            <div className=\"text-center\">\n              <p className=\"text-2xl font-bold text-gray-600\">{securityMetrics?.regularUsers || 0}</p>\n              <p className=\"text-sm text-gray-600\">Users</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  // RLS Policy Management component\n  const RLSPolicyManagement = () => (\n    <div className=\"space-y-6\">\n      <div className=\"bg-white rounded-lg border\">\n        <div className=\"px-6 py-4 border-b\">\n          <h3 className=\"text-lg font-semibold text-gray-900\">Row-Level Security Policies</h3>\n        </div>\n        <div className=\"overflow-x-auto\">\n          <table className=\"min-w-full divide-y divide-gray-200\">\n            <thead className=\"bg-gray-50\">\n              <tr>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Table\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Policy Name\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Type\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Status\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Description\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {rlsPolicies?.map((policy, index) => (\n                <tr key={index}>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n                    {policy?.table}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                    {policy?.policy}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <span className=\"px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-blue-100 text-blue-800\">\n                      {policy?.type}\n                    </span>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${\n                      policy?.status === 'active' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'\n                    }`}>\n                      {policy?.status}\n                    </span>\n                  </td>\n                  <td className=\"px-6 py-4 text-sm text-gray-500\">\n                    {policy?.description}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  );\n\n  // Security Audit component\n  const SecurityAudit = () => (\n    <div className=\"space-y-6\">\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        {Object.entries(securityAudit)?.map(([category, audit]) => (\n          <div key={category} className=\"bg-white rounded-lg border\">\n            <div className=\"px-6 py-4 border-b\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-lg font-semibold text-gray-900 capitalize\">\n                  {category?.replace(/([A-Z])/g, ' $1')?.trim()}\n                </h3>\n                <div className={`flex items-center space-x-1 ${\n                  audit?.status === 'secure' ? 'text-green-600' :\n                  audit?.status === 'warning' ? 'text-yellow-600' : 'text-red-600'\n                }`}>\n                  {audit?.status === 'secure' ? <CheckCircle className=\"h-5 w-5\" /> :\n                   audit?.status === 'warning' ? <AlertTriangle className=\"h-5 w-5\" /> :\n                   <XCircle className=\"h-5 w-5\" />}\n                  <span className=\"text-sm font-medium capitalize\">{audit?.status}</span>\n                </div>\n              </div>\n            </div>\n            <div className=\"p-6\">\n              {audit?.issues?.length > 0 && (\n                <div className=\"mb-4\">\n                  <h4 className=\"text-sm font-medium text-gray-900 mb-2\">Issues</h4>\n                  <ul className=\"space-y-1\">\n                    {audit?.issues?.map((issue, index) => (\n                      <li key={index} className=\"text-sm text-red-600 flex items-center\">\n                        <XCircle className=\"h-4 w-4 mr-2\" />\n                        {issue}\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              )}\n              \n              {audit?.recommendations?.length > 0 && (\n                <div>\n                  <h4 className=\"text-sm font-medium text-gray-900 mb-2\">Recommendations</h4>\n                  <ul className=\"space-y-1\">\n                    {audit?.recommendations?.map((rec, index) => (\n                      <li key={index} className=\"text-sm text-blue-600 flex items-center\">\n                        <CheckCircle className=\"h-4 w-4 mr-2\" />\n                        {rec}\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              )}\n\n              {audit?.issues?.length === 0 && audit?.recommendations?.length === 0 && (\n                <p className=\"text-sm text-gray-500\">No issues detected</p>\n              )}\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n\n  if (!user) {\n    return <div>Please log in to access this page.</div>;\n  }\n\n  if (!hasAccess) {\n    return <NotAuthorized />;\n  }\n\n  if (brandingLoading || loading) {\n    return <Loading />;\n  }\n\n  if (error) {\n    return <ErrorState message={error} onRetry={() => window.location?.reload()} />;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <BrandedHeader \n        title=\"Enterprise Security and RBAC Implementation Center\"\n        subtitle=\"Comprehensive Row-Level Security (RLS) and Role-Based Access Control (RBAC) management with zero-trust architecture\"\n        icon={<Shield className=\"h-8 w-8\" />}\n      />\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Controls */}\n        <div className=\"mb-6 flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Button\n              onClick={handleRefresh}\n              disabled={refreshing}\n              className=\"flex items-center space-x-2\"\n            >\n              <RefreshCw className={`h-4 w-4 ${refreshing ? 'animate-spin' : ''}`} />\n              <span>Refresh</span>\n            </Button>\n          </div>\n\n          <div className=\"flex items-center space-x-2 text-sm text-gray-600\">\n            <Clock className=\"h-4 w-4\" />\n            <span>Last updated: {new Date()?.toLocaleTimeString()}</span>\n          </div>\n        </div>\n\n        {/* Navigation Tabs */}\n        <div className=\"border-b border-gray-200 mb-6\">\n          <nav className=\"-mb-px flex space-x-8\">\n            {[\n              { id: 'security-overview', label: 'Security Overview', icon: Shield },\n              { id: 'rls-policies', label: 'RLS Policies', icon: Database },\n              { id: 'security-audit', label: 'Security Audit', icon: Eye }\n            ]?.map((tab) => (\n              <button\n                key={tab?.id}\n                onClick={() => setActiveTab(tab?.id)}\n                className={`flex items-center space-x-2 py-2 px-1 border-b-2 font-medium text-sm ${\n                  activeTab === tab?.id\n                    ? 'border-blue-500 text-blue-600' :'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                }`}\n              >\n                <tab.icon className=\"h-4 w-4\" />\n                <span>{tab?.label}</span>\n              </button>\n            ))}\n          </nav>\n        </div>\n\n        {/* Tab Content */}\n        <div className=\"space-y-6\">\n          {activeTab === 'security-overview' && <SecurityOverview />}\n          {activeTab === 'rls-policies' && <RLSPolicyManagement />}\n          {activeTab === 'security-audit' && <SecurityAudit />}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default EnterpriseSecurityImplementationCenter;","size_bytes":20098},"src/pages/frontend-architecture-and-code-quality-dashboard/index.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useAuth } from '../../contexts/AuthContext';\nimport {\n  Code, FileText, CheckCircle, AlertTriangle, XCircle, RefreshCw, Download,\n  Smartphone, Monitor, Palette, Layers, Package, TestTube, Shield, Activity\n} from 'lucide-react';\nimport { qualityService } from '../../services/qualityService'\n; // ✅ Asegúrate de tener este servicio creado\n\nexport default function FrontendArchitectureAndCodeQualityDashboard() {\n  const { userProfile, hasRole } = useAuth();\n\n  const [loading, setLoading] = useState(true);\n  const [activePanel, setActivePanel] = useState('architecture');\n  const [error, setError] = useState('');\n\n  // Estado inicial (simulado) como fallback\n  const [codeMetrics, setCodeMetrics] = useState({\n    typescript: { coverage: 100, errors: 0, warnings: 0 },\n    tailwind: { utilization: 85, customComponents: 24, bundleSize: '245kb' },\n    eslint: { violations: 0, warnings: 2, fixed: 45 },\n    prettier: { compliance: 100, formatted: 156 },\n    performance: { buildTime: '12.3s', bundleSize: '1.2MB', loadTime: '0.8s' },\n    analysis: []\n  });\n\n  const [componentArchitecture, setComponentArchitecture] = useState({\n    pages: 28,\n    components: 156,\n    services: 12,\n    hooks: 8,\n    contexts: 3\n  });\n\n  const [qualityChecks, setQualityChecks] = useState([\n    { name: 'TypeScript Configuration', status: 'passed', score: 100 },\n    { name: 'ESLint Rules Compliance', status: 'passed', score: 98 },\n    { name: 'Prettier Formatting', status: 'passed', score: 100 },\n    { name: 'Component Modularity', status: 'passed', score: 95 },\n    { name: 'Mobile Responsiveness', status: 'passed', score: 92 },\n    { name: 'Accessibility Standards', status: 'warning', score: 85 },\n    { name: 'Bundle Optimization', status: 'passed', score: 88 },\n    { name: 'Testing Coverage', status: 'warning', score: 78 }\n  ]);\n\n  const [responsiveBreakpoints, setResponsiveBreakpoints] = useState([\n    { device: 'Mobile', width: '375px', status: 'passed', components: 156 },\n    { device: 'Tablet', width: '768px', status: 'passed', components: 156 },\n    { device: 'Desktop', width: '1024px', status: 'passed', components: 156 },\n    { device: 'Wide Desktop', width: '1440px', status: 'passed', components: 156 }\n  ]);\n\n  const [buildMetrics, setBuildMetrics] = useState({\n    lastBuild: '2025-01-19T14:30:00Z',\n    buildTime: '12.3s',\n    bundleSize: '1.2MB',\n    assets: 45,\n    chunks: 8\n  });\n\n  // ---------------------------------------------------------\n  // Helpers de “simulado” (fallback si no hay snapshot en BD)\n  // ---------------------------------------------------------\n  const analyzeComponentStructure = () => {\n    const projectStructure = {\n      pages: {\n        count: 28,\n        breakdown: {\n          'Dashboard Pages': 8,\n          'Management Consoles': 12,\n          'Authentication': 3,\n          'Reporting': 5\n        }\n      },\n      components: {\n        count: 156,\n        breakdown: {\n          'UI Components': 45,\n          'Form Components': 28,\n          'Layout Components': 18,\n          'Feature Components': 65\n        }\n      },\n      services: {\n        count: 12,\n        breakdown: {\n          'Authentication': 1,\n          'Employee Management': 3,\n          'Payroll': 2,\n          'Attendance': 2,\n          'Reporting': 2,\n          'Utilities': 2\n        }\n      }\n    };\n    setComponentArchitecture(projectStructure);\n  };\n\n  const analyzeBuildPerformance = () => {\n    const buildAnalysis = {\n      viteConfig: 'optimized',\n      typeScript: 'strict mode enabled',\n      tailwindPurging: 'enabled',\n      treeShaking: 'enabled',\n      codesplitting: 'enabled',\n      bundleAnalysis: {\n        vendor: '456kb',\n        application: '678kb',\n        assets: '124kb'\n      }\n    };\n    setBuildMetrics(prev => ({ ...prev, ...buildAnalysis }));\n  };\n\n  const runQualityChecks = () => {\n    const qualityResults = [\n      {\n        category: 'TypeScript',\n        checks: [\n          { name: 'Strict Mode Enabled', status: 'passed' },\n          { name: 'No Any Types', status: 'passed' },\n          { name: 'Interface Definitions', status: 'passed' }\n        ]\n      },\n      {\n        category: 'React Patterns',\n        checks: [\n          { name: 'Functional Components', status: 'passed' },\n          { name: 'Custom Hooks Usage', status: 'passed' },\n          { name: 'Optional Chaining', status: 'passed' }\n        ]\n      },\n      {\n        category: 'Supabase Integration',\n        checks: [\n          { name: 'Error Handling Patterns', status: 'passed' },\n          { name: 'Loading States', status: 'passed' },\n          { name: 'Authentication Flow', status: 'passed' }\n        ]\n      }\n    ];\n    setCodeMetrics(prev => ({ ...prev, analysis: qualityResults }));\n  };\n\n  // ---------------------------------------------------------\n  // 🔌 Aquí va la conexión real: loadArchitectureData\n  //    - Lee el último snapshot con qualityService\n  //    - Si no hay, cae a los simulados actuales\n  // ---------------------------------------------------------\n  const loadArchitectureData = async () => {\n    setLoading(true);\n    setError('');\n    try {\n      const res = await qualityService.getLatestReport();\n\n      if (res.ok && res.data) {\n        const { eslint_json, jest_coverage_json, bundle_json, meta, created_at } = res.data;\n\n        // ESLint\n        const eslintStats = Array.isArray(eslint_json) && eslint_json.length > 0 ? eslint_json[0] : null;\n        const eslintMapped = {\n          violations: Number(eslintStats?.errorCount ?? 0),\n          warnings: Number(eslintStats?.warningCount ?? 0),\n          fixed: Number(eslintStats?.fixableErrorCount ?? 0) + Number(eslintStats?.fixableWarningCount ?? 0)\n        };\n\n        // Coverage (Jest)\n        const cov = jest_coverage_json?.total ?? {};\n        const coveragePct = Number(cov?.statements?.pct ?? cov?.lines?.pct ?? 0);\n\n        // Bundle / build\n        const bundleSummary = bundle_json?.summary ?? {};\n        const totalBytesHuman = bundleSummary?.totalBytesHuman ?? buildMetrics.bundleSize;\n\n        setCodeMetrics(prev => ({\n          ...prev,\n          eslint: { ...eslintMapped },\n          typescript: { ...prev.typescript, coverage: Math.round(coveragePct * 100) / 100, errors: 0, warnings: 0 },\n          performance: {\n            ...prev.performance,\n            buildTime: meta?.buildTime ?? prev.performance.buildTime,\n            bundleSize: totalBytesHuman ?? prev.performance.bundleSize,\n            loadTime: prev.performance.loadTime\n          }\n        }));\n\n        setBuildMetrics(prev => ({\n          ...prev,\n          lastBuild: created_at ?? new Date().toISOString(),\n          buildTime: meta?.buildTime ?? prev.buildTime,\n          bundleSize: totalBytesHuman ?? prev.bundleSize,\n          assets: bundleSummary?.assets ?? prev.assets,\n          chunks: bundleSummary?.chunks ?? prev.chunks\n        }));\n\n        // Si quieres, aquí puedes derivar arquitectura desde el bundle (por ahora mantenemos simulada)\n        analyzeComponentStructure();\n        runQualityChecks();\n      } else {\n        // Fallback a simulados si no hay snapshot\n        analyzeComponentStructure();\n        analyzeBuildPerformance();\n        runQualityChecks();\n      }\n    } catch (e) {\n      setError(e?.message || 'No se pudieron cargar las métricas de calidad.');\n      // Fallback\n      analyzeComponentStructure();\n      analyzeBuildPerformance();\n      runQualityChecks();\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Llamada automática cuando el usuario es admin\n  useEffect(() => {\n    if (hasRole('admin')) {\n      // No metas hasRole en deps; usa el rol del perfil (estable)\n      loadArchitectureData();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [userProfile?.role]);\n\n  // ----------------------------\n  // Render helpers\n  // ----------------------------\n  const getStatusIcon = (status) => {\n    switch (status) {\n      case 'passed': case 'healthy': case 'optimized':\n        return <CheckCircle className=\"w-4 h-4 text-green-500\" />;\n      case 'warning':\n        return <AlertTriangle className=\"w-4 h-4 text-yellow-500\" />;\n      case 'failed': case 'error':\n        return <XCircle className=\"w-4 h-4 text-red-500\" />;\n      default:\n        return <RefreshCw className=\"w-4 h-4 text-gray-500 animate-spin\" />;\n    }\n  };\n\n  const getStatusColor = (status) => {\n    switch (status) {\n      case 'passed': case 'healthy': case 'optimized':\n        return 'text-green-600 bg-green-50 border-green-200';\n      case 'warning':\n        return 'text-yellow-600 bg-yellow-50 border-yellow-200';\n      case 'failed': case 'error':\n        return 'text-red-600 bg-red-50 border-red-200';\n      default:\n        return 'text-gray-600 bg-gray-50 border-gray-200';\n    }\n  };\n\n  const getScoreColor = (score) => {\n    if (score >= 95) return 'text-green-600';\n    if (score >= 85) return 'text-yellow-600';\n    return 'text-red-600';\n  };\n\n  const exportReport = () => {\n    const report = {\n      timestamp: new Date()?.toISOString(),\n      project: 'NovaAsistencia',\n      framework: 'React + Vite + TypeScript + Tailwind CSS',\n      metrics: codeMetrics,\n      architecture: componentArchitecture,\n      qualityChecks,\n      responsiveness: responsiveBreakpoints,\n      buildMetrics\n    };\n    const blob = new Blob([JSON.stringify(report, null, 2)], { type: 'application/json' });\n    const d = new Date();\n    const stamp = `${d.getFullYear()}-${String(d.getMonth() + 1).padStart(2, '0')}-${String(d.getDate()).padStart(2, '0')}`;\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `novaasistencia-code-quality-report-${stamp}.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  if (!hasRole('admin')) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"text-center\">\n          <Shield className=\"mx-auto h-12 w-12 text-red-500 mb-4\" />\n          <h1 className=\"text-xl font-bold text-gray-900 mb-2\">Acceso Restringido</h1>\n          <p className=\"text-gray-600\">Esta página requiere permisos de Administrador.</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white shadow\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center py-6\">\n            <div className=\"flex items-center\">\n              <Code className=\"h-8 w-8 text-purple-600 mr-3\" />\n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900\">\n                  Frontend Architecture and Code Quality Dashboard\n                </h1>\n                <p className=\"text-sm text-gray-600 mt-1\">\n                  NovaAsistencia - React + Vite + TypeScript + Tailwind CSS quality monitoring\n                </p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <button\n                onClick={loadArchitectureData}\n                disabled={loading}\n                aria-busy={loading}\n                aria-live=\"polite\"\n                className=\"flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-purple-500 disabled:opacity-50\"\n              >\n                <RefreshCw className={`w-4 h-4 mr-2 ${loading ? 'animate-spin' : ''}`} />\n                Analizar\n              </button>\n              <button\n                onClick={exportReport}\n                aria-label=\"Exportar reporte de calidad\"\n                className=\"flex items-center px-4 py-2 bg-purple-600 text-white rounded-md shadow-sm text-sm font-medium hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500\"\n              >\n                <Download className=\"w-4 h-4 mr-2\" />\n                Exportar Reporte\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Error banner */}\n      {error && (\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 mt-4\">\n          <div className=\"bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded\">\n            {error}\n          </div>\n        </div>\n      )}\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        <div className=\"flex gap-6\">\n          {/* Left Sidebar - Project Structure Tree */}\n          <div className=\"w-1/3 bg-white rounded-lg shadow p-6\">\n            <h2 className=\"text-lg font-semibold text-gray-900 mb-4 flex items-center\">\n              <Layers className=\"w-5 h-5 mr-2\" />\n              Project Structure\n            </h2>\n\n            {loading ? (\n              <div className=\"flex items-center justify-center py-8\">\n                <RefreshCw className=\"w-6 h-6 animate-spin text-purple-600\" />\n              </div>\n            ) : (\n              <div className=\"space-y-3\">\n                <div>\n                  <h3 className=\"font-medium text-gray-700 text-sm mb-2\">📁 src/pages</h3>\n                  <div className=\"ml-4 space-y-1 text-sm text-gray-600\">\n                    <div>📄 {componentArchitecture?.pages?.count ?? componentArchitecture?.pages} páginas totales</div>\n                    <div className=\"ml-2 space-y-0.5 text-xs\">\n                      <div>• Dashboard Pages: 8</div>\n                      <div>• Management Consoles: 12</div>\n                      <div>• Authentication: 3</div>\n                      <div>• Reporting: 5</div>\n                    </div>\n                  </div>\n                </div>\n\n                <div>\n                  <h3 className=\"font-medium text-gray-700 text-sm mb-2\">📁 src/components</h3>\n                  <div className=\"ml-4 space-y-1 text-sm text-gray-600\">\n                    <div>🧩 {componentArchitecture?.components?.count ?? componentArchitecture?.components} componentes</div>\n                    <div className=\"ml-2 space-y-0.5 text-xs\">\n                      <div>• UI Components: 45</div>\n                      <div>• Form Components: 28</div>\n                      <div>• Layout Components: 18</div>\n                      <div>• Feature Components: 65</div>\n                    </div>\n                  </div>\n                </div>\n\n                <div>\n                  <h3 className=\"font-medium text-gray-700 text-sm mb-2\">📁 src/services</h3>\n                  <div className=\"ml-4 space-y-1 text-sm text-gray-600\">\n                    <div>⚙️ 12 servicios</div>\n                    <div className=\"ml-2 space-y-0.5 text-xs\">\n                      <div>• authService.js</div>\n                      <div>• employeeService.js</div>\n                      <div>• payrollService.js</div>\n                      <div>• attendanceService.js</div>\n                    </div>\n                  </div>\n                </div>\n\n                <div>\n                  <h3 className=\"font-medium text-gray-700 text-sm mb-2\">📁 src/contexts</h3>\n                  <div className=\"ml-4 space-y-1 text-sm text-gray-600\">\n                    <div>🔧 3 contextos</div>\n                    <div className=\"ml-2 space-y-0.5 text-xs\">\n                      <div>• AuthContext.jsx</div>\n                      <div>• BrandingProvider.jsx</div>\n                    </div>\n                  </div>\n                </div>\n\n                <div>\n                  <h3 className=\"font-medium text-gray-700 text-sm mb-2\">📁 Configuration</h3>\n                  <div className=\"ml-4 space-y-1 text-sm text-gray-600\">\n                    <div className=\"ml-2 space-y-0.5 text-xs\">\n                      <div>• vite.config.js</div>\n                      <div>• tailwind.config.js</div>\n                      <div>• tsconfig.json</div>\n                      <div>• package.json</div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Right Panel - Code Quality Metrics */}\n          <div className=\"w-2/3 space-y-6\">\n            {/* Quality Overview Cards */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              <div className=\"bg-white rounded-lg shadow p-4\">\n                <div className=\"flex items-center\">\n                  <FileText className=\"h-8 w-8 text-blue-600 mr-3\" />\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-500\">TypeScript</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">{codeMetrics?.typescript?.coverage}%</p>\n                    <p className=\"text-xs text-green-600\">Coverage</p>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"bg-white rounded-lg shadow p-4\">\n                <div className=\"flex items-center\">\n                  <Palette className=\"h-8 w-8 text-cyan-600 mr-3\" />\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-500\">Tailwind CSS</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">{codeMetrics?.tailwind?.utilization}%</p>\n                    <p className=\"text-xs text-cyan-600\">Utilization</p>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"bg-white rounded-lg shadow p-4\">\n                <div className=\"flex items-center\">\n                  <Shield className=\"h-8 w-8 text-green-600 mr-3\" />\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-500\">ESLint</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">{codeMetrics?.eslint?.violations}</p>\n                    <p className=\"text-xs text-green-600\">Violations</p>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"bg-white rounded-lg shadow p-4\">\n                <div className=\"flex items-center\">\n                  <Package className=\"h-8 w-8 text-purple-600 mr-3\" />\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-500\">Bundle Size</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">{buildMetrics?.bundleSize}</p>\n                    <p className=\"text-xs text-purple-600\">Optimized</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Detailed Metrics Panel */}\n            <div className=\"bg-white rounded-lg shadow\">\n              <div className=\"border-b border-gray-200\">\n                <nav className=\"-mb-px flex space-x-8\" aria-label=\"Tabs\">\n                  {[\n                    { id: 'architecture', name: 'Architecture', icon: Layers },\n                    { id: 'quality', name: 'Code Quality', icon: CheckCircle },\n                    { id: 'responsive', name: 'Responsive', icon: Smartphone },\n                    { id: 'performance', name: 'Performance', icon: Activity },\n                    { id: 'testing', name: 'Testing', icon: TestTube }\n                  ]?.map((tab) => (\n                    <button\n                      key={tab?.id}\n                      onClick={() => setActivePanel(tab?.id)}\n                      className={`${\n                        activePanel === tab?.id\n                          ? 'border-purple-500 text-purple-600'\n                          : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                      } whitespace-nowrap py-4 px-6 border-b-2 font-medium text-sm flex items-center`}\n                    >\n                      <tab.icon className=\"w-4 h-4 mr-2\" />\n                      {tab?.name}\n                    </button>\n                  ))}\n                </nav>\n              </div>\n\n              <div className=\"p-6\">\n                {loading ? (\n                  <div className=\"flex items-center justify-center py-12\">\n                    <RefreshCw className=\"w-8 h-8 animate-spin text-purple-600 mr-3\" />\n                    <span className=\"text-lg text-gray-600\">Analizando arquitectura del código...</span>\n                  </div>\n                ) : (\n                  <>\n                    {/* Architecture Panel */}\n                    {activePanel === 'architecture' && (\n                      <div className=\"space-y-6\">\n                        <div>\n                          <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Component Architecture</h3>\n                          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                            <div className=\"space-y-4\">\n                              <div className=\"bg-blue-50 rounded-lg p-4\">\n                                <h4 className=\"font-medium text-blue-900 mb-2\">React Patterns</h4>\n                                <ul className=\"text-sm text-blue-700 space-y-1\">\n                                  <li>✓ Functional Components</li>\n                                  <li>✓ Custom Hooks</li>\n                                  <li>✓ Context API</li>\n                                  <li>✓ Optional Chaining</li>\n                                </ul>\n                              </div>\n\n                              <div className=\"bg-green-50 rounded-lg p-4\">\n                                <h4 className=\"font-medium text-green-900 mb-2\">Supabase Integration</h4>\n                                <ul className=\"text-sm text-green-700 space-y-1\">\n                                  <li>✓ Authentication Context</li>\n                                  <li>✓ Error Handling Patterns</li>\n                                  <li>✓ Loading States</li>\n                                  <li>✓ Real-time Subscriptions</li>\n                                </ul>\n                              </div>\n                            </div>\n\n                            <div className=\"space-y-4\">\n                              <div className=\"bg-purple-50 rounded-lg p-4\">\n                                <h4 className=\"font-medium text-purple-900 mb-2\">Routing Structure</h4>\n                                <ul className=\"text-sm text-purple-700 space-y-1\">\n                                  <li>✓ Role-based Routes</li>\n                                  <li>✓ Protected Routes</li>\n                                  <li>✓ Route Guards</li>\n                                  <li>✓ Navigation Structure</li>\n                                </ul>\n                              </div>\n\n                              <div className=\"bg-orange-50 rounded-lg p-4\">\n                                <h4 className=\"font-medium text-orange-900 mb-2\">State Management</h4>\n                                <ul className=\"text-sm text-orange-700 space-y-1\">\n                                  <li>✓ Context-based State</li>\n                                  <li>✓ Local Component State</li>\n                                  <li>✓ Service Layer Pattern</li>\n                                  <li>✓ Data Caching</li>\n                                </ul>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    )}\n\n                    {/* Code Quality Panel */}\n                    {activePanel === 'quality' && (\n                      <div>\n                        <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Code Quality Checks</h3>\n                        <div className=\"space-y-3\">\n                          {qualityChecks?.map((check, index) => (\n                            <div key={index} className=\"flex items-center justify-between py-3 px-4 bg-gray-50 rounded border\">\n                              <div className=\"flex items-center\">\n                                {getStatusIcon(check?.status)}\n                                <span className=\"ml-3 font-medium text-gray-900\">{check?.name}</span>\n                              </div>\n                              <div className=\"flex items-center\">\n                                <span className={`text-lg font-bold mr-2 ${getScoreColor(check?.score)}`}>\n                                  {check?.score}%\n                                </span>\n                                <span className={`px-3 py-1 text-xs rounded-full ${getStatusColor(check?.status)}`}>\n                                  {check?.status}\n                                </span>\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n\n                    {/* Responsive Panel */}\n                    {activePanel === 'responsive' && (\n                      <div>\n                        <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Mobile Responsiveness</h3>\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                          {responsiveBreakpoints?.map((breakpoint, index) => (\n                            <div key={index} className=\"bg-gray-50 rounded-lg p-4\">\n                              <div className=\"flex items-center mb-2\">\n                                {breakpoint?.device === 'Mobile'\n                                  ? <Smartphone className=\"w-5 h-5 mr-2 text-blue-600\" />\n                                  : <Monitor className=\"w-5 h-5 mr-2 text-blue-600\" />}\n                                <h4 className=\"font-medium text-gray-900\">{breakpoint?.device}</h4>\n                              </div>\n                              <p className=\"text-sm text-gray-600 mb-2\">{breakpoint?.width}</p>\n                              <div className=\"flex items-center justify-between\">\n                                <span className=\"text-sm text-gray-500\">{breakpoint?.components} components</span>\n                                {getStatusIcon(breakpoint?.status)}\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n\n                    {/* Performance Panel */}\n                    {activePanel === 'performance' && (\n                      <div className=\"space-y-6\">\n                        <div>\n                          <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Build Performance</h3>\n                          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                            <div className=\"bg-blue-50 rounded-lg p-4\">\n                              <h4 className=\"font-medium text-blue-900 mb-2\">Build Time</h4>\n                              <p className=\"text-2xl font-bold text-blue-600\">{buildMetrics?.buildTime}</p>\n                              <p className=\"text-sm text-blue-700\">Vite optimized</p>\n                            </div>\n\n                            <div className=\"bg-green-50 rounded-lg p-4\">\n                              <h4 className=\"font-medium text-green-900 mb-2\">Bundle Size</h4>\n                              <p className=\"text-2xl font-bold text-green-600\">{buildMetrics?.bundleSize}</p>\n                              <p className=\"text-sm text-green-700\">Tree-shaking enabled</p>\n                            </div>\n\n                            <div className=\"bg-purple-50 rounded-lg p-4\">\n                              <h4 className=\"font-medium text-purple-900 mb-2\">Load Time</h4>\n                              <p className=\"text-2xl font-bold text-purple-600\">{codeMetrics?.performance?.loadTime}</p>\n                              <p className=\"text-sm text-purple-700\">First Contentful Paint</p>\n                            </div>\n                          </div>\n                        </div>\n\n                        <div>\n                          <h4 className=\"font-medium text-gray-900 mb-3\">Bundle Analysis</h4>\n                          <div className=\"space-y-2\">\n                            <div className=\"flex items-center justify-between py-2 px-3 bg-gray-50 rounded\">\n                              <span className=\"text-sm font-medium\">Vendor Libraries</span>\n                              <span className=\"text-sm text-gray-600\">456kb</span>\n                            </div>\n                            <div className=\"flex items-center justify-between py-2 px-3 bg-gray-50 rounded\">\n                              <span className=\"text-sm font-medium\">Application Code</span>\n                              <span className=\"text-sm text-gray-600\">678kb</span>\n                            </div>\n                            <div className=\"flex items-center justify-between py-2 px-3 bg-gray-50 rounded\">\n                              <span className=\"text-sm font-medium\">Assets</span>\n                              <span className=\"text-sm text-gray-600\">124kb</span>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    )}\n\n                    {/* Testing Panel */}\n                    {activePanel === 'testing' && (\n                      <div>\n                        <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Testing Coverage</h3>\n                        <div className=\"space-y-4\">\n                          <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4\">\n                            <div className=\"flex items-center\">\n                              <AlertTriangle className=\"w-5 h-5 text-yellow-600 mr-2\" />\n                              <h4 className=\"font-medium text-yellow-900\">Testing Framework Setup Required</h4>\n                            </div>\n                            <p className=\"text-sm text-yellow-700 mt-2\">\n                              Consider implementing Jest + React Testing Library for comprehensive testing coverage.\n                            </p>\n                          </div>\n\n                          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                            <div className=\"bg-gray-50 rounded-lg p-4\">\n                              <h4 className=\"font-medium text-gray-900 mb-2\">Unit Tests</h4>\n                              <p className=\"text-2xl font-bold text-gray-600\">N/A</p>\n                              <p className=\"text-sm text-gray-500\">Not configured</p>\n                            </div>\n\n                            <div className=\"bg-gray-50 rounded-lg p-4\">\n                              <h4 className=\"font-medium text-gray-900 mb-2\">Integration Tests</h4>\n                              <p className=\"text-2xl font-bold text-gray-600\">N/A</p>\n                              <p className=\"text-sm text-gray-500\">Not configured</p>\n                            </div>\n\n                            <div className=\"bg-gray-50 rounded-lg p-4\">\n                              <h4 className=\"font-medium text-gray-900 mb-2\">E2E Tests</h4>\n                              <p className=\"text-2xl font-bold text-gray-600\">N/A</p>\n                              <p className=\"text-sm text-gray-500\">Not configured</p>\n                            </div>\n                          </div>\n\n                          <div className=\"bg-blue-50 rounded-lg p-4\">\n                            <h4 className=\"font-medium text-blue-900 mb-2\">Recommended Testing Strategy</h4>\n                            <ul className=\"text-sm text-blue-700 space-y-1\">\n                              <li>• Jest for unit testing of utilities and services</li>\n                              <li>• React Testing Library for component testing</li>\n                              <li>• Cypress or Playwright for end-to-end testing</li>\n                              <li>• MSW (Mock Service Worker) for API mocking</li>\n                            </ul>\n                          </div>\n                        </div>\n                      </div>\n                    )}\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":32318},"src/pages/incident-registration-and-management-system/index.jsx":{"content":"import React, { useEffect, useMemo, useState } from 'react';\nimport RoleBasedSidebar from '../../components/ui/RoleBasedSidebar';\nimport NavigationBreadcrumb from '../../components/ui/NavigationBreadcrumb';\nimport UserContextHeader from '../../components/ui/UserContextHeader';\nimport NotificationCenter from '../../components/ui/NotificationCenter';\nimport IncidentCreationForm from './components/IncidentCreationForm';\nimport PendingApprovalsQueue from './components/PendingApprovalsQueue';\nimport IncidentHistoryGrid from './components/IncidentHistoryGrid';\nimport IncidentAnalyticsDashboard from './components/IncidentAnalyticsDashboard';\nimport Icon from '../../components/AppIcon';\nimport Button from '../../components/ui/Button';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { incidentService } from '../../services/incidentService';\n\nconst IncidentRegistrationAndManagementSystem = () => {\n  const { userProfile } = useAuth();\n\n  const currentUser = useMemo(\n    () => ({\n      id: userProfile?.id,\n      name: userProfile?.full_name || 'Usuario',\n      role:\n        userProfile?.role === 'superadmin'\n          ? 'SuperAdmin'\n          : userProfile?.role === 'admin'\n          ? 'Admin'\n          : userProfile?.role === 'supervisor'\n          ? 'Supervisor'\n          : 'Employee',\n      site: '—',\n      avatar: null,\n    }),\n    [userProfile]\n  );\n\n  const [activeTab, setActiveTab] = useState('create');\n\n  // estado de datos\n  const [incidents, setIncidents] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // filtros/paginación (ajústalos si tus subcomponentes ya traen internos)\n  const [queueStatus] = useState('pending'); // para cola\n  const [historyStatus, setHistoryStatus] = useState('all'); // para historial\n  const [historyPage, setHistoryPage] = useState(0);\n  const [historyPageSize] = useState(20);\n  const [historyTotal, setHistoryTotal] = useState(0);\n\n  // --------- CARGA INICIAL: cola + historial ----------\n  useEffect(() => {\n    let mounted = true;\n\n    const bootstrap = async () => {\n      try {\n        setIsLoading(true);\n\n        // Cargar cola (pendientes)\n        const queueRes = await incidentService.listIncidents({\n          status: queueStatus, // 'pending'\n          page: 0,\n          pageSize: 50,\n        });\n\n        // Cargar historial (todos o por filtro)\n        const histRes = await incidentService.listIncidents({\n          status: historyStatus === 'all' ? undefined : historyStatus,\n          page: historyPage,\n          pageSize: historyPageSize,\n        });\n\n        if (!mounted) return;\n\n        // fusión simple: puedes separar estados si tus componentes lo requieren\n        // aquí mantenemos un único arreglo y filtramos al mostrar\n        const merged = [\n          ...(queueRes?.data?.rows || []),\n          ...(histRes?.data?.rows || []),\n        ];\n        // si quieres evitar duplicados por id\n        const uniqueById = Object.values(\n          merged.reduce((acc, it) => {\n            acc[it.id] = it;\n            return acc;\n          }, {})\n        );\n\n        setIncidents(uniqueById);\n        setHistoryTotal(histRes?.data?.count || 0);\n      } catch (e) {\n        console.error('Error loading incidents:', e);\n      } finally {\n        if (mounted) setIsLoading(false);\n      }\n    };\n\n    bootstrap();\n    return () => {\n      mounted = false;\n    };\n  }, [queueStatus, historyStatus, historyPage, historyPageSize]);\n\n  // --------- UTIL: recargar datos (por ejemplo tras crear/aprobar/rechazar) ----------\n  const reload = async () => {\n    try {\n      setIsLoading(true);\n      const [queueRes, histRes] = await Promise.all([\n        incidentService.listIncidents({\n          status: queueStatus,\n          page: 0,\n          pageSize: 50,\n        }),\n        incidentService.listIncidents({\n          status: historyStatus === 'all' ? undefined : historyStatus,\n          page: historyPage,\n          pageSize: historyPageSize,\n        }),\n      ]);\n\n      const merged = [\n        ...(queueRes?.data?.rows || []),\n        ...(histRes?.data?.rows || []),\n      ];\n      const uniqueById = Object.values(\n        merged.reduce((acc, it) => {\n          acc[it.id] = it;\n          return acc;\n        }, {})\n      );\n      setIncidents(uniqueById);\n      setHistoryTotal(histRes?.data?.count || 0);\n    } catch (e) {\n      console.error('Error reloading incidents:', e);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // --------- manejadores de acciones ----------\n  const handleIncidentCreated = (created) => {\n    // el form ya la creó en la DB; aquí refrescamos y pasamos a \"queue\"\n    setActiveTab('queue');\n    reload();\n  };\n\n  const handleApproveIncident = async (incidentId, comment) => {\n    try {\n      await incidentService.approveIncident(incidentId, comment);\n      await reload();\n    } catch (e) {\n      console.error('Error approving incident:', e);\n    }\n  };\n\n  const handleRejectIncident = async (incidentId, reason) => {\n    try {\n      await incidentService.rejectIncident(incidentId, reason);\n      await reload();\n    } catch (e) {\n      console.error('Error rejecting incident:', e);\n    }\n  };\n\n  // --------- tabs ----------\n  const tabs = [\n    { id: 'create', label: 'Registrar Incidente', icon: 'Plus', count: null },\n    {\n      id: 'queue',\n      label: 'Cola de Aprobaciones',\n      icon: 'Clock',\n      count: incidents?.filter((i) => i?.status === 'pending')?.length || 0,\n    },\n    {\n      id: 'history',\n      label: 'Historial',\n      icon: 'FileText',\n      count: incidents?.length || 0,\n    },\n    { id: 'analytics', label: 'Análisis', icon: 'BarChart3', count: null },\n  ];\n\n  // --------- loading inicial ----------\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex\">\n        <RoleBasedSidebar userRole={currentUser?.role?.toLowerCase()} />\n        <div className=\"flex-1 ml-0 md:ml-60\">\n          <div className=\"flex items-center justify-center h-screen\">\n            <div className=\"text-center\">\n              <Icon name=\"Loader2\" size={48} className=\"mx-auto text-primary animate-spin mb-4\" />\n              <p className=\"text-lg font-medium text-foreground\">Cargando sistema de incidentes...</p>\n              <p className=\"text-sm text-muted-foreground mt-1\">Preparando datos y configuraciones</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // --------- render ----------\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <RoleBasedSidebar userRole={currentUser?.role?.toLowerCase()} />\n      <div className=\"flex-1 ml-0 md:ml-60\">\n        {/* Header */}\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Icon name=\"AlertTriangle\" size={24} className=\"text-primary\" />\n                <h1 className=\"text-xl font-semibold text-foreground\">\n                  Sistema de Gestión de Incidentes\n                </h1>\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-4\">\n              <NotificationCenter />\n              <UserContextHeader\n                user={currentUser}\n                onLogout={() => {}}\n                onProfileClick={() => {}}\n                onSiteChange={() => {}}\n              />\n            </div>\n          </div>\n        </header>\n\n        {/* Main */}\n        <main className=\"p-6\">\n          <NavigationBreadcrumb />\n\n          {/* Tabs */}\n          <div className=\"mb-6\">\n            <div className=\"border-b border-border\">\n              <nav className=\"-mb-px flex space-x-8\">\n                {tabs?.map((tab) => (\n                  <button\n                    key={tab?.id}\n                    onClick={() => setActiveTab(tab?.id)}\n                    className={`\n                      flex items-center space-x-2 py-2 px-1 border-b-2 font-medium text-sm transition-colors duration-150\n                      ${\n                        activeTab === tab?.id\n                          ? 'border-primary text-primary'\n                          : 'border-transparent text-muted-foreground hover:text-foreground hover:border-border'\n                      }\n                    `}\n                  >\n                    <Icon name={tab?.icon} size={16} />\n                    <span>{tab?.label}</span>\n                    {tab?.count !== null && tab?.count > 0 && (\n                      <span className=\"bg-primary text-primary-foreground text-xs font-medium px-2 py-0.5 rounded-full\">\n                        {tab?.count}\n                      </span>\n                    )}\n                  </button>\n                ))}\n              </nav>\n            </div>\n          </div>\n\n          {/* Content */}\n          <div className=\"space-y-6\">\n            {activeTab === 'create' && (\n              <div className=\"grid grid-cols-1 xl:grid-cols-5 gap-6\">\n                <div className=\"xl:col-span-2\">\n                  <IncidentCreationForm\n                    // Si como supervisor eliges a qué empleado va, pásalo por prop: targetEmployeeId=\"uuid\"\n                    onIncidentCreated={handleIncidentCreated}\n                    onCancel={() => setActiveTab('queue')}\n                  />\n                </div>\n                <div className=\"xl:col-span-3\">\n                  <PendingApprovalsQueue\n                    incidents={incidents?.filter((i) => i?.status === 'pending')}\n                    onApprove={handleApproveIncident}\n                    onReject={handleRejectIncident}\n                    currentUser={currentUser}\n                  />\n                </div>\n              </div>\n            )}\n\n            {activeTab === 'queue' && (\n              <PendingApprovalsQueue\n                incidents={incidents?.filter((i) => i?.status === 'pending')}\n                onApprove={handleApproveIncident}\n                onReject={handleRejectIncident}\n                currentUser={currentUser}\n              />\n            )}\n\n            {activeTab === 'history' && (\n              <IncidentHistoryGrid\n                incidents={\n                  historyStatus === 'all'\n                    ? incidents\n                    : incidents?.filter((i) => i?.status === historyStatus)\n                }\n                currentUser={currentUser}\n                statusFilter={historyStatus}\n                onStatusFilterChange={(s) => {\n                  setHistoryPage(0);\n                  setHistoryStatus(s || 'all');\n                  reload();\n                }}\n                page={historyPage}\n                onPageChange={(p) => {\n                  setHistoryPage(p);\n                  reload();\n                }}\n                pageSize={historyPageSize}\n                total={historyTotal}\n              />\n            )}\n\n            {activeTab === 'analytics' && (\n              <IncidentAnalyticsDashboard incidents={incidents} />\n            )}\n          </div>\n\n          {/* Quick Actions Floating Button */}\n          <div className=\"fixed bottom-6 right-6 z-40\">\n            <div className=\"flex flex-col space-y-2\">\n              {activeTab !== 'create' && (\n                <Button\n                  onClick={() => setActiveTab('create')}\n                  className=\"rounded-full shadow-lg\"\n                  iconName=\"Plus\"\n                  iconSize={20}\n                >\n                  Nuevo Incidente\n                </Button>\n              )}\n            </div>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n};\n\nexport default IncidentRegistrationAndManagementSystem;\n","size_bytes":11724},"src/pages/obras-financial-control-management/index.jsx":{"content":"import React, { useState, useEffect, useMemo } from 'react';\nimport { useAuth } from '@/contexts/AuthContext';\nimport {\n  Building,\n  DollarSign,\n  TrendingUp,\n  TrendingDown,\n  Eye,\n  Plus,\n  FileText,\n  AlertTriangle,\n  CheckCircle,\n  Clock,\n  Pause,\n  X,\n  Download,\n  Filter,\n  Search,\n} from 'lucide-react';\nimport { obrasService, financialAnalyticsService } from '@/services/obrasFinancialService';\nimport ObraCreationModal from './components/ObraCreationModal';\nimport ObraDetailModal from './components/ObraDetailModal';\nimport ExportModal from './components/ExportModal';\nimport FiltersModal from './components/FiltersModal';\n\nconst ObrasFinancialControlManagement = () => {\n  const auth = useAuth();\n  const { loading } = auth || {};\n\n  // Soporta ambos estilos de autorización: isAdmin()/isSuperAdmin() o hasRole('admin'|'superadmin')\n  const canManage = useMemo(() => {\n    const byFn =\n      (typeof auth?.isAdmin === 'function' && auth?.isAdmin()) ||\n      (typeof auth?.isSuperAdmin === 'function' && auth?.isSuperAdmin());\n    const byRole =\n      typeof auth?.hasRole === 'function' &&\n      (auth?.hasRole('admin') || auth?.hasRole('superadmin'));\n    return !!(byFn || byRole);\n  }, [auth]);\n\n  const [obras, setObras] = useState([]);\n  const [filteredObras, setFilteredObras] = useState([]);\n  const [overallKPIs, setOverallKPIs] = useState(null);\n  const [loadingData, setLoadingData] = useState(true);\n  const [error, setError] = useState('');\n\n  // Modals\n  const [showCreateModal, setShowCreateModal] = useState(false);\n  const [showDetailModal, setShowDetailModal] = useState(false);\n  const [showExportModal, setShowExportModal] = useState(false);\n  const [showFiltersModal, setShowFiltersModal] = useState(false);\n  const [selectedObra, setSelectedObra] = useState(null);\n\n  // Filtros\n  const [searchTerm, setSearchTerm] = useState('');\n  const [statusFilter, setStatusFilter] = useState('all');\n  const [companyFilter, setCompanyFilter] = useState('all');\n  const [dateRangeFilter, setDateRangeFilter] = useState({ start: '', end: '' });\n\n  // Cargar datos si tiene permisos\n  useEffect(() => {\n    if (loading) return;\n    if (!canManage) {\n      setError('No tienes permisos para acceder a la gestión financiera de obras.');\n      setLoadingData(false);\n      return;\n    }\n    loadData();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loading, canManage]);\n\n  const loadData = async () => {\n    try {\n      setLoadingData(true);\n      setError('');\n\n      const [obrasRes, kpisRes] = await Promise.all([\n        obrasService?.getAll?.(),\n        financialAnalyticsService?.getOverallKPIs?.(),\n      ]);\n\n      if (!obrasRes?.ok) {\n        setError(`Error al cargar obras: ${obrasRes?.error || 'desconocido'}`);\n        setObras([]);\n        setFilteredObras([]);\n      } else {\n        setObras(obrasRes?.data || []);\n        setFilteredObras(obrasRes?.data || []);\n      }\n\n      if (!kpisRes?.ok) {\n        // No bloquea la tabla si fallan KPIs\n        console.warn('Error al cargar KPIs:', kpisRes?.error);\n        setOverallKPIs(null);\n      } else {\n        setOverallKPIs(kpisRes?.data || null);\n      }\n    } catch (err) {\n      console.error('Error loading obras data:', err);\n      setError('Error al cargar los datos de obras');\n    } finally {\n      setLoadingData(false);\n    }\n  };\n\n  // Aplicar filtros\n  useEffect(() => {\n    let filtered = Array.isArray(obras) ? [...obras] : [];\n\n    // Búsqueda\n    if (searchTerm) {\n      const t = searchTerm.toLowerCase();\n      filtered = filtered.filter(\n        (obra) =>\n          obra?.nombre?.toLowerCase?.().includes(t) ||\n          obra?.clave?.toLowerCase?.().includes(t) ||\n          obra?.empresa_nombre?.toLowerCase?.().includes(t)\n      );\n    }\n\n    // Estatus\n    if (statusFilter !== 'all') {\n      filtered = filtered.filter((obra) => obra?.estatus === statusFilter);\n    }\n\n    // Empresa\n    if (companyFilter !== 'all') {\n      filtered = filtered.filter((obra) => obra?.empresa_id === companyFilter);\n    }\n\n    // Rango de fechas (usa fecha_inicio)\n    if (dateRangeFilter?.start && dateRangeFilter?.end) {\n      const startDate = new Date(dateRangeFilter.start);\n      const endDate = new Date(dateRangeFilter.end);\n      filtered = filtered.filter((obra) => {\n        const obraDate = obra?.fecha_inicio ? new Date(obra.fecha_inicio) : null;\n        return obraDate && obraDate >= startDate && obraDate <= endDate;\n      });\n    }\n\n    setFilteredObras(filtered);\n  }, [obras, searchTerm, statusFilter, companyFilter, dateRangeFilter]);\n\n  // Helpers UI\n  const formatCurrency = (amount) => {\n    if (amount === null || amount === undefined || isNaN(amount)) return '$0.00';\n    return new Intl.NumberFormat('es-MX', {\n      style: 'currency',\n      currency: 'MXN',\n      minimumFractionDigits: 2,\n    }).format(Number(amount));\n  };\n\n  const formatPercentage = (value) => {\n    const num = Number(value);\n    if (isNaN(num)) return '0%';\n    return `${num.toFixed(1)}%`;\n  };\n\n  const getStatusIcon = (status) => {\n    switch (status) {\n      case 'En ejecución':\n        return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\n      case 'Planeación':\n        return <Clock className=\"h-4 w-4 text-blue-500\" />;\n      case 'En pausa':\n        return <Pause className=\"h-4 w-4 text-yellow-500\" />;\n      case 'Concluida':\n        return <CheckCircle className=\"h-4 w-4 text-emerald-500\" />;\n      case 'Cancelada':\n        return <X className=\"h-4 w-4 text-red-500\" />;\n      default:\n        return <Clock className=\"h-4 w-4 text-gray-500\" />;\n    }\n  };\n\n  const getStatusColorClass = (status) => {\n    switch (status) {\n      case 'En ejecución':\n        return 'bg-green-100 text-green-800';\n      case 'Planeación':\n        return 'bg-blue-100 text-blue-800';\n      case 'En pausa':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'Concluida':\n        return 'bg-emerald-100 text-emerald-800';\n      case 'Cancelada':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const handleViewObra = (obra) => {\n    setSelectedObra(obra);\n    setShowDetailModal(true);\n  };\n\n  const handleObraCreated = () => {\n    setShowCreateModal(false);\n    loadData();\n  };\n\n  const handleObraUpdated = () => {\n    setShowDetailModal(false);\n    loadData();\n  };\n\n  // Loading Auth\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  // Sin permisos\n  if (!canManage) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <AlertTriangle className=\"h-16 w-16 text-red-500 mx-auto mb-4\" />\n          <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">Acceso Denegado</h2>\n          <p className=\"text-gray-600\">\n            No tienes permisos para acceder a la gestión financiera de obras.\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white shadow\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"py-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h1 className=\"text-3xl font-bold text-gray-900\">Control Financiero de Obras</h1>\n                <p className=\"mt-2 text-gray-600\">\n                  Gestión integral de presupuestos, facturas, pagos y KPIs\n                </p>\n              </div>\n              <div className=\"flex space-x-4\">\n                <button\n                  onClick={() => setShowFiltersModal(true)}\n                  className=\"bg-gray-100 hover:bg-gray-200 text-gray-700 px-4 py-2 rounded-md flex items-center space-x-2 transition-colors\"\n                >\n                  <Filter className=\"h-4 w-4\" />\n                  <span>Filtros</span>\n                </button>\n                <button\n                  onClick={() => setShowExportModal(true)}\n                  className=\"bg-blue-100 hover:bg-blue-200 text-blue-700 px-4 py-2 rounded-md flex items-center space-x-2 transition-colors\"\n                >\n                  <Download className=\"h-4 w-4\" />\n                  <span>Exportar</span>\n                </button>\n                <button\n                  onClick={() => setShowCreateModal(true)}\n                  className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md flex items-center space-x-2 transition-colors\"\n                >\n                  <Plus className=\"h-4 w-4\" />\n                  <span>Nueva Obra</span>\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* KPIs */}\n        {overallKPIs && (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n            <div className=\"bg-white rounded-lg shadow p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"flex-shrink-0\">\n                  <Building className=\"h-8 w-8 text-blue-600\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-500\">Total Obras</p>\n                  <p className=\"text-2xl font-semibold text-gray-900\">\n                    {overallKPIs?.obras_total || 0}\n                  </p>\n                  <p className=\"text-sm text-green-600\">\n                    {overallKPIs?.obras_activas || 0} activas\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"bg-white rounded-lg shadow p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"flex-shrink-0\">\n                  <DollarSign className=\"h-8 w-8 text-green-600\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-500\">Presupuesto Total</p>\n                  <p className=\"text-2xl font-semibold text-gray-900\">\n                    {formatCurrency(overallKPIs?.total_presupuesto)}\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"bg-white rounded-lg shadow p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"flex-shrink-0\">\n                  <TrendingUp className=\"h-8 w-8 text-emerald-600\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-500\">Total Facturado</p>\n                  <p className=\"text-2xl font-semibold text-gray-900\">\n                    {formatCurrency(overallKPIs?.total_facturado)}\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"bg-white rounded-lg shadow p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"flex-shrink-0\">\n                  <TrendingDown className=\"h-8 w-8 text-red-600\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-500\">Por Cobrar</p>\n                  <p className=\"text-2xl font-semibold text-gray-900\">\n                    {formatCurrency(overallKPIs?.total_por_cobrar)}\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Buscador */}\n        <div className=\"bg-white rounded-lg shadow p-4 mb-6\">\n          <div className=\"relative\">\n            <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n              <Search className=\"h-5 w-5 text-gray-400\" />\n            </div>\n            <input\n              type=\"text\"\n              placeholder=\"Buscar obras por nombre, clave o empresa...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e?.target?.value)}\n              className=\"block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-1 focus:ring-blue-500 focus:border-blue-500\"\n            />\n          </div>\n        </div>\n\n        {/* Loading */}\n        {loadingData && (\n          <div className=\"bg-white rounded-lg shadow p-8\">\n            <div className=\"flex items-center justify-center\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mr-4\"></div>\n              <span className=\"text-gray-600\">Cargando obras...</span>\n            </div>\n          </div>\n        )}\n\n        {/* Error */}\n        {error && !loadingData && (\n          <div className=\"bg-red-50 border border-red-200 rounded-lg p-4 mb-6\">\n            <div className=\"flex items-center\">\n              <AlertTriangle className=\"h-5 w-5 text-red-500 mr-2\" />\n              <span className=\"text-red-700\">{error}</span>\n            </div>\n          </div>\n        )}\n\n        {/* Tabla */}\n        {!loadingData && !error && (\n          <div className=\"bg-white rounded-lg shadow overflow-hidden\">\n            <div className=\"overflow-x-auto\">\n              <table className=\"min-w-full divide-y divide-gray-200\">\n                <thead className=\"bg-gray-50\">\n                  <tr>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Obra\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Estado\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Presupuesto Total\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Facturado\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Por Cobrar\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Gastos\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      % Utilidad Real\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Avance Financiero\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Acciones\n                    </th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-white divide-y divide-gray-200\">\n                  {filteredObras?.length > 0 ? (\n                    filteredObras.map((obra) => (\n                      <tr key={obra?.obra_id || obra?.id} className=\"hover:bg-gray-50\">\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <div>\n                            <div className=\"text-sm font-medium text-gray-900\">{obra?.nombre}</div>\n                            <div className=\"text-sm text-gray-500\">\n                              {obra?.clave} • {obra?.empresa_nombre}\n                            </div>\n                          </div>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <div className=\"flex items-center space-x-2\">\n                            {getStatusIcon(obra?.estatus)}\n                            <span\n                              className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getStatusColorClass(\n                                obra?.estatus\n                              )}`}\n                            >\n                              {obra?.estatus}\n                            </span>\n                          </div>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                          {formatCurrency(obra?.presupuesto_total)}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                          {formatCurrency(obra?.facturado_total)}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\n                          <span\n                            className={\n                              Number(obra?.por_cobrar) > 0\n                                ? 'text-orange-600 font-medium'\n                                : 'text-gray-900'\n                            }\n                          >\n                            {formatCurrency(obra?.por_cobrar)}\n                          </span>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                          {formatCurrency(obra?.gastos_total)}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\n                          <span\n                            className={\n                              Number(obra?.utilidad_pct_real) >= 0\n                                ? 'text-green-600 font-medium'\n                                : 'text-red-600 font-medium'\n                            }\n                          >\n                            {formatPercentage(obra?.utilidad_pct_real)}\n                          </span>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                          <div className=\"flex items-center space-x-2\">\n                            <div className=\"flex-1 bg-gray-200 rounded-full h-2\">\n                              <div\n                                className=\"bg-blue-600 h-2 rounded-full\"\n                                style={{\n                                  width: `${Math.min(Number(obra?.avance_financiero_pct) || 0, 100)}%`,\n                                }}\n                              ></div>\n                            </div>\n                            <span className=\"text-xs font-medium\">\n                              {formatPercentage(obra?.avance_financiero_pct)}\n                            </span>\n                          </div>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                          <button\n                            onClick={() => handleViewObra(obra)}\n                            className=\"text-blue-600 hover:text-blue-900 flex items-center space-x-1\"\n                          >\n                            <Eye className=\"h-4 w-4\" />\n                            <span>Ver Detalles</span>\n                          </button>\n                        </td>\n                      </tr>\n                    ))\n                  ) : (\n                    <tr>\n                      <td colSpan=\"9\" className=\"px-6 py-12 text-center text-sm text-gray-500\">\n                        {searchTerm || statusFilter !== 'all' || companyFilter !== 'all' ? (\n                          <div>\n                            <FileText className=\"h-12 w-12 text-gray-300 mx-auto mb-4\" />\n                            <p>No se encontraron obras con los filtros aplicados</p>\n                          </div>\n                        ) : (\n                          <div>\n                            <Building className=\"h-12 w-12 text-gray-300 mx-auto mb-4\" />\n                            <p>No hay obras registradas</p>\n                            <button\n                              onClick={() => setShowCreateModal(true)}\n                              className=\"mt-4 text-blue-600 hover:text-blue-800 font-medium\"\n                            >\n                              Crear primera obra\n                            </button>\n                          </div>\n                        )}\n                      </td>\n                    </tr>\n                  )}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Modals */}\n      {showCreateModal && (\n        <ObraCreationModal onClose={() => setShowCreateModal(false)} onSuccess={handleObraCreated} />\n      )}\n      {showDetailModal && selectedObra && (\n        <ObraDetailModal obra={selectedObra} onClose={() => setShowDetailModal(false)} onSuccess={handleObraUpdated} />\n      )}\n      {showExportModal && (\n        <ExportModal obras={filteredObras} onClose={() => setShowExportModal(false)} />\n      )}\n      {showFiltersModal && (\n        <FiltersModal\n          onClose={() => setShowFiltersModal(false)}\n          onApplyFilters={(filters) => {\n            setStatusFilter(filters?.status || 'all');\n            setCompanyFilter(filters?.company || 'all');\n            setDateRangeFilter(filters?.dateRange || { start: '', end: '' });\n            setShowFiltersModal(false);\n          }}\n          currentFilters={{\n            status: statusFilter,\n            company: companyFilter,\n            dateRange: dateRangeFilter,\n          }}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default ObrasFinancialControlManagement;\n","size_bytes":21771},"src/pages/payroll-calculation-and-management-interface/index.jsx":{"content":"import React, { useEffect, useMemo, useState } from 'react';\nimport { Helmet } from 'react-helmet';\nimport RoleBasedSidebar from '@/components/ui/RoleBasedSidebar';\nimport NavigationBreadcrumb from '@/components/ui/NavigationBreadcrumb';\nimport UserContextHeader from '@/components/ui/UserContextHeader';\nimport NotificationCenter from '@/components/ui/NotificationCenter';\nimport Icon from '@/components/AppIcon';\nimport Button from '@/components/ui/Button';\n\n// Subcomponentes (ya existentes en tu proyecto)\nimport PayrollCalculationEngine from './components/PayrollCalculationEngine';\nimport EmployeePayrollGrid from './components/EmployeePayrollGrid';\nimport PayrollAuditTrail from './components/PayrollAuditTrail';\nimport BulkProcessingTools from './components/BulkProcessingTools';\nimport IntegrationStatusPanel from './components/IntegrationStatusPanel';\n\n// Servicios\nimport { payrollService } from '@/services/payrollService';\nimport { getEmployeesWithFilters } from '@/services/employeeService';\n\n// Helpers UI mínimos\nconst LoadingSpinner = () => (\n  <div className=\"min-h-[200px] flex items-center justify-center\">\n    <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n  </div>\n);\n\nconst ErrorBanner = ({ message, onRetry }) => (\n  <div className=\"bg-red-50 border border-red-200 rounded-lg p-4 mb-6\">\n    <div className=\"flex items-center justify-between\">\n      <div className=\"flex items-center\">\n        <Icon name=\"AlertTriangle\" className=\"text-red-600\" size={18} />\n        <span className=\"text-red-700 ml-2\">{message}</span>\n      </div>\n      {onRetry && (\n        <Button variant=\"outline\" size=\"sm\" onClick={onRetry}>\n          Reintentar\n        </Button>\n      )}\n    </div>\n  </div>\n);\n\nconst PayrollCalculationAndManagementInterface = () => {\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\n\n  // Datos principales\n  const [employees, setEmployees] = useState([]);               // [{ id, employeeId, name, ... }]\n  const [employeesLoading, setEmployeesLoading] = useState(true);\n  const [employeesError, setEmployeesError] = useState('');\n\n  // Selecciones y vista\n  const [selectedEmployee, setSelectedEmployee] = useState(null);\n  const [selectedEmployeeIds, setSelectedEmployeeIds] = useState([]);\n  const [activeView, setActiveView] = useState('calculation');  // calculation | bulk | audit | integration\n\n  // Estado de procesamiento masivo\n  const [processingStatus, setProcessingStatus] = useState(null);\n\n  // Snapshot mínimo de asistencia/nómina del empleado seleccionado (semana actual)\n  const [currentAttendance, setCurrentAttendance] = useState(null);\n  const [calcLoading, setCalcLoading] = useState(false);\n  const [calcError, setCalcError] = useState('');\n\n  // --------- CARGA DE EMPLEADOS (activos) ----------\n  const loadEmployees = async () => {\n    try {\n      setEmployeesLoading(true);\n      setEmployeesError('');\n\n      // Usa tu service real. Este método ya lo citaste en otra página:\n      // getEmployeesWithFilters({ status: 'active' })\n      const res = await getEmployeesWithFilters?.({ status: 'active' });\n\n      if (!res?.ok) {\n        setEmployees([]);\n        setEmployeesError(res?.error || 'No fue posible cargar empleados.');\n        return;\n      }\n\n      // Normaliza a lo que requiere EmployeePayrollGrid\n      const rows = (res?.data || []).map((e) => ({\n        id: e?.id,                               // uuid interno\n        employeeId: e?.employee_id || e?.id,     // id visible o legajo\n        name: e?.full_name || 'Sin nombre',\n        position: e?.position || e?.job_title || '—',\n        site: e?.construction_sites?.name || e?.site?.name || '—',\n        dailyWage: Number(e?.daily_salary ?? 0),\n        supervisor: e?.supervisor?.full_name || '—',\n        status: (e?.status || 'active')?.toString(),\n      }));\n\n      setEmployees(rows);\n\n      // Selección inicial (opcional)\n      if (!selectedEmployee && rows?.length) {\n        setSelectedEmployee(rows[0]);\n      }\n    } catch (err) {\n      console.error(err);\n      setEmployeesError('Error inesperado al cargar empleados.');\n    } finally {\n      setEmployeesLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadEmployees();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // --------- ASISTENCIA / ESTIMACIÓN PARA EMPLEADO SELECCIONADO (SEMANA ACTUAL) ----------\n  const getWeekRange = () => {\n    const today = new Date();\n    const monday = new Date(today);\n    monday.setDate(today.getDate() - ((today.getDay() + 6) % 7));\n    monday.setHours(0, 0, 0, 0);\n    const sunday = new Date(monday);\n    sunday.setDate(monday.getDate() + 6);\n    const toISO = (d) => d.toISOString().slice(0, 10);\n    return { start: toISO(monday), end: toISO(sunday) };\n  };\n\n  const loadSelectedAttendance = async () => {\n    if (!selectedEmployee?.id) {\n      setCurrentAttendance(null);\n      return;\n    }\n\n    const { start, end } = getWeekRange();\n    setCalcLoading(true);\n    setCalcError('');\n\n    try {\n      // Intentamos obtener la estimación semanal persistida\n      // (Tu payrollService ya tiene métodos de estimación)\n      const snap =\n        (await payrollService?.getWeeklyEstimation?.(selectedEmployee.id, start, end)) ||\n        { ok: false };\n\n      if (snap?.ok && snap?.data) {\n        setCurrentAttendance(snap.data);\n        return;\n      }\n\n      // Si no existe, calculamos y persistimos:\n      const calc = await payrollService?.calculateFromAttendance?.(selectedEmployee.id, start, end);\n      if (!calc?.ok) {\n        setCalcError(calc?.error || 'No se pudo calcular la nómina del empleado.');\n        setCurrentAttendance(null);\n        return;\n      }\n\n      const saved = await payrollService?.upsertWeeklyEstimation?.(calc.data);\n      if (!saved?.ok) {\n        // Si no se pudo persistir, al menos mostramos cálculo\n        setCurrentAttendance(calc.data);\n        return;\n      }\n      setCurrentAttendance(saved.data);\n    } catch (err) {\n      console.error(err);\n      setCalcError('Error inesperado al obtener/cacular la nómina del empleado.');\n      setCurrentAttendance(null);\n    } finally {\n      setCalcLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadSelectedAttendance();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedEmployee?.id]);\n\n  // --------- HANDLERS UI ----------\n  const handleEmployeeSelect = (employee) => {\n    setSelectedEmployee(employee);\n    setActiveView('calculation');\n  };\n\n  const handleCalculationUpdate = (calculations) => {\n    // Si tu PayrollCalculationEngine devuelve ajustes temporales,\n    // aquí podrías llamar a un método payrollService.upsertAdjustments(...)\n    // o guardar en un estado local y luego \"Guardar todo\".\n    console.log('Calculation updated:', calculations);\n  };\n\n  const handleSaveAdjustments = async (data) => {\n    // Persistir ajustes manuales (si tu motor los genera)\n    // Ejemplo: await payrollService?.upsertManualAdjustments?.(selectedEmployee?.id, data)\n    console.log('Saving adjustments:', data);\n  };\n\n  const handleBulkAction = async (action, employeeIds) => {\n    if (!Array.isArray(employeeIds) || employeeIds.length === 0) return;\n    setProcessingStatus({\n      action: `Procesando: ${action}`,\n      processed: 0,\n      total: employeeIds.length,\n      status: 'processing',\n    });\n\n    const { start, end } = getWeekRange();\n\n    try {\n      // Si existe un método masivo real:\n      if (action === 'calculate' && typeof payrollService?.bulkCalculateWeekly === 'function') {\n        const resp = await payrollService.bulkCalculateWeekly(employeeIds, start, end, {\n          persist: true,\n        });\n        if (!resp?.ok) throw new Error(resp?.error || 'Error en procesamiento masivo');\n\n        // Marcar como completado\n        setProcessingStatus((prev) => ({ ...prev, processed: prev.total, status: 'completed' }));\n      } else {\n        // Fallback: iterar 1x1\n        for (let i = 0; i < employeeIds.length; i++) {\n          const id = employeeIds[i];\n          const calc = await payrollService?.calculateFromAttendance?.(id, start, end);\n          if (calc?.ok) {\n            await payrollService?.upsertWeeklyEstimation?.(calc.data);\n          }\n          setProcessingStatus((prev) => ({\n            ...prev,\n            processed: i + 1,\n            status: i + 1 === prev.total ? 'completed' : 'processing',\n          }));\n        }\n      }\n    } catch (err) {\n      console.error(err);\n      setProcessingStatus((prev) => ({ ...prev, status: 'error' }));\n    } finally {\n      // Limpieza visual\n      setTimeout(() => setProcessingStatus(null), 2500);\n    }\n  };\n\n  const handleExport = async (format, employeeIds) => {\n    if (!Array.isArray(employeeIds) || employeeIds.length === 0) return;\n    const { start, end } = getWeekRange();\n\n    // Si el service tiene export real:\n    if (typeof payrollService?.exportWeeklyPayroll === 'function') {\n      const res = await payrollService.exportWeeklyPayroll(employeeIds, { start, end, format });\n      if (res?.ok && res?.data?.blob) {\n        const url = URL.createObjectURL(res.data.blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `payroll_${start}_${end}.${format === 'excel' ? 'xlsx' : 'csv'}`;\n        a.click();\n        URL.revokeObjectURL(url);\n        return;\n      }\n      // fallback a CSV local\n    }\n\n    try {\n      // Fallback: generar CSV con lo que tengamos (employees + currentAttendance si aplica)\n      const header = [\n        'employee_id',\n        'name',\n        'site',\n        'daily_wage',\n        'period_start',\n        'period_end',\n        'regular_hours',\n        'overtime_hours',\n        'gross_total',\n        'net_total',\n      ].join(',');\n\n      const rows = [];\n      for (const id of employeeIds) {\n        const emp = employees.find((e) => e.id === id);\n        if (!emp) continue;\n\n        // Intentar traer snapshot rápido (no bloqueante)\n        let snap = null;\n        try {\n          const r = await payrollService?.getWeeklyEstimation?.(id, start, end);\n          if (r?.ok) snap = r?.data;\n        } catch {}\n\n        rows.push(\n          [\n            emp.employeeId,\n            JSON.stringify(emp.name || ''),\n            JSON.stringify(emp.site || ''),\n            emp.dailyWage ?? 0,\n            start,\n            end,\n            snap?.regular_hours ?? '',\n            snap?.overtime_hours ?? '',\n            snap?.gross_total ?? '',\n            snap?.net_total ?? '',\n          ].join(',')\n        );\n      }\n\n      const csv = `${header}\\n${rows.join('\\n')}`;\n      const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `payroll_${start}_${end}.csv`;\n      a.click();\n      URL.revokeObjectURL(url);\n    } catch (e) {\n      console.error('Export error:', e);\n    }\n  };\n\n  const handleSaveAll = async () => {\n    // Si guardas ajustes o confirmas períodos, hazlo aquí\n    // Ej: await payrollService?.commitWeek?.(getWeekRange())\n    console.log('Saving all changes...');\n  };\n\n  const viewOptions = [\n    { id: 'calculation', label: 'Motor de Cálculo', icon: 'Calculator' },\n    { id: 'bulk', label: 'Procesamiento Masivo', icon: 'Users' },\n    { id: 'audit', label: 'Registro de Auditoría', icon: 'FileText' },\n    { id: 'integration', label: 'Estado de Integraciones', icon: 'Link' },\n  ];\n\n  const handleLogout = () => {};\n  const handleProfileClick = () => {};\n  const handleSiteChange = () => {};\n\n  return (\n    <>\n      <Helmet>\n        <title>Gestión de Nómina - AsistenciaPro</title>\n        <meta\n          name=\"description\"\n          content=\"Interfaz de cálculo y gestión de nómina para empleados de construcción\"\n        />\n      </Helmet>\n\n      <div className=\"min-h-screen bg-background\">\n        {/* Sidebar */}\n        <RoleBasedSidebar isCollapsed={sidebarCollapsed} userRole=\"admin\" />\n\n        {/* Main */}\n        <div className={`transition-all duration-300 ${sidebarCollapsed ? 'ml-16' : 'ml-60'} pb-16 md:pb-0`}>\n          {/* Header */}\n          <header className=\"bg-card border-b border-border px-6 py-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-4\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  iconName={sidebarCollapsed ? 'ChevronRight' : 'ChevronLeft'}\n                  onClick={() => setSidebarCollapsed(!sidebarCollapsed)}\n                  className=\"hidden md:flex\"\n                />\n                <div>\n                  <h1 className=\"text-xl font-semibold text-foreground\">Gestión de Nómina</h1>\n                  <p className=\"text-sm text-muted-foreground\">Cálculo y procesamiento de nómina semanal</p>\n                </div>\n              </div>\n\n              <div className=\"flex items-center space-x-4\">\n                <NotificationCenter />\n                <UserContextHeader\n                  user={{\n                    name: 'Administración',\n                    role: 'Admin',\n                    site: 'Oficina Central',\n                    avatar: null,\n                  }}\n                  onLogout={handleLogout}\n                  onProfileClick={handleProfileClick}\n                  onSiteChange={handleSiteChange}\n                />\n              </div>\n            </div>\n          </header>\n\n          {/* Content */}\n          <main className=\"p-6\">\n            <NavigationBreadcrumb />\n\n            {/* Selector de vista */}\n            <div className=\"mb-6\">\n              <div className=\"flex items-center space-x-2 bg-muted p-1 rounded-lg w-fit\">\n                {viewOptions.map((option) => (\n                  <button\n                    key={option.id}\n                    onClick={() => setActiveView(option.id)}\n                    className={`flex items-center space-x-2 px-4 py-2 rounded-md text-sm font-medium transition-all duration-150 ${\n                      activeView === option.id\n                        ? 'bg-background text-foreground shadow-sm'\n                        : 'text-muted-foreground hover:text-foreground hover:bg-background/50'\n                    }`}\n                  >\n                    <Icon name={option.icon} size={16} />\n                    <span className=\"hidden md:inline\">{option.label}</span>\n                  </button>\n                ))}\n              </div>\n            </div>\n\n            {/* Carga/errores de empleados */}\n            {employeesLoading ? <LoadingSpinner /> : null}\n            {!employeesLoading && employeesError ? (\n              <ErrorBanner message={employeesError} onRetry={loadEmployees} />\n            ) : null}\n\n            {/* Layout principal */}\n            {!employeesLoading && !employeesError && (\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                {/* Panel Izquierdo */}\n                <div className=\"space-y-6\">\n                  {activeView === 'calculation' && (\n                    <>\n                      {calcLoading && <LoadingSpinner />}\n                      {!calcLoading && calcError && (\n                        <ErrorBanner message={calcError} onRetry={loadSelectedAttendance} />\n                      )}\n                      {!calcLoading && !calcError && (\n                        <PayrollCalculationEngine\n                          selectedEmployee={selectedEmployee}\n                          onCalculationUpdate={handleCalculationUpdate}\n                          attendanceData={\n                            currentAttendance\n                              ? {\n                                  workedDays: currentAttendance?.worked_days ?? null,\n                                  overtimeHours: currentAttendance?.overtime_hours ?? null,\n                                  regularHours: currentAttendance?.regular_hours ?? null,\n                                  grossTotal: currentAttendance?.gross_total ?? null,\n                                  netTotal: currentAttendance?.net_total ?? null,\n                                }\n                              : {}\n                          }\n                          onSaveAdjustments={handleSaveAdjustments}\n                        />\n                      )}\n                    </>\n                  )}\n\n                  {activeView === 'bulk' && (\n                    <BulkProcessingTools\n                      selectedEmployees={selectedEmployeeIds}\n                      onBulkProcess={handleBulkAction}\n                      onExport={handleExport}\n                      processingStatus={processingStatus}\n                    />\n                  )}\n\n                  {activeView === 'audit' && <PayrollAuditTrail />}\n\n                  {activeView === 'integration' && (\n                    <IntegrationStatusPanel\n                      onRefreshStatus={() => console.log('Refreshing status...')}\n                      onTestConnection={(id) => console.log('Testing connection:', id)}\n                      onSyncData={(id) => console.log('Syncing data:', id)}\n                    />\n                  )}\n                </div>\n\n                {/* Panel Derecho - Grid de Empleados */}\n                <div>\n                  <EmployeePayrollGrid\n                    employees={employees}\n                    onEmployeeSelect={handleEmployeeSelect}\n                    selectedEmployeeId={selectedEmployee?.id}\n                    onBulkAction={(action, ids) => {\n                      setSelectedEmployeeIds(ids);\n                      if (action !== 'select') {\n                        handleBulkAction(action, ids);\n                      }\n                    }}\n                    payrollData={{}} // si tu grid muestra totales, puedes enlazar currentAttendance según id\n                  />\n                </div>\n              </div>\n            )}\n\n            {/* Barra de acciones rápidas */}\n            <div className=\"fixed bottom-4 right-4 md:relative md:bottom-auto md:right-auto md:mt-6\">\n              <div className=\"flex items-center space-x-2 bg-card border border-border rounded-lg p-2 shadow-lg\">\n                <Button variant=\"outline\" size=\"sm\" iconName=\"Save\" onClick={handleSaveAll}>\n                  <span className=\"hidden md:inline\">Guardar Todo</span>\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  iconName=\"Download\"\n                  onClick={() => handleExport('excel', selectedEmployeeIds?.length ? selectedEmployeeIds : employees.map(e => e.id))}\n                >\n                  <span className=\"hidden md:inline\">Exportar</span>\n                </Button>\n                <Button\n                  variant=\"default\"\n                  size=\"sm\"\n                  iconName=\"Calculator\"\n                  onClick={() => handleBulkAction('calculate', employees.map((e) => e.id))}\n                >\n                  <span className=\"hidden md:inline\">Calcular Todo</span>\n                </Button>\n              </div>\n            </div>\n\n            {/* Ayuda de atajos */}\n            <div className=\"mt-8 p-4 bg-muted rounded-lg\">\n              <h4 className=\"text-sm font-semibold text-foreground mb-2\">Atajos de Teclado</h4>\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-2 text-xs text-muted-foreground\">\n                <div>\n                  <kbd className=\"px-1 py-0.5 bg-background rounded\">Ctrl+1</kbd> Motor de Cálculo\n                </div>\n                <div>\n                  <kbd className=\"px-1 py-0.5 bg-background rounded\">Ctrl+2</kbd> Procesamiento Masivo\n                </div>\n                <div>\n                  <kbd className=\"px-1 py-0.5 bg-background rounded\">Ctrl+3</kbd> Auditoría\n                </div>\n                <div>\n                  <kbd className=\"px-1 py-0.5 bg-background rounded\">Ctrl+S</kbd> Guardar Todo\n                </div>\n              </div>\n            </div>\n          </main>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default PayrollCalculationAndManagementInterface;\n","size_bytes":20217},"src/pages/performance-optimization-and-production-deployment-center/index.jsx":{"content":"import React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { Server, Container, Activity, Shield, AlertTriangle, Settings, Monitor, RefreshCw, GitBranch, Zap, Globe, Gauge, CheckCircle, XCircle, RotateCcw, Upload } from 'lucide-react';\nimport { qualityService } from '../../services/qualityService';\n\n\n\n// Import components\nimport DeploymentPipelineControls from './components/DeploymentPipelineControls';\nimport PerformanceMetricsDashboard from './components/PerformanceMetricsDashboard';\nimport DockerContainerStatus from './components/DockerContainerStatus';\nimport NginxConfigurationStatus from './components/NginxConfigurationStatus';\nimport SecurityHeadersValidation from './components/SecurityHeadersValidation';\nimport FeatureFlagManagement from './components/FeatureFlagManagement';\nimport StagingEnvironmentControls from './components/StagingEnvironmentControls';\nimport RealtimeStabilityMonitor from './components/RealtimeStabilityMonitor';\nimport VirtualizationControls from './components/VirtualizationControls';\nimport Icon from '@/components/AppIcon';\n\n\nconst PerformanceOptimizationAndProductionDeploymentCenter = () => {\n  const { user, userProfile, loading: authLoading } = useAuth();\n  const [activeTab, setActiveTab] = useState('pipeline');\n  const [performanceData, setPerformanceData] = useState(null);\n  const [deploymentStats, setDeploymentStats] = useState({\n    environment: 'staging',\n    lastDeploy: null,\n    buildStatus: 'idle',\n    containers: { active: 0, total: 0 },\n    performance: { score: 0, issues: 0 },\n    security: { score: 0, warnings: 0 },\n    realtime: { connections: 0, status: 'idle' }\n  });\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [alerts, setAlerts] = useState([]);\n\n  // Load deployment and performance data\n  const loadDeploymentData = useCallback(async () => {\n    if (!user || !userProfile) return;\n    \n    setLoading(true);\n    setError(null);\n    \n    try {\n      // Load quality metrics\n      const qualityRes = await qualityService();\n      if (qualityRes?.ok) {\n        setPerformanceData(qualityRes?.data);\n      }\n\n      // Mock deployment stats - in production this would come from actual deployment APIs\n      await new Promise(resolve => setTimeout(resolve, 1200));\n      \n      setDeploymentStats({\n        environment: process.env?.NODE_ENV || 'development',\n        lastDeploy: new Date(Date.now() - 1800000)?.toISOString(),\n        buildStatus: 'success',\n        containers: { active: 8, total: 12 },\n        performance: { score: 91, issues: 3 },\n        security: { score: 96, warnings: 2 },\n        realtime: { connections: 45, status: 'active' }\n      });\n\n      // Generate performance alerts\n      const performanceAlerts = [];\n      \n      if (performanceData?.performance?.bundleAnalysis?.duplicates) {\n        const duplicateSize = parseInt(performanceData?.performance?.bundleAnalysis?.duplicates) || 0;\n        if (duplicateSize > 30) {\n          performanceAlerts?.push({\n            id: 'bundle-duplicates',\n            type: 'warning',\n            severity: 'medium',\n            title: 'Bundle Optimization',\n            message: `${duplicateSize}KB of duplicate code detected in bundle`,\n            timestamp: new Date()?.toISOString(),\n            category: 'performance'\n          });\n        }\n      }\n\n      if (performanceData?.securityScan?.vulnerabilities?.high > 0) {\n        performanceAlerts?.push({\n          id: 'security-high',\n          type: 'error',\n          severity: 'high',\n          title: 'Security Alert',\n          message: `${performanceData?.securityScan?.vulnerabilities?.high} high severity vulnerabilities found`,\n          timestamp: new Date()?.toISOString(),\n          category: 'security'\n        });\n      }\n\n      if (performanceData?.performance?.lighthouse?.performance < 90) {\n        performanceAlerts?.push({\n          id: 'lighthouse-performance',\n          type: 'warning',\n          severity: 'medium',\n          title: 'Performance Score',\n          message: `Lighthouse performance score is ${performanceData?.performance?.lighthouse?.performance}/100`,\n          timestamp: new Date()?.toISOString(),\n          category: 'performance'\n        });\n      }\n\n      setAlerts(performanceAlerts);\n      \n    } catch (err) {\n      setError('Failed to load deployment data: ' + (err?.message || 'Unknown error'));\n      console.error('Deployment data loading error:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, [user, userProfile, performanceData?.performance?.bundleAnalysis?.duplicates, performanceData?.securityScan?.vulnerabilities?.high, performanceData?.performance?.lighthouse?.performance]);\n\n  useEffect(() => {\n    loadDeploymentData();\n  }, [loadDeploymentData]);\n\n  // Tab configuration\n  const tabs = useMemo(() => [\n    { id: 'pipeline', name: 'Deployment Pipeline', icon: GitBranch },\n    { id: 'performance', name: 'Performance Metrics', icon: Gauge },\n    { id: 'docker', name: 'Container Status', icon: Container },\n    { id: 'nginx', name: 'Nginx Config', icon: Server },\n    { id: 'security', name: 'Security Validation', icon: Shield },\n    { id: 'flags', name: 'Feature Flags', icon: Settings },\n    { id: 'staging', name: 'Staging Control', icon: Globe },\n    { id: 'realtime', name: 'Realtime Monitor', icon: Activity },\n    { id: 'virtualization', name: 'Virtualization', icon: Monitor }\n  ], []);\n\n  // Quick action handlers\n  const handleQuickAction = useCallback(async (action) => {\n    try {\n      switch (action) {\n        case 'deploy-staging':\n          setDeploymentStats(prev => ({ ...prev, buildStatus: 'building' }));\n          await new Promise(resolve => setTimeout(resolve, 3000));\n          setDeploymentStats(prev => ({ \n            ...prev, \n            buildStatus: 'success',\n            lastDeploy: new Date()?.toISOString()\n          }));\n          break;\n        case 'run-tests':\n          setDeploymentStats(prev => ({ ...prev, buildStatus: 'testing' }));\n          await new Promise(resolve => setTimeout(resolve, 2000));\n          setDeploymentStats(prev => ({ ...prev, buildStatus: 'success' }));\n          break;\n        case 'restart-containers':\n          setDeploymentStats(prev => ({ \n            ...prev, \n            containers: { ...prev?.containers, active: 0 }\n          }));\n          await new Promise(resolve => setTimeout(resolve, 2000));\n          setDeploymentStats(prev => ({ \n            ...prev, \n            containers: { ...prev?.containers, active: prev?.containers?.total }\n          }));\n          break;\n        case 'optimize-bundles':\n          await loadDeploymentData();\n          break;\n        default:\n          console.log(`Action ${action} not implemented`);\n      }\n    } catch (err) {\n      setError(`Failed to execute ${action}: ${err?.message}`);\n    }\n  }, [loadDeploymentData]);\n\n  // Render tab content\n  const renderTabContent = () => {\n    const commonProps = { \n      performanceData, \n      deploymentStats, \n      loading, \n      onRefresh: loadDeploymentData \n    };\n\n    switch (activeTab) {\n      case 'pipeline':\n        return <DeploymentPipelineControls {...commonProps} onAction={handleQuickAction} />;\n      case 'performance':\n        return <PerformanceMetricsDashboard {...commonProps} />;\n      case 'docker':\n        return <DockerContainerStatus {...commonProps} />;\n      case 'nginx':\n        return <NginxConfigurationStatus {...commonProps} />;\n      case 'security':\n        return <SecurityHeadersValidation {...commonProps} />;\n      case 'flags':\n        return <FeatureFlagManagement {...commonProps} />;\n      case 'staging':\n        return <StagingEnvironmentControls {...commonProps} onAction={handleQuickAction} />;\n      case 'realtime':\n        return <RealtimeStabilityMonitor {...commonProps} />;\n      case 'virtualization':\n        return <VirtualizationControls {...commonProps} />;\n      default:\n        return <DeploymentPipelineControls {...commonProps} onAction={handleQuickAction} />;\n    }\n  };\n\n  if (authLoading || loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"text-center\">\n          <RefreshCw className=\"h-8 w-8 animate-spin text-blue-600 mx-auto mb-4\" />\n          <p className=\"text-gray-600\">Loading Performance Center...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-4\">\n      {/* Header Section */}\n      <div className=\"mb-6\">\n        <div className=\"bg-white rounded-lg shadow-sm border p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n                Performance Optimization & Production Deployment Center\n              </h1>\n              <p className=\"text-gray-600\">\n                Enterprise-grade application delivery with automated scaling, performance monitoring, and zero-downtime deployments\n              </p>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              {userProfile?.role === 'superadmin' && (\n                <div className=\"bg-purple-50 px-3 py-1 rounded-full\">\n                  <span className=\"text-purple-600 text-sm font-medium\">Production Access</span>\n                </div>\n              )}\n              <div className=\"text-sm text-gray-500\">\n                Environment: <span className=\"font-medium capitalize\">{deploymentStats?.environment}</span>\n              </div>\n            </div>\n          </div>\n\n          {/* Performance Overview Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\n            <div className=\"bg-green-50 rounded-lg p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-green-600 text-sm font-medium\">Performance Score</p>\n                  <p className=\"text-2xl font-bold text-green-900\">\n                    {performanceData?.performance?.lighthouse?.performance || deploymentStats?.performance?.score}/100\n                  </p>\n                </div>\n                <Gauge className=\"h-8 w-8 text-green-600\" />\n              </div>\n            </div>\n\n            <div className=\"bg-blue-50 rounded-lg p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-blue-600 text-sm font-medium\">Active Containers</p>\n                  <p className=\"text-2xl font-bold text-blue-900\">\n                    {deploymentStats?.containers?.active}/{deploymentStats?.containers?.total}\n                  </p>\n                </div>\n                <Container className=\"h-8 w-8 text-blue-600\" />\n              </div>\n            </div>\n\n            <div className=\"bg-purple-50 rounded-lg p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-purple-600 text-sm font-medium\">Security Score</p>\n                  <p className=\"text-2xl font-bold text-purple-900\">{deploymentStats?.security?.score}%</p>\n                </div>\n                <Shield className=\"h-8 w-8 text-purple-600\" />\n              </div>\n            </div>\n\n            <div className=\"bg-yellow-50 rounded-lg p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-yellow-600 text-sm font-medium\">Realtime Connections</p>\n                  <p className=\"text-2xl font-bold text-yellow-900\">{deploymentStats?.realtime?.connections}</p>\n                </div>\n                <Activity className=\"h-8 w-8 text-yellow-600\" />\n              </div>\n            </div>\n          </div>\n\n          {/* Quick Actions */}\n          <div className=\"flex flex-wrap gap-2\">\n            <button\n              onClick={() => handleQuickAction('deploy-staging')}\n              disabled={deploymentStats?.buildStatus === 'building'}\n              className=\"bg-green-600 text-white px-4 py-2 rounded-md text-sm font-medium hover:bg-green-700 transition-colors flex items-center space-x-2 disabled:opacity-50\"\n            >\n              {deploymentStats?.buildStatus === 'building' ? (\n                <RefreshCw className=\"h-4 w-4 animate-spin\" />\n              ) : (\n                <Upload className=\"h-4 w-4\" />\n              )}\n              <span>Deploy Staging</span>\n            </button>\n            <button\n              onClick={() => handleQuickAction('run-tests')}\n              disabled={deploymentStats?.buildStatus === 'testing'}\n              className=\"bg-blue-600 text-white px-4 py-2 rounded-md text-sm font-medium hover:bg-blue-700 transition-colors flex items-center space-x-2 disabled:opacity-50\"\n            >\n              {deploymentStats?.buildStatus === 'testing' ? (\n                <RefreshCw className=\"h-4 w-4 animate-spin\" />\n              ) : (\n                <CheckCircle className=\"h-4 w-4\" />\n              )}\n              <span>Run Tests</span>\n            </button>\n            <button\n              onClick={() => handleQuickAction('restart-containers')}\n              className=\"bg-orange-600 text-white px-4 py-2 rounded-md text-sm font-medium hover:bg-orange-700 transition-colors flex items-center space-x-2\"\n            >\n              <RotateCcw className=\"h-4 w-4\" />\n              <span>Restart Containers</span>\n            </button>\n            <button\n              onClick={() => handleQuickAction('optimize-bundles')}\n              className=\"bg-purple-600 text-white px-4 py-2 rounded-md text-sm font-medium hover:bg-purple-700 transition-colors flex items-center space-x-2\"\n            >\n              <Zap className=\"h-4 w-4\" />\n              <span>Optimize Bundles</span>\n            </button>\n            <button\n              onClick={loadDeploymentData}\n              className=\"bg-gray-600 text-white px-4 py-2 rounded-md text-sm font-medium hover:bg-gray-700 transition-colors flex items-center space-x-2\"\n            >\n              <RefreshCw className=\"h-4 w-4\" />\n              <span>Refresh Data</span>\n            </button>\n          </div>\n        </div>\n\n        {/* Alerts Section */}\n        {alerts?.length > 0 && (\n          <div className=\"mt-4 bg-white rounded-lg shadow-sm border p-4\">\n            <h3 className=\"text-sm font-medium text-gray-900 mb-3 flex items-center\">\n              <AlertTriangle className=\"h-4 w-4 text-yellow-500 mr-2\" />\n              Performance & Security Alerts ({alerts?.length})\n            </h3>\n            <div className=\"space-y-2\">\n              {alerts?.slice(0, 5)?.map((alert) => (\n                <div key={alert?.id} className={`flex items-center justify-between p-3 rounded-md text-sm ${\n                  alert?.type === 'error' ? 'bg-red-50 text-red-800' :\n                  alert?.type === 'warning' ? 'bg-yellow-50 text-yellow-800' : 'bg-blue-50 text-blue-800'\n                }`}>\n                  <div className=\"flex items-center space-x-3\">\n                    <div className={`w-2 h-2 rounded-full ${\n                      alert?.severity === 'high' ? 'bg-red-500' :\n                      alert?.severity === 'medium' ? 'bg-yellow-500' : 'bg-blue-500'\n                    }`} />\n                    <span className=\"font-medium\">{alert?.title}</span>\n                    <span>{alert?.message}</span>\n                    <span className=\"text-xs bg-gray-200 px-2 py-1 rounded\">\n                      {alert?.category}\n                    </span>\n                  </div>\n                  <span className=\"text-xs opacity-75\">\n                    {new Date(alert?.timestamp)?.toLocaleTimeString()}\n                  </span>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Error Display */}\n        {error && (\n          <div className=\"mt-4 bg-red-50 border border-red-200 rounded-lg p-4\">\n            <div className=\"flex items-center\">\n              <XCircle className=\"h-5 w-5 text-red-500 mr-3\" />\n              <div>\n                <h3 className=\"text-sm font-medium text-red-800\">Error</h3>\n                <p className=\"text-sm text-red-700 mt-1\">{error}</p>\n              </div>\n              <button\n                onClick={() => setError(null)}\n                className=\"ml-auto text-red-500 hover:text-red-700\"\n              >\n                <XCircle className=\"h-4 w-4\" />\n              </button>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Tab Navigation */}\n      <div className=\"bg-white rounded-lg shadow-sm border mb-6\">\n        <div className=\"border-b border-gray-200\">\n          <nav className=\"flex space-x-8 px-6 overflow-x-auto\">\n            {tabs?.map((tab) => {\n              const Icon = tab?.icon;\n              return (\n                <button\n                  key={tab?.id}\n                  onClick={() => setActiveTab(tab?.id)}\n                  className={`flex items-center space-x-2 py-4 px-1 border-b-2 font-medium text-sm transition-colors whitespace-nowrap ${\n                    activeTab === tab?.id\n                      ? 'border-blue-500 text-blue-600' :'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                  }`}\n                >\n                  <Icon className=\"h-4 w-4\" />\n                  <span>{tab?.name}</span>\n                </button>\n              );\n            })}\n          </nav>\n        </div>\n\n        {/* Tab Content */}\n        <div className=\"p-6\">\n          {renderTabContent()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PerformanceOptimizationAndProductionDeploymentCenter;","size_bytes":17789},"src/pages/personalized-worker-dashboard-with-site-integration-and-team-collaboration/index.jsx":{"content":"// pages/personalized-worker-dashboard-with-site-integration-and-team-collaboration/index.jsx\nimport React from 'react';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { AlertCircle, User } from 'lucide-react';\n\nimport PersonalInfoCard from './components/PersonalInfoCard';\nimport SiteInfoCard from './components/SiteInfoCard';\nimport CoworkersList from './components/CoworkersList';\nimport AttendanceActionButtons from './components/AttendanceActionButtons';\nimport WeeklyTimecardSummary from './components/WeeklyTimecardSummary';\nimport RecentIncidents from './components/RecentIncidents';\nimport PayrollSummaryCard from './components/PayrollSummaryCard';\n\nimport { useQuery } from '@/hooks/useQuery';\nimport { getWorkerProfile, getSiteCoworkers, getWeeklyTimecard, getWorkerIncidents, clockIn, clockOut, startLunchBreak, endLunchBreak, getTodayAttendanceStatus, getRecentPayrollEstimation } from '@/services/enhancedAttendanceService';\n\nexport default function PersonalizedWorkerDashboard() {\n  const { user, userProfile, loading: authLoading } = useAuth();\n  const isWorker = userProfile?.role === 'user';\n  const userId = user?.id;\n\n  // 1) Perfil del trabajador (clave para habilitar las demás)\n  const {\n    data: workerProfile,\n    isLoading: loadingProfile,\n    error: errorProfile,\n    refetch: refetchProfile,\n  } = useQuery(getWorkerProfile, {\n    params: userId,\n    enabled: !!userId && isWorker && !authLoading,\n  });\n\n  const employeeId = workerProfile?.id;\n  const siteId = workerProfile?.site_id;\n\n  // 2) Compañeros del mismo sitio\n  const {\n    data: coworkers,\n    isLoading: loadingCoworkers,\n    error: errorCoworkers,\n    refetch: refetchCoworkers,\n  } = useQuery(getSiteCoworkers, {\n    params: [siteId, userId], // (siteId, excludeUserId)\n    enabled: !!employeeId && !!siteId,\n    select: (d) => (Array.isArray(d) ? d : []),\n  });\n\n  // 3) Asistencia de hoy\n  const {\n    data: todayAttendance,\n    isLoading: loadingToday,\n    error: errorToday,\n    refetch: refetchToday,\n  } = useQuery(getTodayAttendanceStatus, {\n    params: employeeId,\n    enabled: !!employeeId,\n  });\n\n  // 4) Resumen semanal\n  const {\n    data: weeklyTimecard,\n    isLoading: loadingWeekly,\n    error: errorWeekly,\n    refetch: refetchWeekly,\n  } = useQuery(getWeeklyTimecard, {\n    params: employeeId,\n    enabled: !!employeeId,\n  });\n\n  // 5) Incidentes recientes\n  const {\n    data: incidents = [],\n    isLoading: loadingIncidents,\n    error: errorIncidents,\n    refetch: refetchIncidents,\n  } = useQuery(getWorkerIncidents, {\n    params: [employeeId, 5], // (employeeId, limit)\n    enabled: !!employeeId,\n    select: (d) => (Array.isArray(d) ? d : []),\n  });\n\n  // 6) Estimación de nómina reciente\n  const {\n    data: payrollEstimation,\n    isLoading: loadingPayroll,\n    error: errorPayroll,\n    refetch: refetchPayroll,\n  } = useQuery(getRecentPayrollEstimation, {\n    params: employeeId,\n    enabled: !!employeeId,\n  });\n\n  // Handlers de acciones de asistencia\n  const handleAttendanceAction = async (action, location = null, notes = null) => {\n    if (!employeeId) return;\n    try {\n      let res;\n      if (action === 'clock_in')       res = await clockIn(employeeId, { location, notes });\n      else if (action === 'clock_out') res = await clockOut(employeeId, { location, notes });\n      else if (action === 'lunch_start') res = await startLunchBreak(employeeId);\n      else if (action === 'lunch_end')   res = await endLunchBreak(employeeId);\n\n      if (!res?.ok) throw new Error(res?.error || 'Acción inválida');\n      await Promise.all([refetchToday(), refetchWeekly()]);\n    } catch (e) {\n      alert(e?.message || 'Error en la acción de asistencia');\n    }\n  };\n\n  // Estados de carga/errores\n  if (authLoading || (isWorker && loadingProfile)) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Cargando panel del trabajador...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isWorker) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"bg-white rounded-lg shadow-lg p-8 max-w-md w-full mx-4\">\n          <div className=\"text-center\">\n            <AlertCircle className=\"h-16 w-16 text-red-500 mx-auto mb-4\" />\n            <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">Error de Acceso</h2>\n            <p className=\"text-gray-600 mb-4\">Esta página es solo para trabajadores de campo</p>\n            <button\n              onClick={() => window.history?.back()}\n              className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700\"\n            >\n              Volver\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (errorProfile) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"bg-white rounded-lg shadow-lg p-8 max-w-md w-full mx-4\">\n          <div className=\"text-center\">\n            <AlertCircle className=\"h-16 w-16 text-red-500 mx-auto mb-4\" />\n            <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">No se pudo cargar el perfil</h2>\n            <p className=\"text-gray-600 mb-4\">{errorProfile?.message}</p>\n            <button\n              onClick={() => refetchProfile()}\n              className=\"bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700\"\n            >\n              Reintentar\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b border-gray-200\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex-shrink-0\">\n                <User className=\"h-8 w-8 text-blue-600\" />\n              </div>\n              <div>\n                <h1 className=\"text-xl font-semibold text-gray-900\">\n                  Dashboard Personal\n                </h1>\n                <p className=\"text-sm text-gray-600\">\n                  Bienvenido, {workerProfile?.full_name}\n                </p>\n              </div>\n            </div>\n\n            {/* Quick Status Indicator */}\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"text-right\">\n                <p className=\"text-sm font-medium text-gray-900\">\n                  {new Date()?.toLocaleDateString('es-ES', { \n                    weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' \n                  })}\n                </p>\n                <p className=\"text-xs text-gray-600\">\n                  {todayAttendance?.clock_in ? \n                    `Entrada: ${new Date(todayAttendance?.clock_in)?.toLocaleTimeString('es-ES', { hour: '2-digit', minute: '2-digit' })}` :\n                    'Sin entrada registrada'\n                  }\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"max-w-7xl mx-auto py-6 sm:px-6 lg:px-8\">\n        <div className=\"px-4 py-6 sm:px-0\">\n          {/* Top Row - Personal Info and Site Integration */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6\">\n            <PersonalInfoCard \n              workerProfile={workerProfile} \n              userProfile={userProfile}\n            />\n            <SiteInfoCard \n              siteInfo={workerProfile?.construction_sites}\n              supervisor={workerProfile?.supervisor}\n            />\n          </div>\n\n          {/* Attendance Action Buttons */}\n          <div className=\"mb-6\">\n            <AttendanceActionButtons \n              todayAttendance={todayAttendance}\n              onAction={handleAttendanceAction}\n              isLoading={loadingToday}\n            />\n          </div>\n\n          {/* Middle Row - Timecard and Payroll */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6\">\n            <WeeklyTimecardSummary \n              weeklyTimecard={weeklyTimecard}\n              todayAttendance={todayAttendance}\n              isLoading={loadingWeekly}\n            />\n            <PayrollSummaryCard \n              payrollEstimation={payrollEstimation}\n              weeklyTimecard={weeklyTimecard}\n              workerProfile={workerProfile}\n              isLoading={loadingPayroll}\n            />\n          </div>\n\n          {/* Bottom Row - Coworkers and Incidents */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <CoworkersList \n              coworkers={coworkers}\n              siteInfo={workerProfile?.construction_sites}\n              isLoading={loadingCoworkers}\n            />\n            <RecentIncidents \n              incidents={incidents}\n              employeeId={workerProfile?.id}\n              isLoading={loadingIncidents}\n              onIncidentSubmitted={async () => {\n                await refetchIncidents();\n              }}\n              errorMessage={errorIncidents?.message}\n            />\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":9389},"src/pages/production-authentication-management-system/index.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { useBranding } from '../../components/BrandingProvider';\nimport BrandedHeader from '../../components/ui/BrandedHeader';\nimport BrandedFooter from '../../components/ui/BrandedFooter';\nimport Button from '../../components/ui/Button';\nimport Input from '../../components/ui/Input';\nimport Select from '../../components/ui/Select';\nimport NavigationBreadcrumb from '../../components/ui/NavigationBreadcrumb';\nimport UserContextHeader from '../../components/ui/UserContextHeader';\nimport NotificationCenter from '../../components/ui/NotificationCenter';\nimport { supabase } from '../../lib/supabase';\nimport { Shield, Users, Key, Activity, Clock, AlertTriangle, Check, X, RefreshCw, Eye, EyeOff } from 'lucide-react';\n\nexport default function ProductionAuthenticationManagementSystem() {\n  const { user, userProfile, signIn, signUp, signOut, isAdmin, isSuperAdmin } = useAuth();\n  const { branding } = useBranding();\n  const [activeUsers, setActiveUsers] = useState([]);\n  const [sessionStats, setSessionStats] = useState({\n    totalSessions: 0,\n    activeSessions: 0,\n    failedAttempts: 0,\n    averageSessionDuration: 0\n  });\n  const [authLogs, setAuthLogs] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [notification, setNotification] = useState(null);\n\n  // Authentication form state\n  const [showAuthForm, setShowAuthForm] = useState(false);\n  const [authMode, setAuthMode] = useState('signin'); // 'signin' or 'signup'\n  const [authForm, setAuthForm] = useState({\n    email: '',\n    password: '',\n    fullName: '',\n    role: 'user',\n    confirmPassword: ''\n  });\n  const [authLoading, setAuthLoading] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n\n  // User management state\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [userManagementMode, setUserManagementMode] = useState('view'); // 'view', 'edit', 'create'\n\n  const breadcrumbItems = [\n    { label: 'Sistema', href: '/admin/system' },\n    { label: 'Gestión de Autenticación', href: '/production-authentication-management-system' }\n  ];\n\n  useEffect(() => {\n    if (isAdmin() || isSuperAdmin()) {\n      loadAuthenticationData();\n      setupRealtimeSubscription();\n    }\n  }, [user]);\n\n  const loadAuthenticationData = async () => {\n    try {\n      setLoading(true);\n      await Promise.all([\n        loadActiveUsers(),\n        loadSessionStats(),\n        loadAuthLogs()\n      ]);\n    } catch (error) {\n      setNotification({\n        type: 'error',\n        message: `Error al cargar datos: ${error?.message}`\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadActiveUsers = async () => {\n    try {\n      const { data, error } = await supabase?.from('user_profiles')?.select(`\n          id,\n          email,\n          full_name,\n          role,\n          created_at,\n          last_sign_in_at,\n          is_super_admin,\n          is_sso_user,\n          confirmed_at,\n          banned_until\n        `)?.order('last_sign_in_at', { ascending: false, nullsFirst: false });\n\n      if (error) throw error;\n      setActiveUsers(data || []);\n    } catch (error) {\n      console.error('Error loading active users:', error);\n      setNotification({\n        type: 'error',\n        message: 'Error al cargar usuarios activos'\n      });\n    }\n  };\n\n  const loadSessionStats = async () => {\n    try {\n      // Get session statistics from activity logs\n      const { data: logs, error } = await supabase?.from('logs_actividad')?.select('accion, created_at')?.in('accion', ['login', 'logout', 'failed_login'])?.gte('created_at', new Date(Date.now() - 24 * 60 * 60 * 1000)?.toISOString());\n\n      if (error) throw error;\n\n      const totalSessions = logs?.filter(log => log?.accion === 'login')?.length || 0;\n      const failedAttempts = logs?.filter(log => log?.accion === 'failed_login')?.length || 0;\n      const activeSessions = activeUsers?.filter(user => \n        user?.last_sign_in_at && \n        new Date(user?.last_sign_in_at) > new Date(Date.now() - 8 * 60 * 60 * 1000)\n      )?.length || 0;\n\n      setSessionStats({\n        totalSessions,\n        activeSessions,\n        failedAttempts,\n        averageSessionDuration: totalSessions > 0 ? 4.2 : 0 // Mock average in hours\n      });\n    } catch (error) {\n      console.error('Error loading session stats:', error);\n    }\n  };\n\n  const loadAuthLogs = async () => {\n    try {\n      const { data, error } = await supabase?.from('logs_actividad')?.select(`\n          id,\n          accion,\n          descripcion,\n          created_at,\n          usuario_id,\n          user_profiles:usuario_id (\n            full_name,\n            email\n          )\n        `)?.in('modulo', ['Authentication', 'Security'])?.order('created_at', { ascending: false })?.limit(50);\n\n      if (error) throw error;\n      setAuthLogs(data || []);\n    } catch (error) {\n      console.error('Error loading auth logs:', error);\n    }\n  };\n\n  const setupRealtimeSubscription = () => {\n    const channel = supabase?.channel('auth_monitoring')?.on(\n        'postgres_changes',\n        { event: '*', schema: 'public', table: 'logs_actividad' },\n        (payload) => {\n          if (['Authentication', 'Security']?.includes(payload?.new?.modulo)) {\n            loadAuthLogs();\n            loadSessionStats();\n          }\n        }\n      )?.on(\n        'postgres_changes',\n        { event: '*', schema: 'public', table: 'user_profiles' },\n        () => {\n          loadActiveUsers();\n        }\n      )?.subscribe();\n\n    return () => supabase?.removeChannel(channel);\n  };\n\n  const handleAuthSubmit = async (e) => {\n    e?.preventDefault();\n    if (!authForm?.email || !authForm?.password) {\n      setNotification({\n        type: 'error',\n        message: 'Por favor completa todos los campos requeridos'\n      });\n      return;\n    }\n\n    if (authMode === 'signup' && authForm?.password !== authForm?.confirmPassword) {\n      setNotification({\n        type: 'error',\n        message: 'Las contraseñas no coinciden'\n      });\n      return;\n    }\n\n    try {\n      setAuthLoading(true);\n      let result;\n\n      if (authMode === 'signin') {\n        result = await signIn(authForm?.email, authForm?.password);\n      } else {\n        result = await signUp(authForm?.email, authForm?.password, authForm?.fullName, authForm?.role);\n      }\n\n      if (result?.success) {\n        setNotification({\n          type: 'success',\n          message: authMode === 'signin' ? 'Inicio de sesión exitoso' : 'Usuario registrado exitosamente'\n        });\n        setShowAuthForm(false);\n        setAuthForm({\n          email: '',\n          password: '',\n          fullName: '',\n          role: 'user',\n          confirmPassword: ''\n        });\n        await loadAuthenticationData();\n      } else {\n        setNotification({\n          type: 'error',\n          message: result?.error || 'Error en la autenticación'\n        });\n      }\n    } catch (error) {\n      setNotification({\n        type: 'error',\n        message: error?.message || 'Error inesperado'\n      });\n    } finally {\n      setAuthLoading(false);\n    }\n  };\n\n  const handleUserAction = async (userId, action) => {\n    try {\n      const userToUpdate = activeUsers?.find(u => u?.id === userId);\n      if (!userToUpdate) return;\n\n      let updateData = {};\n      let successMessage = '';\n\n      switch (action) {\n        case 'ban':\n          updateData = { banned_until: new Date(Date.now() + 24 * 60 * 60 * 1000)?.toISOString() };\n          successMessage = 'Usuario bloqueado por 24 horas';\n          break;\n        case 'unban':\n          updateData = { banned_until: null };\n          successMessage = 'Usuario desbloqueado';\n          break;\n        case 'activate':\n          updateData = { confirmed_at: new Date()?.toISOString() };\n          successMessage = 'Usuario activado';\n          break;\n        case 'deactivate':\n          updateData = { confirmed_at: null };\n          successMessage = 'Usuario desactivado';\n          break;\n        default:\n          return;\n      }\n\n      const { error } = await supabase?.from('user_profiles')?.update(updateData)?.eq('id', userId);\n\n      if (error) throw error;\n\n      setNotification({\n        type: 'success',\n        message: successMessage\n      });\n\n      await loadActiveUsers();\n    } catch (error) {\n      setNotification({\n        type: 'error',\n        message: `Error al actualizar usuario: ${error?.message}`\n      });\n    }\n  };\n\n  const getStatusBadge = (user) => {\n    if (user?.banned_until && new Date(user?.banned_until) > new Date()) {\n      return <span className=\"px-2 py-1 text-xs bg-red-100 text-red-800 rounded-full\">Bloqueado</span>;\n    }\n    if (!user?.confirmed_at) {\n      return <span className=\"px-2 py-1 text-xs bg-yellow-100 text-yellow-800 rounded-full\">Pendiente</span>;\n    }\n    if (user?.last_sign_in_at && new Date(user?.last_sign_in_at) > new Date(Date.now() - 30 * 60 * 1000)) {\n      return <span className=\"px-2 py-1 text-xs bg-green-100 text-green-800 rounded-full\">En línea</span>;\n    }\n    return <span className=\"px-2 py-1 text-xs bg-gray-100 text-gray-800 rounded-full\">Inactivo</span>;\n  };\n\n  const getRoleBadge = (role, isSuperAdmin) => {\n    if (isSuperAdmin) {\n      return <span className=\"px-2 py-1 text-xs bg-purple-100 text-purple-800 rounded-full font-medium\">SuperAdmin</span>;\n    }\n    const roleColors = {\n      admin: 'bg-blue-100 text-blue-800',\n      supervisor: 'bg-orange-100 text-orange-800',\n      user: 'bg-gray-100 text-gray-800'\n    };\n    return (\n      <span className={`px-2 py-1 text-xs rounded-full ${roleColors?.[role] || roleColors?.user}`}>\n        {role?.charAt(0)?.toUpperCase() + role?.slice(1)}\n      </span>\n    );\n  };\n\n  const formatTimeAgo = (timestamp) => {\n    if (!timestamp) return 'Nunca';\n    const now = new Date();\n    const time = new Date(timestamp);\n    const diffInMinutes = Math.floor((now - time) / (1000 * 60));\n    \n    if (diffInMinutes < 1) return 'Ahora';\n    if (diffInMinutes < 60) return `Hace ${diffInMinutes} min`;\n    if (diffInMinutes < 1440) return `Hace ${Math.floor(diffInMinutes / 60)} h`;\n    return `Hace ${Math.floor(diffInMinutes / 1440)} días`;\n  };\n\n  if (!isAdmin() && !isSuperAdmin()) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <AlertTriangle className=\"mx-auto h-12 w-12 text-red-500 mb-4\" />\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">Acceso Denegado</h1>\n          <p className=\"text-gray-600\">No tienes permisos para acceder a esta sección.</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <BrandedHeader />\n      <UserContextHeader />\n      <NavigationBreadcrumb items={breadcrumbItems} />\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Page Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900 flex items-center gap-3\">\n                <Shield className=\"h-8 w-8\" style={{ color: branding?.color_primario }} />\n                Sistema de Gestión de Autenticación\n              </h1>\n              <p className=\"text-gray-600 mt-2\">\n                Control de acceso, monitoreo de sesiones y gestión de seguridad\n              </p>\n            </div>\n            <div className=\"flex gap-3\">\n              <Button\n                onClick={() => setShowAuthForm(true)}\n                className=\"flex items-center gap-2\"\n                style={{ backgroundColor: branding?.color_primario }}\n              >\n                <Users className=\"h-4 w-4\" />\n                Nuevo Usuario\n              </Button>\n              <Button\n                variant=\"outline\"\n                onClick={loadAuthenticationData}\n                disabled={loading}\n                className=\"flex items-center gap-2\"\n              >\n                <RefreshCw className={`h-4 w-4 ${loading ? 'animate-spin' : ''}`} />\n                Actualizar\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Statistics Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Sesiones Activas</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{sessionStats?.activeSessions}</p>\n              </div>\n              <div className=\"bg-green-100 p-3 rounded-full\">\n                <Activity className=\"h-6 w-6 text-green-600\" />\n              </div>\n            </div>\n            <p className=\"text-xs text-gray-500 mt-2\">Usuarios conectados en las últimas 8h</p>\n          </div>\n\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Total Usuarios</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{activeUsers?.length}</p>\n              </div>\n              <div className=\"bg-blue-100 p-3 rounded-full\">\n                <Users className=\"h-6 w-6 text-blue-600\" />\n              </div>\n            </div>\n            <p className=\"text-xs text-gray-500 mt-2\">Usuarios registrados en el sistema</p>\n          </div>\n\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Intentos Fallidos</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{sessionStats?.failedAttempts}</p>\n              </div>\n              <div className=\"bg-red-100 p-3 rounded-full\">\n                <AlertTriangle className=\"h-6 w-6 text-red-600\" />\n              </div>\n            </div>\n            <p className=\"text-xs text-gray-500 mt-2\">Últimas 24 horas</p>\n          </div>\n\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Duración Promedio</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{sessionStats?.averageSessionDuration?.toFixed(1)}h</p>\n              </div>\n              <div className=\"bg-purple-100 p-3 rounded-full\">\n                <Clock className=\"h-6 w-6 text-purple-600\" />\n              </div>\n            </div>\n            <p className=\"text-xs text-gray-500 mt-2\">Duración de sesión promedio</p>\n          </div>\n        </div>\n\n        {/* Main Content Grid */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* User Management Panel */}\n          <div className=\"lg:col-span-2 bg-white rounded-lg shadow\">\n            <div className=\"px-6 py-4 border-b\">\n              <h2 className=\"text-xl font-bold text-gray-900\">Usuarios Activos</h2>\n              <p className=\"text-sm text-gray-600\">Monitoreo y gestión de usuarios</p>\n            </div>\n            <div className=\"p-6\">\n              {loading ? (\n                <div className=\"flex items-center justify-center py-8\">\n                  <RefreshCw className=\"h-6 w-6 animate-spin text-gray-400\" />\n                  <span className=\"ml-2 text-gray-600\">Cargando usuarios...</span>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {activeUsers?.map((user) => (\n                    <div key={user?.id} className=\"flex items-center justify-between p-4 border rounded-lg hover:bg-gray-50\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div className=\"flex-shrink-0\">\n                          <div className=\"h-10 w-10 bg-gray-200 rounded-full flex items-center justify-center\">\n                            <span className=\"text-sm font-medium text-gray-700\">\n                              {user?.full_name?.charAt(0)?.toUpperCase() || user?.email?.charAt(0)?.toUpperCase()}\n                            </span>\n                          </div>\n                        </div>\n                        <div className=\"min-w-0 flex-1\">\n                          <p className=\"text-sm font-medium text-gray-900\">{user?.full_name || 'Sin nombre'}</p>\n                          <p className=\"text-sm text-gray-500\">{user?.email}</p>\n                          <div className=\"flex items-center space-x-2 mt-1\">\n                            {getStatusBadge(user)}\n                            {getRoleBadge(user?.role, user?.is_super_admin)}\n                          </div>\n                        </div>\n                        <div className=\"text-sm text-gray-500\">\n                          <p>Último acceso:</p>\n                          <p>{formatTimeAgo(user?.last_sign_in_at)}</p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        {user?.banned_until && new Date(user?.banned_until) > new Date() ? (\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => handleUserAction(user?.id, 'unban')}\n                            className=\"text-green-600 border-green-600 hover:bg-green-50\"\n                          >\n                            <Check className=\"h-4 w-4\" />\n                            Desbloquear\n                          </Button>\n                        ) : (\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => handleUserAction(user?.id, 'ban')}\n                            className=\"text-red-600 border-red-600 hover:bg-red-50\"\n                          >\n                            <X className=\"h-4 w-4\" />\n                            Bloquear\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                  {activeUsers?.length === 0 && (\n                    <div className=\"text-center py-8\">\n                      <Users className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n                      <p className=\"text-gray-600\">No hay usuarios registrados</p>\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Activity Log Panel */}\n          <div className=\"bg-white rounded-lg shadow\">\n            <div className=\"px-6 py-4 border-b\">\n              <h2 className=\"text-xl font-bold text-gray-900\">Registro de Actividad</h2>\n              <p className=\"text-sm text-gray-600\">Eventos de seguridad recientes</p>\n            </div>\n            <div className=\"p-6\">\n              <div className=\"space-y-4 max-h-96 overflow-y-auto\">\n                {authLogs?.map((log) => (\n                  <div key={log?.id} className=\"flex items-start space-x-3 p-3 border rounded-lg\">\n                    <div className=\"flex-shrink-0\">\n                      {log?.accion === 'login' && <Check className=\"h-5 w-5 text-green-600\" />}\n                      {log?.accion === 'logout' && <X className=\"h-5 w-5 text-gray-600\" />}\n                      {log?.accion === 'failed_login' && <AlertTriangle className=\"h-5 w-5 text-red-600\" />}\n                      {!['login', 'logout', 'failed_login']?.includes(log?.accion) && <Key className=\"h-5 w-5 text-blue-600\" />}\n                    </div>\n                    <div className=\"min-w-0 flex-1\">\n                      <p className=\"text-sm font-medium text-gray-900\">\n                        {log?.user_profiles?.full_name || 'Usuario desconocido'}\n                      </p>\n                      <p className=\"text-sm text-gray-600\">{log?.descripcion}</p>\n                      <p className=\"text-xs text-gray-500 mt-1\">\n                        {formatTimeAgo(log?.created_at)}\n                      </p>\n                    </div>\n                  </div>\n                ))}\n                {authLogs?.length === 0 && (\n                  <div className=\"text-center py-8\">\n                    <Activity className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n                    <p className=\"text-gray-600\">No hay registros de actividad</p>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </main>\n      {/* Authentication Form Modal */}\n      {showAuthForm && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-white rounded-lg shadow-xl max-w-md w-full mx-4\">\n            <div className=\"px-6 py-4 border-b\">\n              <div className=\"flex items-center justify-between\">\n                <h2 className=\"text-xl font-bold text-gray-900\">\n                  {authMode === 'signin' ? 'Iniciar Sesión' : 'Registrar Usuario'}\n                </h2>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setShowAuthForm(false)}\n                >\n                  <X className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n            <form onSubmit={handleAuthSubmit} className=\"p-6 space-y-4\">\n              <div className=\"flex border-b\">\n                <button\n                  type=\"button\"\n                  onClick={() => setAuthMode('signin')}\n                  className={`px-4 py-2 text-sm font-medium ${\n                    authMode === 'signin' ?'text-blue-600 border-b-2 border-blue-600' :'text-gray-600'\n                  }`}\n                >\n                  Iniciar Sesión\n                </button>\n                <button\n                  type=\"button\"\n                  onClick={() => setAuthMode('signup')}\n                  className={`px-4 py-2 text-sm font-medium ${\n                    authMode === 'signup' ?'text-blue-600 border-b-2 border-blue-600' :'text-gray-600'\n                  }`}\n                >\n                  Registrar\n                </button>\n              </div>\n\n              {authMode === 'signup' && (\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Nombre Completo\n                  </label>\n                  <Input\n                    type=\"text\"\n                    value={authForm?.fullName}\n                    onChange={(e) => setAuthForm({...authForm, fullName: e?.target?.value})}\n                    placeholder=\"Nombre completo\"\n                    required\n                  />\n                </div>\n              )}\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Correo Electrónico\n                </label>\n                <Input\n                  type=\"email\"\n                  value={authForm?.email}\n                  onChange={(e) => setAuthForm({...authForm, email: e?.target?.value})}\n                  placeholder=\"usuario@ejemplo.com\"\n                  required\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Contraseña\n                </label>\n                <div className=\"relative\">\n                  <Input\n                    type={showPassword ? 'text' : 'password'}\n                    value={authForm?.password}\n                    onChange={(e) => setAuthForm({...authForm, password: e?.target?.value})}\n                    placeholder=\"••••••••\"\n                    required\n                  />\n                  <button\n                    type=\"button\"\n                    onClick={() => setShowPassword(!showPassword)}\n                    className=\"absolute right-3 top-1/2 transform -translate-y-1/2\"\n                  >\n                    {showPassword ? <EyeOff className=\"h-4 w-4 text-gray-400\" /> : <Eye className=\"h-4 w-4 text-gray-400\" />}\n                  </button>\n                </div>\n              </div>\n\n              {authMode === 'signup' && (\n                <>\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Confirmar Contraseña\n                    </label>\n                    <Input\n                      type=\"password\"\n                      value={authForm?.confirmPassword}\n                      onChange={(e) => setAuthForm({...authForm, confirmPassword: e?.target?.value})}\n                      placeholder=\"••••••••\"\n                      required\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Rol\n                    </label>\n                    <Select\n                      value={authForm?.role}\n                      onChange={(e) => setAuthForm({...authForm, role: e?.target?.value})}\n                      options={[\n                        { value: 'user', label: 'Usuario' },\n                        { value: 'supervisor', label: 'Supervisor' },\n                        { value: 'admin', label: 'Administrador' }\n                      ]}\n                    />\n                  </div>\n                </>\n              )}\n\n              <div className=\"flex justify-end space-x-3 pt-4\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setShowAuthForm(false)}\n                >\n                  Cancelar\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={authLoading}\n                  style={{ backgroundColor: branding?.color_primario }}\n                >\n                  {authLoading && <RefreshCw className=\"h-4 w-4 animate-spin mr-2\" />}\n                  {authMode === 'signin' ? 'Iniciar Sesión' : 'Registrar'}\n                </Button>\n              </div>\n            </form>\n          </div>\n        </div>\n      )}\n      {/* Notification */}\n      <NotificationCenter\n        notification={notification}\n        onClose={() => setNotification(null)}\n      />\n      <BrandedFooter />\n    </div>\n  );\n}","size_bytes":26655},"src/pages/production-data-services-and-error-handling-management-console/index.jsx":{"content":"import React, { useState, useEffect, useCallback } from 'react';\nimport { Database, Activity, TrendingUp, AlertTriangle, RefreshCw, CheckCircle, XCircle, Clock, BarChart3, Server } from 'lucide-react';\n\n// Import existing components\nimport { useBranding } from '@/hooks/useBranding';\nimport BrandedHeader from '@/components/ui/BrandedHeader';\nimport Loading from '@/components/ui/Loading';\nimport ErrorState from '@/components/ui/ErrorState';\nimport Button from '@/components/ui/Button';\n\n// Import services for monitoring\nimport { authService } from '@/services/authService';\nimport { employeeService } from '@/services/employeeService';\nimport { attendanceService } from '@/services/attendanceService';\nimport { payrollService } from '@/services/payrollService';\nimport { incidentService } from '@/services/incidentService';\nimport { constructionSiteService } from '@/services/constructionSiteService';\n\nconst ProductionDataServicesManagementConsole = () => {\n  const { branding, loading: brandingLoading } = useBranding();\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [activeTab, setActiveTab] = useState('overview');\n  const [refreshing, setRefreshing] = useState(false);\n\n  // State for service monitoring\n  const [serviceHealth, setServiceHealth] = useState({});\n  const [errorLogs, setErrorLogs] = useState([]);\n  const [performanceMetrics, setPerformanceMetrics] = useState({});\n  const [connectionStatus, setConnectionStatus] = useState({});\n  const [mockDataStatus, setMockDataStatus] = useState({});\n\n  // Real-time monitoring intervals\n  const [monitoringInterval, setMonitoringInterval] = useState(null);\n\n  // Service health check function\n  const checkServiceHealth = useCallback(async () => {\n    const services = [\n      { name: 'Authentication', service: authService, method: 'testConnection' },\n      { name: 'Employees', service: employeeService, method: 'listEmployees' },\n      { name: 'Attendance', service: attendanceService, method: 'getTodayAttendance' },\n      { name: 'Payroll', service: payrollService, method: 'getPayrollSummary' },\n      { name: 'Incidents', service: incidentService, method: 'listIncidents' },\n      { name: 'Sites', service: constructionSiteService, method: 'listSites' }\n    ];\n\n    const healthStatus = {};\n    const metrics = {};\n    const connections = {};\n\n    for (const { name, service, method } of services) {\n      const startTime = Date.now();\n      try {\n        let result;\n        if (method === 'testConnection') {\n          result = await service?.[method]();\n        } else if (method === 'listEmployees') {\n          result = await service?.[method]({ page: 1, pageSize: 1 });\n        } else if (method === 'getTodayAttendance') {\n          result = await service?.[method]('test-id');\n        } else if (method === 'getPayrollSummary') {\n          result = await service?.[method]({ startDate: new Date(), endDate: new Date() });\n        } else if (method === 'listIncidents') {\n          result = await service?.[method]({ page: 1, pageSize: 1 });\n        } else if (method === 'listSites') {\n          result = await service?.[method]({ activeOnly: true });\n        }\n\n        const responseTime = Date.now() - startTime;\n        \n        healthStatus[name] = {\n          status: result?.ok ? 'healthy' : 'error',\n          responseTime,\n          error: result?.error || null,\n          lastCheck: new Date()?.toISOString()\n        };\n\n        metrics[name] = {\n          responseTime,\n          successRate: result?.ok ? 100 : 0,\n          errorCount: result?.ok ? 0 : 1\n        };\n\n        connections[name] = {\n          connected: !!result?.ok,\n          latency: responseTime\n        };\n\n      } catch (err) {\n        const responseTime = Date.now() - startTime;\n        \n        healthStatus[name] = {\n          status: 'critical',\n          responseTime,\n          error: err?.message || 'Service unavailable',\n          lastCheck: new Date()?.toISOString()\n        };\n\n        metrics[name] = {\n          responseTime,\n          successRate: 0,\n          errorCount: 1\n        };\n\n        connections[name] = {\n          connected: false,\n          latency: responseTime\n        };\n      }\n    }\n\n    setServiceHealth(healthStatus);\n    setPerformanceMetrics(metrics);\n    setConnectionStatus(connections);\n  }, []);\n\n  // Mock data detection function\n  const checkMockDataStatus = useCallback(async () => {\n    const mockPatterns = [\n      'MOCK', 'FAKE', 'DUMMY', 'TODO', 'static.rocket.new', \n      'rocket.new', 'localhost', 'test-data', 'sample-data'\n    ];\n\n    const mockStatus = {\n      detected: false,\n      locations: [],\n      severity: 'low',\n      recommendations: []\n    };\n\n    // In a real implementation, this would scan service responses for mock data patterns\n    // For now, we'll simulate the check\n    try {\n      const employeeResult = await employeeService?.listEmployees({ page: 1, pageSize: 10 });\n      if (employeeResult?.ok && employeeResult?.data) {\n        const employees = employeeResult?.data;\n        const mockEmployees = employees?.filter(emp => \n          mockPatterns?.some(pattern => \n            JSON.stringify(emp)?.toLowerCase()?.includes(pattern?.toLowerCase())\n          )\n        );\n        \n        if (mockEmployees?.length > 0) {\n          mockStatus.detected = true;\n          mockStatus?.locations?.push('Employees Service');\n          mockStatus.severity = 'high';\n          mockStatus?.recommendations?.push('Remove mock employee data from production');\n        }\n      }\n\n      setMockDataStatus(mockStatus);\n    } catch (err) {\n      console.warn('Mock data check failed:', err?.message);\n    }\n  }, []);\n\n  // Initialize monitoring\n  useEffect(() => {\n    const initializeMonitoring = async () => {\n      setLoading(true);\n      try {\n        await Promise.all([\n          checkServiceHealth(),\n          checkMockDataStatus()\n        ]);\n      } catch (err) {\n        setError(err?.message || 'Failed to initialize monitoring');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    initializeMonitoring();\n\n    // Set up real-time monitoring\n    const interval = setInterval(() => {\n      checkServiceHealth();\n      checkMockDataStatus();\n    }, 30000); // Every 30 seconds\n\n    setMonitoringInterval(interval);\n\n    return () => {\n      if (interval) clearInterval(interval);\n    };\n  }, [checkServiceHealth, checkMockDataStatus]);\n\n  // Manual refresh function\n  const handleRefresh = async () => {\n    setRefreshing(true);\n    try {\n      await Promise.all([\n        checkServiceHealth(),\n        checkMockDataStatus()\n      ]);\n    } catch (err) {\n      setError(err?.message || 'Refresh failed');\n    } finally {\n      setRefreshing(false);\n    }\n  };\n\n  // Service overview component\n  const ServiceOverview = () => {\n    const totalServices = Object.keys(serviceHealth)?.length;\n    const healthyServices = Object.values(serviceHealth)?.filter(s => s?.status === 'healthy')?.length;\n    const errorServices = Object.values(serviceHealth)?.filter(s => s?.status === 'error')?.length;\n    const criticalServices = Object.values(serviceHealth)?.filter(s => s?.status === 'critical')?.length;\n\n    return (\n      <div className=\"space-y-6\">\n        {/* Health Summary Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <div className=\"bg-white rounded-lg border p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Total Services</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{totalServices}</p>\n              </div>\n              <Server className=\"h-8 w-8 text-blue-600\" />\n            </div>\n          </div>\n\n          <div className=\"bg-white rounded-lg border p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Healthy</p>\n                <p className=\"text-2xl font-bold text-green-600\">{healthyServices}</p>\n              </div>\n              <CheckCircle className=\"h-8 w-8 text-green-600\" />\n            </div>\n          </div>\n\n          <div className=\"bg-white rounded-lg border p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Errors</p>\n                <p className=\"text-2xl font-bold text-yellow-600\">{errorServices}</p>\n              </div>\n              <AlertTriangle className=\"h-8 w-8 text-yellow-600\" />\n            </div>\n          </div>\n\n          <div className=\"bg-white rounded-lg border p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Critical</p>\n                <p className=\"text-2xl font-bold text-red-600\">{criticalServices}</p>\n              </div>\n              <XCircle className=\"h-8 w-8 text-red-600\" />\n            </div>\n          </div>\n        </div>\n\n        {/* Service Status List */}\n        <div className=\"bg-white rounded-lg border\">\n          <div className=\"px-6 py-4 border-b\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">Service Status</h3>\n          </div>\n          <div className=\"divide-y\">\n            {Object.entries(serviceHealth)?.map(([serviceName, health]) => (\n              <div key={serviceName} className=\"px-6 py-4 flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className={`h-3 w-3 rounded-full ${\n                    health?.status === 'healthy' ? 'bg-green-500' :\n                    health?.status === 'error' ? 'bg-yellow-500' : 'bg-red-500'\n                  }`} />\n                  <div>\n                    <p className=\"font-medium text-gray-900\">{serviceName}</p>\n                    <p className=\"text-sm text-gray-500\">\n                      Response: {health?.responseTime}ms\n                    </p>\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <p className={`text-sm font-medium ${\n                    health?.status === 'healthy' ? 'text-green-600' :\n                    health?.status === 'error' ? 'text-yellow-600' : 'text-red-600'\n                  }`}>\n                    {health?.status?.toUpperCase()}\n                  </p>\n                  {health?.error && (\n                    <p className=\"text-xs text-gray-500 max-w-xs truncate\">\n                      {health?.error}\n                    </p>\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  // Error tracking component\n  const ErrorTracking = () => (\n    <div className=\"space-y-6\">\n      <div className=\"bg-white rounded-lg border\">\n        <div className=\"px-6 py-4 border-b\">\n          <h3 className=\"text-lg font-semibold text-gray-900\">Error Monitoring</h3>\n        </div>\n        <div className=\"p-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n            <div className=\"bg-red-50 rounded-lg p-4\">\n              <div className=\"flex items-center\">\n                <XCircle className=\"h-8 w-8 text-red-600 mr-3\" />\n                <div>\n                  <p className=\"text-sm text-red-600 font-medium\">Critical Errors</p>\n                  <p className=\"text-2xl font-bold text-red-900\">\n                    {Object.values(serviceHealth)?.filter(s => s?.status === 'critical')?.length}\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"bg-yellow-50 rounded-lg p-4\">\n              <div className=\"flex items-center\">\n                <AlertTriangle className=\"h-8 w-8 text-yellow-600 mr-3\" />\n                <div>\n                  <p className=\"text-sm text-yellow-600 font-medium\">Warnings</p>\n                  <p className=\"text-2xl font-bold text-yellow-900\">\n                    {Object.values(serviceHealth)?.filter(s => s?.status === 'error')?.length}\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"bg-blue-50 rounded-lg p-4\">\n              <div className=\"flex items-center\">\n                <TrendingUp className=\"h-8 w-8 text-blue-600 mr-3\" />\n                <div>\n                  <p className=\"text-sm text-blue-600 font-medium\">Avg Response</p>\n                  <p className=\"text-2xl font-bold text-blue-900\">\n                    {Object.values(serviceHealth)?.length ? \n                      Math.round(Object.values(serviceHealth)?.reduce((sum, s) => sum + (s?.responseTime || 0), 0) / Object.values(serviceHealth)?.length) \n                      : 0}ms\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Mock Data Status */}\n          {mockDataStatus?.detected && (\n            <div className=\"bg-red-50 border border-red-200 rounded-lg p-4 mb-6\">\n              <div className=\"flex items-center mb-2\">\n                <AlertTriangle className=\"h-5 w-5 text-red-600 mr-2\" />\n                <h4 className=\"text-red-800 font-medium\">Mock Data Detected</h4>\n              </div>\n              <p className=\"text-red-700 text-sm mb-2\">\n                Production environment contains mock data that should be removed.\n              </p>\n              <div className=\"space-y-1\">\n                {mockDataStatus?.locations?.map((location, index) => (\n                  <p key={index} className=\"text-red-600 text-xs\">• {location}</p>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Service Errors */}\n          <div className=\"space-y-3\">\n            {Object.entries(serviceHealth)?.filter(([_, health]) => health?.error)?.map(([serviceName, health]) => (\n              <div key={serviceName} className=\"bg-gray-50 rounded-lg p-4\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <h4 className=\"font-medium text-gray-900\">{serviceName} Service</h4>\n                  <span className={`px-2 py-1 rounded-full text-xs font-medium ${\n                    health?.status === 'critical' ? 'bg-red-100 text-red-800' : 'bg-yellow-100 text-yellow-800'\n                  }`}>\n                    {health?.status?.toUpperCase()}\n                  </span>\n                </div>\n                <p className=\"text-sm text-gray-700 mb-1\">{health?.error}</p>\n                <p className=\"text-xs text-gray-500\">\n                  Last checked: {new Date(health?.lastCheck)?.toLocaleString()}\n                </p>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  // Performance monitoring component\n  const PerformanceMonitoring = () => (\n    <div className=\"space-y-6\">\n      <div className=\"bg-white rounded-lg border\">\n        <div className=\"px-6 py-4 border-b\">\n          <h3 className=\"text-lg font-semibold text-gray-900\">Performance Metrics</h3>\n        </div>\n        <div className=\"p-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {Object.entries(performanceMetrics)?.map(([serviceName, metrics]) => (\n              <div key={serviceName} className=\"bg-gray-50 rounded-lg p-4\">\n                <h4 className=\"font-medium text-gray-900 mb-3\">{serviceName}</h4>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-gray-600\">Response Time</span>\n                    <span className=\"text-sm font-medium\">{metrics?.responseTime}ms</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-gray-600\">Success Rate</span>\n                    <span className=\"text-sm font-medium\">{metrics?.successRate}%</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-gray-600\">Error Count</span>\n                    <span className=\"text-sm font-medium\">{metrics?.errorCount}</span>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  if (brandingLoading || loading) {\n    return <Loading />;\n  }\n\n  if (error) {\n    return <ErrorState message={error} onRetry={() => window.location?.reload()} />;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <BrandedHeader \n        title=\"Production Data Services Management Console\"\n        subtitle=\"Enterprise-grade data layer architecture with standardized service patterns and robust error handling\"\n        icon={<Database className=\"h-8 w-8\" />}\n      />\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Controls */}\n        <div className=\"mb-6 flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Button\n              onClick={handleRefresh}\n              disabled={refreshing}\n              className=\"flex items-center space-x-2\"\n            >\n              <RefreshCw className={`h-4 w-4 ${refreshing ? 'animate-spin' : ''}`} />\n              <span>Refresh</span>\n            </Button>\n          </div>\n\n          <div className=\"flex items-center space-x-2 text-sm text-gray-600\">\n            <Clock className=\"h-4 w-4\" />\n            <span>Auto-refresh: 30s</span>\n          </div>\n        </div>\n\n        {/* Navigation Tabs */}\n        <div className=\"border-b border-gray-200 mb-6\">\n          <nav className=\"-mb-px flex space-x-8\">\n            {[\n              { id: 'overview', label: 'Service Overview', icon: Activity },\n              { id: 'errors', label: 'Error Tracking', icon: AlertTriangle },\n              { id: 'performance', label: 'Performance', icon: BarChart3 }\n            ]?.map((tab) => (\n              <button\n                key={tab?.id}\n                onClick={() => setActiveTab(tab?.id)}\n                className={`flex items-center space-x-2 py-2 px-1 border-b-2 font-medium text-sm ${\n                  activeTab === tab?.id\n                    ? 'border-blue-500 text-blue-600' :'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                }`}\n              >\n                <tab.icon className=\"h-4 w-4\" />\n                <span>{tab?.label}</span>\n              </button>\n            ))}\n          </nav>\n        </div>\n\n        {/* Tab Content */}\n        <div className=\"space-y-6\">\n          {activeTab === 'overview' && <ServiceOverview />}\n          {activeTab === 'errors' && <ErrorTracking />}\n          {activeTab === 'performance' && <PerformanceMonitoring />}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ProductionDataServicesManagementConsole;","size_bytes":18918},"src/pages/production-database-schema-management-console/index.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { supabase } from '../../lib/supabase';\nimport { Activity, Database, Shield, Settings, AlertTriangle, CheckCircle, XCircle, RefreshCw, Download, Terminal } from 'lucide-react';\n\nexport default function ProductionDatabaseSchemaManagementConsole() {\n  const { userProfile, hasRole } = useAuth();\n  const [activeTab, setActiveTab] = useState('schema');\n  const [loading, setLoading] = useState(true);\n  const [schemaData, setSchemaData] = useState({\n    tables: [],\n    functions: [],\n    policies: [],\n    indexes: []\n  });\n  const [connectionStatus, setConnectionStatus] = useState('checking');\n  const [systemHealth, setSystemHealth] = useState({\n    database: 'unknown',\n    rls: 'unknown',\n    performance: 'unknown',\n    backup: 'unknown'\n  });\n  const [migrations, setMigrations] = useState([]);\n  const [edgeFunctions, setEdgeFunctions] = useState([]);\n  const [error, setError] = useState('');\n  const [successMessage, setSuccessMessage] = useState('');\n\n  // Initialize dashboard data\n  useEffect(() => {\n    if (hasRole('superadmin')) {\n      loadDashboardData();\n    }\n  }, [hasRole]);\n\n  const loadDashboardData = async () => {\n    try {\n      setLoading(true);\n      setError('');\n      \n      await Promise.all([\n        checkConnectionStatus(),\n        loadSchemaOverview(),\n        loadSystemHealth(),\n        loadMigrationHistory(),\n        loadEdgeFunctions()\n      ]);\n\n    } catch (error) {\n      setError('Failed to load dashboard data: ' + error?.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const checkConnectionStatus = async () => {\n    try {\n      const { data, error } = await supabase?.from('user_profiles')?.select('id')?.limit(1);\n      \n      if (error) throw error;\n      setConnectionStatus('connected');\n    } catch (error) {\n      setConnectionStatus('error');\n      console.error('Connection check failed:', error);\n    }\n  };\n\n  const loadSchemaOverview = async () => {\n    try {\n      // Get table information\n      const { data: tables, error: tablesError } = await supabase?.rpc('get_table_info');\n      \n      if (tablesError && !tablesError?.message?.includes('function get_table_info')) {\n        throw tablesError;\n      }\n\n      // Fallback to basic table listing\n      const tablesList = [\n        { name: 'user_profiles', type: 'table', rows: 'N/A', size: 'N/A' },\n        { name: 'employee_profiles', type: 'table', rows: 'N/A', size: 'N/A' },\n        { name: 'construction_sites', type: 'table', rows: 'N/A', size: 'N/A' },\n        { name: 'attendance_records', type: 'table', rows: 'N/A', size: 'N/A' },\n        { name: 'payroll_periods', type: 'table', rows: 'N/A', size: 'N/A' },\n        { name: 'payroll_entries', type: 'table', rows: 'N/A', size: 'N/A' },\n        { name: 'finiquitos', type: 'table', rows: 'N/A', size: 'N/A' },\n        { name: 'logs_actividad', type: 'table', rows: 'N/A', size: 'N/A' }\n      ];\n\n      setSchemaData(prev => ({\n        ...prev,\n        tables: tables || tablesList,\n        functions: [\n          { name: 'calculate_weekly_payroll', returns: 'void', security: 'definer' },\n          { name: 'process_finiquito', returns: 'jsonb', security: 'definer' },\n          { name: 'get_employee_dashboard', returns: 'jsonb', security: 'invoker' }\n        ],\n        policies: [\n          { table: 'user_profiles', name: 'users_own_profile', command: 'ALL' },\n          { table: 'employee_profiles', name: 'employees_own_data', command: 'SELECT' },\n          { table: 'attendance_records', name: 'attendance_access', command: 'ALL' }\n        ],\n        indexes: [\n          { table: 'user_profiles', name: 'user_profiles_pkey', unique: true },\n          { table: 'attendance_records', name: 'idx_attendance_employee_date', unique: false }\n        ]\n      }));\n\n    } catch (error) {\n      console.error('Failed to load schema:', error);\n    }\n  };\n\n  const loadSystemHealth = async () => {\n    try {\n      // Check database connectivity\n      const { data } = await supabase?.from('user_profiles')?.select('id')?.limit(1);\n      const dbStatus = data ? 'healthy' : 'warning';\n      \n      setSystemHealth({\n        database: dbStatus,\n        rls: 'active',\n        performance: 'good',\n        backup: 'scheduled'\n      });\n    } catch (error) {\n      setSystemHealth({\n        database: 'error',\n        rls: 'unknown',\n        performance: 'unknown',\n        backup: 'unknown'\n      });\n    }\n  };\n\n  const loadMigrationHistory = async () => {\n    // Simulate migration history since we can't access migration metadata directly\n    setMigrations([\n      {\n        id: '20250105000000_asistenciapro_production_ready_schema',\n        applied_at: '2025-01-05T00:00:00Z',\n        status: 'applied',\n        description: 'Production ready schema for AsistenciaPro'\n      },\n      {\n        id: '20250807212400_asistenciapro_complete_system',\n        applied_at: '2025-08-07T21:24:00Z',\n        status: 'applied',\n        description: 'Complete system with payroll and attendance'\n      }\n    ]);\n  };\n\n  const loadEdgeFunctions = async () => {\n    // Simulate edge functions since we can't directly access function metadata\n    setEdgeFunctions([\n      {\n        name: 'payroll-calculator',\n        status: 'deployed',\n        last_deployment: '2025-01-19T10:00:00Z',\n        invocations: 1250\n      },\n      {\n        name: 'attendance-processor',\n        status: 'deployed',\n        last_deployment: '2025-01-18T15:30:00Z',\n        invocations: 890\n      },\n      {\n        name: 'report-generator',\n        status: 'deployed',\n        last_deployment: '2025-01-17T09:15:00Z',\n        invocations: 456\n      }\n    ]);\n  };\n\n  const getStatusIcon = (status) => {\n    switch (status) {\n      case 'healthy': case'active': case'connected': case'good': case'scheduled': case'deployed': case'applied':\n        return <CheckCircle className=\"w-4 h-4 text-green-500\" />;\n      case 'warning':\n        return <AlertTriangle className=\"w-4 h-4 text-yellow-500\" />;\n      case 'error': case'failed':\n        return <XCircle className=\"w-4 h-4 text-red-500\" />;\n      default:\n        return <RefreshCw className=\"w-4 h-4 text-gray-500 animate-spin\" />;\n    }\n  };\n\n  const getStatusColor = (status) => {\n    switch (status) {\n      case 'healthy': case'active': case'connected': case'good': case'scheduled': case'deployed': case'applied':\n        return 'text-green-600 bg-green-50 border-green-200';\n      case 'warning':\n        return 'text-yellow-600 bg-yellow-50 border-yellow-200';\n      case 'error': case'failed':\n        return 'text-red-600 bg-red-50 border-red-200';\n      default:\n        return 'text-gray-600 bg-gray-50 border-gray-200';\n    }\n  };\n\n  const refreshDashboard = async () => {\n    setSuccessMessage('');\n    setError('');\n    await loadDashboardData();\n    setSuccessMessage('Dashboard data refreshed successfully');\n    setTimeout(() => setSuccessMessage(''), 3000);\n  };\n\n  const exportSchema = async () => {\n    try {\n      const schemaExport = {\n        timestamp: new Date()?.toISOString(),\n        tables: schemaData?.tables,\n        functions: schemaData?.functions,\n        policies: schemaData?.policies,\n        indexes: schemaData?.indexes,\n        system_health: systemHealth,\n        migrations: migrations\n      };\n\n      const blob = new Blob([JSON.stringify(schemaExport, null, 2)], {\n        type: 'application/json'\n      });\n\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `novaasistencia-schema-${new Date()?.toISOString()?.split('T')?.[0]}.json`;\n      document.body?.appendChild(a);\n      a?.click();\n      document.body?.removeChild(a);\n      URL.revokeObjectURL(url);\n\n      setSuccessMessage('Schema exported successfully');\n      setTimeout(() => setSuccessMessage(''), 3000);\n    } catch (error) {\n      setError('Failed to export schema: ' + error?.message);\n    }\n  };\n\n  if (!hasRole('superadmin')) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"text-center\">\n          <Shield className=\"mx-auto h-12 w-12 text-red-500 mb-4\" />\n          <h1 className=\"text-xl font-bold text-gray-900 mb-2\">Acceso Restringido</h1>\n          <p className=\"text-gray-600\">Esta página requiere permisos de SuperAdmin.</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white shadow\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center py-6\">\n            <div className=\"flex items-center\">\n              <Database className=\"h-8 w-8 text-blue-600 mr-3\" />\n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900\">\n                  Production Database Schema Management Console\n                </h1>\n                <p className=\"text-sm text-gray-600 mt-1\">\n                  NovaAsistencia - Comprehensive database architecture oversight\n                </p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <div className={`flex items-center px-3 py-1 rounded-full border ${getStatusColor(connectionStatus)}`}>\n                {getStatusIcon(connectionStatus)}\n                <span className=\"ml-2 text-sm font-medium capitalize\">\n                  {connectionStatus === 'connected' ? 'Conectado' : 'Desconectado'}\n                </span>\n              </div>\n              <button\n                onClick={refreshDashboard}\n                disabled={loading}\n                className=\"flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              >\n                <RefreshCw className={`w-4 h-4 mr-2 ${loading ? 'animate-spin' : ''}`} />\n                Actualizar\n              </button>\n              <button\n                onClick={exportSchema}\n                className=\"flex items-center px-4 py-2 bg-blue-600 text-white rounded-md shadow-sm text-sm font-medium hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              >\n                <Download className=\"w-4 h-4 mr-2\" />\n                Exportar Schema\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n      {/* Alert Messages */}\n      {error && (\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pt-4\">\n          <div className=\"bg-red-50 border-l-4 border-red-400 p-4 rounded\">\n            <div className=\"flex\">\n              <XCircle className=\"h-5 w-5 text-red-400 mr-2\" />\n              <p className=\"text-sm text-red-700\">{error}</p>\n            </div>\n          </div>\n        </div>\n      )}\n      {successMessage && (\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pt-4\">\n          <div className=\"bg-green-50 border-l-4 border-green-400 p-4 rounded\">\n            <div className=\"flex\">\n              <CheckCircle className=\"h-5 w-5 text-green-400 mr-2\" />\n              <p className=\"text-sm text-green-700\">{successMessage}</p>\n            </div>\n          </div>\n        </div>\n      )}\n      {/* System Health Overview */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          {Object.entries(systemHealth)?.map(([key, status]) => (\n            <div key={key} className=\"bg-white rounded-lg shadow p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"flex-shrink-0\">\n                  {getStatusIcon(status)}\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-500 capitalize\">\n                    {key === 'database' ? 'Base de Datos' :\n                     key === 'rls' ? 'Seguridad RLS' :\n                     key === 'performance' ? 'Rendimiento' :\n                     key === 'backup' ? 'Respaldos' : key}\n                  </p>\n                  <p className={`text-lg font-semibold capitalize ${getStatusColor(status)?.split(' ')?.[0]}`}>\n                    {status === 'healthy' ? 'Saludable' :\n                     status === 'active' ? 'Activo' :\n                     status === 'good' ? 'Bueno' :\n                     status === 'scheduled' ? 'Programado' : status}\n                  </p>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {/* Navigation Tabs */}\n        <div className=\"bg-white rounded-lg shadow\">\n          <div className=\"border-b border-gray-200\">\n            <nav className=\"-mb-px flex space-x-8\" aria-label=\"Tabs\">\n              {[\n                { id: 'schema', name: 'Schema Overview', icon: Database },\n                { id: 'policies', name: 'RLS Policies', icon: Shield },\n                { id: 'functions', name: 'RPC Functions', icon: Terminal },\n                { id: 'edge-functions', name: 'Edge Functions', icon: Activity },\n                { id: 'migrations', name: 'Migrations', icon: Settings }\n              ]?.map((tab) => (\n                <button\n                  key={tab?.id}\n                  onClick={() => setActiveTab(tab?.id)}\n                  className={`${\n                    activeTab === tab?.id\n                      ? 'border-blue-500 text-blue-600' :'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                  } whitespace-nowrap py-4 px-6 border-b-2 font-medium text-sm flex items-center`}\n                >\n                  <tab.icon className=\"w-4 h-4 mr-2\" />\n                  {tab?.name}\n                </button>\n              ))}\n            </nav>\n          </div>\n\n          {/* Tab Content */}\n          <div className=\"p-6\">\n            {loading ? (\n              <div className=\"flex items-center justify-center py-12\">\n                <RefreshCw className=\"w-8 h-8 animate-spin text-blue-600 mr-3\" />\n                <span className=\"text-lg text-gray-600\">Cargando datos del esquema...</span>\n              </div>\n            ) : (\n              <>\n                {/* Schema Overview Tab */}\n                {activeTab === 'schema' && (\n                  <div className=\"space-y-6\">\n                    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                      <div>\n                        <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Tables</h3>\n                        <div className=\"bg-gray-50 rounded-lg p-4\">\n                          <div className=\"space-y-3\">\n                            {schemaData?.tables?.map((table, index) => (\n                              <div key={index} className=\"flex items-center justify-between py-2 px-3 bg-white rounded border\">\n                                <div>\n                                  <span className=\"font-medium text-gray-900\">{table?.name}</span>\n                                  <span className=\"ml-2 text-sm text-gray-500\">({table?.type})</span>\n                                </div>\n                                <div className=\"text-sm text-gray-500\">\n                                  {table?.rows} rows\n                                </div>\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n                      </div>\n\n                      <div>\n                        <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Indexes</h3>\n                        <div className=\"bg-gray-50 rounded-lg p-4\">\n                          <div className=\"space-y-3\">\n                            {schemaData?.indexes?.map((index, idx) => (\n                              <div key={idx} className=\"flex items-center justify-between py-2 px-3 bg-white rounded border\">\n                                <div>\n                                  <span className=\"font-medium text-gray-900\">{index?.name}</span>\n                                  <span className=\"ml-2 text-sm text-gray-500\">on {index?.table}</span>\n                                </div>\n                                <span className={`px-2 py-1 text-xs rounded-full ${\n                                  index?.unique ? 'bg-blue-100 text-blue-800' : 'bg-gray-100 text-gray-800'\n                                }`}>\n                                  {index?.unique ? 'Unique' : 'Index'}\n                                </span>\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {/* RLS Policies Tab */}\n                {activeTab === 'policies' && (\n                  <div>\n                    <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Row Level Security Policies</h3>\n                    <div className=\"bg-gray-50 rounded-lg p-4\">\n                      <div className=\"space-y-3\">\n                        {schemaData?.policies?.map((policy, index) => (\n                          <div key={index} className=\"flex items-center justify-between py-3 px-4 bg-white rounded border\">\n                            <div>\n                              <span className=\"font-medium text-gray-900\">{policy?.name}</span>\n                              <span className=\"ml-2 text-sm text-gray-500\">on {policy?.table}</span>\n                            </div>\n                            <span className=\"px-3 py-1 text-xs rounded-full bg-green-100 text-green-800\">\n                              {policy?.command}\n                            </span>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {/* RPC Functions Tab */}\n                {activeTab === 'functions' && (\n                  <div>\n                    <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Database Functions</h3>\n                    <div className=\"bg-gray-50 rounded-lg p-4\">\n                      <div className=\"space-y-3\">\n                        {schemaData?.functions?.map((func, index) => (\n                          <div key={index} className=\"flex items-center justify-between py-3 px-4 bg-white rounded border\">\n                            <div>\n                              <span className=\"font-medium text-gray-900\">{func?.name}</span>\n                              <span className=\"ml-2 text-sm text-gray-500\">returns {func?.returns}</span>\n                            </div>\n                            <span className={`px-3 py-1 text-xs rounded-full ${\n                              func?.security === 'definer' ? 'bg-red-100 text-red-800' : 'bg-blue-100 text-blue-800'\n                            }`}>\n                              {func?.security}\n                            </span>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {/* Edge Functions Tab */}\n                {activeTab === 'edge-functions' && (\n                  <div>\n                    <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Edge Functions</h3>\n                    <div className=\"bg-gray-50 rounded-lg p-4\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                        {edgeFunctions?.map((func, index) => (\n                          <div key={index} className=\"bg-white rounded-lg border p-4\">\n                            <div className=\"flex items-center justify-between mb-2\">\n                              <h4 className=\"font-medium text-gray-900\">{func?.name}</h4>\n                              <span className={`px-2 py-1 text-xs rounded-full ${getStatusColor(func?.status)}`}>\n                                {func?.status}\n                              </span>\n                            </div>\n                            <div className=\"text-sm text-gray-600 space-y-1\">\n                              <p>Invocaciones: {func?.invocations}</p>\n                              <p>Último deploy: {new Date(func?.last_deployment)?.toLocaleDateString()}</p>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {/* Migrations Tab */}\n                {activeTab === 'migrations' && (\n                  <div>\n                    <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Migration History</h3>\n                    <div className=\"bg-gray-50 rounded-lg p-4\">\n                      <div className=\"space-y-3\">\n                        {migrations?.map((migration, index) => (\n                          <div key={index} className=\"flex items-center justify-between py-3 px-4 bg-white rounded border\">\n                            <div>\n                              <span className=\"font-medium text-gray-900\">{migration?.id}</span>\n                              <p className=\"text-sm text-gray-500 mt-1\">{migration?.description}</p>\n                            </div>\n                            <div className=\"text-right\">\n                              <span className={`px-3 py-1 text-xs rounded-full ${getStatusColor(migration?.status)}`}>\n                                {migration?.status}\n                              </span>\n                              <p className=\"text-sm text-gray-500 mt-1\">\n                                {new Date(migration?.applied_at)?.toLocaleDateString()}\n                              </p>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":22198},"src/pages/production-deployment-and-infrastructure-management/index.jsx":{"content":"import React, { useState, useEffect, useCallback } from 'react';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { Server, Container, Activity, Shield, AlertTriangle, Settings, HardDrive, Monitor, RefreshCw, GitBranch, Zap } from 'lucide-react';\n\n// Import components\nimport DeploymentPipelineVisualization from './components/DeploymentPipelineVisualization';\nimport InfrastructureMonitoringPanel from './components/InfrastructureMonitoringPanel';\nimport DockerContainerManagement from './components/DockerContainerManagement';\nimport NginxConfigurationPanel from './components/NginxConfigurationPanel';\nimport BackupDisasterRecovery from './components/BackupDisasterRecovery';\nimport SecurityComplianceMonitor from './components/SecurityComplianceMonitor';\nimport EnvironmentPromotionControls from './components/EnvironmentPromotionControls';\nimport Icon from '../../components/AppIcon';\n\nconst ProductionDeploymentAndInfrastructureManagement = () => {\n  const { user, userProfile, loading: authLoading } = useAuth();\n  const [activeTab, setActiveTab] = useState('pipeline');\n  const [infrastructureStats, setInfrastructureStats] = useState({\n    totalServers: 0,\n    activeContainers: 0,\n    systemHealth: 'loading',\n    deploymentStatus: 'idle',\n    lastBackup: null,\n    securityScore: 0\n  });\n  const [loading, setLoading] = useState(true);\n  const [alerts, setAlerts] = useState([]);\n\n  // Simulated infrastructure monitoring\n  const loadInfrastructureData = useCallback(async () => {\n    setLoading(true);\n    try {\n      // Simulate API call for infrastructure stats\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      setInfrastructureStats({\n        totalServers: 12,\n        activeContainers: 45,\n        systemHealth: 'healthy',\n        deploymentStatus: 'success',\n        lastBackup: new Date(Date.now() - 86400000)?.toISOString(),\n        securityScore: 98\n      });\n\n      setAlerts([\n        {\n          id: 1,\n          type: 'warning',\n          title: 'High Memory Usage',\n          message: 'Production server memory usage at 85%',\n          timestamp: new Date()?.toISOString(),\n          severity: 'medium'\n        },\n        {\n          id: 2,\n          type: 'info',\n          title: 'Deployment Completed',\n          message: 'Version 2.4.1 successfully deployed to staging',\n          timestamp: new Date(Date.now() - 300000)?.toISOString(),\n          severity: 'low'\n        }\n      ]);\n    } catch (error) {\n      console.error('Failed to load infrastructure data:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (user && userProfile) {\n      loadInfrastructureData();\n    }\n  }, [user, userProfile, loadInfrastructureData]);\n\n  // Tab navigation options\n  const tabs = [\n    { id: 'pipeline', name: 'Deployment Pipeline', icon: GitBranch },\n    { id: 'infrastructure', name: 'Infrastructure Monitor', icon: Monitor },\n    { id: 'docker', name: 'Docker Management', icon: Container },\n    { id: 'nginx', name: 'Nginx Configuration', icon: Server },\n    { id: 'environments', name: 'Environment Control', icon: Settings },\n    { id: 'backup', name: 'Backup & Recovery', icon: HardDrive },\n    { id: 'security', name: 'Security Compliance', icon: Shield }\n  ];\n\n  // Quick action handlers\n  const handleQuickAction = useCallback(async (action) => {\n    try {\n      switch (action) {\n        case 'restart-services':\n          // Simulate service restart\n          console.log('Restarting services...');\n          break;\n        case 'emergency-rollback':\n          // Simulate rollback\n          console.log('Initiating emergency rollback...');\n          break;\n        case 'scale-up':\n          // Simulate scaling\n          console.log('Scaling up infrastructure...');\n          break;\n        default:\n          console.log(`Action ${action} not implemented`);\n      }\n    } catch (error) {\n      console.error(`Failed to execute ${action}:`, error);\n    }\n  }, []);\n\n  const renderTabContent = () => {\n    switch (activeTab) {\n      case 'pipeline':\n        return <DeploymentPipelineVisualization />;\n      case 'infrastructure':\n        return <InfrastructureMonitoringPanel />;\n      case 'docker':\n        return <DockerContainerManagement />;\n      case 'nginx':\n        return <NginxConfigurationPanel />;\n      case 'environments':\n        return <EnvironmentPromotionControls />;\n      case 'backup':\n        return <BackupDisasterRecovery />;\n      case 'security':\n        return <SecurityComplianceMonitor />;\n      default:\n        return <DeploymentPipelineVisualization />;\n    }\n  };\n\n  if (authLoading || loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"text-center\">\n          <RefreshCw className=\"h-8 w-8 animate-spin text-blue-600 mx-auto mb-4\" />\n          <p className=\"text-gray-600\">Loading Infrastructure Dashboard...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-4\">\n      {/* Header Section */}\n      <div className=\"mb-6\">\n        <div className=\"bg-white rounded-lg shadow-sm border p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n                Production Infrastructure Management\n              </h1>\n              <p className=\"text-gray-600\">\n                Comprehensive DevOps control center for Nova HR deployment and infrastructure\n              </p>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              {userProfile?.role === 'superadmin' && (\n                <div className=\"bg-red-50 px-3 py-1 rounded-full\">\n                  <span className=\"text-red-600 text-sm font-medium\">SuperAdmin Access</span>\n                </div>\n              )}\n              <div className=\"text-sm text-gray-500\">\n                Last updated: {new Date()?.toLocaleTimeString('en-US', { \n                  timeZone: 'America/Monterrey',\n                  hour12: true \n                })}\n              </div>\n            </div>\n          </div>\n\n          {/* Infrastructure Overview Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\n            <div className=\"bg-blue-50 rounded-lg p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-blue-600 text-sm font-medium\">Active Servers</p>\n                  <p className=\"text-2xl font-bold text-blue-900\">{infrastructureStats?.totalServers}</p>\n                </div>\n                <Server className=\"h-8 w-8 text-blue-600\" />\n              </div>\n            </div>\n\n            <div className=\"bg-green-50 rounded-lg p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-green-600 text-sm font-medium\">Docker Containers</p>\n                  <p className=\"text-2xl font-bold text-green-900\">{infrastructureStats?.activeContainers}</p>\n                </div>\n                <Container className=\"h-8 w-8 text-green-600\" />\n              </div>\n            </div>\n\n            <div className=\"bg-yellow-50 rounded-lg p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-yellow-600 text-sm font-medium\">System Health</p>\n                  <p className=\"text-2xl font-bold text-yellow-900 capitalize\">\n                    {infrastructureStats?.systemHealth}\n                  </p>\n                </div>\n                <Activity className=\"h-8 w-8 text-yellow-600\" />\n              </div>\n            </div>\n\n            <div className=\"bg-purple-50 rounded-lg p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-purple-600 text-sm font-medium\">Security Score</p>\n                  <p className=\"text-2xl font-bold text-purple-900\">{infrastructureStats?.securityScore}%</p>\n                </div>\n                <Shield className=\"h-8 w-8 text-purple-600\" />\n              </div>\n            </div>\n          </div>\n\n          {/* Quick Actions */}\n          <div className=\"flex flex-wrap gap-2\">\n            <button\n              onClick={() => handleQuickAction('restart-services')}\n              className=\"bg-blue-600 text-white px-4 py-2 rounded-md text-sm font-medium hover:bg-blue-700 transition-colors flex items-center space-x-2\"\n            >\n              <RefreshCw className=\"h-4 w-4\" />\n              <span>Restart Services</span>\n            </button>\n            <button\n              onClick={() => handleQuickAction('emergency-rollback')}\n              className=\"bg-red-600 text-white px-4 py-2 rounded-md text-sm font-medium hover:bg-red-700 transition-colors flex items-center space-x-2\"\n            >\n              <AlertTriangle className=\"h-4 w-4\" />\n              <span>Emergency Rollback</span>\n            </button>\n            <button\n              onClick={() => handleQuickAction('scale-up')}\n              className=\"bg-green-600 text-white px-4 py-2 rounded-md text-sm font-medium hover:bg-green-700 transition-colors flex items-center space-x-2\"\n            >\n              <Zap className=\"h-4 w-4\" />\n              <span>Scale Infrastructure</span>\n            </button>\n            <button\n              onClick={loadInfrastructureData}\n              className=\"bg-gray-600 text-white px-4 py-2 rounded-md text-sm font-medium hover:bg-gray-700 transition-colors flex items-center space-x-2\"\n            >\n              <RefreshCw className=\"h-4 w-4\" />\n              <span>Refresh Data</span>\n            </button>\n          </div>\n        </div>\n\n        {/* Alerts Bar */}\n        {alerts?.length > 0 && (\n          <div className=\"mt-4 bg-white rounded-lg shadow-sm border p-4\">\n            <h3 className=\"text-sm font-medium text-gray-900 mb-3 flex items-center\">\n              <AlertTriangle className=\"h-4 w-4 text-yellow-500 mr-2\" />\n              System Alerts ({alerts?.length})\n            </h3>\n            <div className=\"space-y-2\">\n              {alerts?.slice(0, 3)?.map((alert) => (\n                <div key={alert?.id} className={`flex items-center justify-between p-3 rounded-md text-sm ${\n                  alert?.type === 'warning' ? 'bg-yellow-50 text-yellow-800' :\n                  alert?.type === 'error'? 'bg-red-50 text-red-800' : 'bg-blue-50 text-blue-800'\n                }`}>\n                  <div className=\"flex items-center space-x-3\">\n                    <div className={`w-2 h-2 rounded-full ${\n                      alert?.severity === 'high' ? 'bg-red-500' :\n                      alert?.severity === 'medium'? 'bg-yellow-500' : 'bg-blue-500'\n                    }`} />\n                    <span className=\"font-medium\">{alert?.title}</span>\n                    <span>{alert?.message}</span>\n                  </div>\n                  <span className=\"text-xs opacity-75\">\n                    {new Date(alert?.timestamp)?.toLocaleTimeString()}\n                  </span>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n      {/* Tab Navigation */}\n      <div className=\"bg-white rounded-lg shadow-sm border mb-6\">\n        <div className=\"border-b border-gray-200\">\n          <nav className=\"flex space-x-8 px-6\">\n            {tabs?.map((tab) => {\n              const Icon = tab?.icon;\n              return (\n                <button\n                  key={tab?.id}\n                  onClick={() => setActiveTab(tab?.id)}\n                  className={`flex items-center space-x-2 py-4 px-1 border-b-2 font-medium text-sm transition-colors ${\n                    activeTab === tab?.id\n                      ? 'border-blue-500 text-blue-600' :'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                  }`}\n                >\n                  <Icon className=\"h-4 w-4\" />\n                  <span>{tab?.name}</span>\n                </button>\n              );\n            })}\n          </nav>\n        </div>\n\n        {/* Tab Content */}\n        <div className=\"p-6\">\n          {renderTabContent()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ProductionDeploymentAndInfrastructureManagement;","size_bytes":12398},"src/pages/production-environment-configuration-dashboard/index.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { \n  Settings, \n  Database, \n  Shield, \n  Activity, \n  Server, \n  Code, \n  AlertTriangle,\n  CheckCircle,\n  XCircle,\n  Eye,\n  EyeOff,\n  RefreshCw,\n  Download,\n  Upload\n} from 'lucide-react';\nimport { supabase } from '../../lib/supabase';\nimport RequireRole from '../../auth/RequireRole';\nimport Icon from '../../components/AppIcon';\n\n\nconst ProductionEnvironmentConfigurationDashboard = () => {\n  const [activeTab, setActiveTab] = useState('environment');\n  const [loading, setLoading] = useState(false);\n  const [systemHealth, setSystemHealth] = useState(null);\n  const [environmentVars, setEnvironmentVars] = useState({});\n  const [showSecrets, setShowSecrets] = useState({});\n  const [deploymentStatus, setDeploymentStatus] = useState('healthy');\n\n  // Tabs configuration\n  const tabs = [\n    { id: 'environment', label: 'Variables de Entorno', icon: Settings },\n    { id: 'database', label: 'Base de Datos', icon: Database },\n    { id: 'auth', label: 'Autenticación', icon: Shield },\n    { id: 'health', label: 'Estado del Sistema', icon: Activity },\n    { id: 'docker', label: 'Docker & Deploy', icon: Server },\n    { id: 'quality', label: 'Calidad de Código', icon: Code }\n  ];\n\n  // Load system data\n  useEffect(() => {\n    loadSystemData();\n  }, []);\n\n  const loadSystemData = async () => {\n    setLoading(true);\n    try {\n      // Load system health metrics\n      await loadSystemHealth();\n      \n      // Load environment variables (masked for security)\n      setEnvironmentVars({\n        'VITE_SUPABASE_URL': import.meta.env?.VITE_SUPABASE_URL || 'Not configured',\n        'VITE_SUPABASE_ANON_KEY': '*********************',\n        'NODE_ENV': 'production',\n        'VITE_APP_VERSION': '1.0.0',\n        'VITE_BUILD_DATE': new Date()?.toISOString()?.split('T')?.[0]\n      });\n    } catch (error) {\n      console.error('Error loading system data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadSystemHealth = async () => {\n    try {\n      // Test database connection\n      const startTime = Date.now();\n      const { data, error } = await supabase?.from('usuarios')?.select('count')?.limit(1);\n      \n      const responseTime = Date.now() - startTime;\n      \n      setSystemHealth({\n        database: {\n          status: error ? 'error' : 'healthy',\n          responseTime: responseTime,\n          message: error ? error?.message : 'Conexión exitosa'\n        },\n        api: {\n          status: 'healthy',\n          responseTime: 45,\n          message: 'API funcionando correctamente'\n        },\n        memory: {\n          used: '156 MB',\n          total: '512 MB',\n          percentage: 30.5\n        },\n        deployment: {\n          status: deploymentStatus,\n          lastDeploy: '2025-01-11 18:30:00',\n          version: 'v1.0.0',\n          environment: 'production'\n        }\n      });\n    } catch (error) {\n      setSystemHealth({\n        database: {\n          status: 'error',\n          responseTime: 0,\n          message: 'Error de conexión'\n        },\n        api: { status: 'error', responseTime: 0, message: 'API no disponible' },\n        memory: { used: 'N/A', total: 'N/A', percentage: 0 },\n        deployment: { status: 'error', lastDeploy: 'N/A', version: 'N/A', environment: 'N/A' }\n      });\n    }\n  };\n\n  const toggleSecretVisibility = (key) => {\n    setShowSecrets(prev => ({\n      ...prev,\n      [key]: !prev?.[key]\n    }));\n  };\n\n  const getStatusIcon = (status) => {\n    switch (status) {\n      case 'healthy':\n        return <CheckCircle className=\"w-5 h-5 text-green-600\" />;\n      case 'warning':\n        return <AlertTriangle className=\"w-5 h-5 text-yellow-600\" />;\n      case 'error':\n        return <XCircle className=\"w-5 h-5 text-red-600\" />;\n      default:\n        return <RefreshCw className=\"w-5 h-5 text-gray-400 animate-spin\" />;\n    }\n  };\n\n  const getStatusColor = (status) => {\n    switch (status) {\n      case 'healthy': return 'text-green-600 bg-green-50 border-green-200';\n      case 'warning': return 'text-yellow-600 bg-yellow-50 border-yellow-200';\n      case 'error': return 'text-red-600 bg-red-50 border-red-200';\n      default: return 'text-gray-600 bg-gray-50 border-gray-200';\n    }\n  };\n\n  const renderEnvironmentTab = () => (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h3 className=\"text-lg font-semibold text-gray-900\">\n          Variables de Entorno\n        </h3>\n        <div className=\"flex space-x-2\">\n          <button className=\"px-3 py-2 bg-blue-600 text-white text-sm rounded-lg hover:bg-blue-700 flex items-center gap-2\">\n            <RefreshCw className=\"w-4 h-4\" />\n            Sincronizar\n          </button>\n          <button className=\"px-3 py-2 bg-gray-600 text-white text-sm rounded-lg hover:bg-gray-700 flex items-center gap-2\">\n            <Download className=\"w-4 h-4\" />\n            Exportar\n          </button>\n        </div>\n      </div>\n\n      <div className=\"bg-white border border-gray-200 rounded-lg overflow-hidden\">\n        <div className=\"px-6 py-3 bg-gray-50 border-b border-gray-200\">\n          <h4 className=\"font-medium text-gray-900\">Configuración de Supabase</h4>\n        </div>\n        <div className=\"divide-y divide-gray-200\">\n          {Object.entries(environmentVars)?.map(([key, value]) => (\n            <div key={key} className=\"px-6 py-4 flex items-center justify-between\">\n              <div className=\"flex-1\">\n                <div className=\"font-medium text-gray-900\">{key}</div>\n                <div className=\"text-sm text-gray-500 mt-1 flex items-center gap-2\">\n                  {key?.includes('KEY') || key?.includes('SECRET') ? (\n                    <>\n                      <span>{showSecrets?.[key] ? value : '*********************'}</span>\n                      <button\n                        onClick={() => toggleSecretVisibility(key)}\n                        className=\"text-gray-400 hover:text-gray-600\"\n                      >\n                        {showSecrets?.[key] ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                      </button>\n                    </>\n                  ) : (\n                    <span className=\"font-mono\">{value}</span>\n                  )}\n                </div>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                {value !== 'Not configured' && !value?.includes('*') ? (\n                  <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800\">\n                    Configurado\n                  </span>\n                ) : (\n                  <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800\">\n                    Verificar\n                  </span>\n                )}\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderDatabaseTab = () => (\n    <div className=\"space-y-6\">\n      <h3 className=\"text-lg font-semibold text-gray-900\">\n        Configuración de Base de Datos\n      </h3>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <div className=\"bg-white border border-gray-200 rounded-lg p-6\">\n          <h4 className=\"font-medium text-gray-900 mb-4\">Estado de Conexión</h4>\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-gray-600\">Estado</span>\n              <div className=\"flex items-center gap-2\">\n                {getStatusIcon(systemHealth?.database?.status)}\n                <span className={`text-sm font-medium ${\n                  systemHealth?.database?.status === 'healthy' ? 'text-green-600' : 'text-red-600'\n                }`}>\n                  {systemHealth?.database?.status === 'healthy' ? 'Conectado' : 'Desconectado'}\n                </span>\n              </div>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-gray-600\">Tiempo de Respuesta</span>\n              <span className=\"text-sm font-medium text-gray-900\">\n                {systemHealth?.database?.responseTime}ms\n              </span>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-gray-600\">Conexiones Activas</span>\n              <span className=\"text-sm font-medium text-gray-900\">12/100</span>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white border border-gray-200 rounded-lg p-6\">\n          <h4 className=\"font-medium text-gray-900 mb-4\">Pool de Conexiones</h4>\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-gray-600\">Pool Size</span>\n              <span className=\"text-sm font-medium text-gray-900\">20</span>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-gray-600\">Conexiones en Uso</span>\n              <span className=\"text-sm font-medium text-gray-900\">12</span>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-gray-600\">Conexiones Libres</span>\n              <span className=\"text-sm font-medium text-gray-900\">8</span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"bg-white border border-gray-200 rounded-lg p-6\">\n        <h4 className=\"font-medium text-gray-900 mb-4\">Métricas de Rendimiento</h4>\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-blue-600\">156ms</div>\n            <div className=\"text-sm text-gray-500\">Avg Query Time</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-green-600\">1,247</div>\n            <div className=\"text-sm text-gray-500\">Queries/min</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-purple-600\">2.1GB</div>\n            <div className=\"text-sm text-gray-500\">Storage Used</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-orange-600\">99.9%</div>\n            <div className=\"text-sm text-gray-500\">Uptime</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderAuthTab = () => (\n    <div className=\"space-y-6\">\n      <h3 className=\"text-lg font-semibold text-gray-900\">\n        Configuración de Autenticación\n      </h3>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <div className=\"bg-white border border-gray-200 rounded-lg p-6\">\n          <h4 className=\"font-medium text-gray-900 mb-4\">Políticas RBAC</h4>\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-gray-600\">SuperAdmin</span>\n              <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800\">\n                Activo\n              </span>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-gray-600\">Admin</span>\n              <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800\">\n                Activo\n              </span>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-gray-600\">User</span>\n              <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800\">\n                Activo\n              </span>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white border border-gray-200 rounded-lg p-6\">\n          <h4 className=\"font-medium text-gray-900 mb-4\">Configuración JWT</h4>\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-gray-600\">Expiración</span>\n              <span className=\"text-sm font-medium text-gray-900\">24h</span>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-gray-600\">Refresh Token</span>\n              <span className=\"text-sm font-medium text-gray-900\">7d</span>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-gray-600\">Algoritmo</span>\n              <span className=\"text-sm font-medium text-gray-900\">HS256</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderHealthTab = () => (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h3 className=\"text-lg font-semibold text-gray-900\">\n          Estado del Sistema\n        </h3>\n        <button \n          onClick={loadSystemHealth}\n          className=\"px-3 py-2 bg-blue-600 text-white text-sm rounded-lg hover:bg-blue-700 flex items-center gap-2\"\n        >\n          <RefreshCw className=\"w-4 h-4\" />\n          Actualizar\n        </button>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <div className={`p-6 rounded-lg border ${getStatusColor(systemHealth?.database?.status)}`}>\n          <div className=\"flex items-center justify-between mb-2\">\n            <Database className=\"w-8 h-8\" />\n            {getStatusIcon(systemHealth?.database?.status)}\n          </div>\n          <h4 className=\"font-semibold\">Base de Datos</h4>\n          <p className=\"text-sm mt-1\">{systemHealth?.database?.responseTime}ms</p>\n        </div>\n\n        <div className={`p-6 rounded-lg border ${getStatusColor(systemHealth?.api?.status)}`}>\n          <div className=\"flex items-center justify-between mb-2\">\n            <Server className=\"w-8 h-8\" />\n            {getStatusIcon(systemHealth?.api?.status)}\n          </div>\n          <h4 className=\"font-semibold\">API</h4>\n          <p className=\"text-sm mt-1\">{systemHealth?.api?.responseTime}ms</p>\n        </div>\n\n        <div className=\"p-6 rounded-lg border bg-blue-50 border-blue-200 text-blue-600\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <Activity className=\"w-8 h-8\" />\n            <CheckCircle className=\"w-5 h-5\" />\n          </div>\n          <h4 className=\"font-semibold\">Memoria</h4>\n          <p className=\"text-sm mt-1\">{systemHealth?.memory?.percentage}% usado</p>\n        </div>\n\n        <div className={`p-6 rounded-lg border ${getStatusColor(systemHealth?.deployment?.status)}`}>\n          <div className=\"flex items-center justify-between mb-2\">\n            <Upload className=\"w-8 h-8\" />\n            {getStatusIcon(systemHealth?.deployment?.status)}\n          </div>\n          <h4 className=\"font-semibold\">Deployment</h4>\n          <p className=\"text-sm mt-1\">{systemHealth?.deployment?.version}</p>\n        </div>\n      </div>\n\n      <div className=\"bg-white border border-gray-200 rounded-lg p-6\">\n        <h4 className=\"font-medium text-gray-900 mb-4\">Alertas del Sistema</h4>\n        <div className=\"space-y-3\">\n          <div className=\"flex items-start gap-3 p-3 bg-green-50 border border-green-200 rounded-lg\">\n            <CheckCircle className=\"w-5 h-5 text-green-600 mt-0.5\" />\n            <div>\n              <div className=\"font-medium text-green-800\">Sistema funcionando correctamente</div>\n              <div className=\"text-sm text-green-600 mt-1\">Todos los servicios están operativos</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderDockerTab = () => (\n    <div className=\"space-y-6\">\n      <h3 className=\"text-lg font-semibold text-gray-900\">\n        Docker & Deployment\n      </h3>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <div className=\"bg-white border border-gray-200 rounded-lg p-6\">\n          <h4 className=\"font-medium text-gray-900 mb-4\">Estado de Contenedores</h4>\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-gray-600\">nova-hr-app</span>\n              <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800\">\n                Running\n              </span>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-gray-600\">nginx-proxy</span>\n              <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800\">\n                Running\n              </span>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white border border-gray-200 rounded-lg p-6\">\n          <h4 className=\"font-medium text-gray-900 mb-4\">Nginx Configuration</h4>\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-gray-600\">Gzip</span>\n              <CheckCircle className=\"w-5 h-5 text-green-600\" />\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-gray-600\">SSL Certificate</span>\n              <CheckCircle className=\"w-5 h-5 text-green-600\" />\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-gray-600\">SPA Fallback</span>\n              <CheckCircle className=\"w-5 h-5 text-green-600\" />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"bg-white border border-gray-200 rounded-lg p-6\">\n        <h4 className=\"font-medium text-gray-900 mb-4\">Deployment Pipeline</h4>\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"w-8 h-8 bg-green-100 rounded-full flex items-center justify-center\">\n              <CheckCircle className=\"w-5 h-5 text-green-600\" />\n            </div>\n            <div>\n              <div className=\"font-medium text-gray-900\">Build Successful</div>\n              <div className=\"text-sm text-gray-500\">Vendor chunks optimized, bundle size: 1.2MB</div>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-3\">\n            <div className=\"w-8 h-8 bg-green-100 rounded-full flex items-center justify-center\">\n              <CheckCircle className=\"w-5 h-5 text-green-600\" />\n            </div>\n            <div>\n              <div className=\"font-medium text-gray-900\">Tests Passed</div>\n              <div className=\"text-sm text-gray-500\">All payroll calculation tests passing</div>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-3\">\n            <div className=\"w-8 h-8 bg-green-100 rounded-full flex items-center justify-center\">\n              <CheckCircle className=\"w-5 h-5 text-green-600\" />\n            </div>\n            <div>\n              <div className=\"font-medium text-gray-900\">Deployment Complete</div>\n              <div className=\"text-sm text-gray-500\">v1.0.0 deployed at {systemHealth?.deployment?.lastDeploy}</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderQualityTab = () => (\n    <div className=\"space-y-6\">\n      <h3 className=\"text-lg font-semibold text-gray-900\">\n        Métricas de Calidad de Código\n      </h3>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <div className=\"bg-white border border-gray-200 rounded-lg p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h4 className=\"font-medium text-gray-900\">ESLint</h4>\n            <CheckCircle className=\"w-5 h-5 text-green-600\" />\n          </div>\n          <div className=\"space-y-2\">\n            <div className=\"flex justify-between\">\n              <span className=\"text-sm text-gray-600\">Errores</span>\n              <span className=\"text-sm font-medium text-gray-900\">0</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-sm text-gray-600\">Advertencias</span>\n              <span className=\"text-sm font-medium text-gray-900\">3</span>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white border border-gray-200 rounded-lg p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h4 className=\"font-medium text-gray-900\">Prettier</h4>\n            <CheckCircle className=\"w-5 h-5 text-green-600\" />\n          </div>\n          <div className=\"space-y-2\">\n            <div className=\"flex justify-between\">\n              <span className=\"text-sm text-gray-600\">Formateado</span>\n              <span className=\"text-sm font-medium text-gray-900\">100%</span>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white border border-gray-200 rounded-lg p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h4 className=\"font-medium text-gray-900\">Test Coverage</h4>\n            <CheckCircle className=\"w-5 h-5 text-green-600\" />\n          </div>\n          <div className=\"space-y-2\">\n            <div className=\"flex justify-between\">\n              <span className=\"text-sm text-gray-600\">Cobertura</span>\n              <span className=\"text-sm font-medium text-gray-900\">85%</span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"bg-white border border-gray-200 rounded-lg p-6\">\n        <h4 className=\"font-medium text-gray-900 mb-4\">Bundle Analysis</h4>\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-blue-600\">1.2MB</div>\n            <div className=\"text-sm text-gray-500\">Total Size</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-green-600\">456KB</div>\n            <div className=\"text-sm text-gray-500\">Vendor Chunk</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-purple-600\">234KB</div>\n            <div className=\"text-sm text-gray-500\">App Chunk</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-orange-600\">156KB</div>\n            <div className=\"text-sm text-gray-500\">Supabase Chunk</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderTabContent = () => {\n    switch (activeTab) {\n      case 'environment': return renderEnvironmentTab();\n      case 'database': return renderDatabaseTab();\n      case 'auth': return renderAuthTab();\n      case 'health': return renderHealthTab();\n      case 'docker': return renderDockerTab();\n      case 'quality': return renderQualityTab();\n      default: return renderEnvironmentTab();\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"flex flex-col items-center space-y-4\">\n          <RefreshCw className=\"w-8 h-8 text-blue-600 animate-spin\" />\n          <span className=\"text-gray-600\">Cargando configuración del sistema...</span>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <RequireRole allowedRoles={['SuperAdmin']}>\n      <div className=\"min-h-screen bg-gray-50\">\n        {/* Header */}\n        <div className=\"bg-white shadow-sm\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900\">\n                  Panel de Configuración de Producción\n                </h1>\n                <p className=\"text-gray-600 mt-1\">\n                  Control centralizado del entorno de producción Nova HR\n                </p>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <span className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${getStatusColor('healthy')}`}>\n                  {getStatusIcon('healthy')}\n                  <span className=\"ml-1\">Sistema Saludable</span>\n                </span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Navigation Tabs */}\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"border-b border-gray-200 bg-white\">\n            <nav className=\"flex space-x-8\" aria-label=\"Tabs\">\n              {tabs?.map((tab) => {\n                const Icon = tab?.icon;\n                return (\n                  <button\n                    key={tab?.id}\n                    onClick={() => setActiveTab(tab?.id)}\n                    className={`py-4 px-1 border-b-2 font-medium text-sm flex items-center gap-2 ${\n                      activeTab === tab?.id\n                        ? 'border-blue-500 text-blue-600' :'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                    }`}\n                  >\n                    <Icon className=\"w-4 h-4\" />\n                    {tab?.label}\n                  </button>\n                );\n              })}\n            </nav>\n          </div>\n        </div>\n\n        {/* Content */}\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          {renderTabContent()}\n        </div>\n\n        {/* Emergency Controls */}\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pb-8\">\n          <div className=\"bg-red-50 border border-red-200 rounded-lg p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h3 className=\"text-lg font-semibold text-red-800 mb-2\">\n                  Controles de Emergencia\n                </h3>\n                <p className=\"text-red-700 text-sm\">\n                  Usar solo en caso de emergencia. Estas acciones afectarán la disponibilidad del sistema.\n                </p>\n              </div>\n              <div className=\"flex space-x-3\">\n                <button className=\"px-4 py-2 bg-red-600 text-white text-sm rounded-lg hover:bg-red-700\">\n                  Modo Mantenimiento\n                </button>\n                <button className=\"px-4 py-2 bg-gray-600 text-white text-sm rounded-lg hover:bg-gray-700\">\n                  Rollback\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </RequireRole>\n  );\n};\n\nexport default ProductionEnvironmentConfigurationDashboard;","size_bytes":26994},"src/pages/real-time-payroll-automation-engine-with-weekly-processing/index.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { TrendingUp, Play, AlertCircle, Download, Filter } from 'lucide-react';\nimport { useAuth } from '../../contexts/AuthContext';\nimport brandingService from '../../services/brandingService';\nimport { supabase } from '../../lib/supabase';\nimport PayrollCalculationDashboard from './components/PayrollCalculationDashboard';\nimport EmployeePayrollGrid from './components/EmployeePayrollGrid';\n\nexport default function RealTimePayrollAutomationEngine() {\n  const { user, userProfile, isAdmin } = useAuth();\n  const [loading, setLoading] = useState(false);\n  const [payrollData, setPayrollData] = useState([]);\n  const [currentWeek, setCurrentWeek] = useState({\n    start: null,\n    end: null\n  });\n  const [automationStatus, setAutomationStatus] = useState('active');\n  const [lastProcessing, setLastProcessing] = useState(null);\n  const [nextCutoff, setNextCutoff] = useState(null);\n  const [processingSummary, setProcessingSummary] = useState({\n    totalEmployees: 0,\n    processedCount: 0,\n    totalPayroll: 0,\n    pendingApprovals: 0\n  });\n  const [filters, setFilters] = useState({\n    site: '',\n    status: 'all',\n    department: ''\n  });\n  const [sites, setSites] = useState([]);\n  const [error, setError] = useState('');\n\n  // Get current week dates (Sunday to Saturday)\n  const getCurrentWeekDates = () => {\n    const now = new Date();\n    const currentDay = now?.getDay();\n    const startOfWeek = new Date(now);\n    startOfWeek?.setDate(now?.getDate() - currentDay);\n    startOfWeek?.setHours(0, 0, 0, 0);\n    \n    const endOfWeek = new Date(startOfWeek);\n    endOfWeek?.setDate(startOfWeek?.getDate() + 6);\n    endOfWeek?.setHours(23, 59, 59, 999);\n\n    return {\n      start: startOfWeek?.toISOString()?.split('T')?.[0],\n      end: endOfWeek?.toISOString()?.split('T')?.[0]\n    };\n  };\n\n  // Calculate next Sunday cutoff\n  const getNextCutoff = () => {\n    const now = new Date();\n    const currentDay = now?.getDay();\n    const nextSunday = new Date(now);\n    nextSunday?.setDate(now?.getDate() + (7 - currentDay));\n    nextSunday?.setHours(23, 59, 0, 0);\n    return nextSunday;\n  };\n\n  // Load construction sites for filtering\n  const loadSites = async () => {\n    try {\n      const { data, error } = await supabase\n        ?.from('construction_sites')\n        ?.select('id, name')\n        ?.eq('is_active', true)\n        ?.order('name');\n\n      if (error) throw error;\n      setSites(data || []);\n    } catch (error) {\n      console.error('Error loading sites:', error);\n    }\n  };\n\n  // Load real-time payroll data\n  const loadPayrollData = async () => {\n    if (!currentWeek?.start) return;\n    \n    setLoading(true);\n    setError('');\n\n    try {\n      let query = supabase\n        ?.from('employee_profiles')\n        ?.select(`\n          id,\n          employee_id,\n          full_name,\n          position,\n          hourly_rate,\n          daily_salary,\n          salary_type,\n          status,\n          site_id,\n          construction_sites:site_id (\n            id,\n            name\n          ),\n          payroll_estimations!inner (\n            week_start,\n            week_end,\n            regular_hours,\n            overtime_hours,\n            base_pay,\n            overtime_pay,\n            bonuses,\n            deductions,\n            gross_total,\n            net_total,\n            updated_at\n          )\n        `)\n        ?.eq('status', 'active')\n        ?.eq('payroll_estimations.week_start', currentWeek?.start);\n\n      // Apply filters\n      if (filters?.site) {\n        query = query?.eq('site_id', filters?.site);\n      }\n\n      const { data, error } = await query?.order('full_name');\n\n      if (error) throw error;\n\n      const processedData = data?.map(emp => ({\n        id: emp?.id,\n        employeeId: emp?.employee_id,\n        name: emp?.full_name,\n        position: emp?.position,\n        site: emp?.construction_sites?.name || 'Sin asignar',\n        siteId: emp?.site_id,\n        salaryType: emp?.salary_type,\n        hourlyRate: parseFloat(emp?.hourly_rate || 0),\n        dailySalary: parseFloat(emp?.daily_salary || 0),\n        payroll: emp?.payroll_estimations?.[0] ? {\n          weekStart: emp?.payroll_estimations?.[0]?.week_start,\n          weekEnd: emp?.payroll_estimations?.[0]?.week_end,\n          regularHours: parseFloat(emp?.payroll_estimations?.[0]?.regular_hours || 0),\n          overtimeHours: parseFloat(emp?.payroll_estimations?.[0]?.overtime_hours || 0),\n          basePay: parseFloat(emp?.payroll_estimations?.[0]?.base_pay || 0),\n          overtimePay: parseFloat(emp?.payroll_estimations?.[0]?.overtime_pay || 0),\n          bonuses: parseFloat(emp?.payroll_estimations?.[0]?.bonuses || 0),\n          deductions: parseFloat(emp?.payroll_estimations?.[0]?.deductions || 0),\n          grossTotal: parseFloat(emp?.payroll_estimations?.[0]?.gross_total || 0),\n          netTotal: parseFloat(emp?.payroll_estimations?.[0]?.net_total || 0),\n          lastUpdated: emp?.payroll_estimations?.[0]?.updated_at\n        } : null\n      })) || [];\n\n      setPayrollData(processedData);\n\n      // Update summary\n      const summary = {\n        totalEmployees: processedData?.length,\n        processedCount: processedData?.filter(emp => emp?.payroll)?.length,\n        totalPayroll: processedData?.reduce((sum, emp) => sum + (emp?.payroll?.grossTotal || 0), 0),\n        pendingApprovals: processedData?.filter(emp => emp?.payroll && emp?.payroll?.grossTotal > 0)?.length\n      };\n\n      setProcessingSummary(summary);\n\n    } catch (error) {\n      setError(`Error cargando datos de nómina: ${error?.message}`);\n      console.error('Error loading payroll data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Trigger payroll calculation for all employees\n  const triggerAutomaticCalculation = async () => {\n    if (!currentWeek?.start) return;\n\n    setLoading(true);\n    setError('');\n\n    try {\n      // Get all active employees\n      const { data: employees, error: empError } = await supabase\n        ?.from('employee_profiles')\n        ?.select('id')\n        ?.eq('status', 'active');\n\n      if (empError) throw empError;\n\n      // Calculate payroll for each employee using the database function\n      let processedCount = 0;\n      const calculationPromises = employees?.map(async (emp) => {\n        try {\n          const { error: calcError } = await supabase\n            ?.rpc('calculate_weekly_payroll', {\n              p_employee_id: emp?.id,\n              p_week_start: currentWeek?.start\n            });\n\n          if (!calcError) {\n            processedCount++;\n          }\n        } catch (error) {\n          console.error(`Error calculating payroll for employee ${emp?.id}:`, error);\n        }\n      });\n\n      await Promise.all(calculationPromises || []);\n\n      // Log the bulk processing activity\n      await supabase?.from('logs_actividad')?.insert({\n        usuario_id: user?.id,\n        rol: userProfile?.role,\n        accion: 'bulk_payroll_calculation',\n        modulo: 'Payroll Automation',\n        descripcion: `Cálculo automático de nómina para ${processedCount} empleados - Semana ${currentWeek?.start}`\n      });\n\n      setLastProcessing(new Date());\n      \n      // Reload data to show updated calculations\n      await loadPayrollData();\n\n    } catch (error) {\n      setError(`Error en procesamiento automático: ${error?.message}`);\n      console.error('Error in automatic calculation:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Export payroll data\n  const exportPayrollData = async () => {\n    try {\n      const csvContent = [\n        ['Empleado', 'Sitio', 'Horas Regulares', 'Horas Extra', 'Pago Base', 'Pago Extra', 'Bonos', 'Deducciones', 'Total Bruto', 'Total Neto'],\n        ...payrollData?.map(emp => [\n          emp?.name,\n          emp?.site,\n          emp?.payroll?.regularHours || 0,\n          emp?.payroll?.overtimeHours || 0,\n          brandingService?.formatCurrency(emp?.payroll?.basePay || 0),\n          brandingService?.formatCurrency(emp?.payroll?.overtimePay || 0),\n          brandingService?.formatCurrency(emp?.payroll?.bonuses || 0),\n          brandingService?.formatCurrency(emp?.payroll?.deductions || 0),\n          brandingService?.formatCurrency(emp?.payroll?.grossTotal || 0),\n          brandingService?.formatCurrency(emp?.payroll?.netTotal || 0)\n        ])\n      ]?.map(row => row?.join(','))?.join('\\n');\n\n      const blob = new Blob([csvContent], { type: 'text/csv' });\n      const url = window.URL?.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `nomina_${currentWeek?.start}.csv`;\n      document.body?.appendChild(a);\n      a?.click();\n      document.body?.removeChild(a);\n      window.URL?.revokeObjectURL(url);\n    } catch (error) {\n      setError('Error al exportar datos');\n    }\n  };\n\n  // Real-time subscription to payroll changes\n  useEffect(() => {\n    if (!currentWeek?.start) return;\n\n    const channel = supabase\n      ?.channel('payroll_estimations_changes')\n      ?.on(\n        'postgres_changes',\n        {\n          event: '*',\n          schema: 'public',\n          table: 'payroll_estimations',\n          filter: `week_start=eq.${currentWeek?.start}`\n        },\n        (payload) => {\n          console.log('Payroll estimation updated:', payload);\n          // Reload data when estimations change\n          loadPayrollData();\n        }\n      )\n      ?.on(\n        'postgres_changes',\n        {\n          event: '*',\n          schema: 'public',\n          table: 'attendance_records'\n        },\n        (payload) => {\n          console.log('Attendance updated:', payload);\n          // Recalculate payroll when attendance changes\n          if (automationStatus === 'active') {\n            setTimeout(() => {\n              triggerAutomaticCalculation();\n            }, 2000); // Delay to allow attendance processing to complete\n          }\n        }\n      )\n      ?.subscribe();\n\n    return () => {\n      supabase?.removeChannel(channel);\n    };\n  }, [currentWeek?.start, automationStatus]);\n\n  useEffect(() => {\n    const week = getCurrentWeekDates();\n    setCurrentWeek(week);\n    setNextCutoff(getNextCutoff());\n  }, []);\n\n  useEffect(() => {\n    if (currentWeek?.start) {\n      loadPayrollData();\n      loadSites();\n    }\n  }, [currentWeek?.start, filters?.site]);\n\n  if (!isAdmin()) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <AlertCircle className=\"h-16 w-16 text-red-500 mx-auto mb-4\" />\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">Acceso Denegado</h1>\n          <p className=\"text-gray-600\">No tienes permisos para acceder al motor de nómina.</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white shadow-sm border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900 flex items-center\">\n                <TrendingUp className=\"h-8 w-8 text-blue-600 mr-3\" />\n                Motor de Nómina en Tiempo Real\n              </h1>\n              <p className=\"mt-2 text-gray-600\">\n                Procesamiento automático semanal con cortes los domingos a medianoche\n              </p>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <div className={`px-3 py-1 rounded-full text-sm font-medium ${\n                automationStatus === 'active' ?'bg-green-100 text-green-800' :'bg-red-100 text-red-800'\n              }`}>\n                {automationStatus === 'active' ? 'Automatización Activa' : 'Automatización Pausada'}\n              </div>\n              <button\n                onClick={() => setAutomationStatus(automationStatus === 'active' ? 'paused' : 'active')}\n                className=\"px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-colors\"\n              >\n                {automationStatus === 'active' ? 'Pausar' : 'Activar'}\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n      {/* Error Alert */}\n      {error && (\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n          <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n            <div className=\"flex items-center\">\n              <AlertCircle className=\"h-5 w-5 text-red-500 mr-2\" />\n              <span className=\"text-red-700\">{error}</span>\n            </div>\n          </div>\n        </div>\n      )}\n      {/* Main Content */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Left Panel: Calculation Dashboard */}\n          <div className=\"space-y-6\">\n            <PayrollCalculationDashboard\n              currentWeek={currentWeek}\n              nextCutoff={nextCutoff}\n              lastProcessing={lastProcessing}\n              processingSummary={processingSummary}\n              automationStatus={automationStatus}\n              onTriggerCalculation={triggerAutomaticCalculation}\n              loading={loading}\n            />\n\n            {/* Quick Actions */}\n            <div className=\"bg-white rounded-lg shadow p-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4 flex items-center\">\n                <Play className=\"h-5 w-5 text-blue-600 mr-2\" />\n                Acciones Rápidas\n              </h3>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <button\n                  onClick={triggerAutomaticCalculation}\n                  disabled={loading}\n                  className=\"flex items-center justify-center px-4 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:bg-gray-400\"\n                >\n                  <TrendingUp className=\"h-4 w-4 mr-2\" />\n                  {loading ? 'Procesando...' : 'Calcular Ahora'}\n                </button>\n                <button\n                  onClick={exportPayrollData}\n                  className=\"flex items-center justify-center px-4 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors\"\n                >\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Exportar CSV\n                </button>\n              </div>\n            </div>\n\n            {/* Filters */}\n            <div className=\"bg-white rounded-lg shadow p-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4 flex items-center\">\n                <Filter className=\"h-5 w-5 text-gray-600 mr-2\" />\n                Filtros\n              </h3>\n              <div className=\"grid grid-cols-1 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Sitio de Construcción\n                  </label>\n                  <select\n                    value={filters?.site}\n                    onChange={(e) => setFilters({...filters, site: e?.target?.value})}\n                    className=\"w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  >\n                    <option value=\"\">Todos los sitios</option>\n                    {sites?.map(site => (\n                      <option key={site?.id} value={site?.id}>\n                        {site?.name}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Right Panel: Employee Payroll Grid */}\n          <div className=\"space-y-6\">\n            <EmployeePayrollGrid\n              payrollData={payrollData}\n              loading={loading}\n              currentWeek={currentWeek}\n              onEmployeeUpdate={loadPayrollData}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":16072},"src/pages/real-time-payroll-estimation-dashboard-with-zero-state-handling/index.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useAuth } from '../../contexts/AuthContext';\nimport RoleBasedSidebar from '../../components/ui/RoleBasedSidebar';\nimport NavigationBreadcrumb from '../../components/ui/NavigationBreadcrumb';\nimport UserContextHeader from '../../components/ui/UserContextHeader';\nimport NotificationCenter from '../../components/ui/NotificationCenter';\n\nimport Icon from '../../components/AppIcon';\nimport Button from '../../components/ui/Button';\nimport PayrollEstimationCards from './components/PayrollEstimationCards';\nimport WeeklyTimeline from './components/WeeklyTimeline';\nimport PayrollSummaryTable from './components/PayrollSummaryTable';\nimport ZeroStateDisplay from './components/ZeroStateDisplay';\nimport { getCurrentWeekPayroll, calculateWeeklyPayroll, bulkCalculatePayroll } from '../../services/payrollService';\nimport { getEmployeesWithFilters } from '../../services/employeeService';\n\nconst RealTimePayrollEstimationDashboardWithZeroStateHandling = () => {\n  const { user, userProfile, signOut, hasRole } = useAuth();\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\n  const [payrollData, setPayrollData] = useState([]);\n  const [employees, setEmployees] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [calculating, setCalculating] = useState(false);\n  const [error, setError] = useState('');\n  const [notification, setNotification] = useState('');\n  const [selectedEmployees, setSelectedEmployees] = useState([]);\n  const [weekSummary, setWeekSummary] = useState({\n    totalEmployees: 0,\n    totalRegularHours: 0,\n    totalOvertimeHours: 0,\n    totalGrossPay: 0,\n    totalNetPay: 0,\n    averageDailyPay: 0\n  });\n\n  // Get current week dates\n  const getCurrentWeekDates = () => {\n    const today = new Date();\n    const dayOfWeek = today?.getDay();\n    const daysToMonday = dayOfWeek === 0 ? 6 : dayOfWeek - 1;\n    \n    const weekStart = new Date(today);\n    weekStart?.setDate(today?.getDate() - daysToMonday);\n    weekStart?.setHours(0, 0, 0, 0);\n    \n    const weekEnd = new Date(weekStart);\n    weekEnd?.setDate(weekStart?.getDate() + 6);\n    weekEnd?.setHours(23, 59, 59, 999);\n    \n    return { weekStart, weekEnd };\n  };\n\n  const { weekStart, weekEnd } = getCurrentWeekDates();\n\n  // Load payroll data\n  const loadPayrollData = async () => {\n    try {\n      setLoading(true);\n      setError('');\n      \n      const data = await getCurrentWeekPayroll();\n      setPayrollData(data);\n      \n      // Calculate summary\n      const summary = data?.reduce((acc, record) => {\n        acc.totalEmployees += 1;\n        acc.totalRegularHours += parseFloat(record?.regular_hours || 0);\n        acc.totalOvertimeHours += parseFloat(record?.overtime_hours || 0);\n        acc.totalGrossPay += parseFloat(record?.gross_total || 0);\n        acc.totalNetPay += parseFloat(record?.net_total || 0);\n        return acc;\n      }, {\n        totalEmployees: 0,\n        totalRegularHours: 0,\n        totalOvertimeHours: 0,\n        totalGrossPay: 0,\n        totalNetPay: 0\n      });\n\n      summary.averageDailyPay = summary?.totalEmployees > 0 \n        ? summary?.totalGrossPay / summary?.totalEmployees / 7 \n        : 0;\n\n      setWeekSummary(summary);\n    } catch (err) {\n      setError(`Error al cargar datos de nómina: ${err?.message || 'Error desconocido'}`);\n      setPayrollData([]);\n      setWeekSummary({\n        totalEmployees: 0,\n        totalRegularHours: 0,\n        totalOvertimeHours: 0,\n        totalGrossPay: 0,\n        totalNetPay: 0,\n        averageDailyPay: 0\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Load active employees\n  const loadEmployees = async () => {\n    try {\n      const employeeData = await getEmployeesWithFilters({\n        status: ['active']\n      });\n      setEmployees(employeeData || []);\n    } catch (err) {\n      console.error('Error loading employees:', err);\n    }\n  };\n\n  useEffect(() => {\n    loadPayrollData();\n    loadEmployees();\n  }, []);\n\n  // Auto-refresh every 30 seconds\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (!loading && !calculating) {\n        loadPayrollData();\n      }\n    }, 30000);\n\n    return () => clearInterval(interval);\n  }, [loading, calculating]);\n\n  const handleCalculateAll = async () => {\n    if (employees?.length === 0) {\n      setNotification('No hay empleados activos para calcular');\n      setTimeout(() => setNotification(''), 3000);\n      return;\n    }\n\n    try {\n      setCalculating(true);\n      setError('');\n      \n      const employeeIds = employees?.map(emp => emp?.id);\n      const weekStartStr = weekStart?.toISOString()?.split('T')?.[0];\n      \n      const results = await bulkCalculatePayroll(employeeIds, weekStartStr);\n      \n      const successful = results?.filter(r => r?.success)?.length;\n      const failed = results?.filter(r => !r?.success)?.length;\n      \n      if (failed > 0) {\n        setNotification(`Cálculo completado: ${successful} exitosos, ${failed} fallidos`);\n      } else {\n        setNotification(`Nómina calculada para ${successful} empleados`);\n      }\n      \n      setTimeout(() => setNotification(''), 5000);\n      \n      // Refresh data\n      await loadPayrollData();\n    } catch (err) {\n      setError(`Error al calcular nómina: ${err?.message}`);\n      setTimeout(() => setError(''), 5000);\n    } finally {\n      setCalculating(false);\n    }\n  };\n\n  const handleCalculateEmployee = async (employeeId) => {\n    try {\n      setCalculating(true);\n      const weekStartStr = weekStart?.toISOString()?.split('T')?.[0];\n      \n      await calculateWeeklyPayroll(employeeId, weekStartStr);\n      \n      setNotification('Nómina recalculada');\n      setTimeout(() => setNotification(''), 3000);\n      \n      await loadPayrollData();\n    } catch (err) {\n      setError(`Error al recalcular: ${err?.message}`);\n      setTimeout(() => setError(''), 5000);\n    } finally {\n      setCalculating(false);\n    }\n  };\n\n  const handleExportPayroll = () => {\n    const dataToExport = selectedEmployees?.length > 0\n      ? payrollData?.filter(record => selectedEmployees?.includes(record?.employee_id))\n      : payrollData;\n\n    console.log('Exporting payroll data:', dataToExport);\n    \n    setNotification('Exportación de nómina iniciada');\n    setTimeout(() => setNotification(''), 3000);\n  };\n\n  const handleLogout = async () => {\n    try {\n      await signOut();\n    } catch (err) {\n      setError(`Error al cerrar sesión: ${err?.message}`);\n    }\n  };\n\n  const formatDateRange = (start, end) => {\n    const options = { day: 'numeric', month: 'short' };\n    return `${start?.toLocaleDateString('es-ES', options)} - ${end?.toLocaleDateString('es-ES', options)}`;\n  };\n\n  const hasPayrollData = payrollData?.length > 0;\n  const hasActiveEmployees = employees?.length > 0;\n\n  return (\n    <>\n      <Helmet>\n        <title>Estimación de Nómina en Tiempo Real - AsistenciaPro</title>\n        <meta name=\"description\" content=\"Dashboard de estimaciones de nómina con actualizaciones en tiempo real y manejo de estados vacíos\" />\n      </Helmet>\n      <div className=\"min-h-screen bg-background\">\n        {/* Notifications */}\n        {notification && (\n          <div className=\"fixed top-4 right-4 z-50 bg-green-500 text-white px-4 py-2 rounded-lg shadow-lg\">\n            {notification}\n          </div>\n        )}\n\n        {error && (\n          <div className=\"fixed top-4 right-4 z-50 bg-red-500 text-white px-4 py-2 rounded-lg shadow-lg\">\n            {error}\n            <button \n              onClick={() => setError('')}\n              className=\"ml-2 text-white hover:text-gray-200\"\n            >\n              ×\n            </button>\n          </div>\n        )}\n\n        {/* Sidebar */}\n        <RoleBasedSidebar \n          isCollapsed={sidebarCollapsed}\n          userRole={userProfile?.role?.toLowerCase()}\n        />\n\n        {/* Main Content */}\n        <div className={`transition-all duration-300 ${sidebarCollapsed ? 'ml-16' : 'ml-60'} pb-16 md:pb-0`}>\n          {/* Header */}\n          <header className=\"bg-card border-b border-border px-6 py-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-4\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  iconName={sidebarCollapsed ? 'ChevronRight' : 'ChevronLeft'}\n                  onClick={() => setSidebarCollapsed(!sidebarCollapsed)}\n                  className=\"hidden md:flex\"\n                />\n                <div>\n                  <h1 className=\"text-xl font-semibold text-foreground\">\n                    Estimación de Nómina\n                  </h1>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Semana del {formatDateRange(weekStart, weekEnd)}\n                  </p>\n                </div>\n                \n                {/* Real-time indicator */}\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\" />\n                  <span className=\"text-xs text-muted-foreground\">Tiempo Real</span>\n                </div>\n              </div>\n\n              <div className=\"flex items-center space-x-4\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => loadPayrollData()}\n                  disabled={loading}\n                  iconName={loading ? 'Loader2' : 'RefreshCw'}\n                  className={loading ? 'animate-spin' : ''}\n                >\n                  Actualizar\n                </Button>\n\n                <NotificationCenter />\n                <UserContextHeader\n                  user={{\n                    name: userProfile?.full_name || 'Usuario',\n                    role: userProfile?.role === 'superadmin' ? 'SuperAdmin' : \n                          userProfile?.role === 'admin' ? 'Admin' : \n                          userProfile?.role?.charAt(0)?.toUpperCase() + userProfile?.role?.slice(1),\n                    site: 'Sistema Central'\n                  }}\n                  onLogout={handleLogout}\n                />\n              </div>\n            </div>\n          </header>\n\n          {/* Content */}\n          <main className=\"p-6\">\n            <NavigationBreadcrumb />\n\n            {/* Quick Actions Bar */}\n            <div className=\"mb-6 flex items-center justify-between\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"text-sm text-muted-foreground\">\n                  {hasPayrollData ? (\n                    <>Mostrando estimaciones para {payrollData?.length} empleados</>\n                  ) : hasActiveEmployees ? (\n                    <>No hay datos de nómina para esta semana</>\n                  ) : (\n                    <>No hay empleados activos</>\n                  )}\n                </div>\n                \n                {calculating && (\n                  <div className=\"flex items-center space-x-2 text-blue-600\">\n                    <div className=\"w-4 h-4 border-2 border-blue-600 border-t-transparent rounded-full animate-spin\" />\n                    <span className=\"text-sm\">Calculando...</span>\n                  </div>\n                )}\n              </div>\n\n              <div className=\"flex items-center space-x-2\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={handleExportPayroll}\n                  disabled={!hasPayrollData || calculating}\n                  iconName=\"Download\"\n                >\n                  Exportar\n                </Button>\n\n                <Button\n                  size=\"sm\"\n                  onClick={handleCalculateAll}\n                  disabled={!hasActiveEmployees || calculating}\n                  iconName=\"Calculator\"\n                >\n                  {calculating ? 'Calculando...' : 'Calcular Todo'}\n                </Button>\n              </div>\n            </div>\n\n            {/* Main Content Area */}\n            {!hasActiveEmployees ? (\n              <ZeroStateDisplay \n                type=\"no-employees\"\n                title=\"No hay empleados activos\"\n                description=\"Primero debe registrar empleados activos en el sistema para poder calcular estimaciones de nómina.\"\n                actionLabel=\"Gestionar Empleados\"\n                onAction={() => window.location.href = '/admin/employees'}\n              />\n            ) : !hasPayrollData ? (\n              <ZeroStateDisplay \n                type=\"no-data\"\n                title=\"No hay datos de asistencia esta semana\"\n                description=\"Las estimaciones aparecerán automáticamente cuando los empleados registren su asistencia. Mientras tanto, todos los valores se muestran en $0.00 MXN.\"\n                actionLabel=\"Calcular Estimaciones\"\n                onAction={handleCalculateAll}\n                loading={calculating}\n              />\n            ) : (\n              <div className=\"space-y-6\">\n                {/* Estimation Cards */}\n                <PayrollEstimationCards \n                  summary={weekSummary}\n                  weekStart={weekStart}\n                  weekEnd={weekEnd}\n                  loading={loading}\n                />\n\n                {/* Weekly Timeline */}\n                <WeeklyTimeline \n                  weekStart={weekStart}\n                  payrollData={payrollData}\n                  loading={loading}\n                />\n\n                {/* Payroll Summary Table */}\n                <PayrollSummaryTable \n                  payrollData={payrollData}\n                  selectedEmployees={selectedEmployees}\n                  onSelectionChange={setSelectedEmployees}\n                  onCalculateEmployee={handleCalculateEmployee}\n                  onExportEmployee={(employee) => {\n                    setSelectedEmployees([employee?.employee_id]);\n                    handleExportPayroll();\n                  }}\n                  calculating={calculating}\n                  loading={loading}\n                />\n              </div>\n            )}\n\n            {/* Currency Format Notice */}\n            <div className=\"mt-8 p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n              <div className=\"flex items-center space-x-2\">\n                <Icon name=\"Info\" className=\"w-5 h-5 text-blue-600\" />\n                <div>\n                  <p className=\"text-sm text-blue-800\">\n                    <strong>Formato de Moneda:</strong> Todos los valores se muestran en Pesos Mexicanos (MXN) con formato local mexicano.\n                  </p>\n                  <p className=\"text-xs text-blue-600 mt-1\">\n                    Las estimaciones se actualizan automáticamente cada 30 segundos basadas en los registros de asistencia más recientes.\n                  </p>\n                </div>\n              </div>\n            </div>\n          </main>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default RealTimePayrollEstimationDashboardWithZeroStateHandling;","size_bytes":15110},"src/pages/role-based-access-control-management-system/index.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { Users, Shield, Crown, AlertTriangle, CheckCircle, Search, RefreshCw, Eye } from 'lucide-react';\nimport BrandedHeader from '../../components/ui/BrandedHeader';\nimport BrandedFooter from '../../components/ui/BrandedFooter';\nimport { supabase } from '../../lib/supabase';\n\nexport default function RoleBasedAccessControlManagementSystem() {\n  const { user, userProfile, isSuperAdmin } = useAuth();\n  const [activeTab, setActiveTab] = useState('roles');\n  const [users, setUsers] = useState([]);\n  const [roles, setRoles] = useState([]);\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [roleFilter, setRoleFilter] = useState('all');\n  const [isLoading, setIsLoading] = useState(true);\n  const [isSaving, setSaving] = useState(false);\n  const [saveMessage, setSaveMessage] = useState('');\n  const [showRoleModal, setShowRoleModal] = useState(false);\n  const [editingRole, setEditingRole] = useState(null);\n  const [bulkAction, setBulkAction] = useState('');\n\n  const roleHierarchy = [\n    {\n      id: 1,\n      nombre: 'user',\n      descripcion: 'Can view profile, history, and notifications',\n      level: 1,\n      color: 'green',\n      permissions: [\n        'view_profile',\n        'view_history', \n        'view_notifications',\n        'check_in_out'\n      ]\n    },\n    {\n      id: 2,\n      nombre: 'supervisor',\n      descripcion: 'Can view and register attendance for their team',\n      level: 2,\n      color: 'yellow',\n      permissions: [\n        'view_profile',\n        'view_history',\n        'view_notifications',\n        'check_in_out',\n        'manage_team_attendance',\n        'view_team_reports',\n        'register_incidents'\n      ]\n    },\n    {\n      id: 3,\n      nombre: 'admin',\n      descripcion: 'Access to payroll, reports, and incident management',\n      level: 3,\n      color: 'red',\n      permissions: [\n        'view_profile',\n        'view_history',\n        'view_notifications',\n        'check_in_out',\n        'manage_team_attendance',\n        'view_team_reports',\n        'register_incidents',\n        'access_payroll',\n        'generate_reports',\n        'manage_employees',\n        'manage_construction_sites',\n        'view_all_incidents'\n      ]\n    },\n    {\n      id: 4,\n      nombre: 'superadmin',\n      descripcion: 'Full system access including visual configuration',\n      level: 4,\n      color: 'purple',\n      permissions: [\n        'full_system_access',\n        'visual_configuration',\n        'system_logs',\n        'role_management',\n        'user_management',\n        'database_management',\n        'security_configuration',\n        'backup_restore',\n        'system_monitoring'\n      ]\n    }\n  ];\n\n  useEffect(() => {\n    if (!isSuperAdmin?.()) {\n      return;\n    }\n    loadData();\n  }, []);\n\n  const loadData = async () => {\n    setIsLoading(true);\n    try {\n      // Load users\n      const { data: usersData, error: usersError } = await supabase\n        ?.from('usuarios')\n        ?.select('*')\n        ?.order('created_at', { ascending: false });\n\n      if (usersError) {\n        console.error('Error loading users:', usersError);\n      } else {\n        setUsers(usersData || []);\n      }\n\n      // Load roles (from our predefined hierarchy)\n      setRoles(roleHierarchy);\n\n      await logActivity('role_management_access', 'Role Management', 'Accessed role-based access control system');\n\n    } catch (error) {\n      console.error('Error loading data:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const logActivity = async (action, module, description) => {\n    try {\n      await supabase?.from('logs_actividad')?.insert({\n        usuario_id: user?.id,\n        rol: userProfile?.rol,\n        accion: action,\n        modulo: module,\n        descripcion: description\n      });\n    } catch (error) {\n      console.error('Failed to log activity:', error);\n    }\n  };\n\n  const filteredUsers = users?.filter(user => {\n    const matchesSearch = user?.nombre?.toLowerCase()?.includes(searchTerm?.toLowerCase()) ||\n                         user?.correo?.toLowerCase()?.includes(searchTerm?.toLowerCase());\n    const matchesRole = roleFilter === 'all' || user?.rol === roleFilter;\n    return matchesSearch && matchesRole;\n  });\n\n  const handleUserRoleUpdate = async (userId, newRole) => {\n    setSaving(true);\n    setSaveMessage('');\n\n    try {\n      const { error } = await supabase\n        ?.from('usuarios')\n        ?.update({ rol: newRole })\n        ?.eq('id', userId);\n\n      if (error) {\n        setSaveMessage(`Error: ${error?.message}`);\n      } else {\n        setSaveMessage(`Role updated successfully!`);\n        await loadData();\n        await logActivity('role_update', 'Role Management', `Updated user role to ${newRole}`);\n      }\n    } catch (error) {\n      setSaveMessage(`Error: ${error?.message}`);\n    } finally {\n      setSaving(false);\n      setTimeout(() => setSaveMessage(''), 3000);\n    }\n  };\n\n  const handleBulkRoleUpdate = async () => {\n    if (!bulkAction || selectedUsers?.length === 0) {\n      setSaveMessage('Please select users and an action');\n      return;\n    }\n\n    setSaving(true);\n    setSaveMessage('');\n\n    try {\n      const { error } = await supabase\n        ?.from('usuarios')\n        ?.update({ rol: bulkAction })\n        ?.in('id', selectedUsers);\n\n      if (error) {\n        setSaveMessage(`Error: ${error?.message}`);\n      } else {\n        setSaveMessage(`Bulk role update completed for ${selectedUsers?.length} users!`);\n        setSelectedUsers([]);\n        setBulkAction('');\n        await loadData();\n        await logActivity('bulk_role_update', 'Role Management', `Updated ${selectedUsers?.length} users to ${bulkAction} role`);\n      }\n    } catch (error) {\n      setSaveMessage(`Error: ${error?.message}`);\n    } finally {\n      setSaving(false);\n      setTimeout(() => setSaveMessage(''), 3000);\n    }\n  };\n\n  const getRoleColor = (roleName) => {\n    const role = roleHierarchy?.find(r => r?.nombre === roleName);\n    return role?.color || 'gray';\n  };\n\n  const getRolePermissions = (roleName) => {\n    const role = roleHierarchy?.find(r => r?.nombre === roleName);\n    return role?.permissions || [];\n  };\n\n  const getPermissionCount = (roleName) => {\n    return getRolePermissions(roleName)?.length;\n  };\n\n  if (!isSuperAdmin?.()) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <Shield className=\"w-16 h-16 text-red-500 mx-auto mb-4\" />\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">Access Denied</h1>\n          <p className=\"text-gray-600\">Only SuperAdmins can access the Role-Based Access Control Management System</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"text-center\">\n          <RefreshCw className=\"w-8 h-8 animate-spin text-blue-600 mx-auto mb-4\" />\n          <p className=\"text-gray-600\">Loading role management system...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <BrandedHeader />\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n            Role-Based Access Control Management System\n          </h1>\n          <p className=\"text-gray-600\">\n            Manage user roles, permissions, and system security controls\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8\">\n          {/* Left Panel - Role Hierarchy (30%) */}\n          <div className=\"lg:col-span-1\">\n            <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4 flex items-center\">\n                <Crown className=\"w-5 h-5 mr-2 text-yellow-600\" />\n                Role Hierarchy\n              </h3>\n              \n              <div className=\"space-y-4\">\n                {roleHierarchy?.map((role) => (\n                  <div\n                    key={role?.id}\n                    className={`border-l-4 border-${role?.color}-500 bg-${role?.color}-50 p-3 rounded-r-md`}\n                  >\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className={`px-2 py-1 rounded text-xs font-medium bg-${role?.color}-100 text-${role?.color}-800`}>\n                        Level {role?.level}\n                      </span>\n                      <span className=\"text-xs text-gray-500\">\n                        {getPermissionCount(role?.nombre)} permissions\n                      </span>\n                    </div>\n                    <h4 className=\"font-medium text-gray-900 capitalize\">{role?.nombre}</h4>\n                    <p className=\"text-xs text-gray-600 mt-1\">{role?.descripcion}</p>\n                  </div>\n                ))}\n              </div>\n\n              <div className=\"mt-6 p-4 bg-blue-50 rounded-md\">\n                <h4 className=\"font-medium text-blue-900 mb-2\">Security Note</h4>\n                <p className=\"text-xs text-blue-700\">\n                  Higher-level roles inherit all permissions from lower levels. Changes take effect immediately.\n                </p>\n              </div>\n            </div>\n          </div>\n\n          {/* Right Panel - Permission Management (70%) */}\n          <div className=\"lg:col-span-3 space-y-6\">\n            {/* Tab Navigation */}\n            <div className=\"bg-white rounded-lg shadow-sm border border-gray-200\">\n              <div className=\"border-b border-gray-200\">\n                <nav className=\"flex space-x-8 px-6\">\n                  <button\n                    onClick={() => setActiveTab('roles')}\n                    className={`py-4 px-1 border-b-2 font-medium text-sm ${\n                      activeTab === 'roles' ?'border-blue-500 text-blue-600' :'border-transparent text-gray-500 hover:text-gray-700'\n                    }`}\n                  >\n                    <Users className=\"w-4 h-4 inline mr-2\" />\n                    User Role Assignment\n                  </button>\n                  <button\n                    onClick={() => setActiveTab('permissions')}\n                    className={`py-4 px-1 border-b-2 font-medium text-sm ${\n                      activeTab === 'permissions' ?'border-blue-500 text-blue-600' :'border-transparent text-gray-500 hover:text-gray-700'\n                    }`}\n                  >\n                    <Shield className=\"w-4 h-4 inline mr-2\" />\n                    Permission Matrix\n                  </button>\n                  <button\n                    onClick={() => setActiveTab('audit')}\n                    className={`py-4 px-1 border-b-2 font-medium text-sm ${\n                      activeTab === 'audit' ?'border-blue-500 text-blue-600' :'border-transparent text-gray-500 hover:text-gray-700'\n                    }`}\n                  >\n                    <Eye className=\"w-4 h-4 inline mr-2\" />\n                    Security Audit\n                  </button>\n                </nav>\n              </div>\n\n              <div className=\"p-6\">\n                {activeTab === 'roles' && (\n                  <div className=\"space-y-6\">\n                    {/* Filters and Search */}\n                    <div className=\"flex flex-col sm:flex-row gap-4\">\n                      <div className=\"flex-1\">\n                        <div className=\"relative\">\n                          <Search className=\"w-5 h-5 absolute left-3 top-3 text-gray-400\" />\n                          <input\n                            type=\"text\"\n                            placeholder=\"Search users by name or email...\"\n                            value={searchTerm}\n                            onChange={(e) => setSearchTerm(e?.target?.value)}\n                            className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                          />\n                        </div>\n                      </div>\n                      \n                      <div className=\"sm:w-48\">\n                        <select\n                          value={roleFilter}\n                          onChange={(e) => setRoleFilter(e?.target?.value)}\n                          className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                        >\n                          <option value=\"all\">All Roles</option>\n                          <option value=\"user\">User</option>\n                          <option value=\"supervisor\">Supervisor</option>\n                          <option value=\"admin\">Admin</option>\n                          <option value=\"superadmin\">SuperAdmin</option>\n                        </select>\n                      </div>\n                    </div>\n\n                    {/* Bulk Actions */}\n                    {selectedUsers?.length > 0 && (\n                      <div className=\"bg-blue-50 border border-blue-200 rounded-md p-4\">\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-sm text-blue-700\">\n                            {selectedUsers?.length} user{selectedUsers?.length !== 1 ? 's' : ''} selected\n                          </span>\n                          <div className=\"flex items-center space-x-2\">\n                            <select\n                              value={bulkAction}\n                              onChange={(e) => setBulkAction(e?.target?.value)}\n                              className=\"px-3 py-1 text-sm border border-blue-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                            >\n                              <option value=\"\">Select Action</option>\n                              <option value=\"user\">Change to User</option>\n                              <option value=\"supervisor\">Change to Supervisor</option>\n                              <option value=\"admin\">Change to Admin</option>\n                            </select>\n                            <button\n                              onClick={handleBulkRoleUpdate}\n                              disabled={!bulkAction || isSaving}\n                              className=\"px-3 py-1 text-sm bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50\"\n                            >\n                              Apply\n                            </button>\n                          </div>\n                        </div>\n                      </div>\n                    )}\n\n                    {/* User Grid */}\n                    <div className=\"overflow-x-auto\">\n                      <table className=\"min-w-full bg-white border border-gray-200 rounded-md\">\n                        <thead className=\"bg-gray-50\">\n                          <tr>\n                            <th className=\"px-4 py-3 text-left\">\n                              <input\n                                type=\"checkbox\"\n                                onChange={(e) => {\n                                  if (e?.target?.checked) {\n                                    setSelectedUsers(filteredUsers?.map(u => u?.id));\n                                  } else {\n                                    setSelectedUsers([]);\n                                  }\n                                }}\n                                checked={selectedUsers?.length === filteredUsers?.length && filteredUsers?.length > 0}\n                                className=\"w-4 h-4 text-blue-600 rounded focus:ring-blue-500\"\n                              />\n                            </th>\n                            <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                              User\n                            </th>\n                            <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                              Current Role\n                            </th>\n                            <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                              Permissions\n                            </th>\n                            <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                              Actions\n                            </th>\n                          </tr>\n                        </thead>\n                        <tbody className=\"bg-white divide-y divide-gray-200\">\n                          {filteredUsers?.map((user) => (\n                            <tr key={user?.id} className=\"hover:bg-gray-50\">\n                              <td className=\"px-4 py-4\">\n                                <input\n                                  type=\"checkbox\"\n                                  checked={selectedUsers?.includes(user?.id)}\n                                  onChange={(e) => {\n                                    if (e?.target?.checked) {\n                                      setSelectedUsers([...selectedUsers, user?.id]);\n                                    } else {\n                                      setSelectedUsers(selectedUsers?.filter(id => id !== user?.id));\n                                    }\n                                  }}\n                                  className=\"w-4 h-4 text-blue-600 rounded focus:ring-blue-500\"\n                                />\n                              </td>\n                              <td className=\"px-4 py-4\">\n                                <div className=\"flex items-center\">\n                                  <div className=\"flex-shrink-0 h-10 w-10\">\n                                    <div className=\"h-10 w-10 rounded-full bg-gray-300 flex items-center justify-center\">\n                                      <Users className=\"w-5 h-5 text-gray-600\" />\n                                    </div>\n                                  </div>\n                                  <div className=\"ml-4\">\n                                    <div className=\"text-sm font-medium text-gray-900\">{user?.nombre}</div>\n                                    <div className=\"text-sm text-gray-500\">{user?.correo}</div>\n                                  </div>\n                                </div>\n                              </td>\n                              <td className=\"px-4 py-4\">\n                                <span className={`px-3 py-1 rounded-full text-xs font-medium ${\n                                  getRoleColor(user?.rol) === 'purple' ? 'bg-purple-100 text-purple-800' :\n                                  getRoleColor(user?.rol) === 'red' ? 'bg-red-100 text-red-800' :\n                                  getRoleColor(user?.rol) === 'yellow'? 'bg-yellow-100 text-yellow-800' : 'bg-green-100 text-green-800'\n                                }`}>\n                                  {user?.rol || 'Not Assigned'}\n                                </span>\n                              </td>\n                              <td className=\"px-4 py-4\">\n                                <div className=\"text-sm text-gray-500\">\n                                  {getPermissionCount(user?.rol)} permissions\n                                </div>\n                              </td>\n                              <td className=\"px-4 py-4\">\n                                <select\n                                  value={user?.rol || ''}\n                                  onChange={(e) => handleUserRoleUpdate(user?.id, e?.target?.value)}\n                                  disabled={isSaving}\n                                  className=\"text-sm border border-gray-300 rounded-md px-2 py-1 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                                >\n                                  <option value=\"\">Select Role</option>\n                                  <option value=\"user\">User</option>\n                                  <option value=\"supervisor\">Supervisor</option>\n                                  <option value=\"admin\">Admin</option>\n                                  <option value=\"superadmin\">SuperAdmin</option>\n                                </select>\n                              </td>\n                            </tr>\n                          ))}\n                        </tbody>\n                      </table>\n                      \n                      {filteredUsers?.length === 0 && (\n                        <div className=\"text-center py-8 text-gray-500\">\n                          No users found matching your criteria\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                )}\n\n                {activeTab === 'permissions' && (\n                  <div className=\"space-y-6\">\n                    <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Permission Matrix</h3>\n                    \n                    <div className=\"overflow-x-auto\">\n                      <table className=\"min-w-full bg-white border border-gray-200 rounded-md\">\n                        <thead className=\"bg-gray-50\">\n                          <tr>\n                            <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                              Permission\n                            </th>\n                            <th className=\"px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                              User\n                            </th>\n                            <th className=\"px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                              Supervisor\n                            </th>\n                            <th className=\"px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                              Admin\n                            </th>\n                            <th className=\"px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                              SuperAdmin\n                            </th>\n                          </tr>\n                        </thead>\n                        <tbody className=\"bg-white divide-y divide-gray-200\">\n                          {[\n                            'view_profile', 'view_history', 'view_notifications', 'check_in_out',\n                            'manage_team_attendance', 'view_team_reports', 'register_incidents',\n                            'access_payroll', 'generate_reports', 'manage_employees',\n                            'visual_configuration', 'system_logs', 'role_management'\n                          ]?.map((permission) => (\n                            <tr key={permission} className=\"hover:bg-gray-50\">\n                              <td className=\"px-4 py-4 text-sm font-medium text-gray-900 capitalize\">\n                                {permission?.replace(/_/g, ' ')}\n                              </td>\n                              {roleHierarchy?.map((role) => (\n                                <td key={role?.nombre} className=\"px-4 py-4 text-center\">\n                                  {role?.permissions?.includes(permission) ? (\n                                    <CheckCircle className=\"w-5 h-5 text-green-500 mx-auto\" />\n                                  ) : (\n                                    <div className=\"w-5 h-5 bg-gray-200 rounded-full mx-auto\"></div>\n                                  )}\n                                </td>\n                              ))}\n                            </tr>\n                          ))}\n                        </tbody>\n                      </table>\n                    </div>\n                  </div>\n                )}\n\n                {activeTab === 'audit' && (\n                  <div className=\"space-y-6\">\n                    <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Security Audit Trail</h3>\n                    \n                    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\n                      <div className=\"bg-green-50 border border-green-200 rounded-md p-4\">\n                        <div className=\"flex items-center\">\n                          <CheckCircle className=\"w-8 h-8 text-green-500\" />\n                          <div className=\"ml-3\">\n                            <p className=\"text-sm font-medium text-green-800\">Active Users</p>\n                            <p className=\"text-2xl font-bold text-green-900\">\n                              {users?.filter(u => u?.rol)?.length}\n                            </p>\n                          </div>\n                        </div>\n                      </div>\n\n                      <div className=\"bg-yellow-50 border border-yellow-200 rounded-md p-4\">\n                        <div className=\"flex items-center\">\n                          <AlertTriangle className=\"w-8 h-8 text-yellow-500\" />\n                          <div className=\"ml-3\">\n                            <p className=\"text-sm font-medium text-yellow-800\">Unassigned</p>\n                            <p className=\"text-2xl font-bold text-yellow-900\">\n                              {users?.filter(u => !u?.rol)?.length}\n                            </p>\n                          </div>\n                        </div>\n                      </div>\n\n                      <div className=\"bg-blue-50 border border-blue-200 rounded-md p-4\">\n                        <div className=\"flex items-center\">\n                          <Users className=\"w-8 h-8 text-blue-500\" />\n                          <div className=\"ml-3\">\n                            <p className=\"text-sm font-medium text-blue-800\">Supervisors</p>\n                            <p className=\"text-2xl font-bold text-blue-900\">\n                              {users?.filter(u => u?.rol === 'supervisor')?.length}\n                            </p>\n                          </div>\n                        </div>\n                      </div>\n\n                      <div className=\"bg-red-50 border border-red-200 rounded-md p-4\">\n                        <div className=\"flex items-center\">\n                          <Crown className=\"w-8 h-8 text-red-500\" />\n                          <div className=\"ml-3\">\n                            <p className=\"text-sm font-medium text-red-800\">Admins</p>\n                            <p className=\"text-2xl font-bold text-red-900\">\n                              {users?.filter(u => ['admin', 'superadmin']?.includes(u?.rol))?.length}\n                            </p>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"bg-white border border-gray-200 rounded-md p-6\">\n                      <h4 className=\"font-medium text-gray-900 mb-4\">Security Recommendations</h4>\n                      <div className=\"space-y-3\">\n                        <div className=\"flex items-start space-x-3\">\n                          <CheckCircle className=\"w-5 h-5 text-green-500 mt-0.5\" />\n                          <div>\n                            <p className=\"text-sm font-medium text-gray-900\">Role-based access control active</p>\n                            <p className=\"text-sm text-gray-600\">All users have appropriate role assignments</p>\n                          </div>\n                        </div>\n                        \n                        {users?.filter(u => !u?.rol)?.length > 0 && (\n                          <div className=\"flex items-start space-x-3\">\n                            <AlertTriangle className=\"w-5 h-5 text-yellow-500 mt-0.5\" />\n                            <div>\n                              <p className=\"text-sm font-medium text-gray-900\">Unassigned users detected</p>\n                              <p className=\"text-sm text-gray-600\">\n                                {users?.filter(u => !u?.rol)?.length} users need role assignment\n                              </p>\n                            </div>\n                          </div>\n                        )}\n\n                        <div className=\"flex items-start space-x-3\">\n                          <CheckCircle className=\"w-5 h-5 text-green-500 mt-0.5\" />\n                          <div>\n                            <p className=\"text-sm font-medium text-gray-900\">Activity logging enabled</p>\n                            <p className=\"text-sm text-gray-600\">All role changes are being tracked</p>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {saveMessage && (\n                  <div className={`p-3 rounded-md text-sm ${\n                    saveMessage?.includes('Error') \n                      ? 'bg-red-50 text-red-700 border border-red-200' :'bg-green-50 text-green-700 border border-green-200'\n                  }`}>\n                    {saveMessage}\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <BrandedFooter />\n    </div>\n  );\n}","size_bytes":29518},"src/pages/role-based-permission-enforcement-and-security-management-system/index.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Shield, Users, Key, Lock, Eye, AlertTriangle, CheckCircle2 } from 'lucide-react';\nimport { useAuth } from '../../contexts/AuthContext';\nimport * as employeeService from '../../services/employeeService';\nimport BrandedHeader from '../../components/ui/BrandedHeader';\nimport PermissionMatrix from './components/PermissionMatrix';\nimport RealTimeAccessValidation from './components/RealTimeAccessValidation';\nimport SecurityAuditPanel from './components/SecurityAuditPanel';\nimport RoleManagementTools from './components/RoleManagementTools';\n\nexport default function RoleBasedPermissionEnforcementAndSecurityManagementSystem() {\n  const { user, userProfile } = useAuth();\n  const [users, setUsers] = useState([]);\n  const [permissions, setPermissions] = useState([]);\n  const [securityEvents, setSecurityEvents] = useState([]);\n  const [activeView, setActiveView] = useState('matrix');\n  const [loading, setLoading] = useState(true);\n  const [validationQueue, setValidationQueue] = useState([]);\n\n  // Security roles hierarchy\n  const roleHierarchy = {\n    'user': {\n      level: 1,\n      label: 'Empleado',\n      permissions: ['view_own_data', 'update_own_profile', 'clock_in_out'],\n      color: 'bg-blue-100 text-blue-800'\n    },\n    'supervisor': {\n      level: 2,\n      label: 'Supervisor',\n      permissions: ['view_own_data', 'update_own_profile', 'clock_in_out', 'view_team_data', 'approve_attendance'],\n      color: 'bg-green-100 text-green-800'\n    },\n    'admin': {\n      level: 3,\n      label: 'Administrador',\n      permissions: [\n        'view_own_data', 'update_own_profile', 'clock_in_out', 'view_team_data', 'approve_attendance',\n        'manage_employees', 'view_all_data', 'generate_reports', 'manage_sites'\n      ],\n      color: 'bg-purple-100 text-purple-800'\n    },\n    'superadmin': {\n      level: 4,\n      label: 'Super Administrador',\n      permissions: ['*'], // All permissions\n      color: 'bg-red-100 text-red-800'\n    }\n  };\n\n  // Feature permissions mapping\n  const featurePermissions = {\n    'dashboard': ['user', 'supervisor', 'admin', 'superadmin'],\n    'employee_management': ['admin', 'superadmin'],\n    'payroll_calculation': ['admin', 'superadmin'],\n    'reports': ['admin', 'superadmin'],\n    'system_settings': ['superadmin'],\n    'role_management': ['superadmin'],\n    'security_monitoring': ['admin', 'superadmin'],\n    'attendance_approval': ['supervisor', 'admin', 'superadmin'],\n    'site_management': ['admin', 'superadmin']\n  };\n\n  useEffect(() => {\n    if (!user) return;\n    loadSecurityData();\n  }, [user]);\n\n  const loadSecurityData = async () => {\n    try {\n      setLoading(true);\n      \n      // Load users/employees\n      const userData = await employeeService?.getAllEmployees();\n      setUsers(userData || []);\n\n      // Simulate loading permissions and security events\n      const mockPermissions = Object.entries(featurePermissions)?.map(([feature, roles], index) => ({\n        id: index + 1,\n        feature,\n        roles,\n        description: getFeatureDescription(feature),\n        lastModified: new Date(),\n        modifiedBy: 'System'\n      }));\n      setPermissions(mockPermissions);\n\n      // Mock security events\n      const mockEvents = [\n        {\n          id: 1,\n          type: 'permission_check',\n          user: userProfile?.full_name || 'Usuario',\n          action: 'access_payroll_module',\n          result: 'granted',\n          timestamp: new Date(Date.now() - 300000),\n          details: 'Acceso autorizado a módulo de nóminas'\n        },\n        {\n          id: 2,\n          type: 'role_change',\n          user: 'Admin',\n          action: 'promote_user_to_supervisor',\n          result: 'completed',\n          timestamp: new Date(Date.now() - 600000),\n          details: 'Usuario promovido a supervisor'\n        }\n      ];\n      setSecurityEvents(mockEvents);\n\n    } catch (error) {\n      console.error('Error loading security data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getFeatureDescription = (feature) => {\n    const descriptions = {\n      'dashboard': 'Panel principal de asistencia y datos personales',\n      'employee_management': 'Gestión completa de empleados y perfiles',\n      'payroll_calculation': 'Cálculo y procesamiento de nóminas',\n      'reports': 'Generación de reportes y exportación de datos',\n      'system_settings': 'Configuración del sistema y parametros',\n      'role_management': 'Gestión de roles y permisos de usuarios',\n      'security_monitoring': 'Monitoreo de seguridad y auditoría',\n      'attendance_approval': 'Aprobación de asistencias e incidencias',\n      'site_management': 'Gestión de obras y sitios de construcción'\n    };\n    return descriptions?.[feature] || feature;\n  };\n\n  // Validate user access to feature\n  const validateAccess = (userId, feature) => {\n    const targetUser = users?.find(u => u?.id === userId);\n    if (!targetUser) return false;\n\n    const userRole = targetUser?.role || 'user';\n    const requiredRoles = featurePermissions?.[feature] || [];\n    \n    const hasAccess = requiredRoles?.includes(userRole) || userRole === 'superadmin';\n    \n    // Add to validation queue for real-time display\n    const validationEvent = {\n      id: Date.now(),\n      userId,\n      userName: targetUser?.full_name,\n      feature,\n      userRole,\n      requiredRoles,\n      hasAccess,\n      timestamp: new Date()\n    };\n    \n    setValidationQueue(prev => [validationEvent, ...prev?.slice(0, 9)]);\n\n    // Add to security events\n    setSecurityEvents(prev => [{\n      id: Date.now(),\n      type: 'permission_check',\n      user: targetUser?.full_name,\n      action: `access_${feature}`,\n      result: hasAccess ? 'granted' : 'denied',\n      timestamp: new Date(),\n      details: `Intento de acceso a ${getFeatureDescription(feature)}`\n    }, ...prev?.slice(0, 49)]);\n\n    return hasAccess;\n  };\n\n  // Update user role\n  const updateUserRole = async (userId, newRole) => {\n    try {\n      // In a real implementation, this would call an API\n      const updatedUsers = users?.map(user => \n        user?.id === userId ? { ...user, role: newRole } : user\n      );\n      setUsers(updatedUsers);\n\n      // Add security event\n      const targetUser = users?.find(u => u?.id === userId);\n      setSecurityEvents(prev => [{\n        id: Date.now(),\n        type: 'role_change',\n        user: userProfile?.full_name || 'Admin',\n        action: `change_role_${targetUser?.full_name}`,\n        result: 'completed',\n        timestamp: new Date(),\n        details: `Rol cambiado a ${roleHierarchy?.[newRole]?.label || newRole}`\n      }, ...prev?.slice(0, 49)]);\n\n    } catch (error) {\n      console.error('Error updating user role:', error);\n    }\n  };\n\n  // Emergency override for critical operations\n  const emergencyOverride = (userId, feature, reason) => {\n    const targetUser = users?.find(u => u?.id === userId);\n    \n    setSecurityEvents(prev => [{\n      id: Date.now(),\n      type: 'emergency_override',\n      user: userProfile?.full_name || 'SuperAdmin',\n      action: `emergency_access_${feature}`,\n      result: 'granted',\n      timestamp: new Date(),\n      details: `Override de emergencia para ${targetUser?.full_name}: ${reason}`\n    }, ...prev?.slice(0, 49)]);\n\n    return true;\n  };\n\n  const stats = {\n    totalUsers: users?.length,\n    activeUsers: users?.filter(u => u?.status === 'active')?.length,\n    securityEvents: securityEvents?.length,\n    permissionChecks: securityEvents?.filter(e => e?.type === 'permission_check')?.length\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"flex flex-col items-center space-y-4\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n          <span className=\"text-gray-600\">Cargando sistema de seguridad...</span>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <BrandedHeader \n        title=\"Sistema de Seguridad y Control de Acceso\"\n        subtitle=\"Gestión integral de roles y permisos con validación en tiempo real\"\n        icon={Shield}\n        user={userProfile}\n      />\n      {/* Security Stats */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <div className=\"bg-white p-6 rounded-lg shadow\">\n            <div className=\"flex items-center\">\n              <Users className=\"h-8 w-8 text-blue-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Usuarios Totales</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{stats?.totalUsers}</p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-white p-6 rounded-lg shadow\">\n            <div className=\"flex items-center\">\n              <CheckCircle2 className=\"h-8 w-8 text-green-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Usuarios Activos</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{stats?.activeUsers}</p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-white p-6 rounded-lg shadow\">\n            <div className=\"flex items-center\">\n              <Eye className=\"h-8 w-8 text-purple-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Eventos de Seguridad</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{stats?.securityEvents}</p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-white p-6 rounded-lg shadow\">\n            <div className=\"flex items-center\">\n              <Lock className=\"h-8 w-8 text-red-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Validaciones Permisos</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{stats?.permissionChecks}</p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Navigation Tabs */}\n        <div className=\"bg-white rounded-lg shadow mb-8\">\n          <div className=\"border-b border-gray-200\">\n            <nav className=\"-mb-px flex\">\n              <button\n                onClick={() => setActiveView('matrix')}\n                className={`px-6 py-3 font-medium text-sm border-b-2 ${\n                  activeView === 'matrix' ?'border-blue-500 text-blue-600' :'border-transparent text-gray-500 hover:text-gray-700'\n                }`}\n              >\n                <Key className=\"h-4 w-4 inline mr-2\" />\n                Matriz de Permisos\n              </button>\n\n              <button\n                onClick={() => setActiveView('validation')}\n                className={`px-6 py-3 font-medium text-sm border-b-2 ${\n                  activeView === 'validation' ?'border-blue-500 text-blue-600' :'border-transparent text-gray-500 hover:text-gray-700'\n                }`}\n              >\n                <Eye className=\"h-4 w-4 inline mr-2\" />\n                Validación en Tiempo Real\n              </button>\n\n              <button\n                onClick={() => setActiveView('roles')}\n                className={`px-6 py-3 font-medium text-sm border-b-2 ${\n                  activeView === 'roles' ?'border-blue-500 text-blue-600' :'border-transparent text-gray-500 hover:text-gray-700'\n                }`}\n              >\n                <Users className=\"h-4 w-4 inline mr-2\" />\n                Gestión de Roles\n              </button>\n\n              <button\n                onClick={() => setActiveView('audit')}\n                className={`px-6 py-3 font-medium text-sm border-b-2 ${\n                  activeView === 'audit' ?'border-blue-500 text-blue-600' :'border-transparent text-gray-500 hover:text-gray-700'\n                }`}\n              >\n                <AlertTriangle className=\"h-4 w-4 inline mr-2\" />\n                Auditoría de Seguridad\n              </button>\n            </nav>\n          </div>\n        </div>\n\n        {/* Content Area */}\n        <div className=\"grid grid-cols-12 gap-8\">\n          {/* Main Content (50%) */}\n          <div className=\"col-span-12 lg:col-span-6\">\n            {activeView === 'matrix' && (\n              <PermissionMatrix\n                permissions={permissions}\n                roleHierarchy={roleHierarchy}\n                featurePermissions={featurePermissions}\n                onValidateAccess={validateAccess}\n              />\n            )}\n\n            {activeView === 'validation' && (\n              <RealTimeAccessValidation\n                validationQueue={validationQueue}\n                roleHierarchy={roleHierarchy}\n                users={users}\n                onValidateAccess={validateAccess}\n                onEmergencyOverride={emergencyOverride}\n              />\n            )}\n\n            {activeView === 'roles' && (\n              <RoleManagementTools\n                users={users}\n                roleHierarchy={roleHierarchy}\n                onUpdateUserRole={updateUserRole}\n                currentUser={userProfile}\n              />\n            )}\n\n            {activeView === 'audit' && (\n              <SecurityAuditPanel\n                securityEvents={securityEvents}\n                onClearEvents={() => setSecurityEvents([])}\n              />\n            )}\n          </div>\n\n          {/* Sidebar (50%) */}\n          <div className=\"col-span-12 lg:col-span-6\">\n            <div className=\"bg-white rounded-lg shadow\">\n              <div className=\"p-6\">\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n                  <Lock className=\"h-5 w-5 inline mr-2\" />\n                  Verificación de Acceso en Tiempo Real\n                </h3>\n                \n                <div className=\"space-y-4 max-h-96 overflow-y-auto\">\n                  {validationQueue?.slice(0, 6)?.map((validation, index) => (\n                    <div key={validation?.id} className=\"border border-gray-200 rounded-lg p-3\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <span className=\"font-medium text-sm\">{validation?.userName}</span>\n                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${\n                          validation?.hasAccess \n                            ? 'bg-green-100 text-green-800' :'bg-red-100 text-red-800'\n                        }`}>\n                          {validation?.hasAccess ? 'PERMITIDO' : 'DENEGADO'}\n                        </span>\n                      </div>\n                      \n                      <div className=\"text-xs text-gray-600\">\n                        <p>Función: {getFeatureDescription(validation?.feature)}</p>\n                        <p>Rol: {roleHierarchy?.[validation?.userRole]?.label || validation?.userRole}</p>\n                        <p>Requeridos: {validation?.requiredRoles?.map(r => roleHierarchy?.[r]?.label || r)?.join(', ')}</p>\n                        <p className=\"text-gray-400\">{validation?.timestamp?.toLocaleTimeString()}</p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n\n                {validationQueue?.length === 0 && (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    <Eye className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                    <p>No hay validaciones recientes</p>\n                    <p className=\"text-sm\">Las verificaciones aparecerán aquí en tiempo real</p>\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* Role Hierarchy Info */}\n            <div className=\"bg-white rounded-lg shadow mt-6\">\n              <div className=\"p-6\">\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n                  <Shield className=\"h-5 w-5 inline mr-2\" />\n                  Jerarquía de Roles\n                </h3>\n                \n                <div className=\"space-y-3\">\n                  {Object.entries(roleHierarchy)?.sort(([,a], [,b]) => b?.level - a?.level)?.map(([role, config]) => (\n                    <div key={role} className=\"flex items-center justify-between p-3 bg-gray-50 rounded\">\n                      <div>\n                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${config?.color}`}>\n                          Nivel {config?.level}\n                        </span>\n                        <p className=\"font-medium text-sm mt-1\">{config?.label}</p>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"text-sm text-gray-600\">\n                          {config?.permissions?.length === 1 && config?.permissions?.[0] === '*' ?'Todos los permisos' \n                            : `${config?.permissions?.length} permisos`}\n                        </p>\n                        <p className=\"text-xs text-gray-500\">\n                          {users?.filter(u => u?.role === role)?.length} usuarios\n                        </p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n\n            {/* Quick Actions */}\n            <div className=\"bg-white rounded-lg shadow mt-6\">\n              <div className=\"p-6\">\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Acciones de Seguridad</h3>\n                \n                <div className=\"space-y-3\">\n                  <button\n                    onClick={() => validateAccess(user?.id, 'payroll_calculation')}\n                    className=\"w-full px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\"\n                  >\n                    Verificar Mi Acceso a Nóminas\n                  </button>\n\n                  <button\n                    onClick={() => validateAccess(user?.id, 'employee_management')}\n                    className=\"w-full px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700\"\n                  >\n                    Verificar Gestión de Empleados\n                  </button>\n\n                  <button\n                    onClick={() => validateAccess(user?.id, 'system_settings')}\n                    className=\"w-full px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700\"\n                  >\n                    Verificar Configuración Sistema\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":18725},"src/pages/system-administration-and-configuration-panel/index.jsx":{"content":"import React, { useState } from 'react';\nimport { useAuth } from '../../contexts/AuthContext';\nimport RoleBasedSidebar from '../../components/ui/RoleBasedSidebar';\nimport NavigationBreadcrumb from '../../components/ui/NavigationBreadcrumb';\nimport UserContextHeader from '../../components/ui/UserContextHeader';\nimport NotificationCenter from '../../components/ui/NotificationCenter';\nimport Icon from '../../components/AppIcon';\nimport Button from '../../components/ui/Button';\n\n// Import tab components\nimport UserManagementTab from './components/UserManagementTab';\nimport SystemSettingsTab from './components/SystemSettingsTab';\nimport SecurityPoliciesTab from './components/SecurityPoliciesTab';\nimport IntegrationManagementTab from './components/IntegrationManagementTab';\nimport AuditLogViewer from './components/AuditLogViewer';\nimport SystemHealthDashboard from './components/SystemHealthDashboard';\nimport BrandingCustomizationTab from './components/BrandingCustomizationTab';\n\nconst SystemAdministrationPanel = () => {\n  const [activeTab, setActiveTab] = useState('users');\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\n  const { user, userProfile, signOut } = useAuth();\n\n  const currentUser = {\n    name: userProfile?.full_name || user?.email?.split('@')?.[0] || 'Usuario',\n    role: userProfile?.role || 'admin',\n    site: userProfile?.site || 'Oficina Central',\n    avatar: null\n  };\n\n  const tabs = [\n    {\n      id: 'users',\n      label: 'Gestión de Usuarios',\n      icon: 'Users',\n      component: UserManagementTab,\n      description: 'Administrar usuarios, roles y permisos'\n    },\n    {\n      id: 'settings',\n      label: 'Configuración del Sistema',\n      icon: 'Settings',\n      component: SystemSettingsTab,\n      description: 'Configurar parámetros operacionales'\n    },\n    {\n      id: 'branding',\n      label: 'Personalización de Marca',\n      icon: 'Palette',\n      component: BrandingCustomizationTab,\n      description: 'Personalizar nombre, colores, logos y marca para clientes'\n    },\n    {\n      id: 'security',\n      label: 'Políticas de Seguridad',\n      icon: 'Shield',\n      component: SecurityPoliciesTab,\n      description: 'Gestionar políticas de seguridad'\n    },\n    {\n      id: 'integrations',\n      label: 'Integraciones',\n      icon: 'Plug',\n      component: IntegrationManagementTab,\n      description: 'Configurar conexiones externas'\n    },\n    {\n      id: 'audit',\n      label: 'Registro de Auditoría',\n      icon: 'FileText',\n      component: AuditLogViewer,\n      description: 'Revisar logs de actividad del sistema'\n    },\n    {\n      id: 'health',\n      label: 'Estado del Sistema',\n      icon: 'Activity',\n      component: SystemHealthDashboard,\n      description: 'Monitorear rendimiento y salud'\n    }\n  ];\n\n  const activeTabData = tabs?.find(tab => tab?.id === activeTab);\n  const ActiveComponent = activeTabData?.component;\n\n  const handleNotificationClick = (notification) => {\n    console.log('Notification clicked:', notification);\n  };\n\n  const handleMarkAsRead = (notificationId) => {\n    console.log('Marking as read:', notificationId);\n  };\n\n  const handleMarkAllAsRead = () => {\n    console.log('Marking all as read');\n  };\n\n  const handleSidebarToggle = () => {\n    setSidebarCollapsed(!sidebarCollapsed);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Sidebar */}\n      <RoleBasedSidebar \n        isCollapsed={sidebarCollapsed}\n        userRole={currentUser?.role?.toLowerCase()}\n        onToggleCollapse={handleSidebarToggle}\n      />\n      {/* Main Content */}\n      <div className={`transition-all duration-300 ${sidebarCollapsed ? 'md:ml-16' : 'md:ml-64'}`}>\n        {/* Header */}\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                iconName=\"Menu\"\n                onClick={handleSidebarToggle}\n                className=\"hidden md:flex\"\n              />\n              <div>\n                <h1 className=\"text-xl font-semibold text-foreground\">Panel de Administración del Sistema</h1>\n                <p className=\"text-sm text-muted-foreground\">\n                  Configuración avanzada y gestión del sistema AsistenciaPro\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              <NotificationCenter\n                onNotificationClick={handleNotificationClick}\n                onMarkAsRead={handleMarkAsRead}\n                onMarkAllAsRead={handleMarkAllAsRead}\n              />\n              <UserContextHeader user={currentUser} />\n            </div>\n          </div>\n        </header>\n\n        {/* Content */}\n        <main className=\"p-6 pb-20 md:pb-6\">\n          <NavigationBreadcrumb />\n          \n          {/* Tab Navigation */}\n          <div className=\"bg-card rounded-lg border border-border mb-6\">\n            <div className=\"border-b border-border\">\n              <nav className=\"flex overflow-x-auto\">\n                {tabs?.map((tab) => (\n                  <button\n                    key={tab?.id}\n                    onClick={() => setActiveTab(tab?.id)}\n                    className={`\n                      flex items-center space-x-2 px-6 py-4 text-sm font-medium whitespace-nowrap\n                      border-b-2 transition-all duration-150 ease-out-cubic\n                      ${activeTab === tab?.id\n                        ? 'border-primary text-primary bg-primary/5' :'border-transparent text-muted-foreground hover:text-foreground hover:border-muted'\n                      }\n                    `}\n                  >\n                    <Icon name={tab?.icon} size={18} />\n                    <span>{tab?.label}</span>\n                  </button>\n                ))}\n              </nav>\n            </div>\n            \n            {/* Tab Description */}\n            <div className=\"px-6 py-3 bg-muted/30\">\n              <p className=\"text-sm text-muted-foreground\">\n                {activeTabData?.description}\n              </p>\n            </div>\n          </div>\n\n          {/* Tab Content */}\n          <div className=\"bg-card rounded-lg border border-border p-6\">\n            {ActiveComponent && <ActiveComponent />}\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n};\n\nexport default SystemAdministrationPanel;","size_bytes":6520},"src/pages/user-profile-management-and-authentication-center/index.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { User, Shield, Database, AlertTriangle, CheckCircle, XCircle, Settings, RefreshCw, Eye, EyeOff, Save } from 'lucide-react';\nimport BrandedHeader from '../../components/ui/BrandedHeader';\nimport BrandedFooter from '../../components/ui/BrandedFooter';\nimport NavigationHeader from '../../components/ui/NavigationHeader';\nimport { supabase } from '../../lib/supabase';\n\nexport default function UserProfileManagementAndAuthenticationCenter() {\n  const { user, userProfile, loading, authError, signOut, fetchUserProfile } = useAuth();\n  const [activeTab, setActiveTab] = useState('profile');\n  const [profileForm, setProfileForm] = useState({\n    full_name: '',\n    email: '',\n    phone: '',\n    role: ''\n  });\n  const [passwordForm, setPasswordForm] = useState({\n    currentPassword: '',\n    newPassword: '',\n    confirmPassword: ''\n  });\n  const [showPasswords, setShowPasswords] = useState({\n    current: false,\n    new: false,\n    confirm: false\n  });\n  const [authStatus, setAuthStatus] = useState({\n    database: 'checking',\n    profile: 'checking',\n    role: 'checking'\n  });\n  const [diagnostics, setDiagnostics] = useState([]);\n  const [isSaving, setIsSaving] = useState(false);\n  const [saveMessage, setSaveMessage] = useState('');\n\n  useEffect(() => {\n    if (userProfile) {\n      setProfileForm({\n        full_name: userProfile?.full_name || '',\n        email: userProfile?.email || user?.email || '',\n        phone: userProfile?.phone || '',\n        role: userProfile?.role || ''\n      });\n    }\n    runDiagnostics();\n  }, [user, userProfile]);\n\n  const runDiagnostics = async () => {\n    const newDiagnostics = [];\n    const newStatus = { database: 'checking', profile: 'checking', role: 'checking' };\n\n    try {\n      // Test database connection - Use correct table name 'user_profiles'\n      const { data: dbTest, error: dbError } = await supabase?.from('user_profiles')?.select('count')?.limit(1);\n      if (dbError) {\n        newStatus.database = 'error';\n        newDiagnostics?.push({\n          type: 'error',\n          category: 'Base de Datos',\n          message: 'Error al conectar con la base de datos',\n          solution: 'Verificar el estado del proyecto Supabase y la conexión'\n        });\n      } else {\n        newStatus.database = 'success';\n        newDiagnostics?.push({\n          type: 'success',\n          category: 'Base de Datos',\n          message: 'Conexión a base de datos exitosa'\n        });\n      }\n\n      // Test auth.user.id validation\n      if (user?.id) {\n        const { data: profileData, error: profileError } = await supabase\n          ?.from('user_profiles')\n          ?.select('*')\n          ?.eq('id', user?.id)\n          ?.single();\n\n        if (profileError && profileError?.code === 'PGRST116') {\n          newStatus.profile = 'error';\n          newDiagnostics?.push({\n            type: 'error',\n            category: 'Perfil',\n            message: 'Perfil de usuario no encontrado en la base de datos',\n            solution: 'El perfil se creará automáticamente o redirigir a completar perfil'\n          });\n        } else if (profileError) {\n          newStatus.profile = 'error';\n          newDiagnostics?.push({\n            type: 'error',\n            category: 'Perfil',\n            message: `Error en consulta de perfil: ${profileError?.message}`,\n            solution: 'Verificar esquema de base de datos y políticas RLS'\n          });\n        } else {\n          newStatus.profile = 'success';\n          newDiagnostics?.push({\n            type: 'success',\n            category: 'Perfil',\n            message: 'Perfil de usuario cargado exitosamente'\n          });\n\n          // Test role validation\n          const validRoles = ['user', 'supervisor', 'admin', 'superadmin'];\n          if (validRoles?.includes(profileData?.role)) {\n            newStatus.role = 'success';\n            newDiagnostics?.push({\n              type: 'success',\n              category: 'Rol',\n              message: `Rol válido asignado: ${profileData?.role}`\n            });\n          } else {\n            newStatus.role = 'warning';\n            newDiagnostics?.push({\n              type: 'warning',\n              category: 'Rol',\n              message: `Rol inválido o faltante: ${profileData?.role || 'ninguno'}`,\n              solution: 'Actualizar rol de usuario a: user, supervisor, admin, o superadmin'\n            });\n          }\n        }\n      }\n\n      // Test role permissions\n      if (userProfile?.role) {\n        const permissions = getRolePermissions(userProfile?.role);\n        newDiagnostics?.push({\n          type: 'info',\n          category: 'Permisos',\n          message: `El rol \"${userProfile?.role}\" tiene ${permissions?.length} permisos`,\n          details: permissions?.join(', ')\n        });\n      }\n\n    } catch (error) {\n      newDiagnostics?.push({\n        type: 'error',\n        category: 'Diagnósticos',\n        message: `Error en diagnóstico: ${error?.message}`,\n        solution: 'Revisar consola para información detallada del error'\n      });\n    }\n\n    setAuthStatus(newStatus);\n    setDiagnostics(newDiagnostics);\n  };\n\n  const getRolePermissions = (role) => {\n    const permissions = {\n      user: ['Ver Perfil', 'Ver Historial', 'Ver Notificaciones'],\n      supervisor: ['Gestionar Equipo', 'Registrar Asistencia', 'Ver Reportes'],\n      admin: ['Acceso Nómina', 'Gestionar Incidentes', 'Generar Reportes', 'Gestión de Usuarios'],\n      superadmin: ['Acceso Completo al Sistema', 'Configuración Visual', 'Logs del Sistema', 'Gestión de Roles']\n    };\n    return permissions?.[role] || [];\n  };\n\n  const handleProfileUpdate = async (e) => {\n    e?.preventDefault();\n    setIsSaving(true);\n    setSaveMessage('');\n\n    try {\n      // Log activity\n      await logActivity('profile_update', 'Perfil de Usuario', 'Información de perfil actualizada');\n\n      const { error } = await supabase\n        ?.from('user_profiles')\n        ?.update({\n          full_name: profileForm?.full_name,\n          phone: profileForm?.phone\n        })\n        ?.eq('id', user?.id);\n\n      if (error) {\n        setSaveMessage(`Error: ${error?.message}`);\n      } else {\n        setSaveMessage('¡Perfil actualizado exitosamente!');\n        // Refresh user profile\n        await fetchUserProfile?.(user?.id);\n      }\n    } catch (error) {\n      setSaveMessage(`Error: ${error?.message}`);\n    } finally {\n      setIsSaving(false);\n      setTimeout(() => setSaveMessage(''), 3000);\n    }\n  };\n\n  const handlePasswordChange = async (e) => {\n    e?.preventDefault();\n    setIsSaving(true);\n    setSaveMessage('');\n\n    if (passwordForm?.newPassword !== passwordForm?.confirmPassword) {\n      setSaveMessage('Las nuevas contraseñas no coinciden');\n      setIsSaving(false);\n      return;\n    }\n\n    try {\n      // Log activity\n      await logActivity('password_change', 'Seguridad', 'Contraseña de cuenta cambiada');\n\n      const { error } = await supabase?.auth?.updateUser({\n        password: passwordForm?.newPassword\n      });\n\n      if (error) {\n        setSaveMessage(`Error: ${error?.message}`);\n      } else {\n        setSaveMessage('¡Contraseña actualizada exitosamente!');\n        setPasswordForm({\n          currentPassword: '',\n          newPassword: '',\n          confirmPassword: ''\n        });\n      }\n    } catch (error) {\n      setSaveMessage(`Error: ${error?.message}`);\n    } finally {\n      setIsSaving(false);\n      setTimeout(() => setSaveMessage(''), 3000);\n    }\n  };\n\n  const logActivity = async (action, module, description) => {\n    try {\n      await supabase?.from('logs_actividad')?.insert({\n        usuario_id: user?.id,\n        rol: userProfile?.role,\n        accion: action,\n        modulo: module,\n        descripcion: description\n      });\n    } catch (error) {\n      console.error('Failed to log activity:', error);\n    }\n  };\n\n  const getStatusIcon = (status) => {\n    switch (status) {\n      case 'success': return <CheckCircle className=\"w-5 h-5 text-green-500\" />;\n      case 'error': return <XCircle className=\"w-5 h-5 text-red-500\" />;\n      case 'warning': return <AlertTriangle className=\"w-5 h-5 text-yellow-500\" />;\n      default: return <RefreshCw className=\"w-5 h-5 text-gray-400 animate-spin\" />;\n    }\n  };\n\n  const getDiagnosticIcon = (type) => {\n    switch (type) {\n      case 'success': return <CheckCircle className=\"w-4 h-4 text-green-500\" />;\n      case 'error': return <XCircle className=\"w-4 h-4 text-red-500\" />;\n      case 'warning': return <AlertTriangle className=\"w-4 h-4 text-yellow-500\" />;\n      default: return <Settings className=\"w-4 h-4 text-blue-500\" />;\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"text-center\">\n          <RefreshCw className=\"w-8 h-8 animate-spin text-blue-600 mx-auto mb-4\" />\n          <p className=\"text-gray-600\">Cargando centro de autenticación...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <BrandedHeader />\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Navigation Header */}\n        <NavigationHeader \n          title=\"Centro de Gestión de Perfil y Autenticación\"\n          subtitle=\"Gestiona tu perfil, monitorea el estado de autenticación y resuelve problemas de cuenta\"\n        />\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Left Panel - Profile Form (60%) */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {/* Tab Navigation */}\n            <div className=\"bg-white rounded-lg shadow-sm border border-gray-200\">\n              <div className=\"border-b border-gray-200\">\n                <nav className=\"flex space-x-8 px-6\">\n                  <button\n                    onClick={() => setActiveTab('profile')}\n                    className={`py-4 px-1 border-b-2 font-medium text-sm ${\n                      activeTab === 'profile' ?'border-blue-500 text-blue-600' :'border-transparent text-gray-500 hover:text-gray-700'\n                    }`}\n                  >\n                    <User className=\"w-4 h-4 inline mr-2\" />\n                    Información de Perfil\n                  </button>\n                  <button\n                    onClick={() => setActiveTab('security')}\n                    className={`py-4 px-1 border-b-2 font-medium text-sm ${\n                      activeTab === 'security' ?'border-blue-500 text-blue-600' :'border-transparent text-gray-500 hover:text-gray-700'\n                    }`}\n                  >\n                    <Shield className=\"w-4 h-4 inline mr-2\" />\n                    Configuración de Seguridad\n                  </button>\n                </nav>\n              </div>\n\n              <div className=\"p-6\">\n                {activeTab === 'profile' && (\n                  <form onSubmit={handleProfileUpdate} className=\"space-y-6\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <div>\n                        <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                          Nombre Completo *\n                        </label>\n                        <input\n                          type=\"text\"\n                          value={profileForm?.full_name}\n                          onChange={(e) => setProfileForm({ ...profileForm, full_name: e?.target?.value })}\n                          className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                          required\n                        />\n                      </div>\n                      \n                      <div>\n                        <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                          Correo Electrónico\n                        </label>\n                        <input\n                          type=\"email\"\n                          value={profileForm?.email}\n                          className=\"w-full px-3 py-2 border border-gray-200 rounded-md bg-gray-50 text-gray-500\"\n                          disabled\n                        />\n                        <p className=\"text-xs text-gray-500 mt-1\">El correo electrónico no se puede cambiar desde este panel</p>\n                      </div>\n\n                      <div>\n                        <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                          Número de Teléfono\n                        </label>\n                        <input\n                          type=\"tel\"\n                          value={profileForm?.phone}\n                          onChange={(e) => setProfileForm({ ...profileForm, phone: e?.target?.value })}\n                          className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                        />\n                      </div>\n\n                      <div className=\"md:col-span-2\">\n                        <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                          Rol Actual\n                        </label>\n                        <div className=\"flex items-center space-x-2\">\n                          <span className={`px-3 py-1 rounded-full text-sm font-medium ${\n                            profileForm?.role === 'superadmin' ? 'bg-purple-100 text-purple-800' :\n                            profileForm?.role === 'admin' ? 'bg-red-100 text-red-800' :\n                            profileForm?.role === 'supervisor'? 'bg-yellow-100 text-yellow-800' : 'bg-green-100 text-green-800'\n                          }`}>\n                            {profileForm?.role || 'Sin Asignar'}\n                          </span>\n                          <p className=\"text-xs text-gray-500\">El rol solo puede ser cambiado por administradores</p>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center justify-between pt-4 border-t border-gray-200\">\n                      <div className=\"text-sm text-gray-600\">\n                        Completación del perfil: {\n                          [profileForm?.full_name, profileForm?.email, profileForm?.phone]?.filter(Boolean)?.length\n                        }/3 campos completados\n                      </div>\n                      \n                      <button\n                        type=\"submit\"\n                        disabled={isSaving}\n                        className=\"inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50\"\n                      >\n                        {isSaving ? (\n                          <RefreshCw className=\"w-4 h-4 animate-spin mr-2\" />\n                        ) : (\n                          <Save className=\"w-4 h-4 mr-2\" />\n                        )}\n                        Actualizar Perfil\n                      </button>\n                    </div>\n\n                    {saveMessage && (\n                      <div className={`p-3 rounded-md text-sm ${\n                        saveMessage?.includes('Error') \n                          ? 'bg-red-50 text-red-700 border border-red-200' :'bg-green-50 text-green-700 border border-green-200'\n                      }`}>\n                        {saveMessage}\n                      </div>\n                    )}\n                  </form>\n                )}\n\n                {activeTab === 'security' && (\n                  <form onSubmit={handlePasswordChange} className=\"space-y-6\">\n                    <div className=\"space-y-4\">\n                      <div>\n                        <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                          Contraseña Actual\n                        </label>\n                        <div className=\"relative\">\n                          <input\n                            type={showPasswords?.current ? 'text' : 'password'}\n                            value={passwordForm?.currentPassword}\n                            onChange={(e) => setPasswordForm({ ...passwordForm, currentPassword: e?.target?.value })}\n                            className=\"w-full px-3 py-2 pr-10 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                            required\n                          />\n                          <button\n                            type=\"button\"\n                            onClick={() => setShowPasswords({ ...showPasswords, current: !showPasswords?.current })}\n                            className=\"absolute inset-y-0 right-0 pr-3 flex items-center\"\n                          >\n                            {showPasswords?.current ? <EyeOff className=\"w-4 h-4 text-gray-400\" /> : <Eye className=\"w-4 h-4 text-gray-400\" />}\n                          </button>\n                        </div>\n                      </div>\n\n                      <div>\n                        <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                          Nueva Contraseña\n                        </label>\n                        <div className=\"relative\">\n                          <input\n                            type={showPasswords?.new ? 'text' : 'password'}\n                            value={passwordForm?.newPassword}\n                            onChange={(e) => setPasswordForm({ ...passwordForm, newPassword: e?.target?.value })}\n                            className=\"w-full px-3 py-2 pr-10 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                            required\n                            minLength={6}\n                          />\n                          <button\n                            type=\"button\"\n                            onClick={() => setShowPasswords({ ...showPasswords, new: !showPasswords?.new })}\n                            className=\"absolute inset-y-0 right-0 pr-3 flex items-center\"\n                          >\n                            {showPasswords?.new ? <EyeOff className=\"w-4 h-4 text-gray-400\" /> : <Eye className=\"w-4 h-4 text-gray-400\" />}\n                          </button>\n                        </div>\n                      </div>\n\n                      <div>\n                        <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                          Confirmar Nueva Contraseña\n                        </label>\n                        <div className=\"relative\">\n                          <input\n                            type={showPasswords?.confirm ? 'text' : 'password'}\n                            value={passwordForm?.confirmPassword}\n                            onChange={(e) => setPasswordForm({ ...passwordForm, confirmPassword: e?.target?.value })}\n                            className=\"w-full px-3 py-2 pr-10 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                            required\n                            minLength={6}\n                          />\n                          <button\n                            type=\"button\"\n                            onClick={() => setShowPasswords({ ...showPasswords, confirm: !showPasswords?.confirm })}\n                            className=\"absolute inset-y-0 right-0 pr-3 flex items-center\"\n                          >\n                            {showPasswords?.confirm ? <EyeOff className=\"w-4 h-4 text-gray-400\" /> : <Eye className=\"w-4 h-4 text-gray-400\" />}\n                          </button>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center justify-between pt-4 border-t border-gray-200\">\n                      <div className=\"text-sm text-gray-600\">\n                        La contraseña debe tener al menos 6 caracteres\n                      </div>\n                      \n                      <button\n                        type=\"submit\"\n                        disabled={isSaving}\n                        className=\"inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 disabled:opacity-50\"\n                      >\n                        {isSaving ? (\n                          <RefreshCw className=\"w-4 h-4 animate-spin mr-2\" />\n                        ) : (\n                          <Shield className=\"w-4 h-4 mr-2\" />\n                        )}\n                        Cambiar Contraseña\n                      </button>\n                    </div>\n\n                    {saveMessage && (\n                      <div className={`p-3 rounded-md text-sm ${\n                        saveMessage?.includes('Error') \n                          ? 'bg-red-50 text-red-700 border border-red-200' :'bg-green-50 text-green-700 border border-green-200'\n                      }`}>\n                        {saveMessage}\n                      </div>\n                    )}\n                  </form>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* Right Panel - Authentication Status (40%) */}\n          <div className=\"space-y-6\">\n            {/* Connection Status */}\n            <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4 flex items-center\">\n                <Database className=\"w-5 h-5 mr-2 text-blue-600\" />\n                Estado de Autenticación\n              </h3>\n              \n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-gray-600\">Conexión a Base de Datos</span>\n                  {getStatusIcon(authStatus?.database)}\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-gray-600\">Carga de Perfil</span>\n                  {getStatusIcon(authStatus?.profile)}\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-gray-600\">Asignación de Rol</span>\n                  {getStatusIcon(authStatus?.role)}\n                </div>\n\n                <button\n                  onClick={runDiagnostics}\n                  className=\"w-full mt-4 px-3 py-2 text-sm bg-blue-50 text-blue-700 rounded-md hover:bg-blue-100 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                >\n                  <RefreshCw className=\"w-4 h-4 inline mr-2\" />\n                  Ejecutar Diagnósticos\n                </button>\n              </div>\n            </div>\n\n            {/* Role & Permissions */}\n            <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4 flex items-center\">\n                <Shield className=\"w-5 h-5 mr-2 text-green-600\" />\n                Rol y Permisos\n              </h3>\n              \n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-gray-600\">Rol Actual</span>\n                  <span className={`px-3 py-1 rounded-full text-xs font-medium ${\n                    userProfile?.role === 'superadmin' ? 'bg-purple-100 text-purple-800' :\n                    userProfile?.role === 'admin' ? 'bg-red-100 text-red-800' :\n                    userProfile?.role === 'supervisor'? 'bg-yellow-100 text-yellow-800' : 'bg-green-100 text-green-800'\n                  }`}>\n                    {userProfile?.role || 'Sin Asignar'}\n                  </span>\n                </div>\n\n                <div className=\"border-t border-gray-200 pt-3\">\n                  <span className=\"text-sm font-medium text-gray-700\">Permisos:</span>\n                  <ul className=\"mt-2 space-y-1\">\n                    {getRolePermissions(userProfile?.role)?.map((permission, index) => (\n                      <li key={index} className=\"text-xs text-gray-600 flex items-center\">\n                        <CheckCircle className=\"w-3 h-3 text-green-500 mr-2\" />\n                        {permission}\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              </div>\n            </div>\n\n            {/* Diagnostics Panel */}\n            <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4 flex items-center\">\n                <Settings className=\"w-5 h-5 mr-2 text-gray-600\" />\n                Diagnósticos\n              </h3>\n              \n              <div className=\"space-y-3 max-h-64 overflow-y-auto\">\n                {diagnostics?.map((diagnostic, index) => (\n                  <div key={index} className=\"border border-gray-100 rounded-md p-3\">\n                    <div className=\"flex items-start space-x-2\">\n                      {getDiagnosticIcon(diagnostic?.type)}\n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"flex items-center space-x-2\">\n                          <span className=\"text-xs font-medium text-gray-500\">\n                            {diagnostic?.category}\n                          </span>\n                        </div>\n                        <p className=\"text-sm text-gray-700 mt-1\">\n                          {diagnostic?.message}\n                        </p>\n                        {diagnostic?.solution && (\n                          <p className=\"text-xs text-gray-500 mt-1\">\n                            Solución: {diagnostic?.solution}\n                          </p>\n                        )}\n                        {diagnostic?.details && (\n                          <p className=\"text-xs text-gray-400 mt-1\">\n                            {diagnostic?.details}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                ))}\n                \n                {diagnostics?.length === 0 && (\n                  <p className=\"text-sm text-gray-500 text-center py-4\">\n                    Haz clic en \"Ejecutar Diagnósticos\" para verificar el estado del sistema\n                  </p>\n                )}\n              </div>\n            </div>\n\n            {/* Emergency Actions */}\n            {authError && (\n              <div className=\"bg-red-50 border border-red-200 rounded-lg p-6\">\n                <h3 className=\"text-lg font-semibold text-red-800 mb-2 flex items-center\">\n                  <AlertTriangle className=\"w-5 h-5 mr-2\" />\n                  Error de Autenticación\n                </h3>\n                <p className=\"text-sm text-red-700 mb-4\">{authError}</p>\n                <button\n                  onClick={() => signOut?.()}\n                  className=\"w-full px-3 py-2 text-sm bg-red-600 text-white rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500\"\n                >\n                  Cerrar Sesión e Intentar de Nuevo\n                </button>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n      <BrandedFooter />\n    </div>\n  );\n}","size_bytes":27674},"src/pages/activity-logging-and-security-monitoring-dashboard/components/ActivityGrid.jsx":{"content":"import React, { useMemo, useState, useId, useCallback } from 'react';\nimport { ChevronDown, ChevronRight, User, Clock, MapPin, Monitor, AlertCircle, CheckCircle, XCircle, Info } from 'lucide-react';\n\nexport default function ActivityGrid({ logs = [], loading = false, searchTerm = '' }) {\n  const [expandedRows, setExpandedRows] = useState(new Set());\n\n  const toggleRowExpansion = useCallback((logId) => {\n    setExpandedRows(prev => {\n      const next = new Set(prev);\n      if (next.has(logId)) next.delete(logId);\n      else next.add(logId);\n      return next;\n    });\n  }, []);\n\n  const getActionIcon = (action) => {\n    const a = (action || '').toLowerCase();\n    if (a.includes('login') || a.includes('signin')) return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\n    if (a.includes('logout') || a.includes('signout')) return <XCircle className=\"h-4 w-4 text-red-500\" />;\n    if (a.includes('failed') || a.includes('error') || a.includes('unauthorized')) return <AlertCircle className=\"h-4 w-4 text-red-500\" />;\n    if (a.includes('update') || a.includes('edit') || a.includes('config')) return <Info className=\"h-4 w-4 text-blue-500\" />;\n    return <Info className=\"h-4 w-4 text-gray-500\" />;\n  };\n\n  const getSeverityColor = (action, module) => {\n    const a = (action || '').toLowerCase();\n    const m = (module || '').toLowerCase();\n    if (a.includes('failed') || a.includes('error') || a.includes('unauthorized')) return 'bg-red-50 border-l-red-500 text-red-900';\n    if (a.includes('login') || a.includes('signin')) return 'bg-green-50 border-l-green-500 text-green-900';\n    if (m.includes('security') || a.includes('permission')) return 'bg-yellow-50 border-l-yellow-500 text-yellow-900';\n    if (a.includes('config') || a.includes('admin')) return 'bg-purple-50 border-l-purple-500 text-purple-900';\n    return 'bg-gray-50 border-l-gray-500 text-gray-900';\n  };\n\n  const formatDate = (dateString) => {\n    if (!dateString) return 'N/A';\n    const date = new Date(dateString);\n    if (isNaN(date.getTime())) return 'N/A';\n\n    const now = new Date();\n    const diffMs = now - date;\n    const diffMinutes = Math.floor(diffMs / (1000 * 60));\n    const diffHours = Math.floor(diffMinutes / 60);\n    const diffDays = Math.floor(diffHours / 24);\n\n    if (diffMinutes < 1) return 'Ahora mismo';\n    if (diffMinutes < 60) return `Hace ${diffMinutes} min`;\n    if (diffHours < 24) return `Hace ${diffHours}h`;\n    if (diffDays < 7) return `Hace ${diffDays}d`;\n\n    return date.toLocaleDateString('es-ES', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  // Más robusto: no dependemos de test() con flag 'g'\n  const highlighter = useMemo(() => {\n    const term = (searchTerm || '').trim();\n    if (!term) return null;\n    const escaped = term.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n    return new RegExp(`(${escaped})`, 'gi');\n  }, [searchTerm]);\n\n  const highlightSearchTerm = (text) => {\n    if (!highlighter || !text) return text;\n    const parts = String(text).split(highlighter);\n    return parts.map((part, idx) =>\n      idx % 2 === 1 ? (\n        <mark key={idx} className=\"bg-yellow-200 px-1 rounded\">\n          {part}\n        </mark>\n      ) : (\n        <span key={idx}>{part}</span>\n      )\n    );\n  };\n\n  const onRowKeyDown = (e, logId) => {\n    if (e.key === 'Enter' || e.key === ' ') {\n      e.preventDefault();\n      toggleRowExpansion(logId);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"space-y-4\">\n          {[...Array(5)].map((_, i) => (\n            <div key={i} className=\"animate-pulse\">\n              <div className=\"h-16 bg-gray-200 rounded-lg\" />\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  if (!logs?.length) {\n    return (\n      <div className=\"p-12 text-center\">\n        <Monitor className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n        <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No hay actividades</h3>\n        <p className=\"text-gray-500\">No se encontraron registros de actividad con los filtros aplicados.</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"overflow-hidden\">\n      <div className=\"max-h-[800px] overflow-y-auto\">\n        {logs.map((log, index) => {\n          const id = log?.id ?? index; // fallback estable si el backend no trae id\n          const isExpanded = expandedRows.has(id);\n          const severityClass = getSeverityColor(log?.accion, log?.modulo);\n          const panelId = `log-panel-${id}`;\n          const rowBtnId = `log-toggle-${id}`;\n\n          return (\n            <div\n              key={id}\n              className={`border-l-4 ${severityClass} transition-all duration-200 ${\n                index !== logs.length - 1 ? 'border-b border-gray-100' : ''\n              }`}\n            >\n              {/* Main Row */}\n              <div\n                className=\"p-4 hover:bg-gray-50 cursor-pointer focus:outline-none\"\n                role=\"button\"\n                tabIndex={0}\n                aria-expanded={isExpanded}\n                aria-controls={panelId}\n                onKeyDown={(e) => onRowKeyDown(e, id)}\n                onClick={() => toggleRowExpansion(id)}\n              >\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-4 flex-1 min-w-0\">\n                    {/* Expand/Collapse Icon */}\n                    <button\n                      id={rowBtnId}\n                      type=\"button\"\n                      aria-label={isExpanded ? 'Contraer' : 'Expandir'}\n                      aria-expanded={isExpanded}\n                      aria-controls={panelId}\n                      className=\"flex-shrink-0\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        toggleRowExpansion(id);\n                      }}\n                    >\n                      {isExpanded ? (\n                        <ChevronDown className=\"h-4 w-4 text-gray-400\" />\n                      ) : (\n                        <ChevronRight className=\"h-4 w-4 text-gray-400\" />\n                      )}\n                    </button>\n\n                    {/* Action Icon */}\n                    <div className=\"flex-shrink-0\">{getActionIcon(log?.accion)}</div>\n\n                    {/* Main Content */}\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex items-center space-x-3 mb-1\">\n                        <span className=\"font-medium text-gray-900 capitalize\">\n                          {highlightSearchTerm(log?.accion)}\n                        </span>\n                        {log?.modulo ? (\n                          <span className=\"text-sm text-gray-500 bg-gray-100 px-2 py-1 rounded\">\n                            {log?.modulo}\n                          </span>\n                        ) : null}\n                        {log?.rol ? (\n                          <span className=\"text-sm text-gray-500 bg-blue-100 text-blue-800 px-2 py-1 rounded capitalize\">\n                            {log?.rol}\n                          </span>\n                        ) : null}\n                      </div>\n                      <p className=\"text-sm text-gray-600 truncate\">\n                        {highlightSearchTerm(log?.descripcion)}\n                      </p>\n                    </div>\n\n                    {/* User Info */}\n                    <div className=\"flex items-center space-x-2 text-sm text-gray-500 flex-shrink-0\">\n                      <User className=\"h-4 w-4\" />\n                      <span className=\"max-w-32 truncate\">\n                        {log?.usuarios?.nombre || 'Usuario Desconocido'}\n                      </span>\n                    </div>\n\n                    {/* Timestamp */}\n                    <div className=\"flex items-center space-x-2 text-sm text-gray-500 flex-shrink-0\">\n                      <Clock className=\"h-4 w-4\" />\n                      <span className=\"whitespace-nowrap\">{formatDate(log?.fecha)}</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Expanded Details */}\n              {isExpanded && (\n                <div\n                  id={panelId}\n                  role=\"region\"\n                  aria-labelledby={rowBtnId}\n                  className=\"px-4 pb-4 bg-gray-50 border-t border-gray-200\"\n                >\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mt-4\">\n                    {/* User Details */}\n                    <div className=\"space-y-2\">\n                      <h4 className=\"font-medium text-gray-900 flex items-center\">\n                        <User className=\"h-4 w-4 mr-2\" />\n                        Usuario\n                      </h4>\n                      <div className=\"text-sm text-gray-600 space-y-1\">\n                        <p>\n                          <strong>Nombre:</strong> {log?.usuarios?.nombre || 'N/A'}\n                        </p>\n                        <p>\n                          <strong>Email:</strong> {log?.usuarios?.correo || 'N/A'}\n                        </p>\n                        <p>\n                          <strong>Rol:</strong> <span className=\"capitalize\">{log?.rol || 'N/A'}</span>\n                        </p>\n                      </div>\n                    </div>\n\n                    {/* Activity Details */}\n                    <div className=\"space-y-2\">\n                      <h4 className=\"font-medium text-gray-900 flex items-center\">\n                        <Monitor className=\"h-4 w-4 mr-2\" />\n                        Actividad\n                      </h4>\n                      <div className=\"text-sm text-gray-600 space-y-1\">\n                        <p>\n                          <strong>Acción:</strong>{' '}\n                          <span className=\"capitalize\">{log?.accion || 'N/A'}</span>\n                        </p>\n                        <p>\n                          <strong>Módulo:</strong> {log?.modulo || 'N/A'}\n                        </p>\n                        <p>\n                          <strong>ID Log:</strong>{' '}\n                          <code className=\"bg-gray-200 px-1 rounded text-xs\">{log?.id ?? 'N/A'}</code>\n                        </p>\n                      </div>\n                    </div>\n\n                    {/* Technical Details */}\n                    <div className=\"space-y-2\">\n                      <h4 className=\"font-medium text-gray-900 flex items-center\">\n                        <MapPin className=\"h-4 w-4 mr-2\" />\n                        Detalles Técnicos\n                      </h4>\n                      <div className=\"text-sm text-gray-600 space-y-1\">\n                        <p>\n                          <strong>IP:</strong> {log?.ip_address || 'No registrada'}\n                        </p>\n                        <p>\n                          <strong>Fecha Completa:</strong>{' '}\n                          {log?.fecha ? new Date(log?.fecha).toLocaleString('es-ES') : 'N/A'}\n                        </p>\n                        <p>\n                          <strong>User Agent:</strong>\n                          <span className=\"block text-xs text-gray-500 mt-1 max-w-full truncate\">\n                            {log?.user_agent || 'No registrado'}\n                          </span>\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Full Description */}\n                  <div className=\"mt-4 pt-4 border-t border-gray-200\">\n                    <h4 className=\"font-medium text-gray-900 mb-2\">Descripción Completa</h4>\n                    <p className=\"text-sm text-gray-600 leading-relaxed\">\n                      {highlightSearchTerm(log?.descripcion)}\n                    </p>\n                  </div>\n                </div>\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n","size_bytes":12034},"src/pages/activity-logging-and-security-monitoring-dashboard/components/ExportPanel.jsx":{"content":"import React, { useState } from 'react';\nimport { Download, FileText, Table, Calendar, Clock, CheckCircle } from 'lucide-react';\nimport { activityLogService } from '@/services/activityLogService';\n\nexport default function ExportPanel({ logs = [], filters = {} }) {\n  const [exportFormat, setExportFormat] = useState('csv');      // csv | json | report\n  const [exportRange, setExportRange] = useState('current');    // current | all\n  const [isExporting, setIsExporting] = useState(false);\n  const [exportSuccess, setExportSuccess] = useState(false);\n\n  // --- helpers ---\n  const safe = (v) => (v ?? '');\n  const toESDateTime = (iso) => (iso ? new Date(iso).toLocaleString('es-ES') : '');\n\n  // CSV: comillas dobles y saltos de línea\n  const csvCell = (val) => {\n    const s = String(val ?? '');\n    const needsQuotes = /[\",\\n]/.test(s);\n    const escaped = s.replace(/\"/g, '\"\"');\n    return needsQuotes ? `\"${escaped}\"` : escaped;\n  };\n\n  const generateCSV = (data) => {\n    const headers = [\n      'Fecha',\n      'Usuario',\n      'Email',\n      'Rol',\n      'Acción',\n      'Módulo',\n      'Descripción',\n      'IP'\n    ];\n    const rows = data.map((log) => ([\n      toESDateTime(log?.fecha),\n      safe(log?.usuarios?.nombre),\n      safe(log?.usuarios?.correo),\n      safe(log?.rol),\n      safe(log?.accion),\n      safe(log?.modulo),\n      safe(log?.descripcion),\n      safe(log?.ip_address)\n    ].map(csvCell).join(',')));\n\n    const csv = [headers.join(','), ...rows].join('\\n');\n    // BOM para Excel\n    return '\\uFEFF' + csv;\n  };\n\n  const generateJSON = (data) => {\n    const exportData = data.map((log) => ({\n      fecha: log?.fecha,\n      usuario: {\n        nombre: log?.usuarios?.nombre,\n        correo: log?.usuarios?.correo\n      },\n      rol: log?.rol,\n      accion: log?.accion,\n      modulo: log?.modulo,\n      descripcion: log?.descripcion,\n      ip_address: log?.ip_address,\n      user_agent: log?.user_agent,\n      metadata: log?.metadata ?? null\n    }));\n    return JSON.stringify(exportData, null, 2);\n  };\n\n  const generateReport = (data) => {\n    const moduleDistribution = {};\n    const actionDistribution = {};\n    const roleDistribution = {};\n    const userSet = new Set();\n\n    data.forEach((log) => {\n      moduleDistribution[log?.modulo] = (moduleDistribution[log?.modulo] || 0) + 1;\n      actionDistribution[log?.accion] = (actionDistribution[log?.accion] || 0) + 1;\n      roleDistribution[log?.rol] = (roleDistribution[log?.rol] || 0) + 1;\n      if (log?.usuario_id) userSet.add(log?.usuario_id);\n    });\n\n    const reportData = {\n      metadata: {\n        generatedAt: new Date().toISOString(),\n        totalRecords: data.length,\n        filters,\n        dateRange: {\n          from: data.length > 0 ? data[data.length - 1]?.fecha : null,\n          to: data.length > 0 ? data[0]?.fecha : null\n        }\n      },\n      summary: {\n        uniqueUsers: userSet.size,\n        moduleDistribution,\n        actionDistribution,\n        roleDistribution\n      },\n      logs: data\n    };\n\n    return JSON.stringify(reportData, null, 2);\n  };\n\n  const downloadFile = (content, filename, contentType) => {\n    const blob = new Blob([content], { type: contentType });\n    const url = window.URL?.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = filename.replace(/[^\\w\\-\\.]+/g, '_'); // nombre seguro\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    window.URL?.revokeObjectURL(url);\n  };\n\n  const buildFilename = (base) => {\n    const ts = new Date().toISOString().split('T')[0];\n    const parts = [base, exportRange];\n    const filterTags = Object.entries(filters || {})\n      .filter(([k, v]) => v && v !== 'all' && v !== 'today')\n      .map(([k, v]) => `${k}-${String(v).toLowerCase()}`);\n    if (filterTags.length) parts.push(filterTags.join('_'));\n    parts.push(ts);\n    return parts.join('-');\n  };\n\n  const fetchAllLogs = async () => {\n    // Usa el service para exportar TODO (sin mock, sin dependencias del estado de la UI)\n    const result = await activityLogService.exportLogs({\n      // Puedes mapear aquí tus filtros UI > filtros del service si lo deseas\n      // e.g. module, action, startDate, endDate...\n    });\n    if (!result?.success) throw result?.error || new Error('No se pudo exportar');\n    // exportLogs() devuelve objetos de campos legibles;\n    // si deseas conservar la misma forma que tus \"logs\" con usuarios embebidos,\n    // puedes en el service crear un exportLogsWithUsers. Para ahora, usamos lo cargado en dashboard.\n    return logs; // fallback a lo visible si no quieres segunda llamada\n  };\n\n  const handleExport = async () => {\n    try {\n      setIsExporting(true);\n      setExportSuccess(false);\n\n      const dataToExport = exportRange === 'current'\n        ? logs\n        : await fetchAllLogs();\n\n      const filenameBase =\n        exportFormat === 'report' ? 'activity-report' : 'activity-logs';\n\n      let content, filename, contentType;\n\n      if (exportFormat === 'csv') {\n        content = generateCSV(dataToExport);\n        filename = `${buildFilename(filenameBase)}.csv`;\n        contentType = 'text/csv;charset=utf-8;';\n      } else if (exportFormat === 'json') {\n        content = generateJSON(dataToExport);\n        filename = `${buildFilename(filenameBase)}.json`;\n        contentType = 'application/json;charset=utf-8;';\n      } else if (exportFormat === 'report') {\n        content = generateReport(dataToExport);\n        filename = `${buildFilename('activity-report')}.json`;\n        contentType = 'application/json;charset=utf-8;';\n      } else {\n        throw new Error('Formato de exportación no válido');\n      }\n\n      downloadFile(content, filename, contentType);\n      setExportSuccess(true);\n      setTimeout(() => setExportSuccess(false), 3000);\n    } catch (err) {\n      console.error('Error exporting data:', err);\n      alert('Error al exportar los datos. Por favor, inténtalo de nuevo.');\n    } finally {\n      setIsExporting(false);\n    }\n  };\n\n  const getFormatIcon = (format) => {\n    switch (format) {\n      case 'csv': return <Table className=\"h-4 w-4\" />;\n      case 'json': return <FileText className=\"h-4 w-4\" />;\n      case 'report': return <FileText className=\"h-4 w-4\" />;\n      default: return <Download className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getFormatDescription = (format) => {\n    switch (format) {\n      case 'csv': return 'Archivo CSV compatible con Excel y hojas de cálculo';\n      case 'json': return 'Datos en formato JSON para análisis programático';\n      case 'report': return 'Reporte completo con estadísticas y metadatos';\n      default: return '';\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center space-x-2\">\n        <Download className=\"h-5 w-5 text-blue-600\" />\n        <h3 className=\"text-lg font-medium text-gray-900\">Exportar Datos</h3>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        {/* Formato */}\n        <div className=\"space-y-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-3\">\n              Formato de Exportación\n            </label>\n            <div className=\"space-y-3\">\n              {[\n                { value: 'csv', label: 'CSV (Excel)' },\n                { value: 'json', label: 'JSON (Datos)' },\n                { value: 'report', label: 'Reporte Completo' }\n              ].map((format) => (\n                <label key={format.value} className=\"flex items-start space-x-3 cursor-pointer\">\n                  <input\n                    type=\"radio\"\n                    name=\"exportFormat\"\n                    value={format.value}\n                    checked={exportFormat === format.value}\n                    onChange={(e) => setExportFormat(e.target.value)}\n                    className=\"mt-1 h-4 w-4 text-blue-600 border-gray-300 focus:ring-blue-500\"\n                  />\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-2\">\n                      {getFormatIcon(format.value)}\n                      <span className=\"font-medium text-gray-900\">{format.label}</span>\n                    </div>\n                    <p className=\"text-sm text-gray-500 mt-1\">\n                      {getFormatDescription(format.value)}\n                    </p>\n                  </div>\n                </label>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        {/* Rango */}\n        <div className=\"space-y-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-3\">\n              Rango de Datos\n            </label>\n            <div className=\"space-y-3\">\n              <label className=\"flex items-start space-x-3 cursor-pointer\">\n                <input\n                  type=\"radio\"\n                  name=\"exportRange\"\n                  value=\"current\"\n                  checked={exportRange === 'current'}\n                  onChange={(e) => setExportRange(e.target.value)}\n                  className=\"mt-1 h-4 w-4 text-blue-600 border-gray-300 focus:ring-blue-500\"\n                />\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Calendar className=\"h-4 w-4\" />\n                    <span className=\"font-medium text-gray-900\">Datos Actuales</span>\n                  </div>\n                  <p className=\"text-sm text-gray-500 mt-1\">\n                    Exportar {logs?.length || 0} registros mostrados actualmente\n                  </p>\n                </div>\n              </label>\n\n              <label className=\"flex items-start space-x-3 cursor-pointer\">\n                <input\n                  type=\"radio\"\n                  name=\"exportRange\"\n                  value=\"all\"\n                  checked={exportRange === 'all'}\n                  onChange={(e) => setExportRange(e.target.value)}\n                  className=\"mt-1 h-4 w-4 text-blue-600 border-gray-300 focus:ring-blue-500\"\n                />\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Calendar className=\"h-4 w-4\" />\n                    <span className=\"font-medium text-gray-900\">Todo (según filtros)</span>\n                  </div>\n                  <p className=\"text-sm text-gray-500 mt-1\">\n                    Consultar y exportar todos los registros coincidentes con filtros\n                  </p>\n                </div>\n              </label>\n            </div>\n          </div>\n\n          {/* Resumen */}\n          <div className=\"bg-gray-50 rounded-lg p-4 border\">\n            <h4 className=\"font-medium text-gray-900 mb-2\">Resumen de Exportación</h4>\n            <div className=\"space-y-1 text-sm text-gray-600\">\n              <div className=\"flex justify-between\">\n                <span>Registros (vista actual):</span>\n                <span className=\"font-medium\">{logs?.length || 0}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Formato:</span>\n                <span className=\"font-medium uppercase\">{exportFormat}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Rango:</span>\n                <span className=\"font-medium\">{exportRange === 'current' ? 'Actual' : 'Todo (filtros)'}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Filtros aplicados:</span>\n                <span className=\"font-medium\">\n                  {Object.values(filters || {}).filter(v => v !== 'all' && v !== 'today').length || 0}\n                </span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Botón */}\n      <div className=\"flex items-center justify-between pt-4 border-t border-gray-200\">\n        <div className=\"flex items-center space-x-2\">\n          <Clock className=\"h-4 w-4 text-gray-400\" />\n          <span className=\"text-sm text-gray-500\">\n            La exportación puede tardar unos segundos\n          </span>\n        </div>\n\n        <div className=\"flex items-center space-x-3\">\n          {exportSuccess && (\n            <div className=\"flex items-center space-x-2 text-green-600\">\n              <CheckCircle className=\"h-4 w-4\" />\n              <span className=\"text-sm font-medium\">¡Exportación exitosa!</span>\n            </div>\n          )}\n\n          <button\n            onClick={handleExport}\n            disabled={isExporting || (exportRange === 'current' && logs?.length === 0)}\n            className={`px-6 py-2 rounded-lg font-medium transition-colors flex items-center space-x-2 ${\n              isExporting || (exportRange === 'current' && logs?.length === 0)\n                ? 'bg-gray-300 text-gray-500 cursor-not-allowed'\n                : 'bg-blue-600 text-white hover:bg-blue-700'\n            }`}\n          >\n            {isExporting ? (\n              <>\n                <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n                <span>Exportando...</span>\n              </>\n            ) : (\n              <>\n                <Download className=\"h-4 w-4\" />\n                <span>Exportar Datos</span>\n              </>\n            )}\n          </button>\n        </div>\n      </div>\n\n      {logs?.length === 0 && exportRange === 'current' && (\n        <div className=\"text-center p-4 bg-yellow-50 rounded-lg border border-yellow-200\">\n          <p className=\"text-sm text-yellow-800\">\n            No hay datos disponibles para exportar. Ajusta los filtros para mostrar más registros.\n          </p>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":13747},"src/pages/activity-logging-and-security-monitoring-dashboard/components/FilterPanel.jsx":{"content":"import React, { useMemo } from 'react';\nimport { Calendar, Filter, RotateCcw } from 'lucide-react';\n\nexport default function FilterPanel({\n  filters,\n  onFilterChange,\n  // nuevas props para evitar mocks:\n  moduleOptions = [],       // [{value:'Authentication', label:'Autenticación'}, ...]\n  actionOptions = [],       // [{value:'login', label:'Inicio de sesión'}, ...]\n  roleOptions = [],         // [{value:'user', label:'Usuario'}, ...]\n  severityOptions = []      // [{value:'critical', label:'Crítica'}, ...]\n}) {\n  const handle = (key, value) => onFilterChange?.({ ...filters, [key]: value });\n\n  const reset = () => onFilterChange?.({\n    dateRange: 'today',\n    startDate: '',\n    endDate: '',\n    module: 'all',\n    action: 'all',\n    role: 'all',\n    severity: 'all'\n  });\n\n  const hasActiveFilters = useMemo(() =>\n    Object.entries(filters || {}).some(([k, v]) =>\n      !['all', 'today', '', null, undefined].includes(v) && !['startDate','endDate'].includes(k)\n    ) || !!(filters?.startDate || filters?.endDate)\n  , [filters]);\n\n  const showCustomDates = filters?.dateRange === 'custom';\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"text-lg font-medium text-gray-900 flex items-center\">\n          <Filter className=\"h-5 w-5 mr-2\" />\n          Filtros Avanzados\n        </h3>\n\n        {hasActiveFilters && (\n          <button onClick={reset} className=\"text-sm text-blue-600 hover:text-blue-800 flex items-center\">\n            <RotateCcw className=\"h-4 w-4 mr-1\" />\n            Limpiar filtros\n          </button>\n        )}\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4\">\n        {/* Date Range */}\n        <div className=\"space-y-2\">\n          <label className=\"block text-sm font-medium text-gray-700 flex items-center\">\n            <Calendar className=\"h-4 w-4 mr-1\" />\n            Rango de Fecha\n          </label>\n          <select\n            value={filters?.dateRange || 'today'}\n            onChange={(e) => handle('dateRange', e.target.value)}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm\"\n          >\n            <option value=\"today\">Hoy</option>\n            <option value=\"week\">Última semana</option>\n            <option value=\"month\">Último mes</option>\n            <option value=\"all\">Todo el tiempo</option>\n            <option value=\"custom\">Personalizado</option>\n          </select>\n\n          {showCustomDates && (\n            <div className=\"grid grid-cols-2 gap-2\">\n              <input\n                type=\"date\"\n                value={filters?.startDate || ''}\n                onChange={(e) => handle('startDate', e.target.value)}\n                className=\"px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm\"\n              />\n              <input\n                type=\"date\"\n                value={filters?.endDate || ''}\n                onChange={(e) => handle('endDate', e.target.value)}\n                className=\"px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm\"\n              />\n            </div>\n          )}\n        </div>\n\n        {/* Module */}\n        <div className=\"space-y-2\">\n          <label className=\"block text-sm font-medium text-gray-700\">Módulo</label>\n          <select\n            value={filters?.module || 'all'}\n            onChange={(e) => handle('module', e.target.value)}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm\"\n          >\n            <option value=\"all\">Todos los módulos</option>\n            {moduleOptions.map(opt => (\n              <option key={opt.value} value={opt.value}>{opt.label}</option>\n            ))}\n          </select>\n        </div>\n\n        {/* Action */}\n        <div className=\"space-y-2\">\n          <label className=\"block text-sm font-medium text-gray-700\">Acción</label>\n          <select\n            value={filters?.action || 'all'}\n            onChange={(e) => handle('action', e.target.value)}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm\"\n          >\n            <option value=\"all\">Todas las acciones</option>\n            {actionOptions.map(opt => (\n              <option key={opt.value} value={opt.value}>{opt.label}</option>\n            ))}\n          </select>\n        </div>\n\n        {/* Role */}\n        <div className=\"space-y-2\">\n          <label className=\"block text-sm font-medium text-gray-700\">Rol de Usuario</label>\n          <select\n            value={filters?.role || 'all'}\n            onChange={(e) => handle('role', e.target.value)}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm\"\n          >\n            <option value=\"all\">Todos los roles</option>\n            {roleOptions.map(opt => (\n              <option key={opt.value} value={opt.value}>{opt.label}</option>\n            ))}\n          </select>\n        </div>\n\n        {/* Severity */}\n        <div className=\"space-y-2\">\n          <label className=\"block text-sm font-medium text-gray-700\">Severidad</label>\n          <select\n            value={filters?.severity || 'all'}\n            onChange={(e) => handle('severity', e.target.value)}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm\"\n          >\n            <option value=\"all\">Todas las severidades</option>\n            {severityOptions.map(opt => (\n              <option key={opt.value} value={opt.value}>{opt.label}</option>\n            ))}\n          </select>\n        </div>\n      </div>\n\n      {/* Active filters summary */}\n      {hasActiveFilters && (\n        <div className=\"mt-4 p-3 bg-blue-50 rounded-lg\">\n          <div className=\"flex items-center flex-wrap gap-2 text-sm text-blue-800\">\n            <span className=\"font-medium mr-1\">Filtros activos:</span>\n            {filters?.dateRange && filters?.dateRange !== 'today' && (\n              <span className=\"bg-blue-100 px-2 py-1 rounded text-xs\">\n                Fecha: {filters?.dateRange === 'custom'\n                  ? `${filters?.startDate || '—'} → ${filters?.endDate || '—'}`\n                  : filters?.dateRange === 'week' ? 'Última semana'\n                  : filters?.dateRange === 'month' ? 'Último mes' : 'Todo el tiempo'}\n              </span>\n            )}\n            {filters?.module !== 'all' && <span className=\"bg-blue-100 px-2 py-1 rounded text-xs\">Módulo: {filters?.module}</span>}\n            {filters?.action !== 'all' && <span className=\"bg-blue-100 px-2 py-1 rounded text-xs\">Acción: {String(filters?.action).replace(/_/g,' ')}</span>}\n            {filters?.role !== 'all' && <span className=\"bg-blue-100 px-2 py-1 rounded text-xs\">Rol: {filters?.role}</span>}\n            {filters?.severity !== 'all' && <span className=\"bg-blue-100 px-2 py-1 rounded text-xs\">Severidad: {filters?.severity}</span>}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":7315},"src/pages/activity-logging-and-security-monitoring-dashboard/components/SecurityAlertPanel.jsx":{"content":"import React, { useState, useMemo } from 'react';\nimport { AlertTriangle, Shield, XCircle, Clock, TrendingUp, Eye } from 'lucide-react';\n\nexport default function SecurityAlertPanel({ logs = [] }) {\n  const [selectedSeverity, setSelectedSeverity] = useState('all');\n\n  const securityAlerts = useMemo(() => {\n    if (!logs?.length) return [];\n\n    const securityActions = [\n      'failed_login',\n      'unauthorized_access',\n      'security_violation',\n      'permission_denied',\n      'suspicious_activity',\n      'account_locked',\n      'multiple_failed_attempts',\n      'unusual_login_location'\n    ];\n\n    return logs\n      ?.filter(log => \n        securityActions?.some(action => \n          log?.accion?.toLowerCase()?.includes(action?.replace('_', ''))\n        ) ||\n        log?.descripcion?.toLowerCase()?.includes('security') ||\n        log?.descripcion?.toLowerCase()?.includes('unauthorized') ||\n        log?.descripcion?.toLowerCase()?.includes('failed')\n      )\n      ?.slice(0, 50) // Limit to last 50 security events\n      ?.map(log => ({\n        ...log,\n        severity: getSeverityLevel(log?.accion, log?.descripcion),\n        category: getCategoryFromAction(log?.accion)\n      }));\n  }, [logs]);\n\n  const getSeverityLevel = (action, description) => {\n    const text = `${action} ${description}`?.toLowerCase();\n    \n    if (text?.includes('unauthorized') || text?.includes('violation') || text?.includes('breach')) {\n      return 'critical';\n    }\n    if (text?.includes('failed') || text?.includes('denied') || text?.includes('locked')) {\n      return 'high';\n    }\n    if (text?.includes('suspicious') || text?.includes('unusual')) {\n      return 'medium';\n    }\n    \n    return 'low';\n  };\n\n  const getCategoryFromAction = (action) => {\n    const actionLower = action?.toLowerCase();\n    \n    if (actionLower?.includes('login') || actionLower?.includes('auth')) {\n      return 'authentication';\n    }\n    if (actionLower?.includes('access') || actionLower?.includes('permission')) {\n      return 'authorization';\n    }\n    if (actionLower?.includes('data') || actionLower?.includes('export')) {\n      return 'data_access';\n    }\n    \n    return 'general';\n  };\n\n  const getSeverityIcon = (severity) => {\n    switch (severity) {\n      case 'critical':\n        return <XCircle className=\"h-4 w-4 text-red-600\" />;\n      case 'high':\n        return <AlertTriangle className=\"h-4 w-4 text-red-500\" />;\n      case 'medium':\n        return <AlertTriangle className=\"h-4 w-4 text-yellow-500\" />;\n      case 'low':\n        return <Shield className=\"h-4 w-4 text-blue-500\" />;\n      default:\n        return <Shield className=\"h-4 w-4 text-gray-500\" />;\n    }\n  };\n\n  const getSeverityColor = (severity) => {\n    switch (severity) {\n      case 'critical':\n        return 'bg-red-100 border-red-300 text-red-800';\n      case 'high':\n        return 'bg-red-50 border-red-200 text-red-700';\n      case 'medium':\n        return 'bg-yellow-50 border-yellow-200 text-yellow-700';\n      case 'low':\n        return 'bg-blue-50 border-blue-200 text-blue-700';\n      default:\n        return 'bg-gray-50 border-gray-200 text-gray-700';\n    }\n  };\n\n  const getCategoryIcon = (category) => {\n    switch (category) {\n      case 'authentication':\n        return <Shield className=\"h-3 w-3\" />;\n      case 'authorization':\n        return <XCircle className=\"h-3 w-3\" />;\n      case 'data_access':\n        return <Eye className=\"h-3 w-3\" />;\n      default:\n        return <AlertTriangle className=\"h-3 w-3\" />;\n    }\n  };\n\n  const filteredAlerts = selectedSeverity === 'all' \n    ? securityAlerts \n    : securityAlerts?.filter(alert => alert?.severity === selectedSeverity);\n\n  const severityStats = useMemo(() => {\n    const stats = { critical: 0, high: 0, medium: 0, low: 0 };\n    securityAlerts?.forEach(alert => {\n      stats[alert?.severity] = (stats?.[alert?.severity] || 0) + 1;\n    });\n    return stats;\n  }, [securityAlerts]);\n\n  const formatTimeAgo = (dateString) => {\n    if (!dateString) return 'N/A';\n    \n    const date = new Date(dateString);\n    const now = new Date();\n    const diffMs = now - date;\n    const diffMinutes = Math.floor(diffMs / (1000 * 60));\n    const diffHours = Math.floor(diffMinutes / 60);\n\n    if (diffMinutes < 1) {\n      return 'Ahora';\n    } else if (diffMinutes < 60) {\n      return `${diffMinutes}m`;\n    } else if (diffHours < 24) {\n      return `${diffHours}h`;\n    } else {\n      return `${Math.floor(diffHours / 24)}d`;\n    }\n  };\n\n  return (\n    <div className=\"bg-white rounded-lg shadow-sm border h-fit\">\n      <div className=\"p-6 border-b border-gray-200\">\n        <h2 className=\"text-xl font-semibold text-gray-900 flex items-center\">\n          <AlertTriangle className=\"h-5 w-5 text-red-500 mr-2\" />\n          Alertas de Seguridad\n        </h2>\n        <p className=\"text-sm text-gray-500 mt-1\">\n          {securityAlerts?.length || 0} eventos de seguridad detectados\n        </p>\n      </div>\n      {/* Severity Summary */}\n      <div className=\"p-4 bg-gray-50 border-b border-gray-200\">\n        <div className=\"grid grid-cols-2 gap-3\">\n          <div className=\"flex items-center justify-between p-2 bg-red-100 rounded-lg\">\n            <div className=\"flex items-center\">\n              <XCircle className=\"h-4 w-4 text-red-600 mr-2\" />\n              <span className=\"text-sm font-medium text-red-800\">Críticas</span>\n            </div>\n            <span className=\"text-lg font-bold text-red-900\">{severityStats?.critical}</span>\n          </div>\n          \n          <div className=\"flex items-center justify-between p-2 bg-red-50 rounded-lg\">\n            <div className=\"flex items-center\">\n              <AlertTriangle className=\"h-4 w-4 text-red-500 mr-2\" />\n              <span className=\"text-sm font-medium text-red-700\">Altas</span>\n            </div>\n            <span className=\"text-lg font-bold text-red-800\">{severityStats?.high}</span>\n          </div>\n          \n          <div className=\"flex items-center justify-between p-2 bg-yellow-50 rounded-lg\">\n            <div className=\"flex items-center\">\n              <AlertTriangle className=\"h-4 w-4 text-yellow-500 mr-2\" />\n              <span className=\"text-sm font-medium text-yellow-700\">Medias</span>\n            </div>\n            <span className=\"text-lg font-bold text-yellow-800\">{severityStats?.medium}</span>\n          </div>\n          \n          <div className=\"flex items-center justify-between p-2 bg-blue-50 rounded-lg\">\n            <div className=\"flex items-center\">\n              <Shield className=\"h-4 w-4 text-blue-500 mr-2\" />\n              <span className=\"text-sm font-medium text-blue-700\">Bajas</span>\n            </div>\n            <span className=\"text-lg font-bold text-blue-800\">{severityStats?.low}</span>\n          </div>\n        </div>\n      </div>\n      {/* Severity Filter */}\n      <div className=\"p-4 border-b border-gray-200\">\n        <div className=\"flex space-x-2\">\n          {['all', 'critical', 'high', 'medium', 'low']?.map(severity => (\n            <button\n              key={severity}\n              onClick={() => setSelectedSeverity(severity)}\n              className={`px-3 py-1 text-xs rounded-full transition-colors ${\n                selectedSeverity === severity\n                  ? 'bg-blue-100 text-blue-800 border border-blue-300' :'bg-gray-100 text-gray-600 hover:bg-gray-200'\n              }`}\n            >\n              {severity === 'all' ? 'Todas' : severity?.charAt(0)?.toUpperCase() + severity?.slice(1)}\n              {severity !== 'all' && (\n                <span className=\"ml-1 text-xs\">({severityStats?.[severity] || 0})</span>\n              )}\n            </button>\n          ))}\n        </div>\n      </div>\n      {/* Alerts List */}\n      <div className=\"max-h-96 overflow-y-auto\">\n        {filteredAlerts?.length === 0 ? (\n          <div className=\"p-6 text-center\">\n            <Shield className=\"h-8 w-8 text-gray-400 mx-auto mb-2\" />\n            <p className=\"text-sm text-gray-500\">\n              {selectedSeverity === 'all' ?'No se detectaron alertas de seguridad'\n                : `No hay alertas de severidad ${selectedSeverity}`\n              }\n            </p>\n          </div>\n        ) : (\n          <div className=\"divide-y divide-gray-100\">\n            {filteredAlerts?.map((alert, index) => (\n              <div\n                key={alert?.id || index}\n                className={`p-4 border-l-4 ${getSeverityColor(alert?.severity)}`}\n              >\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex items-start space-x-3 flex-1\">\n                    <div className=\"flex-shrink-0 mt-0.5\">\n                      {getSeverityIcon(alert?.severity)}\n                    </div>\n                    \n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex items-center space-x-2 mb-1\">\n                        <span className=\"text-sm font-medium capitalize\">\n                          {alert?.accion?.replace(/_/g, ' ')}\n                        </span>\n                        <div className=\"flex items-center space-x-1 text-xs text-gray-500\">\n                          {getCategoryIcon(alert?.category)}\n                          <span className=\"capitalize\">{alert?.category?.replace(/_/g, ' ')}</span>\n                        </div>\n                      </div>\n                      \n                      <p className=\"text-xs text-gray-600 line-clamp-2 mb-2\">\n                        {alert?.descripcion}\n                      </p>\n                      \n                      <div className=\"flex items-center justify-between text-xs text-gray-500\">\n                        <span className=\"flex items-center\">\n                          <Clock className=\"h-3 w-3 mr-1\" />\n                          {formatTimeAgo(alert?.fecha)}\n                        </span>\n                        \n                        <span className=\"truncate max-w-24\" title={alert?.usuarios?.nombre}>\n                          {alert?.usuarios?.nombre || 'Usuario desconocido'}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n      {/* Summary Footer */}\n      {securityAlerts?.length > 0 && (\n        <div className=\"p-4 bg-gray-50 border-t border-gray-200\">\n          <div className=\"flex items-center justify-between text-sm\">\n            <span className=\"text-gray-600\">\n              Últimas {Math.min(50, securityAlerts?.length)} alertas\n            </span>\n            \n            <div className=\"flex items-center text-gray-500\">\n              <TrendingUp className=\"h-4 w-4 mr-1\" />\n              <span>Monitoreo activo</span>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":10856},"src/pages/activity-logging-and-security-monitoring-dashboard/components/StatisticsCards.jsx":{"content":"// src/modules/activity-logging-and-security-monitoring-dashboard/components/StatisticsCards.jsx\nimport React from 'react';\nimport { Activity, Calendar, AlertTriangle, Users, TrendingUp, TrendingDown, Minus } from 'lucide-react';\n\nexport default function StatisticsCards({\n  statistics = {},\n  previousStatistics = {},\n  loading = false\n}) {\n  const {\n    totalLogs = 0,\n    todayLogs = 0,\n    securityAlerts = 0,\n    activeUsers = 0\n  } = statistics;\n\n  const {\n    totalLogs: prevTotalLogs = null,\n    todayLogs: prevTodayLogs = null,\n    securityAlerts: prevSecurityAlerts = null,\n    activeUsers: prevActiveUsers = null\n  } = previousStatistics || {};\n\n  // Helpers\n  const formatNumber = (num) => {\n    const n = Number(num) || 0;\n    if (n >= 1_000_000) return `${(n / 1_000_000).toFixed(1)}M`;\n    if (n >= 1_000) return `${(n / 1_000).toFixed(1)}K`;\n    return `${n}`;\n  };\n\n  const getTrendIcon = (current, previous) => {\n    if (typeof previous !== 'number') {\n      return <Minus className=\"h-3 w-3 text-gray-500\" aria-hidden=\"true\" />;\n    }\n    if (current > previous) return <TrendingUp className=\"h-3 w-3 text-green-500\" aria-hidden=\"true\" />;\n    if (current < previous) return <TrendingDown className=\"h-3 w-3 text-red-500\" aria-hidden=\"true\" />;\n    return <Minus className=\"h-3 w-3 text-gray-500\" aria-hidden=\"true\" />;\n  };\n\n  const getColorClasses = (color) => {\n    const colorMap = {\n      blue:   { bg: 'bg-blue-50',   icon: 'text-blue-600',   border: 'border-blue-200',   bar: 'bg-blue-500' },\n      green:  { bg: 'bg-green-50',  icon: 'text-green-600',  border: 'border-green-200',  bar: 'bg-green-500' },\n      red:    { bg: 'bg-red-50',    icon: 'text-red-600',    border: 'border-red-200',    bar: 'bg-red-500' },\n      purple: { bg: 'bg-purple-50', icon: 'text-purple-600', border: 'border-purple-200', bar: 'bg-purple-500' },\n      gray:   { bg: 'bg-gray-50',   icon: 'text-gray-600',   border: 'border-gray-200',   bar: 'bg-gray-500' }\n    };\n    return colorMap[color] || colorMap.gray;\n  };\n\n  // Cards config (valor real para progreso; valor formateado para UI)\n  const cards = [\n    {\n      key: 'totalLogs',\n      title: 'Total de Registros',\n      valueRaw: Number(totalLogs) || 0,\n      value: formatNumber(totalLogs),\n      icon: Activity,\n      color: 'blue',\n      description: 'Actividades registradas',\n      trend: getTrendIcon(Number(totalLogs) || 0, typeof prevTotalLogs === 'number' ? prevTotalLogs : null)\n    },\n    {\n      key: 'todayLogs',\n      title: 'Actividad de Hoy',\n      valueRaw: Number(todayLogs) || 0,\n      value: formatNumber(todayLogs),\n      icon: Calendar,\n      color: 'green',\n      description: 'Eventos del día actual',\n      trend: getTrendIcon(Number(todayLogs) || 0, typeof prevTodayLogs === 'number' ? prevTodayLogs : null)\n    },\n    {\n      key: 'securityAlerts',\n      title: 'Alertas de Seguridad',\n      valueRaw: Number(securityAlerts) || 0,\n      value: formatNumber(securityAlerts),\n      icon: AlertTriangle,\n      color: (Number(securityAlerts) || 0) > 0 ? 'red' : 'gray',\n      description: 'Eventos críticos detectados',\n      trend: getTrendIcon(Number(securityAlerts) || 0, typeof prevSecurityAlerts === 'number' ? prevSecurityAlerts : null)\n    },\n    {\n      key: 'activeUsers',\n      title: 'Usuarios Activos',\n      valueRaw: Number(activeUsers) || 0,\n      value: formatNumber(activeUsers),\n      icon: Users,\n      color: 'purple',\n      description: 'Usuarios únicos hoy',\n      trend: getTrendIcon(Number(activeUsers) || 0, typeof prevActiveUsers === 'number' ? prevActiveUsers : null)\n    }\n  ];\n\n  // Skeleton card for loading state\n  const SkeletonCard = () => (\n    <div className=\"bg-gray-50 border border-gray-200 rounded-lg p-6\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"p-2 rounded-lg bg-white border border-gray-200\">\n            <div className=\"h-5 w-5 bg-gray-200 rounded animate-pulse\" />\n          </div>\n          <div>\n            <div className=\"h-3 w-28 bg-gray-200 rounded animate-pulse\" />\n            <div className=\"h-6 w-20 bg-gray-200 rounded mt-2 animate-pulse\" />\n          </div>\n        </div>\n        <div className=\"h-3 w-6 bg-gray-200 rounded animate-pulse\" />\n      </div>\n      <div className=\"mt-4 h-3 w-40 bg-gray-200 rounded animate-pulse\" />\n      <div className=\"mt-3 w-full bg-gray-200 rounded-full h-1.5\">\n        <div className=\"h-1.5 rounded-full bg-gray-300 w-1/3 animate-pulse\" />\n      </div>\n    </div>\n  );\n\n  if (loading) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\" role=\"status\" aria-label=\"Cargando estadísticas\">\n        {[...Array(4)].map((_, i) => <SkeletonCard key={i} />)}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\"\n      role=\"region\"\n      aria-label=\"Tarjetas de estadísticas\"\n    >\n      {cards.map((card) => {\n        const colors = getColorClasses(card.color);\n        const IconCmp = card.icon;\n\n        // Barra de “progreso” visual: mapea el valor a 10–100%\n        const pct = (() => {\n          const v = Math.max(0, Number(card.valueRaw) || 0);\n          // Escala simple: cap a 100 y mínimo 10 para que siempre se vea algo\n          const scaled = Math.min(100, v > 0 ? Math.max(10, Math.round((v % 100))) : 10);\n          return `${scaled}%`;\n        })();\n\n        return (\n          <div\n            key={card.key}\n            className={`${colors.bg} ${colors.border} border rounded-lg p-6 transition-all duration-200 hover:shadow-md`}\n            role=\"group\"\n            aria-label={card.title}\n          >\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-3\">\n                <div className={`p-2 rounded-lg bg-white ${colors.border} border`}>\n                  <IconCmp className={`h-5 w-5 ${colors.icon}`} aria-hidden=\"true\" />\n                </div>\n                <div>\n                  <h3 className=\"text-sm font-medium text-gray-600\">{card.title}</h3>\n                  <p className=\"text-2xl font-bold text-gray-900 mt-1\" aria-live=\"polite\">\n                    {card.value}\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"flex items-center space-x-1\" aria-label=\"Tendencia\">\n                {card.trend}\n              </div>\n            </div>\n\n            <div className=\"mt-4\">\n              <p className=\"text-xs text-gray-500\">{card.description}</p>\n            </div>\n\n            <div className=\"mt-3\" aria-hidden=\"true\">\n              <div className=\"w-full bg-gray-200 rounded-full h-1.5\">\n                <div\n                  className={`h-1.5 rounded-full transition-all duration-500 ${colors.bar}`}\n                  style={{ width: pct }}\n                />\n              </div>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","size_bytes":7000},"src/pages/administrator-employee-management-console/components/BulkActionsToolbar.jsx":{"content":"// src/administrator-employee-management-console/BulkActionsToolbar.jsx\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport Select from '../../../components/ui/Select';\n\nimport { siteDataService } from '../../data/siteDataService';\nimport { supervisorDataService } from '../../data/supervisorDataService';\n\nconst BulkActionsToolbar = ({\n  selectedCount,\n  onBulkAction,\n  onClearSelection,\n  userRole = 'admin',\n}) => {\n  const [showBulkMenu, setShowBulkMenu] = useState(false);\n  const [bulkActionType, setBulkActionType] = useState('');\n  const [bulkActionValue, setBulkActionValue] = useState('');\n\n  const [sites, setSites] = useState([]);\n  const [sitesLoading, setSitesLoading] = useState(false);\n\n  const [supervisors, setSupervisors] = useState([]);\n  const [supervisorsLoading, setSupervisorsLoading] = useState(false);\n\n  const mountedRef = useRef(false);\n\n  useEffect(() => {\n    mountedRef.current = true;\n    return () => { mountedRef.current = false; };\n  }, []);\n\n  // Cargar sitios reales\n  useEffect(() => {\n    const loadSites = async () => {\n      setSitesLoading(true);\n      try {\n        const res = await siteDataService.getSites();\n        if (mountedRef.current && res?.success) setSites(res.data || []);\n      } catch (e) {\n        console.error('Error loading sites:', e);\n      } finally {\n        setSitesLoading(false);\n      }\n    };\n    loadSites();\n  }, []);\n\n  // Cargar supervisores reales\n  useEffect(() => {\n    const loadSupervisors = async () => {\n      setSupervisorsLoading(true);\n      try {\n        const res = await supervisorDataService.getSupervisors();\n        if (mountedRef.current && res?.success) setSupervisors(res.data || []);\n      } catch (e) {\n        console.error('Error loading supervisors:', e);\n      } finally {\n        setSupervisorsLoading(false);\n      }\n    };\n    loadSupervisors();\n  }, []);\n\n  // Opciones dinámicas\n  const siteOptions = useMemo(\n    () => (sites || []).map(s => ({ value: s.id, label: s.nombre })),\n    [sites]\n  );\n\n  const supervisorOptions = useMemo(\n    () => (supervisors || []).map(u => ({\n      value: u.id,\n      label: u.nombre || u.correo\n    })),\n    [supervisors]\n  );\n\n  const statusOptions = useMemo(() => ([\n    { value: 'active', label: 'Activo' },\n    { value: 'inactive', label: 'Inactivo' },\n    { value: 'suspended', label: 'Suspendido' },\n    { value: 'terminated', label: 'Terminado' },\n  ]), []);\n\n  const bulkActions = useMemo(() => ([\n    { value: 'change-site',        label: 'Cambiar sitio de construcción', icon: 'MapPin' },\n    { value: 'change-supervisor',  label: 'Cambiar supervisor',            icon: 'UserCheck' },\n    { value: 'change-status',      label: 'Cambiar estado',                icon: 'ToggleLeft' },\n    { value: 'export-data',        label: 'Exportar datos seleccionados',  icon: 'Download' },\n    { value: 'send-notification',  label: 'Enviar notificación',           icon: 'Bell' },\n  ]), []);\n\n  const getActionOptions = (actionType) => {\n    switch (actionType) {\n      case 'change-site':\n        return siteOptions;\n      case 'change-supervisor':\n        return supervisorOptions;\n      case 'change-status':\n        return statusOptions;\n      default:\n        return [];\n    }\n  };\n\n  const handleBulkAction = () => {\n    // export-data y send-notification no requieren \"valor\" previo\n    const noValueNeeded = ['export-data', 'send-notification'].includes(bulkActionType);\n    if (!bulkActionType) return;\n    if (!noValueNeeded && !bulkActionValue) return;\n\n    onBulkAction?.({\n      action: bulkActionType,\n      value: bulkActionValue,\n      selectedCount,\n    });\n\n    // Reset\n    setBulkActionType('');\n    setBulkActionValue('');\n    setShowBulkMenu(false);\n  };\n\n  const canExecuteAction = () => {\n    if (['export-data', 'send-notification'].includes(bulkActionType)) return true;\n    return Boolean(bulkActionType && bulkActionValue);\n  };\n\n  if (selectedCount === 0) return null;\n\n  return (\n    <div className=\"bg-primary text-primary-foreground p-4 rounded-lg mb-4 shadow-sm\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"flex items-center space-x-2\">\n            <Icon name=\"CheckSquare\" size={20} />\n            <span className=\"font-medium\">\n              {selectedCount} empleado{selectedCount !== 1 ? 's' : ''} seleccionado{selectedCount !== 1 ? 's' : ''}\n            </span>\n          </div>\n\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={onClearSelection}\n            className=\"text-primary-foreground hover:bg-primary-foreground/10\"\n            iconName=\"X\"\n            iconSize={16}\n          >\n            Limpiar selección\n          </Button>\n        </div>\n\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setShowBulkMenu(!showBulkMenu)}\n            className=\"text-primary-foreground hover:bg-primary-foreground/10\"\n            iconName=\"Settings\"\n            iconSize={16}\n          >\n            Acciones masivas\n          </Button>\n\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => onBulkAction?.({ action: 'export-selected', selectedCount })}\n            className=\"text-primary-foreground hover:bg-primary-foreground/10\"\n            iconName=\"Download\"\n            iconSize={16}\n          >\n            Exportar\n          </Button>\n        </div>\n      </div>\n\n      {/* Menú de acciones masivas */}\n      {showBulkMenu && (\n        <div className=\"mt-4 p-4 bg-primary-foreground/10 rounded-lg\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div>\n              <Select\n                label=\"Acción\"\n                options={bulkActions.map(a => ({ value: a.value, label: a.label }))}\n                value={bulkActionType}\n                onChange={(v) => {\n                  setBulkActionType(v);\n                  setBulkActionValue(''); // limpiar valor previo al cambiar acción\n                }}\n                placeholder=\"Seleccionar acción...\"\n                className=\"text-foreground\"\n              />\n            </div>\n\n            {bulkActionType && !['export-data', 'send-notification'].includes(bulkActionType) && (\n              <div>\n                <Select\n                  label=\"Nuevo valor\"\n                  options={getActionOptions(bulkActionType)}\n                  value={bulkActionValue}\n                  onChange={setBulkActionValue}\n                  placeholder={\n                    bulkActionType === 'change-site'\n                      ? (sitesLoading ? 'Cargando sitios...' : 'Seleccionar sitio...')\n                      : bulkActionType === 'change-supervisor'\n                      ? (supervisorsLoading ? 'Cargando supervisores...' : 'Seleccionar supervisor...')\n                      : 'Seleccionar valor...'\n                  }\n                  disabled={\n                    (bulkActionType === 'change-site' && sitesLoading) ||\n                    (bulkActionType === 'change-supervisor' && supervisorsLoading)\n                  }\n                  className=\"text-foreground\"\n                />\n              </div>\n            )}\n\n            <div className=\"flex items-end\">\n              <Button\n                onClick={handleBulkAction}\n                disabled={!canExecuteAction()}\n                className=\"w-full bg-primary-foreground text-primary hover:bg-primary-foreground/90\"\n                iconName=\"Play\"\n                iconSize={16}\n              >\n                Ejecutar\n              </Button>\n            </div>\n          </div>\n\n          {bulkActionType === 'send-notification' && (\n            <div className=\"mt-4\">\n              <textarea\n                placeholder=\"Mensaje de notificación...\"\n                className=\"w-full p-3 border border-primary-foreground/20 rounded-md bg-primary-foreground/10 text-primary-foreground placeholder-primary-foreground/60 resize-none\"\n                rows={3}\n                value={bulkActionValue}\n                onChange={(e) => setBulkActionValue(e?.target?.value)}\n              />\n            </div>\n          )}\n\n          {bulkActionType && (\n            <div className=\"mt-3 p-3 bg-primary-foreground/5 rounded-md\">\n              <div className=\"flex items-start space-x-2\">\n                <Icon name=\"Info\" size={16} className=\"text-primary-foreground/80 mt-0.5\" />\n                <div className=\"text-sm text-primary-foreground/80\">\n                  {bulkActionType === 'change-site' &&\n                    `Se cambiará el sitio de construcción de ${selectedCount} empleado${selectedCount !== 1 ? 's' : ''}.`}\n                  {bulkActionType === 'change-supervisor' &&\n                    `Se cambiará el supervisor de ${selectedCount} empleado${selectedCount !== 1 ? 's' : ''}.`}\n                  {bulkActionType === 'change-status' &&\n                    `Se cambiará el estado de ${selectedCount} empleado${selectedCount !== 1 ? 's' : ''}.`}\n                  {bulkActionType === 'export-data' &&\n                    `Se exportarán los datos de ${selectedCount} empleado${selectedCount !== 1 ? 's' : ''} seleccionado${selectedCount !== 1 ? 's' : ''}.`}\n                  {bulkActionType === 'send-notification' &&\n                    `Se enviará una notificación a ${selectedCount} empleado${selectedCount !== 1 ? 's' : ''}.`}\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default BulkActionsToolbar;\n","size_bytes":9756},"src/pages/administrator-employee-management-console/components/EmployeeCreationModal.jsx":{"content":"// src/administrator-employee-management-console/EmployeeCreationModal.jsx\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport Input from '../../../components/ui/Input';\nimport Select from '../../../components/ui/Select';\nimport { siteDataService } from '../../data/siteDataService';\nimport { supervisorDataService } from '../../data/supervisorDataService';\nimport { employeeDataService } from '../../data/employeeDataService';\n\nconst EMAIL_RE = /\\S+@\\S+\\.\\S+/;\n\nconst EmployeeCreationModal = ({\n  isOpen,\n  onClose,\n  onSave,          // callback opcional tras crear\n  userRole = 'admin',\n}) => {\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    phone: '',\n    idNumber: '',\n    birthDate: '',\n    address: '',\n    emergencyContact: '',\n    site: '',           // obra_id\n    supervisor: '',     // supervisor_id\n    hireDate: new Date().toISOString().split('T')?.[0],\n    dailySalary: '',\n    status: 'active',\n    puesto: '',         // opcional: cargo/puesto (no mock)\n  });\n\n  const [errors, setErrors] = useState({});\n  const [currentStep, setCurrentStep] = useState(1);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  // Datos reales desde BD\n  const [sites, setSites] = useState([]);\n  const [sitesLoading, setSitesLoading] = useState(false);\n  const [supervisors, setSupervisors] = useState([]);\n  const [supervisorsLoading, setSupervisorsLoading] = useState(false);\n\n  const mountedRef = useRef(false);\n  const inFlightRef = useRef({ sites: false, sups: false });\n\n  const siteOptions = useMemo(\n    () => (sites || []).map(s => ({ value: s.id, label: s.nombre })),\n    [sites]\n  );\n  const supervisorOptions = useMemo(\n    () => (supervisors || []).map(u => ({ value: u.id, label: u.nombre || u.correo })),\n    [supervisors]\n  );\n\n  const steps = [\n    { id: 1, title: 'Información Personal', icon: 'User' },\n    { id: 2, title: 'Contacto', icon: 'Phone' },\n    { id: 3, title: 'Empleo', icon: 'Briefcase' },\n    { id: 4, title: 'Confirmación', icon: 'CheckCircle' },\n  ];\n\n  const handleInputChange = (field, value) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n    if (errors?.[field]) setErrors(prev => ({ ...prev, [field]: '' }));\n  };\n\n  const validateStep = (step) => {\n    const e = {};\n    if (step === 1) {\n      if (!formData?.name?.trim()) e.name = 'El nombre es requerido';\n      if (!formData?.idNumber?.trim()) e.idNumber = 'El número de identificación es requerido';\n      if (!formData?.birthDate) e.birthDate = 'La fecha de nacimiento es requerida';\n    }\n    if (step === 2) {\n      if (!formData?.email?.trim()) e.email = 'El email es requerido';\n      else if (!EMAIL_RE.test(formData?.email)) e.email = 'El email no es válido';\n      if (!formData?.phone?.trim()) e.phone = 'El teléfono es requerido';\n    }\n    if (step === 3) {\n      if (!formData?.site) e.site = 'El sitio de construcción es requerido';\n      if (!formData?.supervisor) e.supervisor = 'El supervisor es requerido';\n      if (!formData?.hireDate) e.hireDate = 'La fecha de contratación es requerida';\n      if (userRole === 'admin' && (formData?.dailySalary === '' || formData?.dailySalary === null)) {\n        e.dailySalary = 'El salario diario es requerido';\n      }\n      if (formData?.dailySalary !== '' && Number.isNaN(+formData?.dailySalary)) {\n        e.dailySalary = 'El salario debe ser numérico';\n      }\n    }\n    setErrors(e);\n    return Object.keys(e).length === 0;\n  };\n\n  const handleNext = () => {\n    if (validateStep(currentStep)) {\n      setCurrentStep(prev => Math.min(prev + 1, steps.length));\n    }\n  };\n\n  const handlePrevious = () => setCurrentStep(prev => Math.max(prev - 1, 1));\n\n  const handleSubmit = async () => {\n    if (!validateStep(3)) return;\n    setIsSubmitting(true);\n    try {\n      // Mapea a tu tabla `usuarios` vía employeeDataService (sin valores ficticios)\n      const payload = {\n        name: formData.name,\n        email: formData.email,\n        phone: formData.phone,\n        puesto: formData.puesto || null,                // si no capturas puesto, va null\n        obra_id: formData.site,                         // obra real\n        supervisor_id: formData.supervisor,             // supervisor real\n        hourly_rate: Number(formData.dailySalary) || 0, // usa field existente en BD\n        role: 'user',\n      };\n\n      const res = await employeeDataService.createEmployee(payload);\n      if (!res?.success) throw new Error(res?.error || 'No se pudo crear el empleado');\n\n      if (typeof onSave === 'function') {\n        await onSave(res.data);\n      }\n\n      // Reset limpio\n      setFormData({\n        name: '',\n        email: '',\n        phone: '',\n        idNumber: '',\n        birthDate: '',\n        address: '',\n        emergencyContact: '',\n        site: '',\n        supervisor: '',\n        hireDate: new Date().toISOString().split('T')?.[0],\n        dailySalary: '',\n        status: 'active',\n        puesto: '',\n      });\n      setCurrentStep(1);\n      setErrors({});\n      onClose?.();\n    } catch (err) {\n      console.error('Error creating employee:', err);\n      setErrors(prev => ({ ...prev, submit: err?.message || 'No se pudo crear el empleado' }));\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  // Cargar sitios y supervisores desde BD al abrir\n  useEffect(() => {\n    mountedRef.current = true;\n    if (!isOpen) return;\n\n    const loadSites = async () => {\n      if (inFlightRef.current.sites) return;\n      inFlightRef.current.sites = true;\n      setSitesLoading(true);\n      try {\n        const res = await siteDataService.getSites({ activa: true, limit: 500, orderBy: 'created_at', order: 'desc' });\n        if (mountedRef.current && res?.success) setSites(res.data || []);\n      } catch (e) {\n        console.error('Error loading sites:', e);\n      } finally {\n        setSitesLoading(false);\n        inFlightRef.current.sites = false;\n      }\n    };\n\n    const loadSupervisors = async () => {\n      if (inFlightRef.current.sups) return;\n      inFlightRef.current.sups = true;\n      setSupervisorsLoading(true);\n      try {\n        const res = await supervisorDataService.getSupervisors({\n          roles: ['supervisor', 'admin', 'superadmin'],\n          is_active: true,\n          limit: 500,\n          orderBy: 'created_at',\n          order: 'desc',\n        });\n        if (mountedRef.current && res?.success) setSupervisors(res.data || []);\n      } catch (e) {\n        console.error('Error loading supervisors:', e);\n      } finally {\n        setSupervisorsLoading(false);\n        inFlightRef.current.sups = false;\n      }\n    };\n\n    loadSites();\n    loadSupervisors();\n\n    return () => { mountedRef.current = false; };\n  }, [isOpen]);\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-card border border-border rounded-lg w-full max-w-2xl max-h-[90vh] overflow-hidden\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-6 border-b border-border\">\n          <div>\n            <h2 className=\"text-xl font-semibold text-foreground\">Nuevo Empleado</h2>\n            <p className=\"text-sm text-muted-foreground mt-1\">\n              Paso {currentStep} de {steps.length}: {steps[currentStep - 1]?.title}\n            </p>\n          </div>\n          <Button variant=\"ghost\" size=\"icon\" onClick={onClose} iconName=\"X\" iconSize={20} />\n        </div>\n\n        {/* Steps */}\n        <div className=\"px-6 py-4 border-b border-border\">\n          <div className=\"flex items-center justify-between\">\n            {steps.map((step, idx) => (\n              <div key={step.id} className=\"flex items-center\">\n                <div className={`flex items-center justify-center w-8 h-8 rounded-full border-2 transition-colors\n                  ${currentStep >= step.id ? 'bg-primary border-primary text-primary-foreground' : 'border-border text-muted-foreground'}`}>\n                  {currentStep > step.id ? <Icon name=\"Check\" size={16} /> : <Icon name={step.icon} size={16} />}\n                </div>\n                {idx < steps.length - 1 && (\n                  <div className={`w-16 h-0.5 mx-2 ${currentStep > step.id ? 'bg-primary' : 'bg-border'}`} />\n                )}\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Content */}\n        <div className=\"p-6 overflow-y-auto max-h-96\">\n          {currentStep === 1 && (\n            <div className=\"space-y-4\">\n              <Input\n                label=\"Nombre completo\"\n                placeholder=\"Ej: Juan Pérez García\"\n                value={formData.name}\n                onChange={(e) => handleInputChange('name', e?.target?.value)}\n                error={errors.name}\n                required\n              />\n              <Input\n                label=\"Número de identificación\"\n                placeholder=\"Ej: 12345678A\"\n                value={formData.idNumber}\n                onChange={(e) => handleInputChange('idNumber', e?.target?.value)}\n                error={errors.idNumber}\n                required\n              />\n              <Input\n                label=\"Fecha de nacimiento\"\n                type=\"date\"\n                value={formData.birthDate}\n                onChange={(e) => handleInputChange('birthDate', e?.target?.value)}\n                error={errors.birthDate}\n                required\n              />\n            </div>\n          )}\n\n          {currentStep === 2 && (\n            <div className=\"space-y-4\">\n              <Input\n                label=\"Email\"\n                type=\"email\"\n                placeholder=\"juan.perez@empresa.com\"\n                value={formData.email}\n                onChange={(e) => handleInputChange('email', e?.target?.value)}\n                error={errors.email}\n                required\n              />\n              <Input\n                label=\"Teléfono\"\n                type=\"tel\"\n                placeholder=\"+52 81 0000 0000\"\n                value={formData.phone}\n                onChange={(e) => handleInputChange('phone', e?.target?.value)}\n                error={errors.phone}\n                required\n              />\n              <Input\n                label=\"Dirección\"\n                placeholder=\"Calle Principal 123, Ciudad\"\n                value={formData.address}\n                onChange={(e) => handleInputChange('address', e?.target?.value)}\n              />\n              <Input\n                label=\"Contacto de emergencia\"\n                placeholder=\"Nombre y teléfono\"\n                value={formData.emergencyContact}\n                onChange={(e) => handleInputChange('emergencyContact', e?.target?.value)}\n              />\n            </div>\n          )}\n\n          {currentStep === 3 && (\n            <div className=\"space-y-4\">\n              <Select\n                label=\"Sitio de construcción\"\n                options={siteOptions}\n                value={formData.site}\n                onChange={(value) => handleInputChange('site', value)}\n                error={errors.site}\n                required\n                placeholder={sitesLoading ? 'Cargando sitios...' : 'Seleccionar sitio...'}\n                disabled={sitesLoading}\n              />\n              <Select\n                label=\"Supervisor\"\n                options={supervisorOptions}\n                value={formData.supervisor}\n                onChange={(value) => handleInputChange('supervisor', value)}\n                error={errors.supervisor}\n                required\n                placeholder={supervisorsLoading ? 'Cargando supervisores...' : 'Seleccionar supervisor...'}\n                disabled={supervisorsLoading}\n              />\n              <Input\n                label=\"Fecha de contratación\"\n                type=\"date\"\n                value={formData.hireDate}\n                onChange={(e) => handleInputChange('hireDate', e?.target?.value)}\n                error={errors.hireDate}\n                required\n              />\n              {userRole === 'admin' && (\n                <Input\n                  label=\"Salario diario\"\n                  type=\"number\"\n                  placeholder=\"800.00\"\n                  value={formData.dailySalary}\n                  onChange={(e) => handleInputChange('dailySalary', e?.target?.value)}\n                  error={errors.dailySalary}\n                  required\n                />\n              )}\n              <Input\n                label=\"Puesto (opcional)\"\n                placeholder=\"Ej: Albañil, Electricista...\"\n                value={formData.puesto}\n                onChange={(e) => handleInputChange('puesto', e?.target?.value)}\n              />\n              {errors.submit && <p className=\"text-sm text-destructive mt-2\">{errors.submit}</p>}\n            </div>\n          )}\n\n          {currentStep === 4 && (\n            <div className=\"space-y-6\">\n              <div className=\"text-center\">\n                <Icon name=\"CheckCircle\" size={48} className=\"mx-auto text-success mb-4\" />\n                <h3 className=\"text-lg font-semibold text-foreground mb-2\">Confirmar creación</h3>\n                <p className=\"text-muted-foreground\">Revisa la información antes de crear el empleado.</p>\n              </div>\n\n              <div className=\"bg-muted/50 rounded-lg p-4 space-y-3\">\n                <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                  <div>\n                    <span className=\"font-medium text-muted-foreground\">Nombre:</span>\n                    <p className=\"text-foreground\">{formData.name}</p>\n                  </div>\n                  <div>\n                    <span className=\"font-medium text-muted-foreground\">Email:</span>\n                    <p className=\"text-foreground\">{formData.email}</p>\n                  </div>\n                  <div>\n                    <span className=\"font-medium text-muted-foreground\">Sitio:</span>\n                    <p className=\"text-foreground\">\n                      {siteOptions.find(s => s.value === formData.site)?.label || '—'}\n                    </p>\n                  </div>\n                  <div>\n                    <span className=\"font-medium text-muted-foreground\">Supervisor:</span>\n                    <p className=\"text-foreground\">\n                      {supervisorOptions.find(s => s.value === formData.supervisor)?.label || '—'}\n                    </p>\n                  </div>\n                  {formData.puesto ? (\n                    <div className=\"col-span-2\">\n                      <span className=\"font-medium text-muted-foreground\">Puesto:</span>\n                      <p className=\"text-foreground\">{formData.puesto}</p>\n                    </div>\n                  ) : null}\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Footer */}\n        <div className=\"flex items-center justify-between p-6 border-t border-border\">\n          <Button\n            variant=\"outline\"\n            onClick={currentStep === 1 ? onClose : handlePrevious}\n            iconName={currentStep === 1 ? 'X' : 'ChevronLeft'}\n            iconSize={16}\n          >\n            {currentStep === 1 ? 'Cancelar' : 'Anterior'}\n          </Button>\n\n          <div className=\"flex space-x-2\">\n            {currentStep < steps.length ? (\n              <Button\n                onClick={handleNext}\n                iconName=\"ChevronRight\"\n                iconPosition=\"right\"\n                iconSize={16}\n                disabled={sitesLoading || supervisorsLoading}\n              >\n                Siguiente\n              </Button>\n            ) : (\n              <Button\n                onClick={handleSubmit}\n                loading={isSubmitting}\n                iconName=\"Plus\"\n                iconSize={16}\n                disabled={isSubmitting}\n              >\n                Crear Empleado\n              </Button>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default EmployeeCreationModal;\n","size_bytes":16129},"src/pages/administrator-employee-management-console/components/EmployeeDetailPanel.jsx":{"content":"// src/administrator-employee-management-console/EmployeeDetailPanel.jsx\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Image from '../../../components/AppImage';\nimport Button from '../../../components/ui/Button';\nimport Input from '../../../components/ui/Input';\nimport Select from '../../../components/ui/Select';\n\nimport { siteDataService } from '../../data/siteDataService';\nimport { supervisorDataService } from '../../data/supervisorDataService';\nimport { employeeDataService } from '../../data/employeeDataService';\n\nconst STATUS_OPTIONS = [\n  { value: 'active', label: 'Activo' },\n  { value: 'inactive', label: 'Inactivo' },\n  { value: 'suspended', label: 'Suspendido' },\n  { value: 'terminated', label: 'Terminado' },\n];\n\nconst TABS = [\n  { id: 'general', label: 'General', icon: 'User' },\n  { id: 'contact', label: 'Contacto', icon: 'Phone' },\n  { id: 'employment', label: 'Empleo', icon: 'Briefcase' },\n  { id: 'documents', label: 'Documentos', icon: 'FileText' },\n];\n\nconst getStatusColor = (status) => {\n  const colors = {\n    active: 'bg-success text-success-foreground',\n    inactive: 'bg-secondary text-secondary-foreground',\n    suspended: 'bg-warning text-warning-foreground',\n    terminated: 'bg-error text-error-foreground',\n  };\n  return colors[status] || colors.inactive;\n};\n\nconst EmployeeDetailPanel = ({\n  employee,\n  onClose,\n  onSave,           // callback opcional tras guardar\n  onViewAttendance,\n  onViewPayroll,\n  onViewIncidents,\n  userRole = 'admin',\n  isEditing = false,\n  onToggleEdit,\n}) => {\n  const [editData, setEditData] = useState(employee || {});\n  const [activeTab, setActiveTab] = useState('general');\n\n  const [sites, setSites] = useState([]);\n  const [sitesLoading, setSitesLoading] = useState(false);\n\n  const [supervisors, setSupervisors] = useState([]);\n  const [supervisorsLoading, setSupervisorsLoading] = useState(false);\n\n  const [saving, setSaving] = useState(false);\n  const [formError, setFormError] = useState('');\n\n  const mountedRef = useRef(false);\n\n  useEffect(() => {\n    mountedRef.current = true;\n    return () => { mountedRef.current = false; };\n  }, []);\n\n  // Cargar datos reales de BD\n  useEffect(() => {\n    if (!employee) return;\n\n    const loadSites = async () => {\n      setSitesLoading(true);\n      try {\n        const res = await siteDataService.getSites({ activa: true, limit: 500 });\n        if (mountedRef.current && res?.success) setSites(res.data || []);\n      } catch (e) {\n        console.error('Error loading sites:', e);\n      } finally {\n        setSitesLoading(false);\n      }\n    };\n\n    const loadSupervisors = async () => {\n      setSupervisorsLoading(true);\n      try {\n        const res = await supervisorDataService.getSupervisors({\n          roles: ['supervisor', 'admin', 'superadmin'],\n          is_active: true,\n          limit: 500,\n        });\n        if (mountedRef.current && res?.success) setSupervisors(res.data || []);\n      } catch (e) {\n        console.error('Error loading supervisors:', e);\n      } finally {\n        setSupervisorsLoading(false);\n      }\n    };\n\n    loadSites();\n    loadSupervisors();\n  }, [employee?.id]);\n\n  // Mantener editData sincronizado al cambiar el empleado\n  useEffect(() => {\n    setEditData(employee || {});\n    setFormError('');\n  }, [employee]);\n\n  const siteOptions = useMemo(\n    () => (sites || []).map(s => ({ value: s.id, label: s.nombre })),\n    [sites]\n  );\n  const supervisorOptions = useMemo(\n    () => (supervisors || []).map(u => ({ value: u.id, label: u.nombre || u.correo })),\n    [supervisors]\n  );\n\n  const siteLabel = useMemo(() => {\n    const byId = siteOptions.find(s => s.value === (employee?.obra_id || employee?.site || employee?.site_id));\n    return byId?.label || employee?.sitio_asignado || '—';\n  }, [employee, siteOptions]);\n\n  const supervisorLabel = useMemo(() => {\n    const id = employee?.supervisor_id || employee?.supervisor;\n    const found = supervisorOptions.find(s => s.value === id);\n    return found?.label || employee?.supervisor_name || '—';\n  }, [employee, supervisorOptions]);\n\n  if (!employee) {\n    return (\n      <div className=\"w-full h-full bg-card border border-border rounded-lg flex items-center justify-center\">\n        <div className=\"text-center\">\n          <Icon name=\"Users\" size={48} className=\"mx-auto text-muted-foreground mb-4\" />\n          <h3 className=\"text-lg font-medium text-foreground mb-2\">Selecciona un empleado</h3>\n          <p className=\"text-muted-foreground\">Haz clic en un empleado de la tabla para ver sus detalles.</p>\n        </div>\n      </div>\n    );\n  }\n\n  const handleInputChange = (field, value) => {\n    setEditData(prev => ({ ...prev, [field]: value }));\n    if (formError) setFormError('');\n  };\n\n  const formatDate = (dateString) => {\n    if (!dateString) return 'No especificada';\n    const d = new Date(dateString);\n    if (Number.isNaN(d.getTime())) return 'No especificada';\n    return d.toLocaleDateString('es-ES', { day: '2-digit', month: '2-digit', year: 'numeric' });\n  };\n\n  const handleSave = async () => {\n    try {\n      setSaving(true);\n      setFormError('');\n\n      // Mapear a columnas reales de `usuarios`\n      const payload = {\n        nombre: editData?.name ?? editData?.nombre ?? employee?.nombre ?? employee?.name,\n        correo: editData?.email ?? employee?.correo ?? employee?.email,\n        telefono: editData?.phone ?? employee?.telefono ?? employee?.phone ?? null,\n        puesto: editData?.puesto ?? employee?.puesto ?? null,\n        obra_id:\n          editData?.obra_id ??\n          editData?.site ??\n          employee?.obra_id ??\n          employee?.site ??\n          null,\n        supervisor_id:\n          editData?.supervisor_id ??\n          editData?.supervisor ??\n          employee?.supervisor_id ??\n          null,\n        hourly_rate:\n          editData?.hourly_rate ??\n          editData?.dailySalary ??\n          employee?.hourly_rate ??\n          0,\n        // is_active desde status\n        is_active:\n          (editData?.status ?? employee?.status ?? 'active') === 'active',\n      };\n\n      const res = await employeeDataService.updateEmployee(employee.id, payload);\n      if (!res?.success) throw new Error(res?.error || 'No se pudo actualizar el empleado');\n\n      // Refrescar datos locales con respuesta de BD\n      const updated = res.data;\n\n      if (typeof onSave === 'function') await onSave(updated);\n      onToggleEdit?.(); // salir de edición\n    } catch (e) {\n      console.error('Save error:', e);\n      setFormError(e?.message || 'Error al guardar cambios');\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  return (\n    <div className=\"w-full h-full bg-card border border-border rounded-lg flex flex-col\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between p-4 border-b border-border\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"flex-shrink-0\">\n            {employee?.avatar ? (\n              <Image src={employee.avatar} alt={employee?.nombre || employee?.name} className=\"w-12 h-12 rounded-full object-cover\" />\n            ) : (\n              <div className=\"w-12 h-12 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-sm font-medium\">\n                {(employee?.nombre || employee?.name || '??')\n                  .split(' ')\n                  .map(n => n?.[0])\n                  .filter(Boolean)\n                  .join('')\n                  .toUpperCase()}\n              </div>\n            )}\n          </div>\n          <div>\n            <h2 className=\"text-lg font-semibold text-foreground\">{employee?.nombre || employee?.name}</h2>\n            {employee?.employeeId ? (\n              <p className=\"text-sm text-muted-foreground\">ID: {employee.employeeId}</p>\n            ) : null}\n          </div>\n        </div>\n\n        <div className=\"flex items-center space-x-2\">\n          {isEditing ? (\n            <>\n              <Button variant=\"outline\" size=\"sm\" onClick={onToggleEdit} iconName=\"X\" iconSize={16}>\n                Cancelar\n              </Button>\n              <Button size=\"sm\" onClick={handleSave} loading={saving} iconName=\"Save\" iconSize={16}>\n                Guardar\n              </Button>\n            </>\n          ) : (\n            <Button variant=\"outline\" size=\"sm\" onClick={onToggleEdit} iconName=\"Edit\" iconSize={16}>\n              Editar\n            </Button>\n          )}\n\n          <Button variant=\"ghost\" size=\"icon\" onClick={onClose} iconName=\"X\" iconSize={16} />\n        </div>\n      </div>\n\n      {/* Status & quick actions */}\n      <div className=\"p-4 border-b border-border\">\n        <div className=\"flex items-center justify-between mb-2\">\n          <span\n            className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${getStatusColor(\n              (employee?.status || (employee?.is_active ? 'active' : 'inactive'))\n            )}`}\n          >\n            {employee?.status\n              ? (employee.status === 'active'\n                  ? 'Activo'\n                  : employee.status === 'inactive'\n                    ? 'Inactivo'\n                    : employee.status === 'suspended'\n                      ? 'Suspendido'\n                      : 'Terminado')\n              : employee?.is_active\n                ? 'Activo'\n                : 'Inactivo'}\n          </span>\n\n          <div className=\"flex items-center space-x-2\">\n            <Button variant=\"outline\" size=\"sm\" onClick={() => onViewAttendance?.(employee)} iconName=\"Clock\" iconSize={16}>\n              Asistencia\n            </Button>\n\n            {userRole === 'admin' && (\n              <Button variant=\"outline\" size=\"sm\" onClick={() => onViewPayroll?.(employee)} iconName=\"Calculator\" iconSize={16}>\n                Nómina\n              </Button>\n            )}\n\n            <Button variant=\"outline\" size=\"sm\" onClick={() => onViewIncidents?.(employee)} iconName=\"AlertTriangle\" iconSize={16}>\n              Incidentes\n            </Button>\n          </div>\n        </div>\n        {formError ? <p className=\"text-sm text-destructive\">{formError}</p> : null}\n      </div>\n\n      {/* Tabs */}\n      <div className=\"border-b border-border\">\n        <nav className=\"flex space-x-8 px-4\">\n          {TABS.map((tab) => (\n            <button\n              key={tab.id}\n              onClick={() => setActiveTab(tab.id)}\n              className={`flex items-center space-x-2 py-3 px-1 border-b-2 font-medium text-sm transition-colors\n                ${activeTab === tab.id\n                  ? 'border-primary text-primary'\n                  : 'border-transparent text-muted-foreground hover:text-foreground hover:border-muted-foreground'}`}\n            >\n              <Icon name={tab.icon} size={16} />\n              <span>{tab.label}</span>\n            </button>\n          ))}\n        </nav>\n      </div>\n\n      {/* Content */}\n      <div className=\"flex-1 overflow-y-auto p-4\">\n        {activeTab === 'general' && (\n          <div className=\"space-y-4\">\n            {isEditing ? (\n              <>\n                <Input\n                  label=\"Nombre completo\"\n                  value={editData?.name ?? editData?.nombre ?? ''}\n                  onChange={(e) => handleInputChange('name', e?.target?.value)}\n                />\n                <Input\n                  label=\"ID de empleado (opcional)\"\n                  value={editData?.employeeId || ''}\n                  onChange={(e) => handleInputChange('employeeId', e?.target?.value)}\n                />\n                <Input\n                  label=\"Fecha de nacimiento\"\n                  type=\"date\"\n                  value={editData?.birthDate || ''}\n                  onChange={(e) => handleInputChange('birthDate', e?.target?.value)}\n                />\n                <Input\n                  label=\"Número de identificación\"\n                  value={editData?.idNumber || ''}\n                  onChange={(e) => handleInputChange('idNumber', e?.target?.value)}\n                />\n              </>\n            ) : (\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground\">Nombre completo</label>\n                  <p className=\"text-sm text-foreground mt-1\">{employee?.nombre || employee?.name}</p>\n                </div>\n                {employee?.employeeId ? (\n                  <div>\n                    <label className=\"text-sm font-medium text-muted-foreground\">ID de empleado</label>\n                    <p className=\"text-sm text-foreground mt-1 font-mono\">{employee.employeeId}</p>\n                  </div>\n                ) : null}\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground\">Fecha de nacimiento</label>\n                  <p className=\"text-sm text-foreground mt-1\">\n                    {employee?.birthDate ? formatDate(employee.birthDate) : 'No especificada'}\n                  </p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground\">Número de identificación</label>\n                  <p className=\"text-sm text-foreground mt-1\">{employee?.idNumber || 'No especificado'}</p>\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n\n        {activeTab === 'contact' && (\n          <div className=\"space-y-4\">\n            {isEditing ? (\n              <>\n                <Input\n                  label=\"Email\"\n                  type=\"email\"\n                  value={editData?.email ?? employee?.correo ?? ''}\n                  onChange={(e) => handleInputChange('email', e?.target?.value)}\n                />\n                <Input\n                  label=\"Teléfono\"\n                  type=\"tel\"\n                  value={editData?.phone ?? employee?.telefono ?? ''}\n                  onChange={(e) => handleInputChange('phone', e?.target?.value)}\n                />\n                <Input\n                  label=\"Dirección\"\n                  value={editData?.address || ''}\n                  onChange={(e) => handleInputChange('address', e?.target?.value)}\n                />\n                <Input\n                  label=\"Contacto de emergencia\"\n                  value={editData?.emergencyContact || ''}\n                  onChange={(e) => handleInputChange('emergencyContact', e?.target?.value)}\n                />\n              </>\n            ) : (\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground\">Email</label>\n                  <p className=\"text-sm text-foreground mt-1\">{employee?.email || employee?.correo}</p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground\">Teléfono</label>\n                  <p className=\"text-sm text-foreground mt-1\">{employee?.phone || employee?.telefono || 'No especificado'}</p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground\">Dirección</label>\n                  <p className=\"text-sm text-foreground mt-1\">{employee?.address || 'No especificada'}</p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground\">Contacto de emergencia</label>\n                  <p className=\"text-sm text-foreground mt-1\">{employee?.emergencyContact || 'No especificado'}</p>\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n\n        {activeTab === 'employment' && (\n          <div className=\"space-y-4\">\n            {isEditing ? (\n              <>\n                <Select\n                  label=\"Sitio de construcción\"\n                  options={siteOptions}\n                  value={\n                    editData?.obra_id ??\n                    editData?.site ??\n                    employee?.obra_id ??\n                    employee?.site ??\n                    ''\n                  }\n                  onChange={(value) => handleInputChange('obra_id', value)}\n                  placeholder={sitesLoading ? 'Cargando sitios...' : 'Seleccionar sitio...'}\n                  disabled={sitesLoading}\n                />\n                <Select\n                  label=\"Supervisor\"\n                  options={supervisorOptions}\n                  value={\n                    editData?.supervisor_id ??\n                    editData?.supervisor ??\n                    employee?.supervisor_id ??\n                    ''\n                  }\n                  onChange={(value) => handleInputChange('supervisor_id', value)}\n                  placeholder={supervisorsLoading ? 'Cargando supervisores...' : 'Seleccionar supervisor...'}\n                  disabled={supervisorsLoading}\n                />\n                <Select\n                  label=\"Estado\"\n                  options={STATUS_OPTIONS}\n                  value={editData?.status ?? (employee?.is_active ? 'active' : 'inactive')}\n                  onChange={(value) => handleInputChange('status', value)}\n                />\n                <Input\n                  label=\"Fecha de contratación\"\n                  type=\"date\"\n                  value={editData?.hireDate || ''}\n                  onChange={(e) => handleInputChange('hireDate', e?.target?.value)}\n                />\n                {userRole === 'admin' && (\n                  <Input\n                    label=\"Salario (hourly_rate)\"\n                    type=\"number\"\n                    value={editData?.hourly_rate ?? editData?.dailySalary ?? employee?.hourly_rate ?? ''}\n                    onChange={(e) => handleInputChange('hourly_rate', e?.target?.value)}\n                  />\n                )}\n                <Input\n                  label=\"Puesto\"\n                  value={editData?.puesto ?? employee?.puesto ?? ''}\n                  onChange={(e) => handleInputChange('puesto', e?.target?.value)}\n                />\n              </>\n            ) : (\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground\">Sitio de construcción</label>\n                  <p className=\"text-sm text-foreground mt-1\">{siteLabel}</p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground\">Supervisor</label>\n                  <p className=\"text-sm text-foreground mt-1\">{supervisorLabel}</p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground\">Fecha de contratación</label>\n                  <p className=\"text-sm text-foreground mt-1\">\n                    {employee?.hireDate ? formatDate(employee.hireDate) : 'No especificada'}\n                  </p>\n                </div>\n                {userRole === 'admin' && (\n                  <div>\n                    <label className=\"text-sm font-medium text-muted-foreground\">Salario (hourly_rate)</label>\n                    <p className=\"text-sm text-foreground mt-1\">\n                      {typeof employee?.hourly_rate === 'number' ? employee.hourly_rate : employee?.dailySalary || 'No especificado'}\n                    </p>\n                  </div>\n                )}\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground\">Puesto</label>\n                  <p className=\"text-sm text-foreground mt-1\">{employee?.puesto || 'No especificado'}</p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground\">Última asistencia</label>\n                  <p className=\"text-sm text-foreground mt-1\">\n                    {employee?.lastAttendance ? formatDate(employee.lastAttendance) : 'Sin registro'}\n                  </p>\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n\n        {activeTab === 'documents' && (\n          <div className=\"space-y-4\">\n            <div className=\"text-center py-8\">\n              <Icon name=\"FileText\" size={48} className=\"mx-auto text-muted-foreground mb-4\" />\n              <h3 className=\"text-lg font-medium text-foreground mb-2\">Documentos del empleado</h3>\n              <p className=\"text-muted-foreground mb-4\">Gestiona los documentos y archivos del empleado.</p>\n              <Button variant=\"outline\" iconName=\"Upload\" iconSize={16}>\n                Subir documento\n              </Button>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default EmployeeDetailPanel;\n","size_bytes":20714},"src/pages/administrator-employee-management-console/components/EmployeeFilters.jsx":{"content":"// src/administrator-employee-management-console/EmployeeFilters.jsx\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Select from '../../../components/ui/Select';\nimport Input from '../../../components/ui/Input';\nimport Button from '../../../components/ui/Button';\nimport { Checkbox } from '../../../components/ui/Checkbox';\n\nimport { siteDataService } from '../../data/siteDataService';\nimport { supervisorDataService } from '../../data/supervisorDataService';\n\nconst EmployeeFilters = ({\n  filters,\n  onFiltersChange,\n  onClearFilters,\n  savedFilters = [],\n  onSaveFilter,\n  onLoadFilter,\n}) => {\n  const [isCollapsed, setIsCollapsed] = useState(false);\n  const [filterName, setFilterName] = useState('');\n  const [showSaveDialog, setShowSaveDialog] = useState(false);\n\n  const [sites, setSites] = useState([]);\n  const [sitesLoading, setSitesLoading] = useState(false);\n\n  const [supervisors, setSupervisors] = useState([]);\n  const [supervisorsLoading, setSupervisorsLoading] = useState(false);\n\n  const mountedRef = useRef(false);\n\n  useEffect(() => {\n    mountedRef.current = true;\n    return () => { mountedRef.current = false; };\n  }, []);\n\n  // Cargar sitios reales\n  useEffect(() => {\n    const loadSites = async () => {\n      setSitesLoading(true);\n      try {\n        const res = await siteDataService.getSites();\n        if (mountedRef.current && res?.success) setSites(res.data || []);\n      } catch (e) {\n        console.error('Error loading sites:', e);\n      } finally {\n        setSitesLoading(false);\n      }\n    };\n    loadSites();\n  }, []);\n\n  // Cargar supervisores reales\n  useEffect(() => {\n    const loadSupervisors = async () => {\n      setSupervisorsLoading(true);\n      try {\n        const res = await supervisorDataService.getSupervisors();\n        if (mountedRef.current && res?.success) setSupervisors(res.data || []);\n      } catch (e) {\n        console.error('Error loading supervisors:', e);\n      } finally {\n        setSupervisorsLoading(false);\n      }\n    };\n    loadSupervisors();\n  }, []);\n\n  const constructionSiteOptions = useMemo(() => {\n    const base = [{ value: 'all', label: 'Todos los sitios' }];\n    const dynamic = (sites || []).map(s => ({ value: s.id, label: s.nombre }));\n    return base.concat(dynamic);\n  }, [sites]);\n\n  const supervisorOptions = useMemo(() => {\n    const base = [{ value: 'all', label: 'Todos los supervisores' }];\n    const dynamic = (supervisors || []).map(u => ({\n      value: u.id,\n      label: u.nombre || u.correo,\n    }));\n    return base.concat(dynamic);\n  }, [supervisors]);\n\n  const employmentStatuses = useMemo(() => {\n    const current = filters?.status || [];\n    return [\n      { id: 'active',     label: 'Activo',     checked: current.includes('active') },\n      { id: 'inactive',   label: 'Inactivo',   checked: current.includes('inactive') },\n      { id: 'suspended',  label: 'Suspendido', checked: current.includes('suspended') },\n      { id: 'terminated', label: 'Terminado',  checked: current.includes('terminated') },\n    ];\n  }, [filters?.status]);\n\n  const handleStatusChange = (statusId, checked) => {\n    const currentStatus = filters?.status || [];\n    const next = checked ? [...new Set([...currentStatus, statusId])] : currentStatus.filter(s => s !== statusId);\n    onFiltersChange({ ...filters, status: next });\n  };\n\n  const handleSaveFilter = () => {\n    const name = filterName.trim();\n    if (!name) return;\n    onSaveFilter?.({\n      name,\n      filters,\n      createdAt: new Date(),\n    });\n    setFilterName('');\n    setShowSaveDialog(false);\n  };\n\n  const hasActiveFilters = () => {\n    return Boolean(\n      filters?.search ||\n      (filters?.site && filters.site !== 'all') ||\n      (filters?.supervisor && filters.supervisor !== 'all') ||\n      (filters?.status && filters.status.length > 0) ||\n      filters?.hireDateFrom ||\n      filters?.hireDateTo\n    );\n  };\n\n  return (\n    <div className=\"bg-card border border-border rounded-lg\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between p-4 border-b border-border\">\n        <div className=\"flex items-center space-x-2\">\n          <Icon name=\"Filter\" size={20} className=\"text-muted-foreground\" />\n          <h3 className=\"font-medium text-foreground\">Filtros</h3>\n          {hasActiveFilters() && (\n            <span className=\"bg-primary text-primary-foreground text-xs px-2 py-1 rounded-full\">\n              Activos\n            </span>\n          )}\n        </div>\n\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setShowSaveDialog(true)}\n            disabled={!hasActiveFilters()}\n            iconName=\"Save\"\n            iconSize={16}\n          >\n            Guardar\n          </Button>\n\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={onClearFilters}\n            disabled={!hasActiveFilters()}\n            iconName=\"X\"\n            iconSize={16}\n          >\n            Limpiar\n          </Button>\n\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => setIsCollapsed(!isCollapsed)}\n            iconName={isCollapsed ? 'ChevronDown' : 'ChevronUp'}\n            iconSize={16}\n          />\n        </div>\n      </div>\n\n      {/* Content */}\n      {!isCollapsed && (\n        <div className=\"p-4 space-y-4\">\n          {/* Search */}\n          <Input\n            label=\"Búsqueda general\"\n            type=\"search\"\n            placeholder=\"Buscar por nombre, ID, email...\"\n            value={filters?.search || ''}\n            onChange={(e) => onFiltersChange({ ...filters, search: e?.target?.value })}\n            className=\"mb-4\"\n          />\n\n          {/* Construction Site */}\n          <Select\n            label=\"Sitio de construcción\"\n            options={constructionSiteOptions}\n            value={filters?.site || 'all'}\n            onChange={(value) => onFiltersChange({ ...filters, site: value })}\n            className=\"mb-4\"\n            placeholder={sitesLoading ? 'Cargando sitios...' : 'Seleccionar sitio...'}\n            disabled={sitesLoading}\n          />\n\n          {/* Supervisor */}\n          <Select\n            label=\"Supervisor\"\n            options={supervisorOptions}\n            value={filters?.supervisor || 'all'}\n            onChange={(value) => onFiltersChange({ ...filters, supervisor: value })}\n            className=\"mb-4\"\n            placeholder={supervisorsLoading ? 'Cargando supervisores...' : 'Seleccionar supervisor...'}\n            disabled={supervisorsLoading}\n          />\n\n          {/* Employment Status */}\n          <div className=\"space-y-2\">\n            <label className=\"text-sm font-medium text-foreground\">Estado de empleo</label>\n            <div className=\"space-y-2\">\n              {employmentStatuses.map((status) => (\n                <Checkbox\n                  key={status.id}\n                  label={status.label}\n                  checked={status.checked}\n                  onChange={(e) => handleStatusChange(status.id, e?.target?.checked)}\n                />\n              ))}\n            </div>\n          </div>\n\n          {/* Hire Date Range */}\n          <div className=\"grid grid-cols-2 gap-4\">\n            <Input\n              label=\"Fecha de contratación desde\"\n              type=\"date\"\n              value={filters?.hireDateFrom || ''}\n              onChange={(e) => onFiltersChange({ ...filters, hireDateFrom: e?.target?.value })}\n            />\n            <Input\n              label=\"Fecha de contratación hasta\"\n              type=\"date\"\n              value={filters?.hireDateTo || ''}\n              onChange={(e) => onFiltersChange({ ...filters, hireDateTo: e?.target?.value })}\n            />\n          </div>\n\n          {/* Saved Filters */}\n          {savedFilters?.length > 0 && (\n            <div className=\"pt-4 border-t border-border\">\n              <label className=\"text-sm font-medium text-foreground mb-2 block\">Filtros guardados</label>\n              <div className=\"space-y-2\">\n                {savedFilters.map((savedFilter, index) => (\n                  <button\n                    key={index}\n                    onClick={() => onLoadFilter?.(savedFilter)}\n                    className=\"w-full flex items-center justify-between p-2 text-sm bg-muted hover:bg-muted/80 rounded-md transition-colors duration-150 ease-out-cubic\"\n                  >\n                    <span className=\"text-foreground\">{savedFilter?.name}</span>\n                    <Icon name=\"ChevronRight\" size={14} className=\"text-muted-foreground\" />\n                  </button>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Save Filter Dialog */}\n      {showSaveDialog && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-card border border-border rounded-lg p-6 w-96 max-w-full mx-4\">\n            <h3 className=\"text-lg font-semibold text-foreground mb-4\">Guardar filtro</h3>\n\n            <Input\n              label=\"Nombre del filtro\"\n              placeholder=\"Ej: Empleados activos - Obra Central\"\n              value={filterName}\n              onChange={(e) => setFilterName(e?.target?.value)}\n              className=\"mb-4\"\n            />\n\n            <div className=\"flex justify-end space-x-2\">\n              <Button\n                variant=\"outline\"\n                onClick={() => {\n                  setShowSaveDialog(false);\n                  setFilterName('');\n                }}\n              >\n                Cancelar\n              </Button>\n              <Button onClick={handleSaveFilter} disabled={!filterName.trim()}>\n                Guardar\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EmployeeFilters;\n","size_bytes":9953},"src/pages/administrator-employee-management-console/components/EmployeeTable.jsx":{"content":"// src/administrator-employee-management-console/EmployeeTable.jsx\nimport React, { useState } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Image from '../../../components/AppImage';\nimport Button from '../../../components/ui/Button';\n\nconst EmployeeTable = ({\n  employees,\n  selectedEmployees,\n  onEmployeeSelect,\n  onSelectAll,\n  onEmployeeClick,\n  onSort,\n  sortConfig,\n  onDelete,\n  onRestore,\n  userRole = 'admin',\n  showDeleteActions = false,\n  loading = false,\n}) => {\n  const [hoveredRow, setHoveredRow] = useState(null);\n\n  const getStatusColor = (status) => {\n    const colors = {\n      active: 'bg-success text-success-foreground',\n      inactive: 'bg-secondary text-secondary-foreground',\n      suspended: 'bg-warning text-warning-foreground',\n      terminated: 'bg-error text-error-foreground',\n      deleted: 'bg-red-100 text-red-800',\n    };\n    return colors?.[status] || colors?.inactive;\n  };\n\n  const getStatusLabel = (status) => {\n    const labels = {\n      active: 'Activo',\n      inactive: 'Inactivo',\n      suspended: 'Suspendido',\n      terminated: 'Terminado',\n      deleted: 'Eliminado',\n    };\n    return labels?.[status] || status || '—';\n  };\n\n  const formatDate = (dateString) => {\n    if (!dateString) return 'N/A';\n    const d = new Date(dateString);\n    if (Number.isNaN(d.getTime())) return 'N/A';\n    return d.toLocaleDateString('es-ES', { day: '2-digit', month: '2-digit', year: 'numeric' });\n  };\n\n  const formatLastAttendance = (lastAttendance) => {\n    if (!lastAttendance) return 'Sin registro';\n    const date = new Date(lastAttendance);\n    if (Number.isNaN(date.getTime())) return 'Sin registro';\n    const now = new Date();\n    const diffTime = Math.abs(now - date);\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    if (diffDays === 1) return 'Ayer';\n    if (diffDays <= 7) return `Hace ${diffDays} días`;\n    return formatDate(lastAttendance);\n  };\n\n  const handleSort = (column) => {\n    const direction = sortConfig?.column === column && sortConfig?.direction === 'asc' ? 'desc' : 'asc';\n    onSort?.({ column, direction });\n  };\n\n  const getSortIcon = (column) => {\n    if (sortConfig?.column !== column) return 'ArrowUpDown';\n    return sortConfig?.direction === 'asc' ? 'ArrowUp' : 'ArrowDown';\n  };\n\n  const isAllSelected = employees?.length > 0 && selectedEmployees?.length === employees?.length;\n  const isIndeterminate = selectedEmployees?.length > 0 && selectedEmployees?.length < employees?.length;\n\n  // Click fila (evita clics en botones)\n  const handleEmployeeRowClick = (employee, event) => {\n    if (event?.target?.closest('button') || event?.target?.closest('.action-button')) return;\n    onEmployeeClick?.(employee);\n  };\n\n  // Helpers de compatibilidad (nombres distintos según servicio/joins)\n  const getEmployeeId = (e) => e?.employee_id ?? e?.employeeId ?? e?.id ?? 'N/A';\n  const getFullName = (e) => e?.full_name ?? e?.name ?? e?.nombre ?? 'Sin nombre';\n  const getEmail = (e) =>\n    e?.user_profiles?.email ??\n    e?.email ??\n    e?.correo ??\n    e?.user?.email ??\n    'Sin email';\n  const getAvatar = (e) => e?.profile_picture_url ?? e?.avatar ?? null;\n  const getSiteName = (e) =>\n    e?.construction_sites?.name ??\n    e?.construction_site?.name ??\n    e?.obras?.nombre ??\n    e?.sitio_asignado ??\n    e?.site ??\n    'Sin asignar';\n  const getSupervisorName = (e) =>\n    e?.supervisor?.full_name ??\n    e?.supervisor?.nombre ??\n    e?.supervisor_name ??\n    e?.supervisor ??\n    'Sin supervisor';\n  const getHireDate = (e) => e?.hire_date ?? e?.hireDate ?? e?.fecha_contratacion ?? null;\n  const getLastAttendance = (e) => e?.last_attendance_date ?? e?.lastAttendance ?? null;\n\n  return (\n    <div className=\"bg-card border border-border rounded-lg overflow-hidden\">\n      {/* Loading State */}\n      {loading && employees?.length === 0 && (\n        <div className=\"p-12 text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Cargando empleados...</p>\n        </div>\n      )}\n\n      {/* Table Header */}\n      <div className=\"overflow-x-auto\">\n        <table className=\"w-full\">\n          <thead className=\"bg-muted/50 border-b border-border\">\n            <tr>\n              <th className=\"w-12 p-4\">\n                <input\n                  type=\"checkbox\"\n                  checked={isAllSelected}\n                  ref={(el) => {\n                    if (el) el.indeterminate = isIndeterminate;\n                  }}\n                  onChange={(e) => onSelectAll?.(e?.target?.checked)}\n                  className=\"w-4 h-4 text-primary bg-background border-border rounded focus:ring-primary focus:ring-2\"\n                />\n              </th>\n\n              <th className=\"text-left p-4\">\n                <button\n                  onClick={() => handleSort('employee_id')}\n                  className=\"flex items-center space-x-1 text-sm font-medium text-foreground hover:text-primary transition-colors duration-150 ease-out-cubic\"\n                >\n                  <span>ID</span>\n                  <Icon name={getSortIcon('employee_id')} size={14} />\n                </button>\n              </th>\n\n              <th className=\"text-left p-4\">\n                <button\n                  onClick={() => handleSort('full_name')}\n                  className=\"flex items-center space-x-1 text-sm font-medium text-foreground hover:text-primary transition-colors duration-150 ease-out-cubic\"\n                >\n                  <span>Empleado</span>\n                  <Icon name={getSortIcon('full_name')} size={14} />\n                </button>\n              </th>\n\n              <th className=\"text-left p-4\">\n                <button\n                  onClick={() => handleSort('site')}\n                  className=\"flex items-center space-x-1 text-sm font-medium text-foreground hover:text-primary transition-colors duration-150 ease-out-cubic\"\n                >\n                  <span>Sitio</span>\n                  <Icon name={getSortIcon('site')} size={14} />\n                </button>\n              </th>\n\n              <th className=\"text-left p-4\">\n                <button\n                  onClick={() => handleSort('supervisor')}\n                  className=\"flex items-center space-x-1 text-sm font-medium text-foreground hover:text-primary transition-colors duration-150 ease-out-cubic\"\n                >\n                  <span>Supervisor</span>\n                  <Icon name={getSortIcon('supervisor')} size={14} />\n                </button>\n              </th>\n\n              <th className=\"text-left p-4\">\n                <button\n                  onClick={() => handleSort('hire_date')}\n                  className=\"flex items-center space-x-1 text-sm font-medium text-foreground hover:text-primary transition-colors duration-150 ease-out-cubic\"\n                >\n                  <span>Fecha de contratación</span>\n                  <Icon name={getSortIcon('hire_date')} size={14} />\n                </button>\n              </th>\n\n              <th className=\"text-left p-4\">\n                <button\n                  onClick={() => handleSort('status')}\n                  className=\"flex items-center space-x-1 text-sm font-medium text-foreground hover:text-primary transition-colors duration-150 ease-out-cubic\"\n                >\n                  <span>Estado</span>\n                  <Icon name={getSortIcon('status')} size={14} />\n                </button>\n              </th>\n\n              <th className=\"text-left p-4\">\n                <button\n                  onClick={() => handleSort('last_attendance_date')}\n                  className=\"flex items-center space-x-1 text-sm font-medium text-foreground hover:text-primary transition-colors duration-150 ease-out-cubic\"\n                >\n                  <span>Última asistencia</span>\n                  <Icon name={getSortIcon('last_attendance_date')} size={14} />\n                </button>\n              </th>\n\n              <th className=\"text-center p-4 w-32\">\n                <span className=\"text-sm font-medium text-foreground\">Acciones</span>\n              </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {employees?.map((employee) => {\n              const id = employee?.id;\n              const empId = getEmployeeId(employee);\n              const name = getFullName(employee);\n              const email = getEmail(employee);\n              const avatar = getAvatar(employee);\n              const siteName = getSiteName(employee);\n              const supervisorName = getSupervisorName(employee);\n              const hireDate = getHireDate(employee);\n              const lastAttendance = getLastAttendance(employee);\n\n              return (\n                <tr\n                  key={id}\n                  className={`\n                    border-b border-border hover:bg-muted/30 transition-colors duration-150 ease-out-cubic cursor-pointer\n                    ${selectedEmployees?.includes(id) ? 'bg-primary/5' : ''}\n                    ${employee?.status === 'deleted' ? 'bg-red-50' : ''}\n                  `}\n                  onMouseEnter={() => setHoveredRow(id)}\n                  onMouseLeave={() => setHoveredRow(null)}\n                  onClick={(e) => handleEmployeeRowClick(employee, e)}\n                >\n                  <td className=\"p-4\" onClick={(e) => e?.stopPropagation()}>\n                    <input\n                      type=\"checkbox\"\n                      checked={selectedEmployees?.includes(id)}\n                      onChange={(e) => onEmployeeSelect?.(id, e?.target?.checked)}\n                      className=\"w-4 h-4 text-primary bg-background border-border rounded focus:ring-primary focus:ring-2\"\n                    />\n                  </td>\n\n                  <td className=\"p-4\">\n                    <span className=\"text-sm font-mono text-muted-foreground\">{empId}</span>\n                  </td>\n\n                  <td className=\"p-4\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"flex-shrink-0\">\n                        {avatar ? (\n                          <Image src={avatar} alt={name} className=\"w-8 h-8 rounded-full object-cover\" />\n                        ) : (\n                          <div className=\"w-8 h-8 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-xs font-medium\">\n                            {String(name || '')\n                              .split(' ')\n                              .map((n) => n?.[0])\n                              .join('')\n                              .toUpperCase()}\n                          </div>\n                        )}\n                      </div>\n                      <div className=\"min-w-0 flex-1\">\n                        <p className=\"text-sm font-medium text-foreground truncate\">{name}</p>\n                        <p className=\"text-xs text-muted-foreground truncate\">{email}</p>\n                      </div>\n                    </div>\n                  </td>\n\n                  <td className=\"p-4\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Icon name=\"MapPin\" size={14} className=\"text-muted-foreground\" />\n                      <span className=\"text-sm text-foreground\">{siteName}</span>\n                    </div>\n                  </td>\n\n                  <td className=\"p-4\">\n                    <span className=\"text-sm text-foreground\">{supervisorName}</span>\n                  </td>\n\n                  <td className=\"p-4\">\n                    <span className=\"text-sm text-muted-foreground\">{formatDate(hireDate)}</span>\n                  </td>\n\n                  <td className=\"p-4\">\n                    <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(employee?.status)}`}>\n                      {getStatusLabel(employee?.status)}\n                    </span>\n                  </td>\n\n                  <td className=\"p-4\">\n                    <span className=\"text-sm text-muted-foreground\">{formatLastAttendance(lastAttendance)}</span>\n                  </td>\n\n                  <td className=\"p-4\" onClick={(e) => e?.stopPropagation()}>\n                    <div className=\"flex items-center justify-center space-x-1 action-button\">\n                      {/* View */}\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        onClick={() => onEmployeeClick?.(employee)}\n                        iconName=\"Eye\"\n                        iconSize={16}\n                        className=\"h-8 w-8 hover:bg-blue-100 hover:text-blue-600\"\n                        title=\"Ver detalles\"\n                      />\n\n                      {hoveredRow === id && (\n                        <>\n                          {/* Edit */}\n                          <Button\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            onClick={(e) => {\n                              e?.stopPropagation();\n                              onEmployeeClick?.(employee);\n                            }}\n                            iconName=\"Edit\"\n                            iconSize={16}\n                            className=\"h-8 w-8 hover:bg-blue-100 hover:text-blue-600\"\n                            title=\"Editar empleado\"\n                          />\n\n                          {/* Delete / Restore */}\n                          {showDeleteActions && (\n                            <>\n                              {employee?.status === 'deleted' ? (\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"icon\"\n                                  onClick={(e) => {\n                                    e?.stopPropagation();\n                                    onRestore?.(employee);\n                                  }}\n                                  iconName=\"RotateCcw\"\n                                  iconSize={16}\n                                  className=\"h-8 w-8 hover:bg-green-100 hover:text-green-600\"\n                                  title=\"Restaurar empleado\"\n                                />\n                              ) : (\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"icon\"\n                                  onClick={(e) => {\n                                    e?.stopPropagation();\n                                    onDelete?.(employee);\n                                  }}\n                                  iconName=\"Trash2\"\n                                  iconSize={16}\n                                  className=\"h-8 w-8 hover:bg-red-100 hover:text-red-600\"\n                                  title=\"Eliminar empleado\"\n                                />\n                              )}\n                            </>\n                          )}\n\n                          {/* More */}\n                          <Button\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            onClick={(e) => {\n                              e?.stopPropagation();\n                              // abrir menú \"más opciones\"\n                            }}\n                            iconName=\"MoreHorizontal\"\n                            iconSize={16}\n                            className=\"h-8 w-8 hover:bg-gray-100 hover:text-gray-600\"\n                            title=\"Más opciones\"\n                          />\n                        </>\n                      )}\n                    </div>\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n\n      {/* Empty State */}\n      {!loading && employees?.length === 0 && (\n        <div className=\"p-12 text-center\">\n          <Icon name=\"Users\" size={48} className=\"mx-auto text-muted-foreground mb-4\" />\n          <h3 className=\"text-lg font-medium text-foreground mb-2\">No se encontraron empleados</h3>\n          <p className=\"text-muted-foreground\">Ajusta los filtros o agrega nuevos empleados al sistema.</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EmployeeTable;\n","size_bytes":16393},"src/pages/advanced-payroll-calculation-engine-with-comprehensive-wage-management/components/BulkProcessingTools.jsx":{"content":"// advanced-payroll-calculation-engine-with-comprehensive-wage-management/components/BulkProcessingTools.jsx\nimport React, { useState, useMemo } from 'react';\nimport { Users, PlayCircle, Download, FileText, Clock, AlertCircle } from 'lucide-react';\nimport CurrencyDisplay from '../../../components/ui/CurrencyDisplay';\n\n/**\n * Props:\n * - selectedEmployees: string[] (ids)\n * - employees: Array<{ id: string, full_name?: string, employee_id?: string, payroll?: {...} }>\n * - onBulkCalculate: () => Promise<void>\n * - processing: boolean\n * - weekRange?: { start?: Date, end?: Date }\n * - avgProcessMsPerEmployee?: number  // opcional, para mostrar ETA real (no mock)\n */\nexport default function BulkProcessingTools({\n  selectedEmployees = [],\n  employees = [],\n  onBulkCalculate,\n  processing = false,\n  weekRange,\n  avgProcessMsPerEmployee, // opcional: si no viene, no mostramos ETA\n}) {\n  const [bulkOptions, setBulkOptions] = useState({\n    includeOvertimeCalculation: true,\n    includeBonuses: false,\n    includeDeductions: true,\n    autoApprove: false,\n    generateReports: true,\n  });\n\n  const [progress, setProgress] = useState({\n    total: 0,\n    completed: 0,\n    errors: [],\n    currentEmployee: null,\n  });\n\n  const selectedEmployeeData = useMemo(\n    () => employees?.filter((emp) => selectedEmployees?.includes(emp?.id)) || [],\n    [employees, selectedEmployees]\n  );\n\n  const estimatedSeconds = useMemo(() => {\n    if (!avgProcessMsPerEmployee || !Number.isFinite(avgProcessMsPerEmployee)) return null;\n    const totalMs = (selectedEmployees?.length || 0) * avgProcessMsPerEmployee;\n    return Math.max(0, Math.round(totalMs / 1000));\n  }, [avgProcessMsPerEmployee, selectedEmployees?.length]);\n\n  const handleBulkProcess = async () => {\n    if (!selectedEmployees?.length || processing) return;\n\n    setProgress({\n      total: selectedEmployees.length,\n      completed: 0,\n      errors: [],\n      currentEmployee: null,\n    });\n\n    try {\n      await onBulkCalculate?.({\n        options: bulkOptions,\n        onTick: (info) => {\n          // Permite que el caller reporte progreso (opcional)\n          // info: { completed, total, currentEmployeeName, error? }\n          setProgress((prev) => ({\n            total: info?.total ?? prev.total,\n            completed: info?.completed ?? prev.completed,\n            errors: info?.error ? [...prev.errors, info.error] : prev.errors,\n            currentEmployee: info?.currentEmployeeName ?? prev.currentEmployee,\n          }));\n        },\n      });\n    } catch (error) {\n      setProgress((prev) => ({\n        ...prev,\n        errors: [...prev.errors, error?.message || 'Error desconocido en procesamiento masivo'],\n      }));\n    }\n  };\n\n  // CSV helpers\n  const escapeCSV = (value) => {\n    const str = value == null ? '' : String(value);\n    if (/[\",\\n]/.test(str)) {\n      return `\"${str.replace(/\"/g, '\"\"')}\"`;\n    }\n    return str;\n  };\n\n  const toISODate = (d) => {\n    try {\n      if (d instanceof Date) return d.toISOString().split('T')[0];\n      const dd = new Date(d);\n      return Number.isNaN(dd.getTime()) ? undefined : dd.toISOString().split('T')[0];\n    } catch {\n      return undefined;\n    }\n  };\n\n  const handleExportPayroll = () => {\n    const headers = [\n      'Empleado',\n      'Código',\n      'Horas Regulares',\n      'Horas Extra',\n      'Salario Base',\n      'Pago Horas Extra',\n      'Bonificaciones',\n      'Deducciones',\n      'Salario Bruto',\n      'Salario Neto',\n    ];\n\n    const rows = selectedEmployeeData?.map((emp) => {\n      const p = emp?.payroll || {};\n      return [\n        emp?.full_name ?? emp?.name ?? '—',\n        emp?.employee_id ?? emp?.codigo ?? emp?.id ?? '—',\n        p?.regularHours ?? 0,\n        p?.overtimeHours ?? 0,\n        p?.basePay ?? 0,\n        p?.overtimePay ?? 0,\n        p?.bonuses ?? 0,\n        p?.deductions ?? 0,\n        p?.grossPay ?? 0,\n        p?.netPay ?? 0,\n      ]\n        .map(escapeCSV)\n        .join(',');\n    });\n\n    const csvContent = [headers.join(','), ...(rows || [])].join('\\n');\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n    const url = window.URL?.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    const startStr = toISODate(weekRange?.start) || 'periodo';\n    a.download = `nomina_${startStr}.csv`;\n    document.body?.appendChild(a);\n    a?.click();\n    document.body?.removeChild(a);\n    window.URL?.revokeObjectURL(url);\n  };\n\n  // Totales “live”\n  const totalGross = useMemo(\n    () => selectedEmployeeData?.reduce((sum, emp) => sum + (emp?.payroll?.grossPay || 0), 0) || 0,\n    [selectedEmployeeData]\n  );\n  const totalRegular = useMemo(\n    () => selectedEmployeeData?.reduce((sum, emp) => sum + (emp?.payroll?.regularHours || 0), 0) || 0,\n    [selectedEmployeeData]\n  );\n  const totalOvertime = useMemo(\n    () => selectedEmployeeData?.reduce((sum, emp) => sum + (emp?.payroll?.overtimeHours || 0), 0) || 0,\n    [selectedEmployeeData]\n  );\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Processing Options */}\n      <div className=\"bg-white rounded-lg shadow\">\n        <div className=\"p-6\">\n          <h2 className=\"text-xl font-bold text-gray-900 mb-4\">\n            <Users className=\"h-6 w-6 inline mr-2 text-blue-600\" />\n            Herramientas de Procesamiento Masivo\n          </h2>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {/* Selection Summary */}\n            <div>\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-3\">Empleados Seleccionados</h3>\n\n              <div className=\"bg-blue-50 rounded-lg p-4 mb-4\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-blue-800 font-medium\">\n                    {selectedEmployees?.length || 0} empleados seleccionados\n                  </span>\n                  <Clock className=\"h-5 w-5 text-blue-600\" />\n                </div>\n                {typeof estimatedSeconds === 'number' && (\n                  <p className=\"text-blue-600 text-sm mt-1\">Tiempo estimado: ~{estimatedSeconds} segundos</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2 max-h-32 overflow-y-auto\">\n                {selectedEmployeeData?.map((employee) => (\n                  <div key={employee?.id} className=\"flex items-center justify-between p-2 bg-gray-50 rounded\">\n                    <span className=\"text-sm font-medium\">{employee?.full_name ?? employee?.name ?? '—'}</span>\n                    <span className=\"text-xs text-gray-500\">{employee?.employee_id ?? employee?.id ?? '—'}</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Processing Options */}\n            <div>\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-3\">Opciones de Procesamiento</h3>\n\n              <div className=\"space-y-3\">\n                <label className=\"flex items-center\">\n                  <input\n                    type=\"checkbox\"\n                    checked={bulkOptions?.includeOvertimeCalculation}\n                    onChange={(e) =>\n                      setBulkOptions((prev) => ({\n                        ...prev,\n                        includeOvertimeCalculation: e?.target?.checked,\n                      }))\n                    }\n                    className=\"rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n                  />\n                  <span className=\"ml-2 text-sm text-gray-700\">Incluir cálculo de horas extra</span>\n                </label>\n\n                <label className=\"flex items-center\">\n                  <input\n                    type=\"checkbox\"\n                    checked={bulkOptions?.includeBonuses}\n                    onChange={(e) =>\n                      setBulkOptions((prev) => ({\n                        ...prev,\n                        includeBonuses: e?.target?.checked,\n                      }))\n                    }\n                    className=\"rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n                  />\n                  <span className=\"ml-2 text-sm text-gray-700\">Incluir bonificaciones automáticas</span>\n                </label>\n\n                <label className=\"flex items-center\">\n                  <input\n                    type=\"checkbox\"\n                    checked={bulkOptions?.includeDeductions}\n                    onChange={(e) =>\n                      setBulkOptions((prev) => ({\n                        ...prev,\n                        includeDeductions: e?.target?.checked,\n                      }))\n                    }\n                    className=\"rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n                  />\n                  <span className=\"ml-2 text-sm text-gray-700\">Aplicar deducciones (impuestos, incidencias)</span>\n                </label>\n\n                <label className=\"flex items-center\">\n                  <input\n                    type=\"checkbox\"\n                    checked={bulkOptions?.autoApprove}\n                    onChange={(e) =>\n                      setBulkOptions((prev) => ({\n                        ...prev,\n                        autoApprove: e?.target?.checked,\n                      }))\n                    }\n                    className=\"rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n                  />\n                  <span className=\"ml-2 text-sm text-gray-700\">Auto-aprobar nóminas calculadas</span>\n                </label>\n\n                <label className=\"flex items-center\">\n                  <input\n                    type=\"checkbox\"\n                    checked={bulkOptions?.generateReports}\n                    onChange={(e) =>\n                      setBulkOptions((prev) => ({\n                        ...prev,\n                        generateReports: e?.target?.checked,\n                      }))\n                    }\n                    className=\"rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n                  />\n                  <span className=\"ml-2 text-sm text-gray-700\">Generar reportes automáticamente</span>\n                </label>\n              </div>\n            </div>\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"flex items-center space-x-4 mt-6\">\n            <button\n              onClick={handleBulkProcess}\n              disabled={selectedEmployees?.length === 0 || processing}\n              className=\"flex-1 px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center\"\n            >\n              <PlayCircle className=\"h-5 w-5 mr-2\" />\n              {processing ? 'Procesando...' : 'Iniciar Procesamiento Masivo'}\n            </button>\n\n            <button\n              onClick={handleExportPayroll}\n              disabled={selectedEmployees?.length === 0}\n              className=\"px-6 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center\"\n            >\n              <Download className=\"h-5 w-5 mr-2\" />\n              Exportar CSV\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Progress Tracking */}\n      {processing && (\n        <div className=\"bg-white rounded-lg shadow\">\n          <div className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n              <Clock className=\"h-5 w-5 inline mr-2 text-blue-600\" />\n              Progreso de Procesamiento\n            </h3>\n\n            <div className=\"mb-4\">\n              <div className=\"flex justify-between text-sm text-gray-600 mb-2\">\n                <span>\n                  Progreso: {progress?.completed} de {progress?.total}\n                </span>\n                <span>{progress?.total ? Math.round((progress?.completed / progress?.total) * 100) : 0}%</span>\n              </div>\n              <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                <div\n                  className=\"bg-blue-600 h-2 rounded-full transition-all duration-300\"\n                  style={{\n                    width: `${\n                      progress?.total ? (progress?.completed / progress?.total) * 100 : 0\n                    }%`,\n                  }}\n                ></div>\n              </div>\n            </div>\n\n            {progress?.currentEmployee && (\n              <div className=\"flex items-center text-sm text-gray-600 mb-4\">\n                <Clock className=\"h-4 w-4 mr-2 animate-spin\" />\n                Procesando: {progress?.currentEmployee}\n              </div>\n            )}\n\n            {progress?.errors?.length > 0 && (\n              <div className=\"space-y-2\">\n                <h4 className=\"text-sm font-medium text-red-800 flex items-center\">\n                  <AlertCircle className=\"h-4 w-4 mr-2\" />\n                  Errores encontrados:\n                </h4>\n                {progress?.errors?.map((error, index) => (\n                  <div key={index} className=\"text-sm text-red-600 bg-red-50 p-2 rounded\">\n                    {error}\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n\n      {/* Quick Stats */}\n      <div className=\"bg-white rounded-lg shadow\">\n        <div className=\"p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n            <FileText className=\"h-5 w-5 inline mr-2 text-blue-600\" />\n            Resumen de Procesamiento\n          </h3>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-blue-600\">{selectedEmployees?.length || 0}</div>\n              <div className=\"text-sm text-gray-600\">Empleados Seleccionados</div>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-green-600\">\n                <CurrencyDisplay amount={totalGross} />\n              </div>\n              <div className=\"text-sm text-gray-600\">Total Salario Bruto</div>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-purple-600\">{totalRegular}h</div>\n              <div className=\"text-sm text-gray-600\">Horas Regulares</div>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-orange-600\">{totalOvertime}h</div>\n              <div className=\"text-sm text-gray-600\">Horas Extra</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":14633},"src/pages/advanced-payroll-calculation-engine-with-comprehensive-wage-management/components/EmployeePayrollGrid.jsx":{"content":"// advanced-payroll-calculation-engine-with-comprehensive-wage-management/components/EmployeePayrollGrid.jsx\nimport React, { useMemo, useState, useCallback } from 'react';\nimport { Check, Clock, DollarSign, User, MapPin, Eye, Calculator } from 'lucide-react';\nimport CurrencyDisplay from '../../../components/ui/CurrencyDisplay';\n\n/**\n * Props:\n * - employees: Array<{\n *     id: string,\n *     full_name?: string, name?: string,\n *     email?: string | { user_profiles?: { email?: string } },\n *     employee_id?: string,\n *     construction_sites?: { name?: string },\n *     site?: string, site_name?: string\n *   }>\n * - payrollData: Array<{ employeeId: string, id?: string, regularHours?: number, overtimeHours?: number, grossPay?: number, netPay?: number, processed?: boolean }>\n * - selectedEmployees: string[]\n * - onSelectionChange: (ids: string[]) => void\n * - onCalculatePayroll: (employeeId: string) => void | Promise<void>\n * - onProcessPayroll: (payrollId: string) => void | Promise<void>\n * - processing: boolean\n */\nexport default function EmployeePayrollGrid({\n  employees = [],\n  payrollData = [],\n  selectedEmployees = [],\n  onSelectionChange,\n  onCalculatePayroll,\n  onProcessPayroll,\n  processing = false\n}) {\n  const [sortField, setSortField] = useState('full_name');\n  const [sortDirection, setSortDirection] = useState('asc');\n  const [filterStatus, setFilterStatus] = useState('all');\n\n  // Index payroll by employeeId para O(1)\n  const payrollByEmployeeId = useMemo(() => {\n    const map = new Map();\n    for (const p of payrollData) {\n      if (p && p.employeeId != null) map.set(String(p.employeeId), p);\n    }\n    return map;\n  }, [payrollData]);\n\n  // Combina empleado + nómina con fallbacks consistentes\n  const combinedData = useMemo(() => {\n    return (employees || []).map((employee) => {\n      const payroll = payrollByEmployeeId.get(String(employee?.id)) || {};\n      const fullName = employee?.full_name ?? employee?.name ?? 'Sin nombre';\n      const email =\n        employee?.user_profiles?.email ??\n        employee?.email ??\n        'Sin email';\n      const siteName =\n        employee?.construction_sites?.name ??\n        employee?.site_name ??\n        employee?.site ??\n        'Sin asignar';\n      const code = employee?.employee_id ?? 'N/A';\n      return {\n        ...employee,\n        _fullName: fullName,\n        _email: email,\n        _siteName: siteName,\n        _code: code,\n        payroll\n      };\n    });\n  }, [employees, payrollByEmployeeId]);\n\n  // Filtro por estado de nómina\n  const filteredData = useMemo(() => {\n    if (filterStatus === 'all') return combinedData;\n\n    return combinedData.filter((item) => {\n      const p = item?.payroll || {};\n      if (filterStatus === 'processed') return !!p?.processed;\n      if (filterStatus === 'pending') return !p?.processed && (p?.grossPay || 0) > 0;\n      if (filterStatus === 'no_payroll') return !(p?.grossPay > 0);\n      return true;\n    });\n  }, [combinedData, filterStatus]);\n\n  // Ordenamiento estable y seguro\n  const sortedData = useMemo(() => {\n    const arr = filteredData.slice(); // no mutar\n    const dir = sortDirection === 'asc' ? 1 : -1;\n\n    arr.sort((a, b) => {\n      let aVal;\n      let bVal;\n\n      switch (sortField) {\n        case 'full_name':\n          aVal = a?._fullName?.toLowerCase?.() || '';\n          bVal = b?._fullName?.toLowerCase?.() || '';\n          break;\n        case 'employee_id':\n          aVal = String(a?._code ?? '');\n          bVal = String(b?._code ?? '');\n          break;\n        case 'grossPay':\n          aVal = Number(a?.payroll?.grossPay || 0);\n          bVal = Number(b?.payroll?.grossPay || 0);\n          break;\n        default:\n          // fallback: intenta por campo directo\n          aVal = a?.[sortField];\n          bVal = b?.[sortField];\n          if (typeof aVal === 'string') aVal = aVal.toLowerCase();\n          if (typeof bVal === 'string') bVal = bVal.toLowerCase();\n          if (aVal == null) aVal = '';\n          if (bVal == null) bVal = '';\n      }\n\n      if (aVal > bVal) return dir;\n      if (aVal < bVal) return -dir;\n      return 0;\n    });\n\n    return arr;\n  }, [filteredData, sortField, sortDirection]);\n\n  const handleSort = useCallback((field) => {\n    setSortField((prev) => (prev === field ? prev : field));\n    setSortDirection((prevDir) => (sortField === field ? (prevDir === 'asc' ? 'desc' : 'asc') : 'asc'));\n  }, [sortField]);\n\n  const handleSelectAll = useCallback(() => {\n    if (!sortedData.length) {\n      onSelectionChange?.([]);\n      return;\n    }\n    const allIds = sortedData.map((item) => item?.id).filter(Boolean);\n    const allSelected = allIds.length > 0 && allIds.every((id) => selectedEmployees.includes(id));\n    onSelectionChange?.(allSelected ? [] : allIds);\n  }, [sortedData, selectedEmployees, onSelectionChange]);\n\n  const handleSelectEmployee = useCallback(\n    (employeeId) => {\n      if (!employeeId) return;\n      if (selectedEmployees.includes(employeeId)) {\n        onSelectionChange?.(selectedEmployees.filter((id) => id !== employeeId));\n      } else {\n        onSelectionChange?.([...selectedEmployees, employeeId]);\n      }\n    },\n    [selectedEmployees, onSelectionChange]\n  );\n\n  const getStatusBadge = (payroll) => {\n    if (payroll?.processed) {\n      return <span className=\"px-2 py-1 bg-green-100 text-green-800 text-xs rounded-full\">Procesada</span>;\n    }\n    if ((payroll?.grossPay || 0) > 0) {\n      return <span className=\"px-2 py-1 bg-yellow-100 text-yellow-800 text-xs rounded-full\">Pendiente</span>;\n    }\n    return <span className=\"px-2 py-1 bg-gray-100 text-gray-800 text-xs rounded-full\">Sin Nómina</span>;\n  };\n\n  const allVisibleSelected =\n    sortedData.length > 0 &&\n    sortedData.every((item) => selectedEmployees.includes(item?.id));\n\n  return (\n    <div className=\"bg-white rounded-lg shadow\">\n      <div className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h2 className=\"text-xl font-bold text-gray-900\">\n            <User className=\"h-6 w-6 inline mr-2 text-blue-600\" />\n            Nómina de Empleados\n          </h2>\n\n          <div className=\"flex items-center space-x-4\">\n            <select\n              value={filterStatus}\n              onChange={(e) => setFilterStatus(e?.target?.value)}\n              className=\"px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500\"\n            >\n              <option value=\"all\">Todos los Estados</option>\n              <option value=\"processed\">Procesadas</option>\n              <option value=\"pending\">Pendientes</option>\n              <option value=\"no_payroll\">Sin Nómina</option>\n            </select>\n\n            <span className=\"text-sm text-gray-600\">\n              {selectedEmployees?.length || 0} de {sortedData?.length || 0} seleccionados\n            </span>\n          </div>\n        </div>\n\n        {/* Tabla */}\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full table-auto\">\n            <thead>\n              <tr className=\"bg-gray-50\">\n                <th className=\"px-4 py-3 text-left\">\n                  <input\n                    type=\"checkbox\"\n                    checked={allVisibleSelected}\n                    onChange={handleSelectAll}\n                    className=\"rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n                    aria-label=\"Seleccionar todos\"\n                  />\n                </th>\n\n                <th\n                  className=\"px-4 py-3 text-left text-sm font-medium text-gray-700 cursor-pointer hover:bg-gray-100\"\n                  onClick={() => handleSort('full_name')}\n                >\n                  <div className=\"flex items-center\">\n                    Empleado\n                    {sortField === 'full_name' && (\n                      <span className=\"ml-1\">{sortDirection === 'asc' ? '↑' : '↓'}</span>\n                    )}\n                  </div>\n                </th>\n\n                <th\n                  className=\"px-4 py-3 text-left text-sm font-medium text-gray-700 cursor-pointer hover:bg-gray-100\"\n                  onClick={() => handleSort('employee_id')}\n                >\n                  <div className=\"flex items-center\">\n                    Código\n                    {sortField === 'employee_id' && (\n                      <span className=\"ml-1\">{sortDirection === 'asc' ? '↑' : '↓'}</span>\n                    )}\n                  </div>\n                </th>\n\n                <th className=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Sitio</th>\n\n                <th className=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">\n                  <Clock className=\"h-4 w-4 inline mr-1\" />\n                  Horas\n                </th>\n\n                <th\n                  className=\"px-4 py-3 text-left text-sm font-medium text-gray-700 cursor-pointer hover:bg-gray-100\"\n                  onClick={() => handleSort('grossPay')}\n                >\n                  <div className=\"flex items-center\">\n                    <DollarSign className=\"h-4 w-4 mr-1\" />\n                    Salario Bruto\n                    {sortField === 'grossPay' && (\n                      <span className=\"ml-1\">{sortDirection === 'asc' ? '↑' : '↓'}</span>\n                    )}\n                  </div>\n                </th>\n\n                <th className=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Estado</th>\n\n                <th className=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Acciones</th>\n              </tr>\n            </thead>\n\n            <tbody className=\"divide-y divide-gray-200\">\n              {sortedData?.map((employee) => (\n                <tr key={employee?.id} className=\"hover:bg-gray-50\">\n                  <td className=\"px-4 py-3\">\n                    <input\n                      type=\"checkbox\"\n                      checked={selectedEmployees?.includes(employee?.id) || false}\n                      onChange={() => handleSelectEmployee(employee?.id)}\n                      className=\"rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n                      aria-label={`Seleccionar ${employee?._fullName}`}\n                    />\n                  </td>\n\n                  <td className=\"px-4 py-3\">\n                    <div className=\"flex items-center\">\n                      <div className=\"w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center mr-3\">\n                        <User className=\"h-5 w-5 text-blue-600\" />\n                      </div>\n                      <div>\n                        <p className=\"font-medium text-gray-900\">{employee?._fullName}</p>\n                        <p className=\"text-sm text-gray-500\">{employee?._email}</p>\n                      </div>\n                    </div>\n                  </td>\n\n                  <td className=\"px-4 py-3 text-sm text-gray-900\">{employee?._code}</td>\n\n                  <td className=\"px-4 py-3 text-sm text-gray-900\">\n                    <div className=\"flex items-center\">\n                      <MapPin className=\"h-4 w-4 text-gray-400 mr-1\" />\n                      {employee?._siteName}\n                    </div>\n                  </td>\n\n                  <td className=\"px-4 py-3 text-sm\">\n                    <div>\n                      <p className=\"text-gray-900\">\n                        Regular: {employee?.payroll?.regularHours || 0}h\n                      </p>\n                      <p className=\"text-gray-500\">\n                        Extra: {employee?.payroll?.overtimeHours || 0}h\n                      </p>\n                    </div>\n                  </td>\n\n                  <td className=\"px-4 py-3 text-sm font-medium\">\n                    <div>\n                      <p className=\"text-gray-900\">\n                        <CurrencyDisplay amount={employee?.payroll?.grossPay || 0} />\n                      </p>\n                      <p className=\"text-gray-500\">\n                        Neto:{' '}\n                        <CurrencyDisplay amount={employee?.payroll?.netPay || 0} />\n                      </p>\n                    </div>\n                  </td>\n\n                  <td className=\"px-4 py-3\">{getStatusBadge(employee?.payroll)}</td>\n\n                  <td className=\"px-4 py-3\">\n                    <div className=\"flex items-center space-x-2\">\n                      <button\n                        onClick={() => onCalculatePayroll?.(employee?.id)}\n                        disabled={processing}\n                        className=\"p-2 text-blue-600 hover:bg-blue-100 rounded-full disabled:opacity-50\"\n                        title=\"Calcular nómina\"\n                      >\n                        <Calculator className=\"h-4 w-4\" />\n                      </button>\n\n                      <button\n                        className=\"p-2 text-gray-600 hover:bg-gray-100 rounded-full\"\n                        title=\"Ver detalles\"\n                      >\n                        <Eye className=\"h-4 w-4\" />\n                      </button>\n\n                      {employee?.payroll?.grossPay > 0 && !employee?.payroll?.processed && (\n                        <button\n                          onClick={() => onProcessPayroll?.(employee?.payroll?.id)}\n                          className=\"p-2 text-green-600 hover:bg-green-100 rounded-full\"\n                          title=\"Procesar nómina\"\n                        >\n                          <Check className=\"h-4 w-4\" />\n                        </button>\n                      )}\n                    </div>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n\n        {sortedData?.length === 0 && (\n          <div className=\"text-center py-12\">\n            <User className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n            <p className=\"text-gray-500\">No hay empleados que coincidan con el filtro seleccionado</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":13985},"src/pages/advanced-payroll-calculation-engine-with-comprehensive-wage-management/components/PayrollAuditTrail.jsx":{"content":"// advanced-payroll-calculation-engine-with-comprehensive-wage-management/components/PayrollAuditTrail.jsx\nimport React, { useMemo, useState, useCallback } from 'react';\nimport { FileText, Clock, User, Filter, Trash2, Download } from 'lucide-react';\nimport CurrencyDisplay from '../../../components/ui/CurrencyDisplay';\n\nexport default function PayrollAuditTrail({ auditEntries = [], onClearAudit }) {\n  const [filterType, setFilterType] = useState('all');\n  const [sortOrder, setSortOrder] = useState('desc');\n\n  const ACTION_LABELS = {\n    calculate_payroll: 'Cálculo de Nómina',\n    bulk_calculate: 'Cálculo Masivo',\n    calculate_aguinaldo: 'Cálculo Aguinaldo',\n    calculate_severance: 'Cálculo Finiquito',\n    process_payroll: 'Procesar Nómina',\n    approve_payroll: 'Aprobar Nómina',\n    modify_rates: 'Modificar Tarifas',\n  };\n\n  const ACTION_COLORS = {\n    calculate_payroll: 'bg-blue-100 text-blue-800',\n    bulk_calculate: 'bg-purple-100 text-purple-800',\n    calculate_aguinaldo: 'bg-green-100 text-green-800',\n    calculate_severance: 'bg-orange-100 text-orange-800',\n    process_payroll: 'bg-emerald-100 text-emerald-800',\n    approve_payroll: 'bg-teal-100 text-teal-800',\n    modify_rates: 'bg-yellow-100 text-yellow-800',\n    default: 'bg-gray-100 text-gray-800',\n  };\n\n  const getActionLabel = (action) => ACTION_LABELS[action] ?? action ?? '—';\n  const getActionColor = (action) => ACTION_COLORS[action] ?? ACTION_COLORS.default;\n\n  // Filtrado y ordenado inmutable\n  const sortedEntries = useMemo(() => {\n    const filtered =\n      filterType === 'all'\n        ? [...auditEntries]\n        : auditEntries.filter((e) => e?.action === filterType);\n\n    return filtered\n      .slice()\n      .sort((a, b) => {\n        const dateA = new Date(a?.timestamp || 0).getTime();\n        const dateB = new Date(b?.timestamp || 0).getTime();\n        return sortOrder === 'desc' ? dateB - dateA : dateA - dateB;\n      });\n  }, [auditEntries, filterType, sortOrder]);\n\n  // CSV helpers\n  const csvEscape = (val) => {\n    const s = String(val ?? '');\n    // Si contiene comillas, comas o saltos de línea -> envolver en comillas dobles y duplicar comillas\n    if (/[\",\\n\\r]/.test(s)) {\n      return `\"${s.replace(/\"/g, '\"\"')}\"`;\n    }\n    return s;\n  };\n\n  const exportAuditLog = useCallback(() => {\n    if (!sortedEntries.length) return;\n\n    const headers = [\n      'Fecha/Hora',\n      'Acción',\n      'Empleado',\n      'Monto',\n      'Usuario',\n      'Detalles',\n    ];\n\n    const rows = sortedEntries.map((entry) => [\n      new Date(entry?.timestamp || 0).toISOString(),\n      getActionLabel(entry?.action),\n      entry?.employee ?? '',\n      typeof entry?.amount === 'number' ? entry.amount : (Number(entry?.amount) || 0),\n      entry?.user ?? '',\n      entry?.details ?? '',\n    ]);\n\n    const csv =\n      [headers, ...rows]\n        .map((row) => row.map(csvEscape).join(','))\n        .join('\\n');\n\n    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\n\n    // SSR-safe\n    if (typeof window !== 'undefined') {\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `auditoria_nomina_${new Date().toISOString().split('T')[0]}.csv`;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n    }\n  }, [sortedEntries]);\n\n  const totalAmount = useMemo(\n    () => sortedEntries.reduce((sum, e) => sum + (Number(e?.amount) || 0), 0),\n    [sortedEntries]\n  );\n\n  const uniqueEmployees = useMemo(\n    () => new Set(sortedEntries.map((e) => e?.employee).filter(Boolean)).size,\n    [sortedEntries]\n  );\n\n  const uniqueUsers = useMemo(\n    () => new Set(sortedEntries.map((e) => e?.user).filter(Boolean)).size,\n    [sortedEntries]\n  );\n\n  return (\n    <div className=\"bg-white rounded-lg shadow\">\n      <div className=\"p-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <h2 className=\"text-xl font-bold text-gray-900\">\n            <FileText className=\"h-6 w-6 inline mr-2 text-blue-600\" />\n            Auditoría de Nóminas\n          </h2>\n\n          <div className=\"flex items-center space-x-4\">\n            <button\n              onClick={exportAuditLog}\n              disabled={!sortedEntries.length}\n              className=\"px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50 flex items-center\"\n            >\n              <Download className=\"h-4 w-4 mr-2\" />\n              Exportar\n            </button>\n\n            <button\n              onClick={onClearAudit}\n              disabled={!auditEntries.length}\n              className=\"px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 disabled:opacity-50 flex items-center\"\n            >\n              <Trash2 className=\"h-4 w-4 mr-2\" />\n              Limpiar\n            </button>\n          </div>\n        </div>\n\n        {/* Filtros */}\n        <div className=\"flex items-center space-x-4 mb-6\">\n          <div className=\"flex items-center space-x-2\">\n            <Filter className=\"h-4 w-4 text-gray-400\" />\n            <select\n              value={filterType}\n              onChange={(e) => setFilterType(e.target.value)}\n              className=\"px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500\"\n            >\n              <option value=\"all\">Todas las Acciones</option>\n              <option value=\"calculate_payroll\">Cálculo de Nómina</option>\n              <option value=\"bulk_calculate\">Cálculo Masivo</option>\n              <option value=\"calculate_aguinaldo\">Aguinaldos</option>\n              <option value=\"calculate_severance\">Finiquitos</option>\n              <option value=\"process_payroll\">Procesar Nómina</option>\n              <option value=\"approve_payroll\">Aprobar Nómina</option>\n              <option value=\"modify_rates\">Modificar Tarifas</option>\n            </select>\n          </div>\n\n          <select\n            value={sortOrder}\n            onChange={(e) => setSortOrder(e.target.value)}\n            className=\"px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500\"\n          >\n            <option value=\"desc\">Más Reciente Primero</option>\n            <option value=\"asc\">Más Antiguo Primero</option>\n          </select>\n\n          <div className=\"text-sm text-gray-600\">\n            {sortedEntries.length} de {auditEntries.length || 0} entradas\n          </div>\n        </div>\n\n        {/* Entradas */}\n        <div className=\"space-y-4 max-h-96 overflow-y-auto\">\n          {sortedEntries.map((entry) => (\n            <div key={entry?.id ?? `${entry?.timestamp}-${entry?.user}-${entry?.action}`} className=\"border border-gray-200 rounded-lg p-4\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex items-start space-x-4 flex-1\">\n                  <div className=\"flex-shrink-0\">\n                    <div className=\"w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center\">\n                      <FileText className=\"h-5 w-5 text-blue-600\" />\n                    </div>\n                  </div>\n\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-2 mb-2\">\n                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${getActionColor(entry?.action)}`}>\n                        {getActionLabel(entry?.action)}\n                      </span>\n\n                      <div className=\"flex items-center text-sm text-gray-500\">\n                        <Clock className=\"h-3 w-3 mr-1\" />\n                        {new Date(entry?.timestamp || 0).toLocaleString()}\n                      </div>\n                    </div>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n                      <div>\n                        <p className=\"text-gray-600 mb-1\">Empleado:</p>\n                        <p className=\"font-medium text-gray-900\">{entry?.employee ?? '—'}</p>\n                      </div>\n\n                      <div>\n                        <p className=\"text-gray-600 mb-1\">Monto:</p>\n                        <p className=\"font-bold text-green-600\">\n                          <CurrencyDisplay amount={Number(entry?.amount) || 0} />\n                        </p>\n                      </div>\n\n                      <div>\n                        <p className=\"text-gray-600 mb-1\">Procesado por:</p>\n                        <div className=\"flex items-center\">\n                          <User className=\"h-3 w-3 mr-1 text-gray-400\" />\n                          <p className=\"font-medium text-gray-900\">{entry?.user ?? '—'}</p>\n                        </div>\n                      </div>\n                    </div>\n\n                    {entry?.details && (\n                      <div className=\"mt-3 p-2 bg-gray-50 rounded text-sm text-gray-700\">\n                        <p className=\"font-medium text-gray-600 mb-1\">Detalles:</p>\n                        <p>{entry.details}</p>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {/* Empty states */}\n        {!sortedEntries.length && (\n          <div className=\"text-center py-12\">\n            <FileText className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n            {auditEntries.length === 0 ? (\n              <>\n                <p className=\"text-gray-500 mb-2\">No hay registros de auditoría disponibles</p>\n                <p className=\"text-gray-400 text-sm\">Los registros aparecerán aquí después de realizar cálculos de nómina</p>\n              </>\n            ) : (\n              <>\n                <p className=\"text-gray-500 mb-2\">No hay registros que coincidan con el filtro seleccionado</p>\n                <p className=\"text-gray-400 text-sm\">Intenta cambiar los filtros para ver más resultados</p>\n              </>\n            )}\n          </div>\n        )}\n\n        {/* Resumen */}\n        {!!sortedEntries.length && (\n          <div className=\"mt-6 p-4 bg-gray-50 rounded-lg\">\n            <h4 className=\"font-medium text-gray-900 mb-3\">Resumen de Auditoría</h4>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 text-sm\">\n              <div className=\"text-center\">\n                <p className=\"text-2xl font-bold text-blue-600\">{sortedEntries.length}</p>\n                <p className=\"text-gray-600\">Total Acciones</p>\n              </div>\n\n              <div className=\"text-center\">\n                <p className=\"text-2xl font-bold text-green-600\">\n                  <CurrencyDisplay amount={totalAmount} />\n                </p>\n                <p className=\"text-gray-600\">Monto Total</p>\n              </div>\n\n              <div className=\"text-center\">\n                <p className=\"text-2xl font-bold text-purple-600\">{uniqueEmployees}</p>\n                <p className=\"text-gray-600\">Empleados Afectados</p>\n              </div>\n\n              <div className=\"text-center\">\n                <p className=\"text-2xl font-bold text-orange-600\">{uniqueUsers}</p>\n                <p className=\"text-gray-600\">Usuarios Activos</p>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":11339},"src/pages/advanced-payroll-calculation-engine-with-comprehensive-wage-management/components/PayrollCalculationDashboard.jsx":{"content":"// advanced-payroll-calculation-engine-with-comprehensive-wage-management/components/PayrollCalculationDashboard.jsx\nimport React, { useMemo, useState } from 'react';\nimport { Calculator, Clock, DollarSign, Percent, Calendar, TrendingUp } from 'lucide-react';\nimport CurrencyDisplay from '../../../components/ui/CurrencyDisplay';\n\nexport default function PayrollCalculationDashboard({\n  weekRange,\n  onWeekRangeChange,\n  payrollData = [],\n  onCalculatePayroll,\n  onCalculateAguinaldo,\n  onCalculateSeverance,\n  processing\n}) {\n  const [selectedEmployee, setSelectedEmployee] = useState('');\n  const [customRates, setCustomRates] = useState({\n    regularRate: 0,\n    overtimeMultiplier: 1.5,\n    nightDifferential: 1.25,\n    holidayPremium: 2.0\n  });\n\n  const safeISO = (d) => {\n    if (!d) return '';\n    try {\n      const dt = d instanceof Date ? d : new Date(d);\n      return isNaN(dt.getTime()) ? '' : dt.toISOString().split('T')[0];\n    } catch {\n      return '';\n    }\n  };\n\n  const handleWeekChange = (field, value) => {\n    const asDate = value ? new Date(value) : null;\n    onWeekRangeChange?.({\n      ...weekRange,\n      [field]: asDate\n    });\n  };\n\n  const selectedPayroll = useMemo(() => {\n    if (!selectedEmployee) return null;\n    return (\n      payrollData.find(\n        (p) => String(p?.employeeId) === String(selectedEmployee) || String(p?.id) === String(selectedEmployee)\n      ) || null\n    );\n  }, [selectedEmployee, payrollData]);\n\n  const calculatePayroll = async () => {\n    if (!selectedEmployee) return;\n    await onCalculatePayroll?.(selectedEmployee, { rates: customRates, range: weekRange });\n  };\n\n  const calculateSpecialPayment = async (type) => {\n    if (!selectedEmployee) return;\n    if (type === 'aguinaldo') {\n      await onCalculateAguinaldo?.(selectedEmployee);\n    } else if (type === 'severance') {\n      await onCalculateSeverance?.(selectedEmployee, 'without_cause');\n    }\n  };\n\n  const regularHours = Number(selectedPayroll?.regularHours) || 0;\n  const overtimeHours = Number(selectedPayroll?.overtimeHours) || 0;\n  const holidayHours = Number(selectedPayroll?.holidayHours) || 0;\n\n  const overtimeRate = Number(customRates?.regularRate) * Number(customRates?.overtimeMultiplier || 1);\n  const holidayRate = Number(customRates?.regularRate) * Number(customRates?.holidayPremium || 1);\n\n  return (\n    <div className=\"bg-white rounded-lg shadow\">\n      <div className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h2 className=\"text-xl font-bold text-gray-900\">\n            <Calculator className=\"h-6 w-6 inline mr-2 text-blue-600\" />\n            Panel de Cálculo de Nóminas\n          </h2>\n\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center\">\n              <Calendar className=\"h-4 w-4 text-gray-400 mr-2\" />\n              <span className=\"text-sm text-gray-600\">Período de Nómina</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Rango de fechas */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-6 p-4 bg-gray-50 rounded-lg\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">Fecha de Inicio</label>\n            <input\n              type=\"date\"\n              value={safeISO(weekRange?.start)}\n              onChange={(e) => handleWeekChange('start', e?.target?.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500\"\n            />\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">Fecha de Fin</label>\n            <input\n              type=\"date\"\n              value={safeISO(weekRange?.end)}\n              onChange={(e) => handleWeekChange('end', e?.target?.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500\"\n            />\n          </div>\n        </div>\n\n        {/* Configuración de tarifas */}\n        <div className=\"mb-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Configuración de Tarifas</h3>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                <Clock className=\"h-4 w-4 inline mr-1\" />\n                Tarifa Regular\n              </label>\n              <div className=\"relative\">\n                <span className=\"absolute left-3 top-1/2 -translate-y-1/2 text-gray-500\">$</span>\n                <input\n                  type=\"number\"\n                  value={customRates?.regularRate}\n                  onChange={(e) =>\n                    setCustomRates((prev) => ({\n                      ...prev,\n                      regularRate: parseFloat(e?.target?.value) || 0\n                    }))\n                  }\n                  className=\"w-full pl-8 pr-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500\"\n                  placeholder=\"0.00\"\n                  step=\"0.01\"\n                />\n              </div>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                <TrendingUp className=\"h-4 w-4 inline mr-1\" />\n                Multiplicador Horas Extra\n              </label>\n              <div className=\"relative\">\n                <input\n                  type=\"number\"\n                  value={customRates?.overtimeMultiplier}\n                  onChange={(e) =>\n                    setCustomRates((prev) => ({\n                      ...prev,\n                      overtimeMultiplier: parseFloat(e?.target?.value) || 1.5\n                    }))\n                  }\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500\"\n                  placeholder=\"1.5\"\n                  step=\"0.1\"\n                />\n                <span className=\"absolute right-3 top-1/2 -translate-y-1/2 text-gray-500\">x</span>\n              </div>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                <Percent className=\"h-4 w-4 inline mr-1\" />\n                Diferencial Nocturno\n              </label>\n              <div className=\"relative\">\n                <input\n                  type=\"number\"\n                  value={customRates?.nightDifferential}\n                  onChange={(e) =>\n                    setCustomRates((prev) => ({\n                      ...prev,\n                      nightDifferential: parseFloat(e?.target?.value) || 1.25\n                    }))\n                  }\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500\"\n                  placeholder=\"1.25\"\n                  step=\"0.1\"\n                />\n                <span className=\"absolute right-3 top-1/2 -translate-y-1/2 text-gray-500\">x</span>\n              </div>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                <DollarSign className=\"h-4 w-4 inline mr-1\" />\n                Prima Dominical\n              </label>\n              <div className=\"relative\">\n                <input\n                  type=\"number\"\n                  value={customRates?.holidayPremium}\n                  onChange={(e) =>\n                    setCustomRates((prev) => ({\n                      ...prev,\n                      holidayPremium: parseFloat(e?.target?.value) || 2.0\n                    }))\n                  }\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500\"\n                  placeholder=\"2.0\"\n                  step=\"0.1\"\n                />\n                <span className=\"absolute right-3 top-1/2 -translate-y-1/2 text-gray-500\">x</span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Selección de empleado */}\n        <div className=\"mb-6\">\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">Seleccionar Empleado</label>\n          <select\n            value={selectedEmployee}\n            onChange={(e) => setSelectedEmployee(e?.target?.value)}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500\"\n          >\n            <option value=\"\">Selecciona un empleado...</option>\n            {payrollData.map((e) => (\n              <option key={e?.employeeId || e?.id} value={e?.employeeId || e?.id}>\n                {e?.employeeName || e?.name || 'Empleado sin nombre'}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        {/* Botones de acción */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <button\n            onClick={calculatePayroll}\n            disabled={!selectedEmployee || processing}\n            className=\"w-full px-4 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center\"\n          >\n            <Calculator className=\"h-5 w-5 mr-2\" />\n            {processing ? 'Calculando...' : 'Calcular Nómina Semanal'}\n          </button>\n\n          <button\n            onClick={() => calculateSpecialPayment('aguinaldo')}\n            disabled={!selectedEmployee || processing}\n            className=\"w-full px-4 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center\"\n          >\n            <DollarSign className=\"h-5 w-5 mr-2\" />\n            Calcular Aguinaldo\n          </button>\n\n          <button\n            onClick={() => calculateSpecialPayment('severance')}\n            disabled={!selectedEmployee || processing}\n            className=\"w-full px-4 py-3 bg-orange-600 text-white rounded-lg hover:bg-orange-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center\"\n          >\n            <TrendingUp className=\"h-5 w-5 mr-2\" />\n            Calcular Finiquito\n          </button>\n        </div>\n\n        {/* Vista previa de cálculos: solo si hay datos reales del empleado seleccionado */}\n        {selectedEmployee && selectedPayroll && (\n          <div className=\"mt-6 p-4 bg-gray-50 rounded-lg\">\n            <h4 className=\"font-semibold text-gray-900 mb-3\">Vista Previa de Cálculos</h4>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-600\">Horas Regulares:</span>\n                <span className=\"font-medium\">\n                  {regularHours.toFixed(1)}h × <CurrencyDisplay amount={Number(customRates?.regularRate) || 0} />\n                </span>\n              </div>\n\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-600\">Horas Extra:</span>\n                <span className=\"font-medium\">\n                  {overtimeHours.toFixed(1)}h × <CurrencyDisplay amount={overtimeRate || 0} />\n                </span>\n              </div>\n\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-600\">Horas Festivas/Dominical:</span>\n                <span className=\"font-medium\">\n                  {holidayHours.toFixed(1)}h × <CurrencyDisplay amount={holidayRate || 0} />\n                </span>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Si no hay datos de nómina del empleado seleccionado, no mostramos números ficticios */}\n        {selectedEmployee && !selectedPayroll && (\n          <div className=\"mt-6 p-4 bg-yellow-50 border border-yellow-200 rounded-lg text-sm text-yellow-800\">\n            No hay datos de nómina para el empleado seleccionado en el período actual. Ajusta fechas o calcula la nómina.\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":12073},"src/pages/attendance-history-and-analytics-dashboard/components/AttendanceChart.jsx":{"content":"// src/modules/attendance-history-and-analytics-dashboard/components/AttendanceChart.jsx\nimport React, { useState, useMemo } from 'react';\nimport {\n  BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer,\n  LineChart, Line, PieChart, Pie, Cell\n} from 'recharts';\nimport Button from '../../../components/ui/Button';\n\nconst AttendanceChart = ({ data = {}, chartType, onChartTypeChange, loading = false }) => {\n  const [selectedPeriod, setSelectedPeriod] = useState('week');\n\n  // Chart options\n  const chartTypes = [\n    { key: 'bar', label: 'Barras', icon: 'BarChart3' },\n    { key: 'line', label: 'Líneas', icon: 'TrendingUp' },\n    { key: 'pie', label: 'Circular', icon: 'PieChart' }\n  ];\n  const periods = [\n    { key: 'week', label: 'Semana' },\n    { key: 'month', label: 'Mes' },\n    { key: 'quarter', label: 'Trimestre' }\n  ];\n\n  // Extract datasets depending on period\n  const weeklyData = data?.weekly || [];\n  const monthlyTrendData = data?.monthly || [];\n  const statusDistribution = data?.distribution || [];\n\n  // Insights calculation (example: adjust based on your backend shape)\n  const insights = useMemo(() => {\n    if (!weeklyData?.length) return { attendance: 0, late: 0, overtime: 0 };\n    const total = weeklyData.length;\n    const avgAttendance = weeklyData.reduce((s, d) => s + (d.attendance || 0), 0) / total;\n    const avgLate = weeklyData.reduce((s, d) => s + (d.late || 0), 0) / total;\n    const avgOvertime = weeklyData.reduce((s, d) => s + (d.overtime || 0), 0) / total;\n    return {\n      attendance: avgAttendance.toFixed(1),\n      late: avgLate.toFixed(1),\n      overtime: avgOvertime.toFixed(1)\n    };\n  }, [weeklyData]);\n\n  const renderBarChart = () => (\n    <ResponsiveContainer width=\"100%\" height={400}>\n      <BarChart data={weeklyData} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\n        <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#E2E8F0\" />\n        <XAxis dataKey=\"name\" stroke=\"#64748B\" fontSize={12} />\n        <YAxis stroke=\"#64748B\" fontSize={12} />\n        <Tooltip\n          contentStyle={{\n            backgroundColor: '#FFFFFF',\n            border: '1px solid #E2E8F0',\n            borderRadius: '8px',\n            boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)'\n          }}\n        />\n        <Bar dataKey=\"attendance\" fill=\"#2563EB\" name=\"Asistencia %\" radius={[4, 4, 0, 0]} />\n        <Bar dataKey=\"late\" fill=\"#D97706\" name=\"Tardanzas %\" radius={[4, 4, 0, 0]} />\n        <Bar dataKey=\"overtime\" fill=\"#059669\" name=\"Horas Extra\" radius={[4, 4, 0, 0]} />\n      </BarChart>\n    </ResponsiveContainer>\n  );\n\n  const renderLineChart = () => (\n    <ResponsiveContainer width=\"100%\" height={400}>\n      <LineChart data={monthlyTrendData} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\n        <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#E2E8F0\" />\n        <XAxis dataKey=\"month\" stroke=\"#64748B\" fontSize={12} />\n        <YAxis stroke=\"#64748B\" fontSize={12} />\n        <Tooltip\n          contentStyle={{\n            backgroundColor: '#FFFFFF',\n            border: '1px solid #E2E8F0',\n            borderRadius: '8px',\n            boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)'\n          }}\n        />\n        <Line\n          type=\"monotone\"\n          dataKey=\"attendance\"\n          stroke=\"#2563EB\"\n          strokeWidth={3}\n          dot={{ fill: '#2563EB', strokeWidth: 2, r: 6 }}\n          name=\"Asistencia %\"\n        />\n        <Line\n          type=\"monotone\"\n          dataKey=\"productivity\"\n          stroke=\"#059669\"\n          strokeWidth={3}\n          dot={{ fill: '#059669', strokeWidth: 2, r: 6 }}\n          name=\"Productividad %\"\n        />\n      </LineChart>\n    </ResponsiveContainer>\n  );\n\n  const renderPieChart = () => (\n    <ResponsiveContainer width=\"100%\" height={400}>\n      <PieChart>\n        <Pie\n          data={statusDistribution}\n          cx=\"50%\"\n          cy=\"50%\"\n          outerRadius={120}\n          innerRadius={60}\n          paddingAngle={2}\n          dataKey=\"value\"\n        >\n          {statusDistribution?.map((entry, index) => (\n            <Cell key={`cell-${index}`} fill={entry?.color} />\n          ))}\n        </Pie>\n        <Tooltip\n          contentStyle={{\n            backgroundColor: '#FFFFFF',\n            border: '1px solid #E2E8F0',\n            borderRadius: '8px',\n            boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)'\n          }}\n          formatter={(value) => [`${value}%`, 'Porcentaje']}\n        />\n      </PieChart>\n    </ResponsiveContainer>\n  );\n\n  const renderChart = () => {\n    if (loading) {\n      return <div className=\"h-[400px] flex items-center justify-center text-muted-foreground\">Cargando datos...</div>;\n    }\n    switch (chartType) {\n      case 'line': return renderLineChart();\n      case 'pie': return renderPieChart();\n      default: return renderBarChart();\n    }\n  };\n\n  return (\n    <div className=\"bg-card border border-border rounded-lg p-6\">\n      {/* Chart Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h3 className=\"text-lg font-semibold text-foreground\">Análisis de Asistencia</h3>\n          <p className=\"text-sm text-muted-foreground\">Tendencias y patrones de asistencia</p>\n        </div>\n        \n        <div className=\"flex items-center space-x-4\">\n          {/* Period Selector */}\n          <div className=\"flex items-center space-x-2\">\n            {periods?.map((period) => (\n              <Button\n                key={period?.key}\n                variant={selectedPeriod === period?.key ? 'default' : 'outline'}\n                size=\"sm\"\n                onClick={() => setSelectedPeriod(period?.key)}\n              >\n                {period?.label}\n              </Button>\n            ))}\n          </div>\n          \n          {/* Chart Type Selector */}\n          <div className=\"flex items-center space-x-2\">\n            {chartTypes?.map((type) => (\n              <Button\n                key={type?.key}\n                variant={chartType === type?.key ? 'default' : 'outline'}\n                size=\"sm\"\n                onClick={() => onChartTypeChange(type?.key)}\n                iconName={type?.icon}\n                iconPosition=\"left\"\n              >\n                {type?.label}\n              </Button>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      {/* Chart */}\n      <div className=\"w-full\">{renderChart()}</div>\n\n      {/* Legend for Pie */}\n      {chartType === 'pie' && statusDistribution?.length > 0 && (\n        <div className=\"flex items-center justify-center space-x-6 mt-4\">\n          {statusDistribution?.map((item, index) => (\n            <div key={index} className=\"flex items-center space-x-2\">\n              <div className=\"w-3 h-3 rounded-full\" style={{ backgroundColor: item?.color }} />\n              <span className=\"text-sm text-foreground\">{item?.name}</span>\n              <span className=\"text-sm font-medium text-foreground\">{item?.value}%</span>\n            </div>\n          ))}\n        </div>\n      )}\n\n      {/* Insights */}\n      {!loading && (\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mt-6 pt-6 border-t border-border\">\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-success\">{insights.attendance}%</div>\n            <div className=\"text-sm text-muted-foreground\">Asistencia Promedio</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-warning\">{insights.late}%</div>\n            <div className=\"text-sm text-muted-foreground\">Tardanzas</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-primary\">{insights.overtime}h</div>\n            <div className=\"text-sm text-muted-foreground\">Horas Extra Promedio</div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AttendanceChart;\n","size_bytes":7894},"src/pages/attendance-history-and-analytics-dashboard/components/AttendanceGrid.jsx":{"content":"import React, { useMemo } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport { Checkbox } from '../../../components/ui/Checkbox';\n\nconst AttendanceGrid = ({\n  data = [],\n  loading = false,\n  /** sorting */\n  onSort,\n  sortConfig = { key: null, direction: 'asc' },\n  /** bulk selection */\n  selectedRecords = [],\n  onRecordSelect = () => {},\n  onBulkAction = () => {},\n  onRecordEdit = () => {},\n  /** pagination (controlled) */\n  page = 1,\n  pageSize = 20,\n  totalCount = 0,\n  onPageChange = () => {},\n}) => {\n  /** ---------- Columns ---------- */\n  const columns = useMemo(() => ([\n    { key: 'employee',     label: 'Empleado',         sortable: true },\n    { key: 'date',         label: 'Fecha',            sortable: true },\n    { key: 'clockIn',      label: 'Entrada',          sortable: true },\n    { key: 'lunchStart',   label: 'Inicio Almuerzo',  sortable: false },\n    { key: 'lunchEnd',     label: 'Fin Almuerzo',     sortable: false },\n    { key: 'clockOut',     label: 'Salida',           sortable: true },\n    { key: 'totalHours',   label: 'Horas Total',      sortable: true },\n    { key: 'overtime',     label: 'Horas Extra',      sortable: true },\n    { key: 'status',       label: 'Estado',           sortable: true },\n    { key: 'incidents',    label: 'Incidentes',       sortable: false },\n    { key: 'actions',      label: 'Acciones',         sortable: false },\n  ]), []);\n\n  /** ---------- Utils ---------- */\n  const getInitials = (fullName = '') => {\n    const parts = `${fullName}`.trim().split(/\\s+/).slice(0, 2);\n    const initials = parts.map(p => (p?.[0] || '').toUpperCase()).join('');\n    return initials || 'E';\n  };\n\n  const getStatusBadge = (status) => {\n    const statusConfig = {\n      complete:   { color: 'bg-success/10 text-success border-success/20',   label: 'Completo' },\n      incomplete: { color: 'bg-warning/10 text-warning border-warning/20',   label: 'Incompleto' },\n      late:       { color: 'bg-error/10 text-error border-error/20',         label: 'Tardío' },\n      overtime:   { color: 'bg-primary/10 text-primary border-primary/20',   label: 'Horas Extra' },\n    };\n    const config = statusConfig?.[status] || statusConfig.complete;\n    return (\n      <span className={`px-2 py-1 text-xs font-medium rounded-full border ${config.color}`}>\n        {config.label}\n      </span>\n    );\n  };\n\n  const safeTimeToLocale = (time) => {\n    if (!time) return '-';\n    // Admite \"HH:mm\" o \"HH:mm:ss\"\n    const safe = /^\\d{2}:\\d{2}(:\\d{2})?$/.test(time) ? time : '00:00';\n    const d = new Date(`2000-01-01T${safe}`);\n    return isNaN(d.getTime())\n      ? '-'\n      : d.toLocaleTimeString('es-ES', { hour: '2-digit', minute: '2-digit' });\n  };\n\n  const safeDateToLocale = (dateStr) => {\n    if (!dateStr) return '-';\n    const d = new Date(dateStr);\n    return isNaN(d.getTime())\n      ? '-'\n      : d.toLocaleDateString('es-ES', { day: '2-digit', month: '2-digit', year: 'numeric' });\n  };\n\n  const handleSort = (key) => {\n    const col = columns.find(c => c.key === key);\n    if (!col?.sortable) return;\n    onSort?.(key);\n  };\n\n  const allVisibleSelected = useMemo(() => {\n    if (!data?.length) return false;\n    return data.every(r => selectedRecords.includes(r?.id));\n  }, [data, selectedRecords]);\n\n  const toggleSelectAll = (checked) => {\n    if (checked) {\n      const idsToAdd = data.map(r => r?.id).filter(Boolean);\n      const merged = Array.from(new Set([...selectedRecords, ...idsToAdd]));\n      onRecordSelect(merged);\n    } else {\n      const visibleSet = new Set(data.map(r => r?.id));\n      const remaining = selectedRecords.filter(id => !visibleSet.has(id));\n      onRecordSelect(remaining);\n    }\n  };\n\n  const toggleSelectRow = (recordId, checked) => {\n    if (!recordId) return;\n    if (checked) {\n      onRecordSelect(Array.from(new Set([...selectedRecords, recordId])));\n    } else {\n      onRecordSelect(selectedRecords.filter(id => id !== recordId));\n    }\n  };\n\n  const getSortIcon = (key) => {\n    if (sortConfig?.key !== key) return 'ArrowUpDown';\n    return sortConfig?.direction === 'asc' ? 'ArrowUp' : 'ArrowDown';\n  };\n\n  const totalPages = Math.max(1, Math.ceil(totalCount / Math.max(1, pageSize)));\n  const showingFrom = totalCount === 0 ? 0 : (page - 1) * pageSize + 1;\n  const showingTo = Math.min(page * pageSize, totalCount);\n\n  /** ---------- Loading ---------- */\n  if (loading) {\n    return (\n      <div className=\"bg-card border border-border rounded-lg overflow-hidden\">\n        <div className=\"p-4 border-b border-border\">\n          <div className=\"h-4 w-32 bg-muted/50 rounded animate-pulse\" />\n        </div>\n        <div className=\"p-6 space-y-3\">\n          {[...Array(6)].map((_, i) => (\n            <div key={i} className=\"h-10 bg-muted/40 rounded animate-pulse\" />\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  /** ---------- Empty ---------- */\n  if (!data?.length) {\n    return (\n      <div className=\"bg-card border border-border rounded-lg p-12 text-center\">\n        <Icon name=\"CalendarX\" size={48} className=\"mx-auto text-muted-foreground mb-4\" />\n        <h3 className=\"text-lg font-semibold text-foreground mb-1\">Sin registros</h3>\n        <p className=\"text-sm text-muted-foreground\">\n          No se encontraron datos de asistencia con los filtros actuales.\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-card border border-border rounded-lg overflow-hidden\">\n      {/* Bulk Actions Bar */}\n      {selectedRecords?.length > 0 && (\n        <div className=\"bg-muted/50 border-b border-border p-4\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm text-foreground\">\n              {selectedRecords.length} registro(s) seleccionado(s)\n            </span>\n            <div className=\"flex items-center space-x-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => onBulkAction('approve')}\n                iconName=\"Check\"\n                iconPosition=\"left\"\n                aria-label=\"Aprobar seleccionados\"\n              >\n                Aprobar\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => onBulkAction('reject')}\n                iconName=\"X\"\n                iconPosition=\"left\"\n                aria-label=\"Rechazar seleccionados\"\n              >\n                Rechazar\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => onBulkAction('export')}\n                iconName=\"Download\"\n                iconPosition=\"left\"\n                aria-label=\"Exportar seleccionados\"\n              >\n                Exportar\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Table */}\n      <div className=\"overflow-x-auto\">\n        <table className=\"w-full\">\n          <thead className=\"bg-muted/30\">\n            <tr>\n              <th className=\"p-4 text-left w-10\">\n                <Checkbox\n                  aria-label=\"Seleccionar todos los registros visibles\"\n                  checked={allVisibleSelected}\n                  onChange={(e) => toggleSelectAll(e?.target?.checked)}\n                />\n              </th>\n              {columns.map((column) => (\n                <th\n                  key={column.key}\n                  className={`p-4 text-left text-sm font-medium text-foreground ${\n                    column.sortable ? 'cursor-pointer hover:bg-muted/50' : ''\n                  }`}\n                  onClick={() => handleSort(column.key)}\n                  aria-sort={\n                    sortConfig?.key === column.key\n                      ? (sortConfig?.direction === 'asc' ? 'ascending' : 'descending')\n                      : 'none'\n                  }\n                  scope=\"col\"\n                >\n                  <div className=\"flex items-center space-x-2\">\n                    <span>{column.label}</span>\n                    {column.sortable && (\n                      <Icon\n                        name={getSortIcon(column.key)}\n                        size={14}\n                        className=\"text-muted-foreground\"\n                        aria-hidden=\"true\"\n                      />\n                    )}\n                  </div>\n                </th>\n              ))}\n            </tr>\n          </thead>\n\n          <tbody>\n            {data.map((record, index) => (\n              <tr\n                key={record?.id ?? `row-${index}`}\n                className={`border-b border-border hover:bg-muted/30 ${\n                  index % 2 === 0 ? 'bg-background' : 'bg-muted/10'\n                }`}\n              >\n                <td className=\"p-4\">\n                  <Checkbox\n                    aria-label={`Seleccionar registro de ${record?.employee || 'empleado'} del ${safeDateToLocale(record?.date)}`}\n                    checked={selectedRecords.includes(record?.id)}\n                    onChange={(e) => toggleSelectRow(record?.id, e?.target?.checked)}\n                  />\n                </td>\n\n                <td className=\"p-4\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-8 h-8 bg-primary/10 text-primary rounded-full flex items-center justify-center text-sm font-medium\">\n                      {getInitials(record?.employee)}\n                    </div>\n                    <div>\n                      <div className=\"font-medium text-foreground\">{record?.employee || '-'}</div>\n                      <div className=\"text-xs text-muted-foreground\">{record?.site || '-'}</div>\n                    </div>\n                  </div>\n                </td>\n\n                <td className=\"p-4 text-sm text-foreground\">{safeDateToLocale(record?.date)}</td>\n                <td className=\"p-4 text-sm text-foreground\">{safeTimeToLocale(record?.clockIn)}</td>\n                <td className=\"p-4 text-sm text-foreground\">{safeTimeToLocale(record?.lunchStart)}</td>\n                <td className=\"p-4 text-sm text-foreground\">{safeTimeToLocale(record?.lunchEnd)}</td>\n                <td className=\"p-4 text-sm text-foreground\">{safeTimeToLocale(record?.clockOut)}</td>\n\n                <td className=\"p-4 text-sm font-medium text-foreground\">\n                  {Number.isFinite(record?.totalHours) ? `${record.totalHours}h` : '-'}\n                </td>\n                <td className=\"p-4 text-sm font-medium text-primary\">\n                  {Number.isFinite(record?.overtime) ? `${record.overtime}h` : '0h'}\n                </td>\n\n                <td className=\"p-4\">{getStatusBadge(record?.status)}</td>\n\n                <td className=\"p-4\">\n                  {Array.isArray(record?.incidents) && record.incidents.length > 0 ? (\n                    <div className=\"flex items-center space-x-1\">\n                      <Icon name=\"AlertTriangle\" size={16} className=\"text-warning\" />\n                      <span className=\"text-xs text-warning\">{record.incidents.length}</span>\n                    </div>\n                  ) : (\n                    <span className=\"text-xs text-muted-foreground\">-</span>\n                  )}\n                </td>\n\n                <td className=\"p-4\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      aria-label=\"Editar registro\"\n                      onClick={() => onRecordEdit(record)}\n                    >\n                      <Icon name=\"Edit\" size={16} />\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      aria-label=\"Ver detalles\"\n                      onClick={() => {/* abre modal / drawer de detalles */}}\n                    >\n                      <Icon name=\"Eye\" size={16} />\n                    </Button>\n                  </div>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n\n      {/* Pagination */}\n      <div className=\"flex items-center justify-between p-4 border-t border-border\">\n        <div className=\"text-sm text-muted-foreground\">\n          {totalCount > 0\n            ? <>Mostrando {showingFrom}–{showingTo} de {totalCount} registros</>\n            : <>0 registros</>}\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => onPageChange(Math.max(1, page - 1))}\n            disabled={page <= 1}\n            aria-label=\"Página anterior\"\n          >\n            <Icon name=\"ChevronLeft\" size={16} />\n          </Button>\n\n          <span className=\"px-3 py-1 text-sm bg-primary text-primary-foreground rounded\">\n            {page}\n          </span>\n          <span className=\"px-3 py-1 text-sm text-muted-foreground\">\n            de {totalPages}\n          </span>\n\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => onPageChange(Math.min(totalPages, page + 1))}\n            disabled={page >= totalPages}\n            aria-label=\"Página siguiente\"\n          >\n            <Icon name=\"ChevronRight\" size={16} />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AttendanceGrid;\n","size_bytes":13462},"src/pages/attendance-history-and-analytics-dashboard/components/ExportPanel.jsx":{"content":"import React, { useState } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport Select from '../../../components/ui/Select';\nimport { Checkbox } from '../../../components/ui/Checkbox';\n\nconst ExportPanel = ({ onExport, isExporting = false }) => {\n  const [exportConfig, setExportConfig] = useState({\n    format: 'excel',\n    dateRange: 'current',\n    includeCharts: true,\n    includeDetails: true,\n    includeIncidents: false,\n    groupBy: 'employee'\n  });\n\n  const formatOptions = [\n    { value: 'excel', label: 'Excel (.xlsx)' },\n    { value: 'pdf', label: 'PDF' },\n    { value: 'csv', label: 'CSV' }\n  ];\n\n  const dateRangeOptions = [\n    { value: 'current', label: 'Filtros Actuales' },\n    { value: 'week', label: 'Última Semana' },\n    { value: 'month', label: 'Último Mes' },\n    { value: 'quarter', label: 'Último Trimestre' },\n    { value: 'custom', label: 'Rango Personalizado' }\n  ];\n\n  const groupByOptions = [\n    { value: 'employee', label: 'Por Empleado' },\n    { value: 'site', label: 'Por Sitio' },\n    { value: 'supervisor', label: 'Por Supervisor' },\n    { value: 'date', label: 'Por Fecha' }\n  ];\n\n  const handleConfigChange = (key, value) => {\n    setExportConfig(prev => ({ ...prev, [key]: value }));\n  };\n\n  const handleExport = () => {\n    onExport(exportConfig);\n  };\n\n  const getFormatIcon = (format) => {\n    switch (format) {\n      case 'excel': return 'FileSpreadsheet';\n      case 'pdf': return 'FileText';\n      case 'csv': return 'Database';\n      default: return 'Download';\n    }\n  };\n\n  return (\n    <div className=\"bg-card border border-border rounded-lg p-6\">\n      <div className=\"flex items-center space-x-3 mb-6\">\n        <div className=\"p-2 bg-primary/10 text-primary rounded-lg\">\n          <Icon name=\"Download\" size={20} />\n        </div>\n        <div>\n          <h3 className=\"text-lg font-semibold text-foreground\">Exportar Datos</h3>\n          <p className=\"text-sm text-muted-foreground\">Generar reportes personalizados</p>\n        </div>\n      </div>\n      <div className=\"space-y-6\">\n        {/* Format Selection */}\n        <div>\n          <Select\n            label=\"Formato de Exportación\"\n            options={formatOptions}\n            value={exportConfig?.format}\n            onChange={(value) => handleConfigChange('format', value)}\n          />\n        </div>\n\n        {/* Date Range */}\n        <div>\n          <Select\n            label=\"Rango de Fechas\"\n            options={dateRangeOptions}\n            value={exportConfig?.dateRange}\n            onChange={(value) => handleConfigChange('dateRange', value)}\n          />\n        </div>\n\n        {/* Group By */}\n        <div>\n          <Select\n            label=\"Agrupar Por\"\n            options={groupByOptions}\n            value={exportConfig?.groupBy}\n            onChange={(value) => handleConfigChange('groupBy', value)}\n          />\n        </div>\n\n        {/* Export Options */}\n        <div className=\"space-y-4\">\n          <h4 className=\"text-sm font-medium text-foreground\">Opciones de Contenido</h4>\n          \n          <div className=\"space-y-3\">\n            <Checkbox\n              label=\"Incluir Gráficos\"\n              description=\"Agregar visualizaciones al reporte\"\n              checked={exportConfig?.includeCharts}\n              onChange={(e) => handleConfigChange('includeCharts', e?.target?.checked)}\n            />\n            \n            <Checkbox\n              label=\"Incluir Detalles Completos\"\n              description=\"Todos los campos de asistencia\"\n              checked={exportConfig?.includeDetails}\n              onChange={(e) => handleConfigChange('includeDetails', e?.target?.checked)}\n            />\n            \n            <Checkbox\n              label=\"Incluir Incidentes\"\n              description=\"Registros de ausencias y permisos\"\n              checked={exportConfig?.includeIncidents}\n              onChange={(e) => handleConfigChange('includeIncidents', e?.target?.checked)}\n            />\n          </div>\n        </div>\n\n        {/* Quick Export Templates */}\n        <div className=\"space-y-4 pt-4 border-t border-border\">\n          <h4 className=\"text-sm font-medium text-foreground\">Plantillas Rápidas</h4>\n          \n          <div className=\"grid grid-cols-1 gap-3\">\n            <Button\n              variant=\"outline\"\n              fullWidth\n              iconName=\"FileSpreadsheet\"\n              iconPosition=\"left\"\n              onClick={() => {\n                setExportConfig({\n                  format: 'excel',\n                  dateRange: 'month',\n                  includeCharts: true,\n                  includeDetails: true,\n                  includeIncidents: true,\n                  groupBy: 'employee'\n                });\n              }}\n            >\n              Reporte Mensual Completo\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              fullWidth\n              iconName=\"FileText\"\n              iconPosition=\"left\"\n              onClick={() => {\n                setExportConfig({\n                  format: 'pdf',\n                  dateRange: 'week',\n                  includeCharts: true,\n                  includeDetails: false,\n                  includeIncidents: false,\n                  groupBy: 'site'\n                });\n              }}\n            >\n              Resumen Semanal por Sitio\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              fullWidth\n              iconName=\"Database\"\n              iconPosition=\"left\"\n              onClick={() => {\n                setExportConfig({\n                  format: 'csv',\n                  dateRange: 'current',\n                  includeCharts: false,\n                  includeDetails: true,\n                  includeIncidents: false,\n                  groupBy: 'date'\n                });\n              }}\n            >\n              Datos Raw para Análisis\n            </Button>\n          </div>\n        </div>\n\n        {/* Export Button */}\n        <div className=\"pt-4 border-t border-border\">\n          <Button\n            variant=\"default\"\n            fullWidth\n            loading={isExporting}\n            onClick={handleExport}\n            iconName={getFormatIcon(exportConfig?.format)}\n            iconPosition=\"left\"\n          >\n            {isExporting ? 'Generando...' : `Exportar como ${exportConfig?.format?.toUpperCase()}`}\n          </Button>\n        </div>\n\n        {/* Export History */}\n        <div className=\"space-y-3 pt-4 border-t border-border\">\n          <h4 className=\"text-sm font-medium text-foreground\">Exportaciones Recientes</h4>\n          \n          <div className=\"space-y-2\">\n            {[\n              { name: 'Reporte_Asistencia_Enero_2025.xlsx', date: '2025-01-04', size: '2.4 MB' },\n              { name: 'Resumen_Semanal_Dic_2024.pdf', date: '2024-12-30', size: '1.8 MB' },\n              { name: 'Datos_Tardanzas_Dic_2024.csv', date: '2024-12-28', size: '456 KB' }\n            ]?.map((file, index) => (\n              <div key={index} className=\"flex items-center justify-between p-3 bg-muted/30 rounded-lg\">\n                <div className=\"flex items-center space-x-3\">\n                  <Icon \n                    name={file?.name?.endsWith('.xlsx') ? 'FileSpreadsheet' : \n                          file?.name?.endsWith('.pdf') ? 'FileText' : 'Database'} \n                    size={16} \n                    className=\"text-muted-foreground\" \n                  />\n                  <div>\n                    <div className=\"text-sm font-medium text-foreground\">{file?.name}</div>\n                    <div className=\"text-xs text-muted-foreground\">{file?.date} • {file?.size}</div>\n                  </div>\n                </div>\n                <Button variant=\"ghost\" size=\"icon\">\n                  <Icon name=\"Download\" size={16} />\n                </Button>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ExportPanel;","size_bytes":8045},"src/pages/attendance-history-and-analytics-dashboard/components/FilterPanel.jsx":{"content":"import React, { useState } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport Input from '../../../components/ui/Input';\nimport Select from '../../../components/ui/Select';\nimport { Checkbox } from '../../../components/ui/Checkbox';\n\nconst FilterPanel = ({ \n  isCollapsed, \n  onToggleCollapse, \n  filters, \n  onFiltersChange,\n  onApplyFilters,\n  onResetFilters \n}) => {\n  const [localFilters, setLocalFilters] = useState(filters);\n\n  const siteOptions = [\n    { value: 'all', label: 'Todos los Sitios' },\n    { value: 'obra-central', label: 'Obra Central' },\n    { value: 'proyecto-norte', label: 'Proyecto Norte' },\n    { value: 'edificio-sur', label: 'Edificio Sur' },\n    { value: 'complejo-oeste', label: 'Complejo Oeste' }\n  ];\n\n  const supervisorOptions = [\n    { value: 'all', label: 'Todos los Supervisores' },\n    { value: 'carlos-martinez', label: 'Carlos Martínez' },\n    { value: 'ana-rodriguez', label: 'Ana Rodríguez' },\n    { value: 'luis-garcia', label: 'Luis García' },\n    { value: 'maria-lopez', label: 'María López' }\n  ];\n\n  const statusOptions = [\n    { value: 'all', label: 'Todos los Estados' },\n    { value: 'complete', label: 'Completo' },\n    { value: 'incomplete', label: 'Incompleto' },\n    { value: 'late', label: 'Tardío' },\n    { value: 'overtime', label: 'Horas Extra' }\n  ];\n\n  const savedViewOptions = [\n    { value: '', label: 'Seleccionar vista guardada...' },\n    { value: 'weekly-summary', label: 'Resumen Semanal' },\n    { value: 'monthly-report', label: 'Reporte Mensual' },\n    { value: 'tardiness-analysis', label: 'Análisis de Tardanzas' },\n    { value: 'overtime-tracking', label: 'Seguimiento Horas Extra' }\n  ];\n\n  const handleFilterChange = (key, value) => {\n    const updatedFilters = { ...localFilters, [key]: value };\n    setLocalFilters(updatedFilters);\n    onFiltersChange(updatedFilters);\n  };\n\n  const handleApply = () => {\n    onApplyFilters(localFilters);\n  };\n\n  const handleReset = () => {\n    const resetFilters = {\n      dateFrom: '',\n      dateTo: '',\n      site: 'all',\n      supervisor: 'all',\n      status: 'all',\n      employee: '',\n      includeIncidents: false,\n      includeOvertime: true,\n      savedView: ''\n    };\n    setLocalFilters(resetFilters);\n    onResetFilters();\n  };\n\n  if (isCollapsed) {\n    return (\n      <div className=\"w-16 bg-card border-r border-border p-4\">\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          onClick={onToggleCollapse}\n          className=\"w-full\"\n        >\n          <Icon name=\"ChevronRight\" size={20} />\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"w-80 bg-card border-r border-border p-6 overflow-y-auto\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h2 className=\"text-lg font-semibold text-foreground\">Filtros</h2>\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          onClick={onToggleCollapse}\n        >\n          <Icon name=\"ChevronLeft\" size={20} />\n        </Button>\n      </div>\n      <div className=\"space-y-6\">\n        {/* Saved Views */}\n        <div>\n          <Select\n            label=\"Vistas Guardadas\"\n            options={savedViewOptions}\n            value={localFilters?.savedView}\n            onChange={(value) => handleFilterChange('savedView', value)}\n            placeholder=\"Cargar vista guardada...\"\n          />\n        </div>\n\n        {/* Date Range */}\n        <div className=\"space-y-4\">\n          <h3 className=\"text-sm font-medium text-foreground\">Rango de Fechas</h3>\n          <Input\n            label=\"Fecha Desde\"\n            type=\"date\"\n            value={localFilters?.dateFrom}\n            onChange={(e) => handleFilterChange('dateFrom', e?.target?.value)}\n          />\n          <Input\n            label=\"Fecha Hasta\"\n            type=\"date\"\n            value={localFilters?.dateTo}\n            onChange={(e) => handleFilterChange('dateTo', e?.target?.value)}\n          />\n        </div>\n\n        {/* Site Selection */}\n        <div>\n          <Select\n            label=\"Sitio de Construcción\"\n            options={siteOptions}\n            value={localFilters?.site}\n            onChange={(value) => handleFilterChange('site', value)}\n          />\n        </div>\n\n        {/* Supervisor Selection */}\n        <div>\n          <Select\n            label=\"Supervisor\"\n            options={supervisorOptions}\n            value={localFilters?.supervisor}\n            onChange={(value) => handleFilterChange('supervisor', value)}\n          />\n        </div>\n\n        {/* Employee Search */}\n        <div>\n          <Input\n            label=\"Buscar Empleado\"\n            type=\"search\"\n            placeholder=\"Nombre del empleado...\"\n            value={localFilters?.employee}\n            onChange={(e) => handleFilterChange('employee', e?.target?.value)}\n          />\n        </div>\n\n        {/* Status Filter */}\n        <div>\n          <Select\n            label=\"Estado de Asistencia\"\n            options={statusOptions}\n            value={localFilters?.status}\n            onChange={(value) => handleFilterChange('status', value)}\n          />\n        </div>\n\n        {/* Additional Options */}\n        <div className=\"space-y-3\">\n          <h3 className=\"text-sm font-medium text-foreground\">Opciones Adicionales</h3>\n          \n          <Checkbox\n            label=\"Incluir Incidentes\"\n            checked={localFilters?.includeIncidents}\n            onChange={(e) => handleFilterChange('includeIncidents', e?.target?.checked)}\n          />\n          \n          <Checkbox\n            label=\"Incluir Horas Extra\"\n            checked={localFilters?.includeOvertime}\n            onChange={(e) => handleFilterChange('includeOvertime', e?.target?.checked)}\n          />\n        </div>\n\n        {/* Action Buttons */}\n        <div className=\"space-y-3 pt-4 border-t border-border\">\n          <Button\n            variant=\"default\"\n            fullWidth\n            onClick={handleApply}\n            iconName=\"Search\"\n            iconPosition=\"left\"\n          >\n            Aplicar Filtros\n          </Button>\n          \n          <Button\n            variant=\"outline\"\n            fullWidth\n            onClick={handleReset}\n            iconName=\"RotateCcw\"\n            iconPosition=\"left\"\n          >\n            Limpiar Filtros\n          </Button>\n        </div>\n\n        {/* Quick Actions */}\n        <div className=\"space-y-2 pt-4 border-t border-border\">\n          <h3 className=\"text-sm font-medium text-foreground\">Acciones Rápidas</h3>\n          \n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            fullWidth\n            iconName=\"Calendar\"\n            iconPosition=\"left\"\n            onClick={() => {\n              const today = new Date()?.toISOString()?.split('T')?.[0];\n              const weekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)?.toISOString()?.split('T')?.[0];\n              handleFilterChange('dateFrom', weekAgo);\n              handleFilterChange('dateTo', today);\n            }}\n          >\n            Última Semana\n          </Button>\n          \n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            fullWidth\n            iconName=\"Calendar\"\n            iconPosition=\"left\"\n            onClick={() => {\n              const today = new Date()?.toISOString()?.split('T')?.[0];\n              const monthAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000)?.toISOString()?.split('T')?.[0];\n              handleFilterChange('dateFrom', monthAgo);\n              handleFilterChange('dateTo', today);\n            }}\n          >\n            Último Mes\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FilterPanel;","size_bytes":7749},"src/pages/attendance-history-and-analytics-dashboard/components/KPICard.jsx":{"content":"// src/modules/attendance-history-and-analytics-dashboard/components/KPICard.jsx\nimport React, { useMemo } from 'react';\nimport Icon from '../../../components/AppIcon';\n\nconst KPICard = ({\n  title,\n  value,\n  unit = '',\n  icon = 'Activity',\n  color = 'primary',\n  description,\n\n  // New/optional props\n  previousValue,           // number | undefined  → si viene, calculamos tendencia automáticamente\n  trend,                   // 'up' | 'down' | 'flat'  → opcional, prioriza si lo envías\n  trendValue,              // string | number → opcional (ej: '+4.2%')\n  loading = false,         // muestra skeleton\n  compact = false,         // reduce paddings y tamaños\n  className = '',\n  onClick,                 // opcional, para hacer la tarjeta clicable\n  formatValue,             // (v) => string  → formato custom del \"value\"\n}) => {\n  // Colores (usa tus tokens)\n  const colorClasses = {\n    primary: 'bg-primary/10 text-primary border-primary/20',\n    success: 'bg-success/10 text-success border-success/20',\n    warning: 'bg-warning/10 text-warning border-warning/20',\n    error:   'bg-error/10 text-error border-error/20',\n    gray:    'bg-muted/20 text-muted-foreground border-border/60',\n  };\n\n  const containerClasses = [\n    'bg-card border border-border rounded-lg',\n    compact ? 'p-4' : 'p-6',\n    'hover:shadow-md transition-all duration-200',\n    onClick ? 'cursor-pointer' : '',\n    className,\n  ].join(' ');\n\n  // Helpers\n  const isNumber = (n) => typeof n === 'number' && !Number.isNaN(n);\n  const defaultFormatValue = (v) => isNumber(v) ? Intl.NumberFormat('es-MX').format(v) : (v ?? '—');\n\n  // Cálculo de tendencia si no se pasó explícita\n  const computed = useMemo(() => {\n    // Si el padre ya mandó trend / trendValue, los respetamos\n    if (trend || trendValue != null) {\n      return { trend: trend ?? 'flat', trendLabel: String(trendValue ?? '—') };\n    }\n\n    if (!isNumber(value) || !isNumber(previousValue)) {\n      return { trend: 'flat', trendLabel: '—' };\n    }\n\n    if (previousValue === 0) {\n      // Evitar división entre cero; si subió desde 0, solo mostramos ▲\n      const t = value > 0 ? 'up' : value < 0 ? 'down' : 'flat';\n      return { trend: t, trendLabel: t === 'flat' ? '0%' : '—' };\n    }\n\n    const delta = value - previousValue;\n    const pct = (delta / Math.abs(previousValue)) * 100;\n    const rounded = Math.abs(pct) < 0.01 ? 0 : pct; // evita 0.0001%\n    const t = rounded > 0 ? 'up' : rounded < 0 ? 'down' : 'flat';\n    const label = `${rounded > 0 ? '+' : ''}${rounded.toFixed(1)}%`;\n    return { trend: t, trendLabel: label };\n  }, [trend, trendValue, value, previousValue]);\n\n  const getTrendIcon = (t) => {\n    if (t === 'up') return 'TrendingUp';\n    if (t === 'down') return 'TrendingDown';\n    return 'Minus';\n  };\n\n  const getTrendColor = (t) => {\n    if (t === 'up') return 'text-success';\n    if (t === 'down') return 'text-error';\n    return 'text-muted-foreground';\n  };\n\n  // Loading skeleton\n  if (loading) {\n    return (\n      <div\n        className={`${containerClasses} animate-pulse`}\n        aria-busy=\"true\"\n        aria-live=\"polite\"\n        aria-label={title ? `Cargando ${title}` : 'Cargando KPI'}\n      >\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className={`p-3 rounded-lg ${colorClasses[color] || colorClasses.primary}`}>\n            <div className=\"h-6 w-6 bg-muted rounded\" />\n          </div>\n          <div className=\"h-4 w-16 bg-muted rounded\" />\n        </div>\n        <div className=\"space-y-2\">\n          <div className=\"h-4 w-32 bg-muted rounded\" />\n          <div className=\"h-7 w-24 bg-muted rounded\" />\n          <div className=\"h-3 w-40 bg-muted rounded\" />\n        </div>\n      </div>\n    );\n  }\n\n  const formattedValue = (formatValue || defaultFormatValue)(value);\n  const sizeValueClass = compact ? 'text-xl' : 'text-2xl';\n\n  return (\n    <section\n      className={containerClasses}\n      role=\"group\"\n      aria-label={title || 'Indicador'}\n      onClick={onClick}\n      tabIndex={onClick ? 0 : undefined}\n      onKeyDown={(e) => {\n        if (onClick && (e.key === 'Enter' || e.key === ' ')) {\n          e.preventDefault();\n          onClick();\n        }\n      }}\n    >\n      <div className=\"flex items-center justify-between mb-4\">\n        <div className={`p-3 rounded-lg ${colorClasses[color] || colorClasses.primary}`} aria-hidden=\"true\">\n          <Icon name={icon} size={compact ? 20 : 24} />\n        </div>\n\n        {computed?.trend && (\n          <div\n            className={`flex items-center space-x-1 ${getTrendColor(computed.trend)}`}\n            aria-label={`Tendencia: ${computed.trend === 'up' ? 'alza' : computed.trend === 'down' ? 'baja' : 'sin cambio'} (${computed.trendLabel})`}\n          >\n            <Icon name={getTrendIcon(computed.trend)} size={16} />\n            <span className=\"text-sm font-medium\">{computed.trendLabel}</span>\n          </div>\n        )}\n      </div>\n\n      <div className=\"space-y-2\">\n        {title && (\n          <h3 className=\"text-sm font-medium text-muted-foreground\">{title}</h3>\n        )}\n\n        <div className=\"flex items-baseline space-x-1\">\n          <span className={`${sizeValueClass} font-bold text-foreground`}>{formattedValue}</span>\n          {unit ? <span className=\"text-sm text-muted-foreground\">{unit}</span> : null}\n        </div>\n\n        {description ? (\n          <p className=\"text-xs text-muted-foreground\">{description}</p>\n        ) : null}\n      </div>\n    </section>\n  );\n};\n\nexport default KPICard;\n","size_bytes":5539},"src/pages/comprehensive-employee-registration-and-profile-management/components/EmployeeListGrid.jsx":{"content":"// comprehensive-employee-registration-and-profile-management/components/EmployeeListGrid.jsx\nimport React from 'react';\nimport Button from '../../../components/ui/Button';\nimport CurrencyDisplay from '../../../components/ui/CurrencyDisplay';\nimport {\n  User,\n  Phone,\n  Mail,\n  Calendar,\n  Edit,\n  Play,\n  Pause,\n  Ban,\n  RefreshCw,\n  Building2,\n  UserCheck,\n  Crown,\n} from 'lucide-react';\n\nexport function EmployeeListGrid({\n  employees = [],\n  onEditEmployee,\n  onEmployeeAction,\n  loading = false,\n}) {\n  const getStatusBadge = (status) => {\n    const statusConfig = {\n      active: { label: 'Activo', className: 'bg-green-100 text-green-800', icon: UserCheck },\n      inactive: { label: 'Inactivo', className: 'bg-gray-100 text-gray-800', icon: Pause },\n      suspended: { label: 'Suspendido', className: 'bg-yellow-100 text-yellow-800', icon: Ban },\n    };\n\n    const config = statusConfig?.[status] || statusConfig?.inactive;\n    const StatusIcon = config?.icon;\n\n    return (\n      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${config?.className}`}>\n        <StatusIcon className=\"h-3 w-3 mr-1\" />\n        {config?.label}\n      </span>\n    );\n  };\n\n  const getRoleBadge = (role, isAdmin = false) => {\n    if (isAdmin) {\n      return (\n        <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-purple-100 text-purple-800\">\n          <Crown className=\"h-3 w-3 mr-1\" />\n          Admin\n        </span>\n      );\n    }\n\n    const roleConfig = {\n      admin: { label: 'Admin', className: 'bg-blue-100 text-blue-800' },\n      supervisor: { label: 'Supervisor', className: 'bg-orange-100 text-orange-800' },\n      user: { label: 'Usuario', className: 'bg-gray-100 text-gray-800' },\n    };\n\n    const config = roleConfig?.[role] || roleConfig?.user;\n\n    return (\n      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${config?.className}`}>\n        {config?.label}\n      </span>\n    );\n  };\n\n  const getPositionLabel = (position) => {\n    const positions = {\n      albañil: 'Albañil',\n      ayudante: 'Ayudante',\n      supervisor: 'Supervisor',\n      administrativo: 'Administrativo',\n      electricista: 'Electricista',\n      plomero: 'Plomero',\n      pintor: 'Pintor',\n      carpintero: 'Carpintero',\n      soldador: 'Soldador',\n      operador_maquinaria: 'Operador de Maquinaria',\n    };\n\n    return positions?.[position] || position || 'No asignado';\n  };\n\n  const getSalaryDisplay = (employee) => {\n    const salaryType = employee?.salary_type;\n    const hourly = Number(employee?.hourly_rate) || 0;\n    const daily = Number(employee?.daily_salary) || 0;\n\n    if (salaryType === 'hourly' && hourly > 0) {\n      return (\n        <div>\n          <CurrencyDisplay amount={hourly} />/hr\n          <div className=\"text-xs text-gray-500\">\n            <CurrencyDisplay amount={hourly * 8} />/día\n          </div>\n        </div>\n      );\n    }\n\n    if (salaryType === 'daily' && daily > 0) {\n      return (\n        <div>\n          <CurrencyDisplay amount={daily} />/día\n          <div className=\"text-xs text-gray-500\">\n            <CurrencyDisplay amount={daily / 8} />/hr\n          </div>\n        </div>\n      );\n    }\n\n    return <span className=\"text-gray-400\">No definido</span>;\n  };\n\n  const safeDate = (d) => {\n    if (!d) return '—';\n    try {\n      const dt = d instanceof Date ? d : new Date(d);\n      if (isNaN(dt.getTime())) return '—';\n      return dt.toLocaleDateString('es-ES', { day: '2-digit', month: '2-digit', year: 'numeric' });\n    } catch {\n      return '—';\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"bg-white rounded-lg shadow\">\n        <div className=\"flex items-center justify-center py-12\">\n          <RefreshCw className=\"h-8 w-8 animate-spin text-gray-400\" />\n          <span className=\"ml-3 text-gray-600\">Cargando empleados...</span>\n        </div>\n      </div>\n    );\n  }\n\n  if (!employees?.length) {\n    return (\n      <div className=\"bg-white rounded-lg shadow\">\n        <div className=\"text-center py-12\">\n          <User className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No hay empleados</h3>\n          <p className=\"text-gray-600\">No se encontraron empleados que coincidan con los filtros seleccionados.</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-white rounded-lg shadow overflow-hidden\">\n      <div className=\"px-6 py-4 border-b\">\n        <h2 className=\"text-lg font-semibold text-gray-900\">Empleados ({employees?.length})</h2>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 p-6\">\n        {employees.map((employee) => {\n          const initials =\n            (employee?.full_name || '')\n              .split(' ')\n              .map((n) => n?.[0])\n              .slice(0, 2)\n              .join('')\n              .toUpperCase() || 'E';\n\n          return (\n            <div key={employee?.id} className=\"border border-gray-200 rounded-lg p-6 hover:shadow-lg transition-shadow\">\n              {/* Header */}\n              <div className=\"flex items-start justify-between mb-4\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"flex-shrink-0\">\n                    <div className=\"h-12 w-12 bg-gray-200 rounded-full flex items-center justify-center\">\n                      <span className=\"text-lg font-medium text-gray-700\">{initials}</span>\n                    </div>\n                  </div>\n                  <div className=\"min-w-0\">\n                    <h3 className=\"text-lg font-medium text-gray-900 truncate\">\n                      {employee?.full_name || 'Sin nombre'}\n                    </h3>\n                    <p className=\"text-sm text-gray-500\">ID: {employee?.employee_id || 'N/A'}</p>\n                  </div>\n                </div>\n\n                <div className=\"flex flex-col gap-1 items-end\">\n                  {getStatusBadge(employee?.status)}\n                  {getRoleBadge(employee?.user_profiles?.role, employee?.user_profiles?.is_super_admin)}\n                </div>\n              </div>\n\n              {/* Employee Details */}\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center text-sm text-gray-600\">\n                  <Briefcase className=\"h-4 w-4 mr-2 flex-shrink-0\" />\n                  <span>{getPositionLabel(employee?.position)}</span>\n                </div>\n\n                {!!employee?.user_profiles?.email && (\n                  <div className=\"flex items-center text-sm text-gray-600\">\n                    <Mail className=\"h-4 w-4 mr-2 flex-shrink-0\" />\n                    <span className=\"truncate\">{employee?.user_profiles?.email}</span>\n                  </div>\n                )}\n\n                {!!employee?.phone && (\n                  <div className=\"flex items-center text-sm text-gray-600\">\n                    <Phone className=\"h-4 w-4 mr-2 flex-shrink-0\" />\n                    <span>{employee?.phone}</span>\n                  </div>\n                )}\n\n                {!!employee?.construction_sites && (\n                  <div className=\"flex items-center text-sm text-gray-600\">\n                    <Building2 className=\"h-4 w-4 mr-2 flex-shrink-0\" />\n                    <span className=\"truncate\">{employee?.construction_sites?.name}</span>\n                  </div>\n                )}\n\n                {!!employee?.supervisor && (\n                  <div className=\"flex items-center text-sm text-gray-600\">\n                    <User className=\"h-4 w-4 mr-2 flex-shrink-0\" />\n                    <span className=\"truncate\">Sup: {employee?.supervisor?.full_name}</span>\n                  </div>\n                )}\n\n                <div className=\"flex items-center text-sm text-gray-600\">\n                  <Calendar className=\"h-4 w-4 mr-2 flex-shrink-0\" />\n                  <span>Desde: {safeDate(employee?.hire_date)}</span>\n                </div>\n              </div>\n\n              {/* Salary Information */}\n              <div className=\"mt-4 pt-4 border-t\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-gray-600\">Salario:</span>\n                  <div className=\"text-right\">{getSalaryDisplay(employee)}</div>\n                </div>\n              </div>\n\n              {/* Action Buttons */}\n              <div className=\"mt-6 flex justify-between\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => onEditEmployee?.(employee)}\n                  className=\"flex items-center gap-1\"\n                >\n                  <Edit className=\"h-3 w-3\" />\n                  Editar\n                </Button>\n\n                <div className=\"flex gap-2\">\n                  {employee?.status === 'active' && (\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => onEmployeeAction?.(employee?.id, 'suspend')}\n                      className=\"text-yellow-600 border-yellow-600 hover:bg-yellow-50\"\n                    >\n                      <Pause className=\"h-3 w-3\" />\n                    </Button>\n                  )}\n\n                  {employee?.status === 'suspended' && (\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => onEmployeeAction?.(employee?.id, 'activate')}\n                      className=\"text-green-600 border-green-600 hover:bg-green-50\"\n                    >\n                      <Play className=\"h-3 w-3\" />\n                    </Button>\n                  )}\n\n                  {employee?.status === 'inactive' && (\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => onEmployeeAction?.(employee?.id, 'activate')}\n                      className=\"text-green-600 border-green-600 hover:bg-green-50\"\n                    >\n                      <UserCheck className=\"h-3 w-3\" />\n                    </Button>\n                  )}\n                </div>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\n// Icono Briefcase inline (evita dependencias extra)\nconst Briefcase = ({ className }) => (\n  <svg className={className} fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" aria-hidden=\"true\">\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M10 6V4a2 2 0 012-2h0a2 2 0 012 2v2m-8 0h12a2 2 0 012 2v7a2 2 0 01-2 2H6a2 2 0 01-2-2V8a2 2 0 012-2z\" />\n  </svg>\n);\n\nexport default EmployeeListGrid;\n","size_bytes":10769},"src/pages/comprehensive-employee-registration-and-profile-management/components/EmployeeProfileEditor.jsx":{"content":"// comprehensive-employee-registration-and-profile-management/components/EmployeeProfileEditor.jsx\nimport React, { useState, useEffect } from 'react';\nimport Button from '../../../components/ui/Button';\nimport Input from '../../../components/ui/Input';\nimport Select from '../../../components/ui/Select';\nimport { X, User, Save } from 'lucide-react';\n\nexport function EmployeeProfileEditor({\n  employee,\n  constructionSites = [],\n  supervisors = [],\n  onSubmit,\n  onClose,\n  branding,\n}) {\n  const [loading, setLoading] = useState(false);\n  const [errors, setErrors] = useState({});\n  const [hasChanges, setHasChanges] = useState(false);\n\n  const [formData, setFormData] = useState({\n    fullName: '',\n    phone: '',\n    address: '',\n    birthDate: '',\n    position: 'albañil',\n    salaryType: 'daily',\n    hourlyRate: '',\n    dailySalary: '',\n    siteId: '',\n    supervisorId: '',\n    emergencyContact: '',\n    idNumber: '',\n    profilePicture: null,\n  });\n\n  useEffect(() => {\n    if (employee) {\n      setFormData({\n        fullName: employee?.full_name || '',\n        phone: employee?.phone || '',\n        address: employee?.address || '',\n        birthDate: employee?.birth_date || '',\n        position: employee?.position || 'albañil',\n        salaryType: employee?.salary_type || 'daily',\n        hourlyRate:\n          typeof employee?.hourly_rate === 'number'\n            ? String(employee?.hourly_rate)\n            : employee?.hourly_rate?.toString?.() || '',\n        dailySalary:\n          typeof employee?.daily_salary === 'number'\n            ? String(employee?.daily_salary)\n            : employee?.daily_salary?.toString?.() || '',\n        siteId: employee?.site_id || '',\n        supervisorId: employee?.supervisor_id || '',\n        emergencyContact: employee?.emergency_contact || '',\n        idNumber: employee?.id_number || '',\n        profilePicture: employee?.profile_picture_url || null,\n      });\n    }\n  }, [employee]);\n\n  const handleInputChange = (field, value) => {\n    setFormData((prev) => ({\n      ...prev,\n      [field]: value,\n    }));\n    setHasChanges(true);\n\n    if (errors?.[field]) {\n      setErrors((prev) => ({\n        ...prev,\n        [field]: null,\n      }));\n    }\n  };\n\n  const validateForm = () => {\n    const newErrors = {};\n\n    if (!formData?.fullName?.trim()) {\n      newErrors.fullName = 'El nombre completo es requerido';\n    }\n\n    if (!formData?.position) {\n      newErrors.position = 'El puesto es requerido';\n    }\n\n    if (formData?.salaryType === 'hourly') {\n      const v = parseFloat(formData?.hourlyRate);\n      if (!v || v <= 0) newErrors.hourlyRate = 'El salario por hora debe ser mayor a 0';\n    }\n\n    if (formData?.salaryType === 'daily') {\n      const v = parseFloat(formData?.dailySalary);\n      if (!v || v <= 0) newErrors.dailySalary = 'El salario diario debe ser mayor a 0';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = async (e) => {\n    e?.preventDefault();\n\n    if (!validateForm()) return;\n    if (!hasChanges) {\n      onClose?.();\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const payload = {\n        full_name: formData.fullName?.trim(),\n        phone: formData.phone?.trim() || null,\n        address: formData.address?.trim() || null,\n        birth_date: formData.birthDate || null,\n        position: formData.position,\n        salary_type: formData.salaryType,\n        hourly_rate:\n          formData.salaryType === 'hourly' ? Number(parseFloat(formData.hourlyRate).toFixed(2)) : 0,\n        daily_salary:\n        formData.salaryType === 'daily' ? Number(parseFloat(formData.dailySalary).toFixed(2)) : 0,\n        site_id: formData.siteId || null,\n        supervisor_id: formData.supervisorId || null,\n        emergency_contact: formData.emergencyContact?.trim() || null,\n        id_number: formData.idNumber?.trim() || null,\n        profile_picture_url: formData.profilePicture || null,\n      };\n\n      const result = await onSubmit?.(payload);\n      if (result?.success) onClose?.();\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.error('Error updating employee:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCancel = () => {\n    if (hasChanges) {\n      if (window.confirm('¿Estás seguro de que quieres cancelar? Se perderán los cambios no guardados.')) {\n        onClose?.();\n      }\n    } else {\n      onClose?.();\n    }\n  };\n\n  const safeDate = (d) => {\n    if (!d) return '—';\n    try {\n      const dt = d instanceof Date ? d : new Date(d);\n      if (isNaN(dt.getTime())) return '—';\n      return dt.toLocaleDateString('es-ES', { day: '2-digit', month: '2-digit', year: 'numeric' });\n    } catch {\n      return '—';\n    }\n  };\n\n  if (!employee) return null;\n\n  const currency = branding?.simbolo_moneda || '$';\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\n        {/* Header */}\n        <div className=\"px-6 py-4 border-b flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-2xl font-bold text-gray-900 flex items-center gap-2\">\n              <User className=\"h-6 w-6\" />\n              Editar Perfil de Empleado\n            </h2>\n            <p className=\"text-gray-600 mt-1\">\n              ID: {employee?.employee_id || 'N/A'} | {employee?.user_profiles?.email || employee?.email || 'Sin email'}\n            </p>\n          </div>\n          <Button variant=\"ghost\" size=\"sm\" onClick={handleCancel}>\n            <X className=\"h-4 w-4\" />\n          </Button>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"p-6\">\n          {/* Información Personal */}\n          <div className=\"mb-8\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Información Personal</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">Nombre Completo *</label>\n                <Input\n                  type=\"text\"\n                  value={formData?.fullName}\n                  onChange={(e) => handleInputChange('fullName', e?.target?.value)}\n                  placeholder=\"Juan Pérez García\"\n                  error={errors?.fullName}\n                />\n                {errors?.fullName && <p className=\"text-red-500 text-sm mt-1\">{errors?.fullName}</p>}\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">Teléfono</label>\n                <Input\n                  type=\"tel\"\n                  value={formData?.phone}\n                  onChange={(e) => handleInputChange('phone', e?.target?.value)}\n                  placeholder=\"(555) 123-4567\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">Fecha de Nacimiento</label>\n                <Input\n                  type=\"date\"\n                  value={formData?.birthDate || ''}\n                  onChange={(e) => handleInputChange('birthDate', e?.target?.value)}\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">Número de Identificación</label>\n                <Input\n                  type=\"text\"\n                  value={formData?.idNumber}\n                  onChange={(e) => handleInputChange('idNumber', e?.target?.value)}\n                  placeholder=\"RFC, CURP, INE, etc.\"\n                />\n              </div>\n\n              <div className=\"md:col-span-2\">\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">Dirección</label>\n                <textarea\n                  value={formData?.address}\n                  onChange={(e) => handleInputChange('address', e?.target?.value)}\n                  placeholder=\"Dirección completa\"\n                  rows={3}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">Contacto de Emergencia</label>\n                <Input\n                  type=\"text\"\n                  value={formData?.emergencyContact}\n                  onChange={(e) => handleInputChange('emergencyContact', e?.target?.value)}\n                  placeholder=\"Nombre y teléfono\"\n                />\n              </div>\n            </div>\n          </div>\n\n          {/* Detalles de Empleo */}\n          <div className=\"mb-8\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Detalles de Empleo</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">Puesto *</label>\n                <Select\n                  value={formData?.position}\n                  onChange={(value) => handleInputChange('position', value)}\n                  options={[\n                    { value: 'albañil', label: 'Albañil' },\n                    { value: 'ayudante', label: 'Ayudante' },\n                    { value: 'supervisor', label: 'Supervisor' },\n                    { value: 'administrativo', label: 'Administrativo' },\n                    { value: 'electricista', label: 'Electricista' },\n                    { value: 'plomero', label: 'Plomero' },\n                    { value: 'pintor', label: 'Pintor' },\n                    { value: 'carpintero', label: 'Carpintero' },\n                    { value: 'soldador', label: 'Soldador' },\n                    { value: 'operador_maquinaria', label: 'Operador de Maquinaria' },\n                  ]}\n                  error={errors?.position}\n                />\n                {errors?.position && <p className=\"text-red-500 text-sm mt-1\">{errors?.position}</p>}\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">Estado del Empleado</label>\n                <div className=\"flex items-center space-x-4\">\n                  <span\n                    className={`px-3 py-1 text-sm rounded-full ${\n                      employee?.status === 'active'\n                        ? 'bg-green-100 text-green-800'\n                        : employee?.status === 'suspended'\n                        ? 'bg-yellow-100 text-yellow-800'\n                        : 'bg-red-100 text-red-800'\n                    }`}\n                  >\n                    {employee?.status === 'active' && 'Activo'}\n                    {employee?.status === 'suspended' && 'Suspendido'}\n                    {employee?.status === 'inactive' && 'Inactivo'}\n                  </span>\n                  <span className=\"text-sm text-gray-600\">\n                    Empleado desde: {safeDate(employee?.hire_date)}\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Información Salarial */}\n          <div className=\"mb-8\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Información Salarial</h3>\n\n            <div className=\"mb-4\">\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">Tipo de Salario</label>\n              <div className=\"flex gap-4\">\n                <label className=\"flex items-center\">\n                  <input\n                    type=\"radio\"\n                    name=\"salaryType\"\n                    value=\"daily\"\n                    checked={formData?.salaryType === 'daily'}\n                    onChange={(e) => handleInputChange('salaryType', e?.target?.value)}\n                    className=\"mr-2\"\n                  />\n                  Diario\n                </label>\n                <label className=\"flex items-center\">\n                  <input\n                    type=\"radio\"\n                    name=\"salaryType\"\n                    value=\"hourly\"\n                    checked={formData?.salaryType === 'hourly'}\n                    onChange={(e) => handleInputChange('salaryType', e?.target?.value)}\n                    className=\"mr-2\"\n                  />\n                  Por Hora\n                </label>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              {formData?.salaryType === 'daily' && (\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Salario Diario * ({currency})\n                  </label>\n                  <Input\n                    type=\"number\"\n                    step=\"0.01\"\n                    min=\"0\"\n                    value={formData?.dailySalary}\n                    onChange={(e) => handleInputChange('dailySalary', e?.target?.value)}\n                    placeholder=\"300.00\"\n                    error={errors?.dailySalary}\n                  />\n                  {errors?.dailySalary && <p className=\"text-red-500 text-sm mt-1\">{errors?.dailySalary}</p>}\n                </div>\n              )}\n\n              {formData?.salaryType === 'hourly' && (\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Salario por Hora * ({currency})\n                  </label>\n                  <Input\n                    type=\"number\"\n                    step=\"0.01\"\n                    min=\"0\"\n                    value={formData?.hourlyRate}\n                    onChange={(e) => handleInputChange('hourlyRate', e?.target?.value)}\n                    placeholder=\"37.50\"\n                    error={errors?.hourlyRate}\n                  />\n                  {errors?.hourlyRate && <p className=\"text-red-500 text-sm mt-1\">{errors?.hourlyRate}</p>}\n                </div>\n              )}\n\n              <div className=\"bg-gray-50 p-4 rounded-lg\">\n                <p className=\"text-sm text-gray-600 mb-2\">\n                  <strong>Equivalencias:</strong>\n                </p>\n                {formData?.salaryType === 'daily' && formData?.dailySalary && (\n                  <p className=\"text-sm\">\n                    Por hora: {currency}\n                    {(parseFloat(formData?.dailySalary) / 8)?.toFixed(2)}\n                  </p>\n                )}\n                {formData?.salaryType === 'hourly' && formData?.hourlyRate && (\n                  <p className=\"text-sm\">\n                    Por día: {currency}\n                    {(parseFloat(formData?.hourlyRate) * 8)?.toFixed(2)}\n                  </p>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* Asignación */}\n          <div className=\"mb-8\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Asignación</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">Sitio de Construcción</label>\n                <Select\n                  value={formData?.siteId}\n                  onChange={(value) => handleInputChange('siteId', value)}\n                  options={[\n                    { value: '', label: 'Sin asignar' },\n                    ...constructionSites.map((site) => ({\n                      value: site?.id,\n                      label: `${site?.name || site?.nombre || 'Sitio'} - ${\n                        site?.location || site?.direccion || 'Ubicación no especificada'\n                      }`,\n                    })),\n                  ]}\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">Supervisor</label>\n                <Select\n                  value={formData?.supervisorId}\n                  onChange={(value) => handleInputChange('supervisorId', value)}\n                  options={[\n                    { value: '', label: 'Sin supervisor asignado' },\n                    ...supervisors.map((s) => ({\n                      value: s?.id,\n                      label: `${s?.full_name || s?.nombre || 'Supervisor'} (${s?.email || s?.correo || 'sin email'})`,\n                    })),\n                  ]}\n                />\n              </div>\n            </div>\n          </div>\n\n          {/* Botones */}\n          <div className=\"flex justify-end space-x-3 pt-6 border-t\">\n            <Button type=\"button\" variant=\"outline\" onClick={handleCancel}>\n              Cancelar\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={loading || !hasChanges}\n              className=\"flex items-center gap-2\"\n              style={{ backgroundColor: branding?.color_primario }}\n            >\n              {loading && <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>}\n              <Save className=\"h-4 w-4\" />\n              {hasChanges ? 'Guardar Cambios' : 'Sin Cambios'}\n            </Button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default EmployeeProfileEditor;\n","size_bytes":17281},"src/pages/comprehensive-employee-registration-and-profile-management/components/EmployeeRegistrationWizard.jsx":{"content":"// comprehensive-employee-registration-and-profile-management/components/EmployeeRegistrationWizard.jsx\nimport React, { useState } from 'react';\nimport Button from '../../../components/ui/Button';\nimport Input from '../../../components/ui/Input';\nimport Select from '../../../components/ui/Select';\nimport { X, User, Briefcase, MapPin, DollarSign, ChevronLeft, ChevronRight } from 'lucide-react';\n\nexport function EmployeeRegistrationWizard({\n  constructionSites = [],\n  supervisors = [],\n  onSubmit,\n  onClose,\n  branding,\n}) {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [loading, setLoading] = useState(false);\n  const [errors, setErrors] = useState({});\n\n  const [formData, setFormData] = useState({\n    // Personal Information\n    fullName: '',\n    email: '',\n    phone: '',\n    address: '',\n    birthDate: '',\n    idNumber: '',\n    emergencyContact: '',\n\n    // Employment Details\n    employeeId: '',\n    hireDate: new Date()?.toISOString()?.split('T')?.[0],\n    position: 'albañil',\n    role: 'user',\n\n    // Salary Information\n    salaryType: 'daily',\n    hourlyRate: '',\n    dailySalary: '',\n\n    // Assignment\n    siteId: '',\n    supervisorId: '',\n\n    // Additional\n    profilePicture: null,\n    tempPassword: 'AsistenciaPro2024',\n  });\n\n  const steps = [\n    { id: 1, title: 'Información Personal', icon: User },\n    { id: 2, title: 'Detalles de Empleo', icon: Briefcase },\n    { id: 3, title: 'Salario y Beneficios', icon: DollarSign },\n    { id: 4, title: 'Asignación', icon: MapPin },\n  ];\n\n  const validateEmail = (email) =>\n    /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(String(email || '').trim());\n\n  const validateStep = (step) => {\n    const newErrors = {};\n\n    switch (step) {\n      case 1: {\n        if (!formData?.fullName?.trim()) newErrors.fullName = 'El nombre completo es requerido';\n        if (!formData?.email?.trim()) {\n          newErrors.email = 'El correo electrónico es requerido';\n        } else if (!validateEmail(formData?.email)) {\n          newErrors.email = 'Formato de correo electrónico inválido';\n        }\n        if (!formData?.phone?.trim()) newErrors.phone = 'El teléfono es requerido';\n        break;\n      }\n      case 2: {\n        if (!formData?.position) newErrors.position = 'El puesto es requerido';\n        if (!formData?.hireDate) newErrors.hireDate = 'La fecha de contratación es requerida';\n        break;\n      }\n      case 3: {\n        if (\n          formData?.salaryType === 'hourly' &&\n          (!formData?.hourlyRate || parseFloat(formData?.hourlyRate) <= 0)\n        ) {\n          newErrors.hourlyRate = 'El salario por hora debe ser mayor a 0';\n        }\n        if (\n          formData?.salaryType === 'daily' &&\n          (!formData?.dailySalary || parseFloat(formData?.dailySalary) <= 0)\n        ) {\n          newErrors.dailySalary = 'El salario diario debe ser mayor a 0';\n        }\n        break;\n      }\n      case 4:\n      default:\n        break;\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors)?.length === 0;\n  };\n\n  const handleNext = () => {\n    if (validateStep(currentStep)) {\n      setCurrentStep((prev) => Math.min(prev + 1, steps?.length));\n    }\n  };\n\n  const handlePrevious = () => {\n    setCurrentStep((prev) => Math.max(prev - 1, 1));\n  };\n\n  const safeNumber = (v) => {\n    const n = parseFloat(v);\n    if (Number.isFinite(n)) return Number(n.toFixed(2));\n    return 0;\n  };\n\n  const generateEmployeeIdIfNeeded = () => formData?.employeeId?.trim() || `EMP${Date.now().toString().slice(-6)}`;\n\n  const handleSubmit = async () => {\n    if (!validateStep(currentStep)) return;\n\n    try {\n      setLoading(true);\n\n      // Normaliza payload para backend\n      const payload = {\n        // user / profile\n        email: formData.email?.trim(),\n        full_name: formData.fullName?.trim(),\n        phone: formData.phone?.trim() || null,\n        address: formData.address?.trim() || null,\n        birth_date: formData.birthDate || null,\n        id_number: formData.idNumber?.trim() || null,\n        emergency_contact: formData.emergencyContact?.trim() || null,\n\n        // employee\n        employee_id: generateEmployeeIdIfNeeded(),\n        hire_date: formData.hireDate,\n        position: formData.position,\n        role: formData.role,\n\n        // salary\n        salary_type: formData.salaryType,\n        hourly_rate: formData.salaryType === 'hourly' ? safeNumber(formData.hourlyRate) : 0,\n        daily_salary: formData.salaryType === 'daily' ? safeNumber(formData.dailySalary) : 0,\n\n        // assignment\n        site_id: formData.siteId || null,\n        supervisor_id: formData.supervisorId || null,\n\n        // additional\n        profile_picture_url: formData.profilePicture || null,\n        temp_password: formData.tempPassword || null,\n      };\n\n      const result = await onSubmit?.(payload);\n      if (result?.success) onClose?.();\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.error('Error submitting form:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const currency = branding?.simbolo_moneda || '$';\n\n  const renderStepContent = () => {\n    switch (currentStep) {\n      case 1:\n        return (\n          <div className=\"space-y-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 flex items-center gap-2\">\n              <User className=\"h-5 w-5\" />\n              Información Personal\n            </h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">Nombre Completo *</label>\n                <Input\n                  type=\"text\"\n                  value={formData?.fullName}\n                  onChange={(e) => setFormData({ ...formData, fullName: e?.target?.value })}\n                  placeholder=\"Juan Pérez García\"\n                  error={errors?.fullName}\n                />\n                {errors?.fullName && <p className=\"text-red-500 text-sm mt-1\">{errors?.fullName}</p>}\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">Correo Electrónico *</label>\n                <Input\n                  type=\"email\"\n                  value={formData?.email}\n                  onChange={(e) => setFormData({ ...formData, email: e?.target?.value })}\n                  placeholder=\"juan.perez@email.com\"\n                  error={errors?.email}\n                />\n                {errors?.email && <p className=\"text-red-500 text-sm mt-1\">{errors?.email}</p>}\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">Teléfono *</label>\n                <Input\n                  type=\"tel\"\n                  value={formData?.phone}\n                  onChange={(e) => setFormData({ ...formData, phone: e?.target?.value })}\n                  placeholder=\"(555) 123-4567\"\n                  error={errors?.phone}\n                />\n                {errors?.phone && <p className=\"text-red-500 text-sm mt-1\">{errors?.phone}</p>}\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">Fecha de Nacimiento</label>\n                <Input\n                  type=\"date\"\n                  value={formData?.birthDate}\n                  onChange={(e) => setFormData({ ...formData, birthDate: e?.target?.value })}\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">Número de Identificación</label>\n                <Input\n                  type=\"text\"\n                  value={formData?.idNumber}\n                  onChange={(e) => setFormData({ ...formData, idNumber: e?.target?.value })}\n                  placeholder=\"RFC, CURP, INE, etc.\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">Contacto de Emergencia</label>\n                <Input\n                  type=\"text\"\n                  value={formData?.emergencyContact}\n                  onChange={(e) => setFormData({ ...formData, emergencyContact: e?.target?.value })}\n                  placeholder=\"Nombre y teléfono\"\n                />\n              </div>\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">Dirección</label>\n              <textarea\n                value={formData?.address}\n                onChange={(e) => setFormData({ ...formData, address: e?.target?.value })}\n                placeholder=\"Dirección completa\"\n                rows={3}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n              />\n            </div>\n          </div>\n        );\n\n      case 2:\n        return (\n          <div className=\"space-y-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 flex items-center gap-2\">\n              <Briefcase className=\"h-5 w-5\" />\n              Detalles de Empleo\n            </h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">ID del Empleado</label>\n                <Input\n                  type=\"text\"\n                  value={formData?.employeeId}\n                  onChange={(e) => setFormData({ ...formData, employeeId: e?.target?.value })}\n                  placeholder=\"Se generará automáticamente si se deja vacío\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">Fecha de Contratación *</label>\n                <Input\n                  type=\"date\"\n                  value={formData?.hireDate}\n                  onChange={(e) => setFormData({ ...formData, hireDate: e?.target?.value })}\n                  error={errors?.hireDate}\n                />\n                {errors?.hireDate && <p className=\"text-red-500 text-sm mt-1\">{errors?.hireDate}</p>}\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">Puesto *</label>\n                <Select\n                  value={formData?.position}\n                  onChange={(value) => setFormData({ ...formData, position: value })}\n                  options={[\n                    { value: 'albañil', label: 'Albañil' },\n                    { value: 'ayudante', label: 'Ayudante' },\n                    { value: 'supervisor', label: 'Supervisor' },\n                    { value: 'administrativo', label: 'Administrativo' },\n                    { value: 'electricista', label: 'Electricista' },\n                    { value: 'plomero', label: 'Plomero' },\n                    { value: 'pintor', label: 'Pintor' },\n                    { value: 'carpintero', label: 'Carpintero' },\n                    { value: 'soldador', label: 'Soldador' },\n                    { value: 'operador_maquinaria', label: 'Operador de Maquinaria' },\n                  ]}\n                  error={errors?.position}\n                />\n                {errors?.position && <p className=\"text-red-500 text-sm mt-1\">{errors?.position}</p>}\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">Rol del Usuario</label>\n                <Select\n                  value={formData?.role}\n                  onChange={(value) => setFormData({ ...formData, role: value })}\n                  options={[\n                    { value: 'user', label: 'Usuario' },\n                    { value: 'supervisor', label: 'Supervisor' },\n                    { value: 'admin', label: 'Administrador' },\n                  ]}\n                />\n                <p className=\"text-xs text-gray-500 mt-1\">Determina los permisos de acceso al sistema</p>\n              </div>\n            </div>\n          </div>\n        );\n\n      case 3:\n        return (\n          <div className=\"space-y-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 flex items-center gap-2\">\n              <DollarSign className=\"h-5 w-5\" />\n              Salario y Beneficios\n            </h3>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">Tipo de Salario</label>\n              <div className=\"flex gap-4\">\n                <label className=\"flex items-center\">\n                  <input\n                    type=\"radio\"\n                    name=\"salaryType\"\n                    value=\"daily\"\n                    checked={formData?.salaryType === 'daily'}\n                    onChange={(e) => setFormData({ ...formData, salaryType: e?.target?.value })}\n                    className=\"mr-2\"\n                  />\n                  Diario\n                </label>\n                <label className=\"flex items-center\">\n                  <input\n                    type=\"radio\"\n                    name=\"salaryType\"\n                    value=\"hourly\"\n                    checked={formData?.salaryType === 'hourly'}\n                    onChange={(e) => setFormData({ ...formData, salaryType: e?.target?.value })}\n                    className=\"mr-2\"\n                  />\n                  Por Hora\n                </label>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              {formData?.salaryType === 'daily' && (\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Salario Diario * ({currency})\n                  </label>\n                  <Input\n                    type=\"number\"\n                    step=\"0.01\"\n                    min=\"0\"\n                    value={formData?.dailySalary}\n                    onChange={(e) => setFormData({ ...formData, dailySalary: e?.target?.value })}\n                    placeholder=\"300.00\"\n                    error={errors?.dailySalary}\n                  />\n                  {errors?.dailySalary && <p className=\"text-red-500 text-sm mt-1\">{errors?.dailySalary}</p>}\n                </div>\n              )}\n\n              {formData?.salaryType === 'hourly' && (\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Salario por Hora * ({currency})\n                  </label>\n                  <Input\n                    type=\"number\"\n                    step=\"0.01\"\n                    min=\"0\"\n                    value={formData?.hourlyRate}\n                    onChange={(e) => setFormData({ ...formData, hourlyRate: e?.target?.value })}\n                    placeholder=\"37.50\"\n                    error={errors?.hourlyRate}\n                  />\n                  {errors?.hourlyRate && <p className=\"text-red-500 text-sm mt-1\">{errors?.hourlyRate}</p>}\n                </div>\n              )}\n            </div>\n\n            {formData?.salaryType === 'daily' && formData?.dailySalary && (\n              <div className=\"bg-blue-50 p-4 rounded-lg\">\n                <p className=\"text-sm text-blue-800\">\n                  <strong>Equivalente por hora:</strong> {currency}\n                  {(parseFloat(formData?.dailySalary) / 8)?.toFixed(2)} (basado en 8 horas por día)\n                </p>\n              </div>\n            )}\n            {formData?.salaryType === 'hourly' && formData?.hourlyRate && (\n              <div className=\"bg-blue-50 p-4 rounded-lg\">\n                <p className=\"text-sm text-blue-800\">\n                  <strong>Equivalente diario:</strong> {currency}\n                  {(parseFloat(formData?.hourlyRate) * 8)?.toFixed(2)} (basado en 8 horas por día)\n                </p>\n              </div>\n            )}\n          </div>\n        );\n\n      case 4:\n        return (\n          <div className=\"space-y-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 flex items-center gap-2\">\n              <MapPin className=\"h-5 w-5\" />\n              Asignación\n            </h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">Sitio de Construcción</label>\n                <Select\n                  value={formData?.siteId}\n                  onChange={(value) => setFormData({ ...formData, siteId: value })}\n                  options={[\n                    { value: '', label: 'Sin asignar' },\n                    ...constructionSites?.map((site) => ({\n                      value: site?.id,\n                      label: `${site?.name || site?.nombre || 'Sitio'} - ${\n                        site?.location || site?.direccion || 'Ubicación no especificada'\n                      }`,\n                    })),\n                  ]}\n                />\n                <p className=\"text-xs text-gray-500 mt-1\">El empleado será asignado a este sitio de construcción</p>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">Supervisor</label>\n                <Select\n                  value={formData?.supervisorId}\n                  onChange={(value) => setFormData({ ...formData, supervisorId: value })}\n                  options={[\n                    { value: '', label: 'Sin supervisor asignado' },\n                    ...supervisors?.map((s) => ({\n                      value: s?.id,\n                      label: `${s?.full_name || s?.nombre || 'Supervisor'} (${s?.email || s?.correo || 'sin email'})`,\n                    })),\n                  ]}\n                />\n                <p className=\"text-xs text-gray-500 mt-1\">\n                  {formData?.role === 'supervisor' || formData?.role === 'admin'\n                    ? 'Los supervisores y administradores no requieren supervisor asignado'\n                    : 'Supervisor directo del empleado'}\n                </p>\n              </div>\n            </div>\n\n            <div className=\"bg-gray-50 p-4 rounded-lg\">\n              <h4 className=\"font-medium text-gray-900 mb-3\">Resumen del Empleado</h4>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n                <div>\n                  <p>\n                    <strong>Nombre:</strong> {formData?.fullName}\n                  </p>\n                  <p>\n                    <strong>Email:</strong> {formData?.email}\n                  </p>\n                  <p>\n                    <strong>Teléfono:</strong> {formData?.phone}\n                  </p>\n                  <p>\n                    <strong>Puesto:</strong> {formData?.position}\n                  </p>\n                </div>\n                <div>\n                  <p>\n                    <strong>Rol:</strong> {formData?.role}\n                  </p>\n                  <p>\n                    <strong>Tipo de Salario:</strong> {formData?.salaryType === 'daily' ? 'Diario' : 'Por Hora'}\n                  </p>\n                  <p>\n                    <strong>Salario:</strong>\n                    {formData?.salaryType === 'daily'\n                      ? ` ${currency}${formData?.dailySalary || 0}/día`\n                      : ` ${currency}${formData?.hourlyRate || 0}/hora`}\n                  </p>\n                  <p>\n                    <strong>Sitio:</strong>{' '}\n                    {constructionSites?.find((s) => s?.id === formData?.siteId)?.name ||\n                      constructionSites?.find((s) => s?.id === formData?.siteId)?.nombre ||\n                      'Sin asignar'}\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\n        {/* Header */}\n        <div className=\"px-6 py-4 border-b flex items-center justify-between\">\n          <h2 className=\"text-2xl font-bold text-gray-900\">Registro de Empleado</h2>\n          <Button variant=\"ghost\" size=\"sm\" onClick={onClose}>\n            <X className=\"h-4 w-4\" />\n          </Button>\n        </div>\n\n        {/* Progress Indicator */}\n        <div className=\"px-6 py-4 border-b\">\n          <div className=\"flex items-center justify-between mb-4\">\n            {steps?.map((step, index) => {\n              const StepIcon = step?.icon;\n              const isActive = currentStep === step?.id;\n              const isCompleted = currentStep > step?.id;\n\n              return (\n                <div key={step?.id} className=\"flex items-center\">\n                  <div\n                    className={`flex items-center justify-center w-10 h-10 rounded-full border-2 ${\n                      isCompleted\n                        ? 'bg-green-500 border-green-500 text-white'\n                        : isActive\n                        ? 'border-blue-500 text-blue-500'\n                        : 'border-gray-300 text-gray-400'\n                    }`}\n                  >\n                    <StepIcon className=\"h-5 w-5\" />\n                  </div>\n                  {index < steps?.length - 1 && (\n                    <div className={`flex-1 h-1 mx-4 ${isCompleted ? 'bg-green-500' : 'bg-gray-300'}`} />\n                  )}\n                </div>\n              );\n            })}\n          </div>\n          <div className=\"text-center\">\n            <p className=\"text-sm font-medium text-gray-900\">\n              Paso {currentStep} de {steps?.length}: {steps?.find((s) => s?.id === currentStep)?.title}\n            </p>\n          </div>\n        </div>\n\n        {/* Content */}\n        <div className=\"px-6 py-6\">{renderStepContent()}</div>\n\n        {/* Footer */}\n        <div className=\"px-6 py-4 border-t flex items-center justify-between\">\n          <Button\n            variant=\"outline\"\n            onClick={handlePrevious}\n            disabled={currentStep === 1}\n            className=\"flex items-center gap-2\"\n          >\n            <ChevronLeft className=\"h-4 w-4\" />\n            Anterior\n          </Button>\n\n          <div className=\"flex gap-3\">\n            {currentStep < steps?.length ? (\n              <Button\n                onClick={handleNext}\n                className=\"flex items-center gap-2\"\n                style={{ backgroundColor: branding?.color_primario }}\n              >\n                Siguiente\n                <ChevronRight className=\"h-4 w-4\" />\n              </Button>\n            ) : (\n              <Button\n                onClick={handleSubmit}\n                disabled={loading}\n                className=\"flex items-center gap-2\"\n                style={{ backgroundColor: branding?.color_primario }}\n              >\n                {loading && <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>}\n                Registrar Empleado\n              </Button>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default EmployeeRegistrationWizard;\n","size_bytes":23169},"src/pages/comprehensive-reporting-and-export-center/components/ReportBuilder.jsx":{"content":"import React, { useState } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport Input from '../../../components/ui/Input';\nimport Select from '../../../components/ui/Select';\nimport { Checkbox } from '../../../components/ui/Checkbox';\n\nconst ReportBuilder = ({ selectedTemplate, onReportChange }) => {\n  const [reportConfig, setReportConfig] = useState({\n    name: selectedTemplate?.name || 'Nuevo Reporte',\n    dateRange: 'last_30_days',\n    sites: [],\n    employees: [],\n    departments: [],\n    fields: selectedTemplate?.fields || [],\n    filters: {},\n    groupBy: '',\n    sortBy: 'date',\n    sortOrder: 'desc'\n  });\n\n  const [activeTab, setActiveTab] = useState('fields');\n\n  const dateRangeOptions = [\n    { value: 'today', label: 'Hoy' },\n    { value: 'yesterday', label: 'Ayer' },\n    { value: 'last_7_days', label: 'Últimos 7 días' },\n    { value: 'last_30_days', label: 'Últimos 30 días' },\n    { value: 'this_month', label: 'Este mes' },\n    { value: 'last_month', label: 'Mes anterior' },\n    { value: 'this_year', label: 'Este año' },\n    { value: 'custom', label: 'Rango personalizado' }\n  ];\n\n  const availableFields = [\n    { id: 'employee_name', name: 'Nombre del Empleado', category: 'employee' },\n    { id: 'employee_id', name: 'ID Empleado', category: 'employee' },\n    { id: 'site_name', name: 'Sitio de Trabajo', category: 'site' },\n    { id: 'department', name: 'Departamento', category: 'employee' },\n    { id: 'date', name: 'Fecha', category: 'time' },\n    { id: 'check_in', name: 'Hora de Entrada', category: 'time' },\n    { id: 'check_out', name: 'Hora de Salida', category: 'time' },\n    { id: 'lunch_start', name: 'Inicio de Almuerzo', category: 'time' },\n    { id: 'lunch_end', name: 'Fin de Almuerzo', category: 'time' },\n    { id: 'hours_worked', name: 'Horas Trabajadas', category: 'calculation' },\n    { id: 'overtime_hours', name: 'Horas Extra', category: 'calculation' },\n    { id: 'base_salary', name: 'Salario Base', category: 'payroll' },\n    { id: 'overtime_pay', name: 'Pago Horas Extra', category: 'payroll' },\n    { id: 'deductions', name: 'Deducciones', category: 'payroll' },\n    { id: 'bonuses', name: 'Bonificaciones', category: 'payroll' },\n    { id: 'total_pay', name: 'Pago Total', category: 'payroll' },\n    { id: 'attendance_status', name: 'Estado de Asistencia', category: 'status' },\n    { id: 'incident_type', name: 'Tipo de Incidente', category: 'incidents' },\n    { id: 'incident_description', name: 'Descripción del Incidente', category: 'incidents' }\n  ];\n\n  const siteOptions = [\n    { value: 'site_1', label: 'Obra Central' },\n    { value: 'site_2', label: 'Proyecto Norte' },\n    { value: 'site_3', label: 'Edificio Sur' },\n    { value: 'site_4', label: 'Complejo Este' }\n  ];\n\n  const groupByOptions = [\n    { value: '', label: 'Sin agrupar' },\n    { value: 'employee', label: 'Por Empleado' },\n    { value: 'site', label: 'Por Sitio' },\n    { value: 'department', label: 'Por Departamento' },\n    { value: 'date', label: 'Por Fecha' },\n    { value: 'week', label: 'Por Semana' },\n    { value: 'month', label: 'Por Mes' }\n  ];\n\n  const sortOptions = [\n    { value: 'date', label: 'Fecha' },\n    { value: 'employee_name', label: 'Nombre' },\n    { value: 'hours_worked', label: 'Horas Trabajadas' },\n    { value: 'total_pay', label: 'Pago Total' }\n  ];\n\n  const tabs = [\n    { id: 'fields', name: 'Campos', icon: 'Columns' },\n    { id: 'filters', name: 'Filtros', icon: 'Filter' },\n    { id: 'grouping', name: 'Agrupación', icon: 'Group' },\n    { id: 'formatting', name: 'Formato', icon: 'Palette' }\n  ];\n\n  const updateConfig = (key, value) => {\n    const newConfig = { ...reportConfig, [key]: value };\n    setReportConfig(newConfig);\n    onReportChange(newConfig);\n  };\n\n  const toggleField = (fieldId) => {\n    const currentFields = reportConfig?.fields || [];\n    const newFields = currentFields?.includes(fieldId)\n      ? currentFields?.filter(id => id !== fieldId)\n      : [...currentFields, fieldId];\n    updateConfig('fields', newFields);\n  };\n\n  const fieldCategories = availableFields?.reduce((acc, field) => {\n    if (!acc?.[field?.category]) {\n      acc[field.category] = [];\n    }\n    acc?.[field?.category]?.push(field);\n    return acc;\n  }, {});\n\n  const categoryNames = {\n    employee: 'Empleado',\n    site: 'Sitio',\n    time: 'Tiempo',\n    calculation: 'Cálculos',\n    payroll: 'Nómina',\n    status: 'Estado',\n    incidents: 'Incidentes'\n  };\n\n  return (\n    <div className=\"bg-card rounded-lg border border-border p-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h2 className=\"text-lg font-semibold text-foreground\">Constructor de Reportes</h2>\n          <p className=\"text-sm text-muted-foreground\">Personaliza tu reporte según tus necesidades</p>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button variant=\"outline\" iconName=\"Save\">\n            Guardar Plantilla\n          </Button>\n          <Button variant=\"default\" iconName=\"Play\">\n            Generar Reporte\n          </Button>\n        </div>\n      </div>\n      {/* Report Name */}\n      <div className=\"mb-6\">\n        <Input\n          label=\"Nombre del Reporte\"\n          value={reportConfig?.name}\n          onChange={(e) => updateConfig('name', e?.target?.value)}\n          placeholder=\"Ingresa el nombre del reporte\"\n        />\n      </div>\n      {/* Tabs */}\n      <div className=\"border-b border-border mb-6\">\n        <nav className=\"flex space-x-8\">\n          {tabs?.map((tab) => (\n            <button\n              key={tab?.id}\n              onClick={() => setActiveTab(tab?.id)}\n              className={`\n                flex items-center space-x-2 py-2 px-1 border-b-2 font-medium text-sm\n                transition-colors duration-150 ease-out-cubic\n                ${activeTab === tab?.id\n                  ? 'border-primary text-primary' :'border-transparent text-muted-foreground hover:text-foreground hover:border-muted-foreground'\n                }\n              `}\n            >\n              <Icon name={tab?.icon} size={16} />\n              <span>{tab?.name}</span>\n            </button>\n          ))}\n        </nav>\n      </div>\n      {/* Tab Content */}\n      <div className=\"space-y-6\">\n        {activeTab === 'fields' && (\n          <div>\n            <h3 className=\"text-sm font-medium text-foreground mb-4\">Seleccionar Campos</h3>\n            <div className=\"space-y-4\">\n              {Object.entries(fieldCategories)?.map(([category, fields]) => (\n                <div key={category} className=\"border border-border rounded-lg p-4\">\n                  <h4 className=\"font-medium text-foreground mb-3 flex items-center\">\n                    <Icon name=\"Folder\" size={16} className=\"mr-2 text-muted-foreground\" />\n                    {categoryNames?.[category]}\n                  </h4>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n                    {fields?.map((field) => (\n                      <Checkbox\n                        key={field?.id}\n                        label={field?.name}\n                        checked={reportConfig?.fields?.includes(field?.id) || false}\n                        onChange={() => toggleField(field?.id)}\n                      />\n                    ))}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {activeTab === 'filters' && (\n          <div className=\"space-y-4\">\n            <h3 className=\"text-sm font-medium text-foreground mb-4\">Filtros de Datos</h3>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <Select\n                label=\"Rango de Fechas\"\n                options={dateRangeOptions}\n                value={reportConfig?.dateRange}\n                onChange={(value) => updateConfig('dateRange', value)}\n              />\n              \n              <Select\n                label=\"Sitios de Trabajo\"\n                options={siteOptions}\n                value={reportConfig?.sites}\n                onChange={(value) => updateConfig('sites', value)}\n                multiple\n                searchable\n                placeholder=\"Seleccionar sitios...\"\n              />\n            </div>\n\n            {reportConfig?.dateRange === 'custom' && (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <Input\n                  label=\"Fecha de Inicio\"\n                  type=\"date\"\n                  value={reportConfig?.startDate || ''}\n                  onChange={(e) => updateConfig('startDate', e?.target?.value)}\n                />\n                <Input\n                  label=\"Fecha de Fin\"\n                  type=\"date\"\n                  value={reportConfig?.endDate || ''}\n                  onChange={(e) => updateConfig('endDate', e?.target?.value)}\n                />\n              </div>\n            )}\n\n            <div className=\"border border-border rounded-lg p-4\">\n              <h4 className=\"font-medium text-foreground mb-3\">Filtros Avanzados</h4>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <Input\n                  label=\"Horas Mínimas Trabajadas\"\n                  type=\"number\"\n                  placeholder=\"0\"\n                  value={reportConfig?.minHours || ''}\n                  onChange={(e) => updateConfig('minHours', e?.target?.value)}\n                />\n                <Input\n                  label=\"Horas Máximas Trabajadas\"\n                  type=\"number\"\n                  placeholder=\"24\"\n                  value={reportConfig?.maxHours || ''}\n                  onChange={(e) => updateConfig('maxHours', e?.target?.value)}\n                />\n              </div>\n            </div>\n          </div>\n        )}\n\n        {activeTab === 'grouping' && (\n          <div className=\"space-y-4\">\n            <h3 className=\"text-sm font-medium text-foreground mb-4\">Agrupación y Ordenamiento</h3>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <Select\n                label=\"Agrupar Por\"\n                options={groupByOptions}\n                value={reportConfig?.groupBy}\n                onChange={(value) => updateConfig('groupBy', value)}\n              />\n              \n              <Select\n                label=\"Ordenar Por\"\n                options={sortOptions}\n                value={reportConfig?.sortBy}\n                onChange={(value) => updateConfig('sortBy', value)}\n              />\n            </div>\n\n            <div className=\"flex items-center space-x-4\">\n              <span className=\"text-sm font-medium text-foreground\">Orden:</span>\n              <div className=\"flex items-center space-x-4\">\n                <label className=\"flex items-center space-x-2\">\n                  <input\n                    type=\"radio\"\n                    name=\"sortOrder\"\n                    value=\"asc\"\n                    checked={reportConfig?.sortOrder === 'asc'}\n                    onChange={(e) => updateConfig('sortOrder', e?.target?.value)}\n                    className=\"text-primary focus:ring-primary\"\n                  />\n                  <span className=\"text-sm text-foreground\">Ascendente</span>\n                </label>\n                <label className=\"flex items-center space-x-2\">\n                  <input\n                    type=\"radio\"\n                    name=\"sortOrder\"\n                    value=\"desc\"\n                    checked={reportConfig?.sortOrder === 'desc'}\n                    onChange={(e) => updateConfig('sortOrder', e?.target?.value)}\n                    className=\"text-primary focus:ring-primary\"\n                  />\n                  <span className=\"text-sm text-foreground\">Descendente</span>\n                </label>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {activeTab === 'formatting' && (\n          <div className=\"space-y-4\">\n            <h3 className=\"text-sm font-medium text-foreground mb-4\">Opciones de Formato</h3>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-3\">\n                <Checkbox\n                  label=\"Incluir encabezados\"\n                  checked={reportConfig?.includeHeaders !== false}\n                  onChange={(e) => updateConfig('includeHeaders', e?.target?.checked)}\n                />\n                <Checkbox\n                  label=\"Incluir totales\"\n                  checked={reportConfig?.includeTotals || false}\n                  onChange={(e) => updateConfig('includeTotals', e?.target?.checked)}\n                />\n                <Checkbox\n                  label=\"Incluir gráficos\"\n                  checked={reportConfig?.includeCharts || false}\n                  onChange={(e) => updateConfig('includeCharts', e?.target?.checked)}\n                />\n              </div>\n              \n              <div className=\"space-y-3\">\n                <Checkbox\n                  label=\"Formato de moneda\"\n                  checked={reportConfig?.formatCurrency || false}\n                  onChange={(e) => updateConfig('formatCurrency', e?.target?.checked)}\n                />\n                <Checkbox\n                  label=\"Formato de fecha corta\"\n                  checked={reportConfig?.shortDateFormat || false}\n                  onChange={(e) => updateConfig('shortDateFormat', e?.target?.checked)}\n                />\n                <Checkbox\n                  label=\"Resaltar fines de semana\"\n                  checked={reportConfig?.highlightWeekends || false}\n                  onChange={(e) => updateConfig('highlightWeekends', e?.target?.checked)}\n                />\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ReportBuilder;","size_bytes":13892},"src/pages/comprehensive-reporting-and-export-center/components/ReportHistory.jsx":{"content":"import React, { useState } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\n\nimport Select from '../../../components/ui/Select';\n\nconst ReportHistory = () => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [statusFilter, setStatusFilter] = useState('all');\n  const [dateRange, setDateRange] = useState('last_30_days');\n\n  const reportHistory = [\n    {\n      id: 1,\n      name: 'Reporte Semanal de Asistencia',\n      type: 'attendance-summary',\n      generatedBy: 'Sistema Automático',\n      generatedAt: new Date(2025, 0, 4, 8, 0),\n      status: 'completed',\n      format: 'excel',\n      fileSize: '2.4 MB',\n      downloadCount: 5,\n      recipients: ['supervisor@empresa.com', 'rrhh@empresa.com'],\n      executionTime: '45s'\n    },\n    {\n      id: 2,\n      name: 'Nómina Quincenal - Enero 2025',\n      type: 'payroll-detailed',\n      generatedBy: 'María González',\n      generatedAt: new Date(2025, 0, 3, 14, 30),\n      status: 'completed',\n      format: 'pdf',\n      fileSize: '1.8 MB',\n      downloadCount: 12,\n      recipients: ['contabilidad@empresa.com', 'gerencia@empresa.com'],\n      executionTime: '1m 23s'\n    },\n    {\n      id: 3,\n      name: 'Análisis de Productividad por Sitio',\n      type: 'site-productivity',\n      generatedBy: 'Carlos Ruiz',\n      generatedAt: new Date(2025, 0, 3, 10, 15),\n      status: 'failed',\n      format: 'excel',\n      fileSize: null,\n      downloadCount: 0,\n      recipients: ['supervisor@empresa.com'],\n      executionTime: null,\n      error: 'Error de conexión con la base de datos'\n    },\n    {\n      id: 4,\n      name: 'Dashboard Ejecutivo Diario',\n      type: 'executive-dashboard',\n      generatedBy: 'Sistema Automático',\n      generatedAt: new Date(2025, 0, 3, 7, 30),\n      status: 'completed',\n      format: 'pdf',\n      fileSize: '3.2 MB',\n      downloadCount: 8,\n      recipients: ['gerencia@empresa.com', 'direccion@empresa.com'],\n      executionTime: '2m 10s'\n    },\n    {\n      id: 5,\n      name: 'Reporte de Incidentes - Diciembre 2024',\n      type: 'incident-analysis',\n      generatedBy: 'Ana López',\n      generatedAt: new Date(2025, 0, 2, 16, 45),\n      status: 'processing',\n      format: 'pdf',\n      fileSize: null,\n      downloadCount: 0,\n      recipients: ['seguridad@empresa.com'],\n      executionTime: null,\n      progress: 75\n    },\n    {\n      id: 6,\n      name: 'Resumen Mensual - Diciembre 2024',\n      type: 'monthly-summary',\n      generatedBy: 'Roberto Silva',\n      generatedAt: new Date(2025, 0, 1, 9, 0),\n      status: 'completed',\n      format: 'excel',\n      fileSize: '4.1 MB',\n      downloadCount: 15,\n      recipients: ['gerencia@empresa.com', 'rrhh@empresa.com', 'contabilidad@empresa.com'],\n      executionTime: '3m 45s'\n    }\n  ];\n\n  const statusOptions = [\n    { value: 'all', label: 'Todos los estados' },\n    { value: 'completed', label: 'Completados' },\n    { value: 'processing', label: 'En proceso' },\n    { value: 'failed', label: 'Fallidos' }\n  ];\n\n  const dateRangeOptions = [\n    { value: 'today', label: 'Hoy' },\n    { value: 'last_7_days', label: 'Últimos 7 días' },\n    { value: 'last_30_days', label: 'Últimos 30 días' },\n    { value: 'last_90_days', label: 'Últimos 90 días' }\n  ];\n\n  const getStatusColor = (status) => {\n    switch (status) {\n      case 'completed':\n        return 'text-success bg-success/10';\n      case 'processing':\n        return 'text-warning bg-warning/10';\n      case 'failed':\n        return 'text-error bg-error/10';\n      default:\n        return 'text-muted-foreground bg-muted';\n    }\n  };\n\n  const getStatusIcon = (status) => {\n    switch (status) {\n      case 'completed':\n        return 'CheckCircle';\n      case 'processing':\n        return 'Clock';\n      case 'failed':\n        return 'XCircle';\n      default:\n        return 'Circle';\n    }\n  };\n\n  const getStatusText = (status) => {\n    switch (status) {\n      case 'completed':\n        return 'Completado';\n      case 'processing':\n        return 'En Proceso';\n      case 'failed':\n        return 'Fallido';\n      default:\n        return 'Desconocido';\n    }\n  };\n\n  const getFormatIcon = (format) => {\n    switch (format) {\n      case 'excel':\n        return 'FileSpreadsheet';\n      case 'pdf':\n        return 'FileText';\n      case 'csv':\n        return 'Database';\n      default:\n        return 'File';\n    }\n  };\n\n  const filteredHistory = reportHistory?.filter(report => {\n    const matchesSearch = report?.name?.toLowerCase()?.includes(searchTerm?.toLowerCase()) ||\n                         report?.generatedBy?.toLowerCase()?.includes(searchTerm?.toLowerCase());\n    const matchesStatus = statusFilter === 'all' || report?.status === statusFilter;\n    return matchesSearch && matchesStatus;\n  });\n\n  const formatDateTime = (date) => {\n    return date?.toLocaleDateString('es-ES', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const handleDownload = (reportId) => {\n    // In real implementation, this would trigger file download\n    console.log(`Downloading report ${reportId}`);\n  };\n\n  const handleRetry = (reportId) => {\n    // In real implementation, this would retry failed report generation\n    console.log(`Retrying report ${reportId}`);\n  };\n\n  return (\n    <div className=\"bg-card rounded-lg border border-border p-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h2 className=\"text-lg font-semibold text-foreground\">Historial de Reportes</h2>\n          <p className=\"text-sm text-muted-foreground\">Revisa y descarga reportes generados anteriormente</p>\n        </div>\n        <Button variant=\"outline\" iconName=\"Download\">\n          Exportar Historial\n        </Button>\n      </div>\n      {/* Filters */}\n      <div className=\"flex flex-col sm:flex-row gap-4 mb-6\">\n        <div className=\"flex-1 relative\">\n          <Icon name=\"Search\" size={16} className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\" />\n          <input\n            type=\"text\"\n            placeholder=\"Buscar reportes...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e?.target?.value)}\n            className=\"w-full pl-10 pr-4 py-2 border border-border rounded-md bg-background text-foreground placeholder-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent\"\n          />\n        </div>\n        \n        <Select\n          options={statusOptions}\n          value={statusFilter}\n          onChange={setStatusFilter}\n          className=\"w-full sm:w-48\"\n        />\n        \n        <Select\n          options={dateRangeOptions}\n          value={dateRange}\n          onChange={setDateRange}\n          className=\"w-full sm:w-48\"\n        />\n      </div>\n      {/* Reports List */}\n      <div className=\"space-y-4\">\n        {filteredHistory?.map((report) => (\n          <div\n            key={report?.id}\n            className=\"border border-border rounded-lg p-4 hover:bg-muted/50 transition-colors duration-150 ease-out-cubic\"\n          >\n            <div className=\"flex items-start justify-between\">\n              <div className=\"flex-1\">\n                <div className=\"flex items-center space-x-3 mb-2\">\n                  <Icon name={getFormatIcon(report?.format)} size={20} className=\"text-muted-foreground\" />\n                  <h3 className=\"font-medium text-foreground\">{report?.name}</h3>\n                  <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(report?.status)}`}>\n                    <Icon name={getStatusIcon(report?.status)} size={12} className=\"inline mr-1\" />\n                    {getStatusText(report?.status)}\n                  </span>\n                </div>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 text-sm mb-3\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Icon name=\"User\" size={14} className=\"text-muted-foreground\" />\n                    <span className=\"text-foreground\">{report?.generatedBy}</span>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-2\">\n                    <Icon name=\"Calendar\" size={14} className=\"text-muted-foreground\" />\n                    <span className=\"text-foreground\">{formatDateTime(report?.generatedAt)}</span>\n                  </div>\n                  \n                  {report?.fileSize && (\n                    <div className=\"flex items-center space-x-2\">\n                      <Icon name=\"HardDrive\" size={14} className=\"text-muted-foreground\" />\n                      <span className=\"text-foreground\">{report?.fileSize}</span>\n                    </div>\n                  )}\n                  \n                  {report?.executionTime && (\n                    <div className=\"flex items-center space-x-2\">\n                      <Icon name=\"Clock\" size={14} className=\"text-muted-foreground\" />\n                      <span className=\"text-foreground\">{report?.executionTime}</span>\n                    </div>\n                  )}\n                </div>\n\n                {/* Processing Progress */}\n                {report?.status === 'processing' && report?.progress && (\n                  <div className=\"mb-3\">\n                    <div className=\"flex items-center justify-between text-sm mb-1\">\n                      <span className=\"text-foreground\">Progreso</span>\n                      <span className=\"text-muted-foreground\">{report?.progress}%</span>\n                    </div>\n                    <div className=\"w-full bg-muted rounded-full h-2\">\n                      <div\n                        className=\"bg-primary h-2 rounded-full transition-all duration-300 ease-out-cubic\"\n                        style={{ width: `${report?.progress}%` }}\n                      ></div>\n                    </div>\n                  </div>\n                )}\n\n                {/* Error Message */}\n                {report?.status === 'failed' && report?.error && (\n                  <div className=\"mb-3 p-3 bg-error/10 border border-error/20 rounded-md\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Icon name=\"AlertCircle\" size={16} className=\"text-error\" />\n                      <span className=\"text-sm text-error font-medium\">Error:</span>\n                    </div>\n                    <p className=\"text-sm text-error mt-1\">{report?.error}</p>\n                  </div>\n                )}\n                \n                {/* Recipients */}\n                <div className=\"flex items-center space-x-2\">\n                  <Icon name=\"Mail\" size={14} className=\"text-muted-foreground\" />\n                  <span className=\"text-sm text-muted-foreground\">Enviado a:</span>\n                  <div className=\"flex flex-wrap gap-1\">\n                    {report?.recipients?.slice(0, 2)?.map((email, index) => (\n                      <span\n                        key={index}\n                        className=\"px-2 py-1 bg-muted text-muted-foreground text-xs rounded-md\"\n                      >\n                        {email}\n                      </span>\n                    ))}\n                    {report?.recipients?.length > 2 && (\n                      <span className=\"px-2 py-1 bg-muted text-muted-foreground text-xs rounded-md\">\n                        +{report?.recipients?.length - 2} más\n                      </span>\n                    )}\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center space-x-2 ml-4\">\n                {report?.status === 'completed' && (\n                  <>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      iconName=\"Download\"\n                      onClick={() => handleDownload(report?.id)}\n                    >\n                      Descargar\n                    </Button>\n                    <div className=\"flex items-center space-x-1 text-xs text-muted-foreground\">\n                      <Icon name=\"Download\" size={12} />\n                      <span>{report?.downloadCount}</span>\n                    </div>\n                  </>\n                )}\n                \n                {report?.status === 'failed' && (\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    iconName=\"RefreshCw\"\n                    onClick={() => handleRetry(report?.id)}\n                  >\n                    Reintentar\n                  </Button>\n                )}\n                \n                {report?.status === 'processing' && (\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    iconName=\"X\"\n                    onClick={() => console.log(`Cancelling report ${report?.id}`)}\n                  >\n                    Cancelar\n                  </Button>\n                )}\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n      {filteredHistory?.length === 0 && (\n        <div className=\"text-center py-12\">\n          <Icon name=\"FileX\" size={48} className=\"mx-auto text-muted-foreground mb-4\" />\n          <h3 className=\"text-lg font-medium text-foreground mb-2\">No se encontraron reportes</h3>\n          <p className=\"text-muted-foreground mb-4\">\n            No hay reportes que coincidan con los filtros seleccionados\n          </p>\n          <Button variant=\"outline\" onClick={() => {\n            setSearchTerm('');\n            setStatusFilter('all');\n            setDateRange('last_30_days');\n          }}>\n            Limpiar filtros\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ReportHistory;","size_bytes":13874},"src/pages/comprehensive-reporting-and-export-center/components/ReportPreview.jsx":{"content":"import React, { useState } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\n\nconst ReportPreview = ({ reportConfig }) => {\n  const [previewData, setPreviewData] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [exportFormat, setExportFormat] = useState('excel');\n\n  // Mock data for preview\n  const mockData = [\n    {\n      employee_name: 'Juan Pérez',\n      employee_id: 'EMP001',\n      site_name: 'Obra Central',\n      date: '2025-01-04',\n      check_in: '08:00',\n      check_out: '17:30',\n      hours_worked: 8.5,\n      overtime_hours: 0.5,\n      total_pay: 425.00,\n      attendance_status: 'Presente'\n    },\n    {\n      employee_name: 'María González',\n      employee_id: 'EMP002',\n      site_name: 'Proyecto Norte',\n      date: '2025-01-04',\n      check_in: '08:15',\n      check_out: '17:00',\n      hours_worked: 7.75,\n      overtime_hours: 0,\n      total_pay: 387.50,\n      attendance_status: 'Tardanza'\n    },\n    {\n      employee_name: 'Carlos Ruiz',\n      employee_id: 'EMP003',\n      site_name: 'Obra Central',\n      date: '2025-01-04',\n      check_in: '07:45',\n      check_out: '18:00',\n      hours_worked: 9.25,\n      overtime_hours: 1.25,\n      total_pay: 512.50,\n      attendance_status: 'Presente'\n    },\n    {\n      employee_name: 'Ana López',\n      employee_id: 'EMP004',\n      site_name: 'Edificio Sur',\n      date: '2025-01-04',\n      check_in: '08:00',\n      check_out: '16:30',\n      hours_worked: 7.5,\n      overtime_hours: 0,\n      total_pay: 375.00,\n      attendance_status: 'Presente'\n    },\n    {\n      employee_name: 'Roberto Silva',\n      employee_id: 'EMP005',\n      site_name: 'Complejo Este',\n      date: '2025-01-04',\n      check_in: '08:30',\n      check_out: '17:15',\n      hours_worked: 7.75,\n      overtime_hours: 0,\n      total_pay: 387.50,\n      attendance_status: 'Tardanza'\n    }\n  ];\n\n  const exportFormats = [\n    { id: 'excel', name: 'Excel (.xlsx)', icon: 'FileSpreadsheet' },\n    { id: 'pdf', name: 'PDF (.pdf)', icon: 'FileText' },\n    { id: 'csv', name: 'CSV (.csv)', icon: 'Database' }\n  ];\n\n  const generatePreview = () => {\n    setIsLoading(true);\n    // Simulate API call\n    setTimeout(() => {\n      setPreviewData(mockData);\n      setIsLoading(false);\n    }, 1500);\n  };\n\n  const handleExport = (format) => {\n    setIsLoading(true);\n    // Simulate export process\n    setTimeout(() => {\n      setIsLoading(false);\n      // In real implementation, this would trigger file download\n      alert(`Reporte exportado en formato ${format?.toUpperCase()}`);\n    }, 2000);\n  };\n\n  const getFieldDisplayName = (fieldId) => {\n    const fieldNames = {\n      employee_name: 'Empleado',\n      employee_id: 'ID',\n      site_name: 'Sitio',\n      date: 'Fecha',\n      check_in: 'Entrada',\n      check_out: 'Salida',\n      hours_worked: 'Horas',\n      overtime_hours: 'H. Extra',\n      total_pay: 'Pago Total',\n      attendance_status: 'Estado'\n    };\n    return fieldNames?.[fieldId] || fieldId;\n  };\n\n  const formatValue = (fieldId, value) => {\n    if (fieldId === 'total_pay') {\n      return `€${value?.toFixed(2)}`;\n    }\n    if (fieldId === 'hours_worked' || fieldId === 'overtime_hours') {\n      return `${value}h`;\n    }\n    if (fieldId === 'date') {\n      return new Date(value)?.toLocaleDateString('es-ES');\n    }\n    return value;\n  };\n\n  const getStatusColor = (status) => {\n    switch (status) {\n      case 'Presente':\n        return 'text-success bg-success/10';\n      case 'Tardanza':\n        return 'text-warning bg-warning/10';\n      case 'Ausente':\n        return 'text-error bg-error/10';\n      default:\n        return 'text-muted-foreground bg-muted';\n    }\n  };\n\n  const selectedFields = reportConfig?.fields || [];\n  const filteredData = previewData?.slice(0, 10) || [];\n\n  return (\n    <div className=\"bg-card rounded-lg border border-border p-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h2 className=\"text-lg font-semibold text-foreground\">Vista Previa del Reporte</h2>\n          <p className=\"text-sm text-muted-foreground\">\n            {reportConfig?.name || 'Reporte sin nombre'} - Vista previa de los primeros 10 registros\n          </p>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant=\"outline\"\n            onClick={generatePreview}\n            loading={isLoading}\n            iconName=\"RefreshCw\"\n          >\n            Actualizar Vista\n          </Button>\n        </div>\n      </div>\n      {!previewData && !isLoading && (\n        <div className=\"text-center py-12\">\n          <Icon name=\"FileSearch\" size={48} className=\"mx-auto text-muted-foreground mb-4\" />\n          <h3 className=\"text-lg font-medium text-foreground mb-2\">Vista Previa No Disponible</h3>\n          <p className=\"text-muted-foreground mb-4\">\n            Haz clic en \"Actualizar Vista\" para generar la vista previa del reporte\n          </p>\n          <Button onClick={generatePreview} iconName=\"Play\">\n            Generar Vista Previa\n          </Button>\n        </div>\n      )}\n      {isLoading && (\n        <div className=\"text-center py-12\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <h3 className=\"text-lg font-medium text-foreground mb-2\">Generando Vista Previa</h3>\n          <p className=\"text-muted-foreground\">Procesando datos del reporte...</p>\n        </div>\n      )}\n      {previewData && !isLoading && (\n        <div className=\"space-y-6\">\n          {/* Report Summary */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <div className=\"bg-muted rounded-lg p-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Icon name=\"Users\" size={16} className=\"text-primary\" />\n                <span className=\"text-sm font-medium text-foreground\">Total Empleados</span>\n              </div>\n              <p className=\"text-2xl font-bold text-foreground mt-1\">{filteredData?.length}</p>\n            </div>\n            <div className=\"bg-muted rounded-lg p-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Icon name=\"Clock\" size={16} className=\"text-success\" />\n                <span className=\"text-sm font-medium text-foreground\">Horas Totales</span>\n              </div>\n              <p className=\"text-2xl font-bold text-foreground mt-1\">\n                {filteredData?.reduce((sum, row) => sum + row?.hours_worked, 0)?.toFixed(1)}h\n              </p>\n            </div>\n            <div className=\"bg-muted rounded-lg p-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Icon name=\"TrendingUp\" size={16} className=\"text-warning\" />\n                <span className=\"text-sm font-medium text-foreground\">Horas Extra</span>\n              </div>\n              <p className=\"text-2xl font-bold text-foreground mt-1\">\n                {filteredData?.reduce((sum, row) => sum + row?.overtime_hours, 0)?.toFixed(1)}h\n              </p>\n            </div>\n            <div className=\"bg-muted rounded-lg p-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Icon name=\"Euro\" size={16} className=\"text-primary\" />\n                <span className=\"text-sm font-medium text-foreground\">Pago Total</span>\n              </div>\n              <p className=\"text-2xl font-bold text-foreground mt-1\">\n                €{filteredData?.reduce((sum, row) => sum + row?.total_pay, 0)?.toFixed(2)}\n              </p>\n            </div>\n          </div>\n\n          {/* Data Table */}\n          <div className=\"border border-border rounded-lg overflow-hidden\">\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead className=\"bg-muted\">\n                  <tr>\n                    {selectedFields?.map((fieldId) => (\n                      <th\n                        key={fieldId}\n                        className=\"px-4 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\"\n                      >\n                        {getFieldDisplayName(fieldId)}\n                      </th>\n                    ))}\n                  </tr>\n                </thead>\n                <tbody className=\"bg-background divide-y divide-border\">\n                  {filteredData?.map((row, index) => (\n                    <tr key={index} className=\"hover:bg-muted/50\">\n                      {selectedFields?.map((fieldId) => (\n                        <td key={fieldId} className=\"px-4 py-3 whitespace-nowrap text-sm\">\n                          {fieldId === 'attendance_status' ? (\n                            <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(row?.[fieldId])}`}>\n                              {row?.[fieldId]}\n                            </span>\n                          ) : (\n                            <span className=\"text-foreground\">\n                              {formatValue(fieldId, row?.[fieldId])}\n                            </span>\n                          )}\n                        </td>\n                      ))}\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </div>\n\n          {/* Export Options */}\n          <div className=\"border-t border-border pt-6\">\n            <h3 className=\"text-sm font-medium text-foreground mb-4\">Opciones de Exportación</h3>\n            <div className=\"flex flex-wrap gap-3\">\n              {exportFormats?.map((format) => (\n                <Button\n                  key={format?.id}\n                  variant={exportFormat === format?.id ? 'default' : 'outline'}\n                  onClick={() => {\n                    setExportFormat(format?.id);\n                    handleExport(format?.id);\n                  }}\n                  iconName={format?.icon}\n                  iconPosition=\"left\"\n                  loading={isLoading && exportFormat === format?.id}\n                >\n                  {format?.name}\n                </Button>\n              ))}\n            </div>\n            <p className=\"text-xs text-muted-foreground mt-2\">\n              El reporte completo contiene {mockData?.length * 10} registros aproximadamente\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ReportPreview;","size_bytes":10430},"src/pages/comprehensive-reporting-and-export-center/components/ReportTemplateLibrary.jsx":{"content":"import React, { useState } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\n\nconst ReportTemplateLibrary = ({ onSelectTemplate, selectedTemplate }) => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState('all');\n\n  const reportTemplates = [\n    {\n      id: 'attendance-summary',\n      name: 'Resumen de Asistencia',\n      description: 'Reporte completo de asistencia por empleado y período',\n      category: 'attendance',\n      icon: 'Clock',\n      fields: ['Empleado', 'Fecha', 'Entrada', 'Salida', 'Horas Trabajadas', 'Estado'],\n      lastUsed: new Date(2025, 0, 3),\n      popularity: 95\n    },\n    {\n      id: 'payroll-detailed',\n      name: 'Nómina Detallada',\n      description: 'Cálculo completo de nómina con deducciones y bonificaciones',\n      category: 'payroll',\n      icon: 'Calculator',\n      fields: ['Empleado', 'Salario Base', 'Horas Extra', 'Deducciones', 'Total'],\n      lastUsed: new Date(2025, 0, 2),\n      popularity: 88\n    },\n    {\n      id: 'incident-analysis',\n      name: 'Análisis de Incidentes',\n      description: 'Reporte de incidentes por tipo, frecuencia y resolución',\n      category: 'incidents',\n      icon: 'AlertTriangle',\n      fields: ['Fecha', 'Tipo', 'Empleado', 'Descripción', 'Estado', 'Resolución'],\n      lastUsed: new Date(2025, 0, 1),\n      popularity: 72\n    },\n    {\n      id: 'compliance-audit',\n      name: 'Auditoría de Cumplimiento',\n      description: 'Reporte para auditorías laborales y cumplimiento normativo',\n      category: 'compliance',\n      icon: 'Shield',\n      fields: ['Empleado', 'Horas Legales', 'Descansos', 'Overtime', 'Cumplimiento'],\n      lastUsed: new Date(2024, 11, 28),\n      popularity: 65\n    },\n    {\n      id: 'site-productivity',\n      name: 'Productividad por Sitio',\n      description: 'Análisis de productividad y eficiencia por obra',\n      category: 'analytics',\n      icon: 'TrendingUp',\n      fields: ['Sitio', 'Empleados', 'Horas Trabajadas', 'Productividad', 'Eficiencia'],\n      lastUsed: new Date(2024, 11, 30),\n      popularity: 78\n    },\n    {\n      id: 'monthly-summary',\n      name: 'Resumen Mensual',\n      description: 'Consolidado mensual de asistencia, nómina e incidentes',\n      category: 'summary',\n      icon: 'Calendar',\n      fields: ['Mes', 'Total Empleados', 'Asistencia %', 'Nómina Total', 'Incidentes'],\n      lastUsed: new Date(2024, 11, 31),\n      popularity: 92\n    }\n  ];\n\n  const categories = [\n    { id: 'all', name: 'Todos', icon: 'Grid3X3' },\n    { id: 'attendance', name: 'Asistencia', icon: 'Clock' },\n    { id: 'payroll', name: 'Nómina', icon: 'Calculator' },\n    { id: 'incidents', name: 'Incidentes', icon: 'AlertTriangle' },\n    { id: 'compliance', name: 'Cumplimiento', icon: 'Shield' },\n    { id: 'analytics', name: 'Análisis', icon: 'TrendingUp' },\n    { id: 'summary', name: 'Resúmenes', icon: 'FileText' }\n  ];\n\n  const filteredTemplates = reportTemplates?.filter(template => {\n    const matchesSearch = template?.name?.toLowerCase()?.includes(searchTerm?.toLowerCase()) ||\n                         template?.description?.toLowerCase()?.includes(searchTerm?.toLowerCase());\n    const matchesCategory = selectedCategory === 'all' || template?.category === selectedCategory;\n    return matchesSearch && matchesCategory;\n  });\n\n  const formatLastUsed = (date) => {\n    const now = new Date();\n    const diffTime = Math.abs(now - date);\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    \n    if (diffDays === 1) return 'Ayer';\n    if (diffDays < 7) return `Hace ${diffDays} días`;\n    if (diffDays < 30) return `Hace ${Math.ceil(diffDays / 7)} semanas`;\n    return `Hace ${Math.ceil(diffDays / 30)} meses`;\n  };\n\n  return (\n    <div className=\"bg-card rounded-lg border border-border p-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h2 className=\"text-lg font-semibold text-foreground\">Plantillas de Reportes</h2>\n          <p className=\"text-sm text-muted-foreground\">Selecciona una plantilla predefinida para comenzar</p>\n        </div>\n        <Button variant=\"outline\" iconName=\"Plus\" iconPosition=\"left\">\n          Nueva Plantilla\n        </Button>\n      </div>\n      {/* Search and Filter */}\n      <div className=\"flex flex-col sm:flex-row gap-4 mb-6\">\n        <div className=\"flex-1 relative\">\n          <Icon name=\"Search\" size={16} className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\" />\n          <input\n            type=\"text\"\n            placeholder=\"Buscar plantillas...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e?.target?.value)}\n            className=\"w-full pl-10 pr-4 py-2 border border-border rounded-md bg-background text-foreground placeholder-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent\"\n          />\n        </div>\n        <div className=\"flex gap-2 overflow-x-auto pb-2\">\n          {categories?.map((category) => (\n            <button\n              key={category?.id}\n              onClick={() => setSelectedCategory(category?.id)}\n              className={`\n                flex items-center space-x-2 px-3 py-2 rounded-md text-sm font-medium whitespace-nowrap\n                transition-all duration-150 ease-out-cubic\n                ${selectedCategory === category?.id\n                  ? 'bg-primary text-primary-foreground'\n                  : 'bg-muted text-muted-foreground hover:bg-muted/80 hover:text-foreground'\n                }\n              `}\n            >\n              <Icon name={category?.icon} size={16} />\n              <span>{category?.name}</span>\n            </button>\n          ))}\n        </div>\n      </div>\n      {/* Templates Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        {filteredTemplates?.map((template) => (\n          <div\n            key={template?.id}\n            onClick={() => onSelectTemplate(template)}\n            className={`\n              p-4 border rounded-lg cursor-pointer transition-all duration-150 ease-out-cubic hover:scale-98\n              ${selectedTemplate?.id === template?.id\n                ? 'border-primary bg-primary/5' :'border-border hover:border-primary/50 hover:bg-muted/50'\n              }\n            `}\n          >\n            <div className=\"flex items-start justify-between mb-3\">\n              <div className=\"flex items-center space-x-3\">\n                <div className={`\n                  p-2 rounded-md\n                  ${selectedTemplate?.id === template?.id\n                    ? 'bg-primary text-primary-foreground'\n                    : 'bg-muted text-muted-foreground'\n                  }\n                `}>\n                  <Icon name={template?.icon} size={20} />\n                </div>\n                <div>\n                  <h3 className=\"font-medium text-foreground\">{template?.name}</h3>\n                  <p className=\"text-sm text-muted-foreground\">{template?.description}</p>\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"flex items-center space-x-1\">\n                  <Icon name=\"TrendingUp\" size={14} className=\"text-success\" />\n                  <span className=\"text-xs text-success font-medium\">{template?.popularity}%</span>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"mb-3\">\n              <p className=\"text-xs text-muted-foreground mb-2\">Campos incluidos:</p>\n              <div className=\"flex flex-wrap gap-1\">\n                {template?.fields?.slice(0, 4)?.map((field, index) => (\n                  <span\n                    key={index}\n                    className=\"px-2 py-1 bg-muted text-muted-foreground text-xs rounded-md\"\n                  >\n                    {field}\n                  </span>\n                ))}\n                {template?.fields?.length > 4 && (\n                  <span className=\"px-2 py-1 bg-muted text-muted-foreground text-xs rounded-md\">\n                    +{template?.fields?.length - 4} más\n                  </span>\n                )}\n              </div>\n            </div>\n\n            <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n              <span>Último uso: {formatLastUsed(template?.lastUsed)}</span>\n              <div className=\"flex items-center space-x-1\">\n                <Icon name=\"Clock\" size={12} />\n                <span>~2 min</span>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n      {filteredTemplates?.length === 0 && (\n        <div className=\"text-center py-12\">\n          <Icon name=\"FileX\" size={48} className=\"mx-auto text-muted-foreground mb-4\" />\n          <h3 className=\"text-lg font-medium text-foreground mb-2\">No se encontraron plantillas</h3>\n          <p className=\"text-muted-foreground mb-4\">\n            No hay plantillas que coincidan con tu búsqueda\n          </p>\n          <Button variant=\"outline\" onClick={() => {\n            setSearchTerm('');\n            setSelectedCategory('all');\n          }}>\n            Limpiar filtros\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ReportTemplateLibrary;","size_bytes":9327},"src/pages/comprehensive-reporting-and-export-center/components/ScheduledReports.jsx":{"content":"import React, { useState } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport Input from '../../../components/ui/Input';\nimport Select from '../../../components/ui/Select';\nimport { Checkbox } from '../../../components/ui/Checkbox';\n\nconst ScheduledReports = () => {\n  const [showCreateModal, setShowCreateModal] = useState(false);\n  const [selectedReport, setSelectedReport] = useState(null);\n\n  const scheduledReports = [\n    {\n      id: 1,\n      name: 'Reporte Semanal de Asistencia',\n      description: 'Resumen semanal de asistencia por sitio',\n      schedule: 'weekly',\n      frequency: 'Lunes a las 08:00',\n      lastRun: new Date(2025, 0, 1, 8, 0),\n      nextRun: new Date(2025, 0, 6, 8, 0),\n      status: 'active',\n      recipients: ['supervisor@empresa.com', 'rrhh@empresa.com'],\n      format: 'excel',\n      template: 'attendance-summary'\n    },\n    {\n      id: 2,\n      name: 'Nómina Quincenal',\n      description: 'Cálculo de nómina cada 15 días',\n      schedule: 'biweekly',\n      frequency: '1ro y 15 de cada mes a las 09:00',\n      lastRun: new Date(2025, 0, 1, 9, 0),\n      nextRun: new Date(2025, 0, 15, 9, 0),\n      status: 'active',\n      recipients: ['contabilidad@empresa.com', 'gerencia@empresa.com'],\n      format: 'pdf',\n      template: 'payroll-detailed'\n    },\n    {\n      id: 3,\n      name: 'Análisis Mensual de Incidentes',\n      description: 'Reporte mensual de incidentes y tendencias',\n      schedule: 'monthly',\n      frequency: 'Primer día del mes a las 10:00',\n      lastRun: new Date(2024, 11, 1, 10, 0),\n      nextRun: new Date(2025, 1, 1, 10, 0),\n      status: 'paused',\n      recipients: ['seguridad@empresa.com', 'supervisor@empresa.com'],\n      format: 'pdf',\n      template: 'incident-analysis'\n    },\n    {\n      id: 4,\n      name: 'Dashboard Ejecutivo Diario',\n      description: 'KPIs y métricas clave para la gerencia',\n      schedule: 'daily',\n      frequency: 'Diario a las 07:30',\n      lastRun: new Date(2025, 0, 4, 7, 30),\n      nextRun: new Date(2025, 0, 5, 7, 30),\n      status: 'active',\n      recipients: ['gerencia@empresa.com', 'direccion@empresa.com'],\n      format: 'pdf',\n      template: 'executive-dashboard'\n    }\n  ];\n\n  const frequencyOptions = [\n    { value: 'daily', label: 'Diario' },\n    { value: 'weekly', label: 'Semanal' },\n    { value: 'biweekly', label: 'Quincenal' },\n    { value: 'monthly', label: 'Mensual' },\n    { value: 'quarterly', label: 'Trimestral' }\n  ];\n\n  const formatOptions = [\n    { value: 'excel', label: 'Excel (.xlsx)' },\n    { value: 'pdf', label: 'PDF (.pdf)' },\n    { value: 'csv', label: 'CSV (.csv)' }\n  ];\n\n  const getStatusColor = (status) => {\n    switch (status) {\n      case 'active':\n        return 'text-success bg-success/10';\n      case 'paused':\n        return 'text-warning bg-warning/10';\n      case 'error':\n        return 'text-error bg-error/10';\n      default:\n        return 'text-muted-foreground bg-muted';\n    }\n  };\n\n  const getStatusIcon = (status) => {\n    switch (status) {\n      case 'active':\n        return 'Play';\n      case 'paused':\n        return 'Pause';\n      case 'error':\n        return 'AlertCircle';\n      default:\n        return 'Clock';\n    }\n  };\n\n  const formatDateTime = (date) => {\n    return date?.toLocaleDateString('es-ES', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const toggleReportStatus = (reportId) => {\n    // In real implementation, this would make an API call\n    console.log(`Toggling status for report ${reportId}`);\n  };\n\n  const runReportNow = (reportId) => {\n    // In real implementation, this would trigger immediate report generation\n    console.log(`Running report ${reportId} now`);\n  };\n\n  return (\n    <div className=\"bg-card rounded-lg border border-border p-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h2 className=\"text-lg font-semibold text-foreground\">Reportes Programados</h2>\n          <p className=\"text-sm text-muted-foreground\">Automatiza la generación y distribución de reportes</p>\n        </div>\n        <Button\n          variant=\"default\"\n          iconName=\"Plus\"\n          iconPosition=\"left\"\n          onClick={() => setShowCreateModal(true)}\n        >\n          Nuevo Reporte Programado\n        </Button>\n      </div>\n      {/* Reports List */}\n      <div className=\"space-y-4\">\n        {scheduledReports?.map((report) => (\n          <div\n            key={report?.id}\n            className=\"border border-border rounded-lg p-4 hover:bg-muted/50 transition-colors duration-150 ease-out-cubic\"\n          >\n            <div className=\"flex items-start justify-between\">\n              <div className=\"flex-1\">\n                <div className=\"flex items-center space-x-3 mb-2\">\n                  <h3 className=\"font-medium text-foreground\">{report?.name}</h3>\n                  <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(report?.status)}`}>\n                    <Icon name={getStatusIcon(report?.status)} size={12} className=\"inline mr-1\" />\n                    {report?.status === 'active' ? 'Activo' : report?.status === 'paused' ? 'Pausado' : 'Error'}\n                  </span>\n                </div>\n                \n                <p className=\"text-sm text-muted-foreground mb-3\">{report?.description}</p>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 text-sm\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Icon name=\"Calendar\" size={14} className=\"text-muted-foreground\" />\n                    <span className=\"text-foreground\">{report?.frequency}</span>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-2\">\n                    <Icon name=\"Clock\" size={14} className=\"text-muted-foreground\" />\n                    <span className=\"text-foreground\">Último: {formatDateTime(report?.lastRun)}</span>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-2\">\n                    <Icon name=\"ArrowRight\" size={14} className=\"text-muted-foreground\" />\n                    <span className=\"text-foreground\">Próximo: {formatDateTime(report?.nextRun)}</span>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-2\">\n                    <Icon name=\"FileText\" size={14} className=\"text-muted-foreground\" />\n                    <span className=\"text-foreground\">{report?.format?.toUpperCase()}</span>\n                  </div>\n                </div>\n                \n                <div className=\"mt-3\">\n                  <div className=\"flex items-center space-x-2 mb-1\">\n                    <Icon name=\"Mail\" size={14} className=\"text-muted-foreground\" />\n                    <span className=\"text-sm font-medium text-foreground\">Destinatarios:</span>\n                  </div>\n                  <div className=\"flex flex-wrap gap-1\">\n                    {report?.recipients?.map((email, index) => (\n                      <span\n                        key={index}\n                        className=\"px-2 py-1 bg-muted text-muted-foreground text-xs rounded-md\"\n                      >\n                        {email}\n                      </span>\n                    ))}\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center space-x-2 ml-4\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  iconName=\"Play\"\n                  onClick={() => runReportNow(report?.id)}\n                >\n                  Ejecutar Ahora\n                </Button>\n                \n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  iconName={report?.status === 'active' ? 'Pause' : 'Play'}\n                  onClick={() => toggleReportStatus(report?.id)}\n                >\n                  {report?.status === 'active' ? 'Pausar' : 'Activar'}\n                </Button>\n                \n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  iconName=\"Settings\"\n                  onClick={() => setSelectedReport(report)}\n                >\n                  Configurar\n                </Button>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n      {scheduledReports?.length === 0 && (\n        <div className=\"text-center py-12\">\n          <Icon name=\"Calendar\" size={48} className=\"mx-auto text-muted-foreground mb-4\" />\n          <h3 className=\"text-lg font-medium text-foreground mb-2\">No hay reportes programados</h3>\n          <p className=\"text-muted-foreground mb-4\">\n            Crea tu primer reporte programado para automatizar la generación de informes\n          </p>\n          <Button onClick={() => setShowCreateModal(true)} iconName=\"Plus\">\n            Crear Reporte Programado\n          </Button>\n        </div>\n      )}\n      {/* Create/Edit Modal */}\n      {(showCreateModal || selectedReport) && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n          <div className=\"bg-card rounded-lg border border-border w-full max-w-2xl max-h-[90vh] overflow-y-auto\">\n            <div className=\"p-6 border-b border-border\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-lg font-semibold text-foreground\">\n                  {selectedReport ? 'Editar Reporte Programado' : 'Nuevo Reporte Programado'}\n                </h3>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  iconName=\"X\"\n                  onClick={() => {\n                    setShowCreateModal(false);\n                    setSelectedReport(null);\n                  }}\n                />\n              </div>\n            </div>\n            \n            <div className=\"p-6 space-y-4\">\n              <Input\n                label=\"Nombre del Reporte\"\n                placeholder=\"Ingresa el nombre del reporte\"\n                defaultValue={selectedReport?.name || ''}\n              />\n              \n              <Input\n                label=\"Descripción\"\n                placeholder=\"Describe el propósito del reporte\"\n                defaultValue={selectedReport?.description || ''}\n              />\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <Select\n                  label=\"Frecuencia\"\n                  options={frequencyOptions}\n                  defaultValue={selectedReport?.schedule || 'weekly'}\n                />\n                \n                <Select\n                  label=\"Formato de Exportación\"\n                  options={formatOptions}\n                  defaultValue={selectedReport?.format || 'excel'}\n                />\n              </div>\n              \n              <Input\n                label=\"Destinatarios (separados por coma)\"\n                placeholder=\"email1@empresa.com, email2@empresa.com\"\n                defaultValue={selectedReport?.recipients?.join(', ') || ''}\n              />\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <Input\n                  label=\"Hora de Ejecución\"\n                  type=\"time\"\n                  defaultValue=\"08:00\"\n                />\n                \n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium text-foreground\">Opciones</label>\n                  <div className=\"space-y-2\">\n                    <Checkbox label=\"Incluir archivos adjuntos\" />\n                    <Checkbox label=\"Notificar por email\" defaultChecked />\n                    <Checkbox label=\"Comprimir archivos grandes\" />\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"p-6 border-t border-border flex justify-end space-x-3\">\n              <Button\n                variant=\"outline\"\n                onClick={() => {\n                  setShowCreateModal(false);\n                  setSelectedReport(null);\n                }}\n              >\n                Cancelar\n              </Button>\n              <Button variant=\"default\">\n                {selectedReport ? 'Actualizar' : 'Crear'} Reporte\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ScheduledReports;","size_bytes":12695},"src/pages/construction-site-and-supervisor-management-hub/components/BulkAssignmentPanel.jsx":{"content":"import React, { useEffect, useMemo, useState } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport Select from '../../../components/ui/Select';\nimport { Checkbox } from '../../../components/ui/Checkbox';\n\nconst BulkAssignmentPanel = ({\n  sites = [],\n  supervisors = [],\n  employees = [],\n  onBulkAssign,\n  onClose,\n  userRole = 'admin',\n}) => {\n  const [assignmentType, setAssignmentType] = useState('employee-to-site');\n  const [selectedItems, setSelectedItems] = useState([]);\n  const [targetSelection, setTargetSelection] = useState('');\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  // búsqueda local para la lista de origen (empleados o sitios)\n  const [sourceSearch, setSourceSearch] = useState('');\n\n  const assignmentTypes = [\n    { value: 'employee-to-site', label: 'Asignar empleados a sitio' },\n    { value: 'employee-to-supervisor', label: 'Asignar empleados a supervisor' },\n    { value: 'site-to-supervisor', label: 'Asignar sitios a supervisor' },\n  ];\n\n  // Normalización de opciones (memoizado)\n  const sourceOptions = useMemo(() => {\n    switch (assignmentType) {\n      case 'employee-to-site':\n      case 'employee-to-supervisor':\n        return (employees || []).map((emp) => ({\n          value: emp?.id,\n          label: `${emp?.name || emp?.full_name || 'Empleado'} - ${emp?.currentSite || 'Sin sitio'}`,\n          description: emp?.position || emp?.role || '',\n          raw: emp,\n        }));\n      case 'site-to-supervisor':\n        return (sites || []).map((site) => ({\n          value: site?.id,\n          label: `${site?.name} - ${site?.location || 'Sin ubicación'}`,\n          description: `${site?.employeeCount ?? 0} empleados`,\n          raw: site,\n        }));\n      default:\n        return [];\n    }\n  }, [assignmentType, employees, sites]);\n\n  const targetOptions = useMemo(() => {\n    switch (assignmentType) {\n      case 'employee-to-site':\n        return (sites || []).map((site) => ({\n          value: site?.id,\n          label: site?.name,\n          description: site?.location || '',\n          raw: site,\n        }));\n      case 'employee-to-supervisor':\n      case 'site-to-supervisor':\n        return (supervisors || []).map((sup) => ({\n          value: sup?.id,\n          label: sup?.name || sup?.full_name || 'Supervisor',\n          description: `${sup?.assignedSites ?? 0} sitios asignados`,\n          raw: sup,\n        }));\n      default:\n        return [];\n    }\n  }, [assignmentType, sites, supervisors]);\n\n  // Filtrado de la lista de origen por texto\n  const filteredSourceOptions = useMemo(() => {\n    const term = sourceSearch.trim().toLowerCase();\n    if (!term) return sourceOptions;\n    return sourceOptions.filter(\n      (opt) =>\n        opt.label.toLowerCase().includes(term) ||\n        (opt.description || '').toLowerCase().includes(term)\n    );\n  }, [sourceOptions, sourceSearch]);\n\n  // Reset de selección al cambiar de tipo de asignación\n  useEffect(() => {\n    setSelectedItems([]);\n    setTargetSelection('');\n    setSourceSearch('');\n  }, [assignmentType]);\n\n  const allFilteredIds = useMemo(\n    () => filteredSourceOptions.map((o) => o.value),\n    [filteredSourceOptions]\n  );\n\n  const isAllFilteredSelected =\n    allFilteredIds.length > 0 &&\n    allFilteredIds.every((id) => selectedItems.includes(id));\n\n  const handleItemToggle = (itemId) => {\n    setSelectedItems((prev) =>\n      prev.includes(itemId) ? prev.filter((id) => id !== itemId) : [...prev, itemId]\n    );\n  };\n\n  const handleSelectAllFiltered = () => {\n    setSelectedItems((prev) =>\n      isAllFilteredSelected\n        ? prev.filter((id) => !allFilteredIds.includes(id))\n        : Array.from(new Set([...prev, ...allFilteredIds]))\n    );\n  };\n\n  const canAssign = selectedItems.length > 0 && !!targetSelection && !isProcessing;\n\n  const handleBulkAssign = async () => {\n    if (!canAssign) return;\n    setIsProcessing(true);\n    try {\n      await onBulkAssign?.({\n        type: assignmentType,\n        sourceIds: selectedItems,\n        targetId: targetSelection,\n      });\n      setSelectedItems([]);\n      setTargetSelection('');\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.error('Error en asignación masiva:', error);\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const summaryText = useMemo(() => {\n    const sourceCount = selectedItems.length;\n    const targetName = targetOptions.find((opt) => opt.value === targetSelection)?.label;\n    if (!sourceCount || !targetName) return '';\n    switch (assignmentType) {\n      case 'employee-to-site':\n        return `Asignar ${sourceCount} empleado${sourceCount > 1 ? 's' : ''} al sitio \"${targetName}\"`;\n      case 'employee-to-supervisor':\n        return `Asignar ${sourceCount} empleado${sourceCount > 1 ? 's' : ''} al supervisor \"${targetName}\"`;\n      case 'site-to-supervisor':\n        return `Asignar ${sourceCount} sitio${sourceCount > 1 ? 's' : ''} al supervisor \"${targetName}\"`;\n      default:\n        return '';\n    }\n  }, [assignmentType, selectedItems, targetOptions, targetSelection]);\n\n  if (userRole !== 'admin') {\n    return (\n      <div className=\"bg-card border border-border rounded-lg p-6\">\n        <div className=\"text-center\">\n          <Icon name=\"Lock\" size={48} className=\"mx-auto text-muted-foreground mb-4\" />\n          <h3 className=\"text-lg font-semibold text-foreground mb-2\">Acceso Restringido</h3>\n          <p className=\"text-muted-foreground\">No tienes permisos para realizar asignaciones masivas.</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-card border border-border rounded-lg p-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <h3 className=\"text-lg font-semibold text-foreground\">Asignación Masiva</h3>\n        <Button variant=\"ghost\" size=\"icon\" onClick={onClose} aria-label=\"Cerrar\">\n          <Icon name=\"X\" size={20} />\n        </Button>\n      </div>\n\n      <div className=\"space-y-6\">\n        {/* Assignment Type Selection */}\n        <div>\n          <Select\n            label=\"Tipo de asignación\"\n            options={assignmentTypes}\n            value={assignmentType}\n            onChange={setAssignmentType}\n            className=\"mb-4\"\n          />\n        </div>\n\n        {/* Source Selection */}\n        <div>\n          <div className=\"flex items-center justify-between mb-3\">\n            <label className=\"text-sm font-medium text-foreground\">\n              Seleccionar elementos ({selectedItems.length} seleccionados)\n            </label>\n            <div className=\"flex items-center gap-2\">\n              <input\n                type=\"search\"\n                placeholder=\"Buscar…\"\n                value={sourceSearch}\n                onChange={(e) => setSourceSearch(e.target.value)}\n                className=\"px-2 py-1 text-sm border border-border rounded\"\n              />\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={handleSelectAllFiltered}\n                disabled={filteredSourceOptions.length === 0}\n                iconName={\n                  isAllFilteredSelected ? 'Square' : 'CheckSquare'\n                }\n                iconPosition=\"left\"\n                title={\n                  filteredSourceOptions.length === 0\n                    ? 'No hay elementos para seleccionar'\n                    : isAllFilteredSelected\n                    ? 'Deseleccionar visibles'\n                    : 'Seleccionar visibles'\n                }\n              >\n                {isAllFilteredSelected ? 'Deseleccionar visibles' : 'Seleccionar visibles'}\n              </Button>\n            </div>\n          </div>\n\n          <div className=\"max-h-64 overflow-y-auto border border-border rounded-md p-2 space-y-2\">\n            {filteredSourceOptions.length === 0 ? (\n              <div className=\"text-sm text-muted-foreground px-2 py-4 text-center\">\n                {sourceOptions.length === 0\n                  ? 'No hay elementos disponibles.'\n                  : 'Sin resultados para el filtro.'}\n              </div>\n            ) : (\n              filteredSourceOptions.map((option) => (\n                <div\n                  key={option.value}\n                  className=\"flex items-center space-x-3 p-2 hover:bg-muted rounded-md\"\n                >\n                  <Checkbox\n                    checked={selectedItems.includes(option.value)}\n                    onChange={() => handleItemToggle(option.value)}\n                    aria-label={`Seleccionar ${option.label}`}\n                  />\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm font-medium text-foreground\">{option.label}</p>\n                    {option.description && (\n                      <p className=\"text-xs text-muted-foreground\">{option.description}</p>\n                    )}\n                  </div>\n                </div>\n              ))\n            )}\n          </div>\n          <div className=\"mt-2 text-xs text-muted-foreground\">\n            Mostrando {filteredSourceOptions.length} de {sourceOptions.length}\n          </div>\n        </div>\n\n        {/* Target Selection */}\n        <div>\n          <Select\n            label=\"Asignar a\"\n            options={targetOptions}\n            value={targetSelection}\n            onChange={(val) => setTargetSelection(val)}\n            placeholder=\"Selecciona el destino\"\n            searchable\n          />\n        </div>\n\n        {/* Assignment Summary */}\n        {summaryText && (\n          <div className=\"bg-primary/10 border border-primary/20 rounded-md p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Icon name=\"Info\" size={16} className=\"text-primary\" />\n              <p className=\"text-sm font-medium text-primary\">{summaryText}</p>\n            </div>\n          </div>\n        )}\n\n        {/* Action Buttons */}\n        <div className=\"flex items-center justify-end space-x-3 pt-4 border-top border-border\">\n          <Button variant=\"outline\" onClick={onClose}>\n            Cancelar\n          </Button>\n          <Button\n            variant=\"default\"\n            onClick={handleBulkAssign}\n            disabled={!canAssign}\n            loading={isProcessing}\n            iconName=\"Users\"\n            iconPosition=\"left\"\n          >\n            Asignar ({selectedItems.length})\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default BulkAssignmentPanel;\n","size_bytes":10514},"src/pages/construction-site-and-supervisor-management-hub/components/OrganizationalTree.jsx":{"content":"import React, { useCallback, useMemo, useRef, useState } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\n\nconst OrganizationalTree = ({\n  sites = [],\n  supervisors = [],\n  onNodeSelect,\n  selectedNode,\n  onDragDrop,\n  userRole = 'admin',\n}) => {\n  const [expandedNodes, setExpandedNodes] = useState(new Set(['root']));\n  const [draggedItem, setDraggedItem] = useState(null);\n  const [search, setSearch] = useState('');\n\n  const treeRef = useRef(null);\n\n  // --- Helpers ---\n  const toggleNode = useCallback((nodeId) => {\n    setExpandedNodes((prev) => {\n      const next = new Set(prev);\n      if (next.has(nodeId)) next.delete(nodeId);\n      else next.add(nodeId);\n      return next;\n    });\n  }, []);\n\n  // Combinaciones de drop permitidas (ajústalas a tu lógica)\n  const canDrop = useCallback((dragType, dropType) => {\n    // Reglas comunes:\n    if (dragType === dropType) return false;\n\n    // Mover sitio a supervisor o a \"unassigned\"\n    if (dragType === 'site' && (dropType === 'supervisor' || dropType === 'unassigned')) return true;\n\n    // (Opcional) mover supervisor dentro de root (para reordenar):\n    if (dragType === 'supervisor' && dropType === 'root') return true;\n\n    return false;\n  }, []);\n\n  const handleDragStart = (e, item, type) => {\n    if (userRole !== 'admin') return;\n    setDraggedItem({ item, type });\n    e.dataTransfer.effectAllowed = 'move';\n  };\n\n  const handleDragOver = (e, targetType) => {\n    if (!draggedItem || userRole !== 'admin') return;\n    if (!canDrop(draggedItem?.type, targetType)) return;\n    e.preventDefault();\n    e.dataTransfer.dropEffect = 'move';\n  };\n\n  const handleDrop = (e, targetItem, targetType) => {\n    e?.preventDefault?.();\n    if (!draggedItem || userRole !== 'admin') return;\n    if (!canDrop(draggedItem?.type, targetType)) return;\n    onDragDrop?.(draggedItem, { item: targetItem, type: targetType });\n    setDraggedItem(null);\n  };\n\n  // --- Filtro de búsqueda ---\n  const normalizedSearch = search.trim().toLowerCase();\n  const filteredSupervisors = useMemo(() => {\n    if (!normalizedSearch) return supervisors;\n    return supervisors.filter(\n      (s) =>\n        (s?.name || s?.full_name || '')\n          .toLowerCase()\n          .includes(normalizedSearch) ||\n        (s?.email || '').toLowerCase().includes(normalizedSearch)\n    );\n  }, [supervisors, normalizedSearch]);\n\n  // Agrupamos sitios por supervisorId; si no existe, van a \"unassigned\"\n  const groupedData = useMemo(() => {\n    const acc = {};\n    const passSearch = (txt = '') =>\n      !normalizedSearch || String(txt).toLowerCase().includes(normalizedSearch);\n\n    (sites || []).forEach((site) => {\n      // Si hay búsqueda, filtra por nombre/ubicación del sitio también\n      if (\n        normalizedSearch &&\n        !(\n          passSearch(site?.name) ||\n          passSearch(site?.location) ||\n          passSearch(site?.code)\n        )\n      ) {\n        // igual puede aparecer si su supervisor matchea búsqueda, así que no lo excluimos aquí\n        // dejamos que el match de supervisor lo muestre si corresponde\n      }\n\n      const sid = site?.supervisor?.id || 'unassigned';\n      if (!acc[sid]) acc[sid] = [];\n      acc[sid].push(site);\n    });\n\n    // Si hay búsqueda solo por supervisor, filtramos por los supervisores que matchean\n    if (normalizedSearch) {\n      const allowedSupervisorIds = new Set(filteredSupervisors.map((s) => s?.id));\n      // Mantén unassigned siempre que haya sitios que individualmente hagan match por nombre/ubicación\n      const filtered = {};\n      Object.entries(acc).forEach(([supId, list]) => {\n        if (supId === 'unassigned') {\n          filtered[supId] = list.filter(\n            (site) =>\n              passSearch(site?.name) ||\n              passSearch(site?.location) ||\n              passSearch(site?.code)\n          );\n          if (filtered[supId].length === 0) delete filtered[supId];\n        } else if (allowedSupervisorIds.has(supId)) {\n          // Si el supervisor matchea, dejamos todos sus sitios\n          filtered[supId] = list;\n        } else {\n          // Si el supervisor NO matchea, mostramos solo los sitios que por sí mismos matcheen\n          const onlyMatchingSites = list.filter(\n            (site) =>\n              passSearch(site?.name) ||\n              passSearch(site?.location) ||\n              passSearch(site?.code)\n          );\n          if (onlyMatchingSites.length > 0) filtered[supId] = onlyMatchingSites;\n        }\n      });\n      return filtered;\n    }\n\n    return acc;\n  }, [sites, filteredSupervisors, normalizedSearch]);\n\n  // Expandir/Colapsar todo\n  const expandAll = () => {\n    const allIds = ['root', ...filteredSupervisors.map((s) => s?.id)];\n    setExpandedNodes(new Set(allIds));\n  };\n  const collapseAll = () => setExpandedNodes(new Set(['root']));\n\n  // --- TreeNode ---\n  const TreeNode = ({\n    id,\n    label,\n    icon,\n    type,\n    data,\n    children,\n    level = 0,\n    isExpandable = false,\n    count = null,\n  }) => {\n    const isExpanded = expandedNodes.has(id);\n    const isSelected = selectedNode?.id === id && selectedNode?.type === type;\n    const isDragging = draggedItem?.item?.id === data?.id;\n\n    const onKeyDown = (e) => {\n      // Accesibilidad de árbol\n      if (e.key === 'ArrowRight' && isExpandable && !isExpanded) {\n        e.preventDefault();\n        toggleNode(id);\n      } else if (e.key === 'ArrowLeft' && isExpandable && isExpanded) {\n        e.preventDefault();\n        toggleNode(id);\n      } else if (e.key === 'Enter' || e.key === ' ') {\n        e.preventDefault();\n        onNodeSelect?.({ id, type, data });\n      }\n    };\n\n    return (\n      <div role=\"treeitem\" aria-expanded={!!isExpandable ? isExpanded : undefined}>\n        <div\n          className={`\n            flex items-center space-x-2 p-2 rounded-md cursor-pointer transition-all duration-150 ease-out-cubic outline-none\n            ${isSelected ? 'bg-primary text-primary-foreground' : 'hover:bg-muted'}\n            ${isDragging ? 'opacity-50' : ''}\n          `}\n          style={{ paddingLeft: `${level * 20 + 8}px` }}\n          tabIndex={0}\n          onKeyDown={onKeyDown}\n          onClick={() => onNodeSelect?.({ id, type, data })}\n          draggable={userRole === 'admin' && !!data}\n          onDragStart={(e) => handleDragStart(e, data, type)}\n          onDragOver={(e) => handleDragOver(e, type)}\n          onDrop={(e) => handleDrop(e, data, type)}\n        >\n          {isExpandable ? (\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"w-4 h-4 p-0\"\n              onClick={(e) => {\n                e.stopPropagation();\n                toggleNode(id);\n              }}\n              aria-label={isExpanded ? 'Colapsar' : 'Expandir'}\n              title={isExpanded ? 'Colapsar' : 'Expandir'}\n            >\n              <Icon name={isExpanded ? 'ChevronDown' : 'ChevronRight'} size={12} />\n            </Button>\n          ) : (\n            <div className=\"w-4\" />\n          )}\n\n          <Icon\n            name={icon}\n            size={16}\n            className={isSelected ? 'text-primary-foreground' : 'text-muted-foreground'}\n          />\n\n          <span\n            className={`text-sm font-medium ${\n              isSelected ? 'text-primary-foreground' : 'text-foreground'\n            }`}\n          >\n            {label}\n          </span>\n\n          {count !== null && (\n            <span\n              className={`ml-auto text-xs px-2 py-0.5 rounded-full ${\n                isSelected\n                  ? 'bg-primary-foreground/20 text-primary-foreground'\n                  : 'bg-muted text-muted-foreground'\n              }`}\n            >\n              {count}\n            </span>\n          )}\n        </div>\n\n        {isExpandable && isExpanded && children && <div className=\"ml-2\">{children}</div>}\n      </div>\n    );\n  };\n\n  const totalSites = sites?.length || 0;\n  const unassigned = groupedData?.unassigned || [];\n\n  return (\n    <div className=\"bg-card border border-border rounded-lg p-4 h-full overflow-y-auto\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-4\">\n        <h3 className=\"text-lg font-semibold text-foreground\">Estructura Organizacional</h3>\n        <div className=\"flex items-center gap-2\">\n          <input\n            type=\"search\"\n            placeholder=\"Buscar supervisor o sitio…\"\n            value={search}\n            onChange={(e) => setSearch(e.target.value)}\n            className=\"px-2 py-1 text-sm border border-border rounded\"\n            aria-label=\"Buscar en árbol\"\n          />\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={expandAll}\n            iconName=\"Expand\"\n            iconPosition=\"left\"\n            title=\"Expandir todo\"\n          >\n            Expandir\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={collapseAll}\n            iconName=\"Minimize2\"\n            iconPosition=\"left\"\n            title=\"Colapsar todo\"\n          >\n            Colapsar\n          </Button>\n        </div>\n      </div>\n\n      {/* Árbol */}\n      <div role=\"tree\" ref={treeRef} className=\"space-y-1\">\n        <TreeNode\n          id=\"root\"\n          label=\"AsistenciaPro\"\n          icon=\"Building\"\n          type=\"root\"\n          isExpandable={true}\n          count={totalSites}\n        >\n          {/* Supervisores con sus sitios */}\n          {filteredSupervisors.length > 0 ? (\n            filteredSupervisors.map((supervisor) => {\n              const sitesUnder = groupedData?.[supervisor?.id] || [];\n              const supLabel = supervisor?.name || supervisor?.full_name || 'Supervisor';\n              return (\n                <TreeNode\n                  key={supervisor?.id}\n                  id={supervisor?.id}\n                  label={supLabel}\n                  icon=\"UserCheck\"\n                  type=\"supervisor\"\n                  data={supervisor}\n                  level={1}\n                  isExpandable={(sitesUnder?.length || 0) > 0}\n                  count={sitesUnder?.length || 0}\n                >\n                  {sitesUnder.map((site) => (\n                    <TreeNode\n                      key={site?.id}\n                      id={site?.id}\n                      label={site?.name}\n                      icon=\"Building2\"\n                      type=\"site\"\n                      data={site}\n                      level={2}\n                      count={site?.employeeCount ?? null}\n                    />\n                  ))}\n                </TreeNode>\n              );\n            })\n          ) : (\n            <div className=\"px-3 py-2 text-xs text-muted-foreground\">\n              {normalizedSearch ? 'Sin coincidencias para la búsqueda' : 'Sin supervisores'}\n            </div>\n          )}\n\n          {/* Sitios sin supervisor */}\n          {unassigned?.length > 0 && (\n            <TreeNode\n              id=\"unassigned\"\n              label=\"Sitios sin supervisor\"\n              icon=\"AlertTriangle\"\n              type=\"unassigned\"\n              level={1}\n              isExpandable={true}\n              count={unassigned?.length}\n            >\n              {unassigned.map((site) => (\n                <TreeNode\n                  key={site?.id}\n                  id={site?.id}\n                  label={site?.name}\n                  icon=\"Building2\"\n                  type=\"site\"\n                  data={site}\n                  level={2}\n                  count={site?.employeeCount ?? null}\n                />\n              ))}\n            </TreeNode>\n          )}\n        </TreeNode>\n      </div>\n\n      {/* Hint DnD */}\n      {userRole === 'admin' && (\n        <div className=\"mt-4 p-3 bg-muted/50 rounded-md\">\n          <div className=\"flex items-center space-x-2 text-xs text-muted-foreground\">\n            <Icon name=\"Info\" size={12} />\n            <span>Arrastra y suelta para reorganizar. Permite: sitio → supervisor / sitio → sin supervisor.</span>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default OrganizationalTree;\n","size_bytes":12145},"src/pages/construction-site-and-supervisor-management-hub/components/QuickStatsPanel.jsx":{"content":"import React, { useMemo } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\n\nconst numberFmt = new Intl.NumberFormat('es-MX');\n\n/**\n * QuickStatsPanel\n * - sites: [{ id, name, location, status, employeeCount, progress, supervisor }]\n * - supervisors: [{ id, name, email, assignedSites, totalEmployees, experience, status }]\n */\nconst QuickStatsPanel = ({\n  sites = [],\n  supervisors = [],\n  onViewReports,\n  onExportData,\n  selectedNode,\n}) => {\n  // -------- Helpers\n  const safeNum = (v, d = 0) => (Number.isFinite(Number(v)) ? Number(v) : d);\n  const asPct = (v) => (Number.isFinite(Number(v)) ? `${v}%` : '—');\n\n  // -------- Estadísticas generales (memo)\n  const stats = useMemo(() => {\n    const totalSites = safeNum(sites?.length, 0);\n    const activeSites = safeNum(sites?.filter((s) => s?.status === 'active')?.length, 0);\n    const totalEmployees = safeNum(\n      sites?.reduce((sum, s) => sum + safeNum(s?.employeeCount, 0), 0),\n      0\n    );\n    const totalSupervisors = safeNum(supervisors?.length, 0);\n    const unassignedSites = safeNum(sites?.filter((s) => !s?.supervisor)?.length, 0);\n    const avgEmployeesPerSite =\n      totalSites > 0 ? Math.round(totalEmployees / totalSites) : 0;\n\n    return {\n      totalSites,\n      activeSites,\n      totalEmployees,\n      totalSupervisors,\n      unassignedSites,\n      avgEmployeesPerSite,\n    };\n  }, [sites, supervisors]);\n\n  // -------- Resumen del nodo seleccionado (memo)\n  const selectedStats = useMemo(() => {\n    if (!selectedNode) return null;\n\n    if (selectedNode?.type === 'site') {\n      const d = selectedNode?.data || {};\n      return {\n        title: d?.name || 'Sitio',\n        subtitle: d?.location || 'Ubicación no especificada',\n        stats: [\n          { label: 'Empleados', value: safeNum(d?.employeeCount, 0), icon: 'Users' },\n          { label: 'Progreso', value: asPct(d?.progress), icon: 'TrendingUp' },\n          { label: 'Estado', value: d?.status || '—', icon: 'Activity' },\n          { label: 'Supervisor', value: d?.supervisor?.name || 'Sin asignar', icon: 'UserCheck' },\n        ],\n      };\n    }\n\n    if (selectedNode?.type === 'supervisor') {\n      const d = selectedNode?.data || {};\n      return {\n        title: d?.name || 'Supervisor',\n        subtitle: d?.email || '—',\n        stats: [\n          { label: 'Sitios', value: safeNum(d?.assignedSites, 0), icon: 'Building2' },\n          { label: 'Empleados', value: safeNum(d?.totalEmployees, 0), icon: 'Users' },\n          { label: 'Experiencia', value: Number.isFinite(d?.experience) ? `${d?.experience} años` : '—', icon: 'Award' },\n          { label: 'Estado', value: d?.status || '—', icon: 'Activity' },\n        ],\n      };\n    }\n\n    return null;\n  }, [selectedNode]);\n\n  // -------- Color map (Tailwind seguro)\n  const colorMap = {\n    primary: { bg: 'bg-primary/10', text: 'text-primary', badge: 'bg-primary/10 text-primary' },\n    success: { bg: 'bg-success/10', text: 'text-success', badge: 'bg-success/10 text-success' },\n    warning: { bg: 'bg-warning/10', text: 'text-warning', badge: 'bg-warning/10 text-warning' },\n    error:   { bg: 'bg-error/10',   text: 'text-error',   badge: 'bg-error/10 text-error' },\n    secondary: { bg: 'bg-secondary/10', text: 'text-secondary', badge: 'bg-secondary/10 text-secondary' },\n    muted: { bg: 'bg-muted', text: 'text-muted-foreground', badge: 'bg-muted text-muted-foreground' },\n  };\n\n  const StatCard = ({ icon, label, value, color = 'primary' }) => {\n    const c = colorMap[color] || colorMap.muted;\n    return (\n      <div className=\"bg-card border border-border rounded-lg p-4\">\n        <div className=\"flex items-center space-x-3\">\n          <div className={`flex items-center justify-center w-10 h-10 rounded-lg ${c.bg}`}>\n            <Icon name={icon} size={20} className={c.text} />\n          </div>\n          <div>\n            <p className=\"text-2xl font-bold text-foreground\">{numberFmt.format(safeNum(value, 0))}</p>\n            <p className=\"text-sm text-muted-foreground\">{label}</p>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Selected Node Details */}\n      {selectedStats && (\n        <div className=\"bg-card border border-border rounded-lg p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div>\n              <h3 className=\"text-lg font-semibold text-foreground\">{selectedStats.title}</h3>\n              <p className=\"text-sm text-muted-foreground\">{selectedStats.subtitle}</p>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => onViewReports?.(selectedNode)}\n                iconName=\"BarChart3\"\n                iconPosition=\"left\"\n              >\n                Ver reportes\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => onExportData?.(selectedNode)}\n                iconName=\"Download\"\n                iconPosition=\"left\"\n              >\n                Exportar\n              </Button>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            {selectedStats.stats.map((stat, i) => (\n              <div key={i} className=\"flex items-center space-x-3 p-3 bg-muted/50 rounded-md\">\n                <Icon name={stat.icon} size={16} className=\"text-muted-foreground\" />\n                <div>\n                  <p className=\"text-sm font-medium text-foreground\">\n                    {typeof stat.value === 'number' ? numberFmt.format(stat.value) : stat.value}\n                  </p>\n                  <p className=\"text-xs text-muted-foreground\">{stat.label}</p>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Overall Statistics */}\n      <div className=\"bg-card border border-border rounded-lg p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-semibold text-foreground\">Estadísticas Generales</h3>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => onExportData?.({ type: 'all' })}\n            iconName=\"Download\"\n            iconPosition=\"left\"\n          >\n            Exportar todo\n          </Button>\n        </div>\n\n        <div className=\"grid grid-cols-1 gap-4\">\n          <StatCard icon=\"Building2\" label=\"Total de sitios\" value={stats.totalSites} color=\"primary\" />\n          <StatCard icon=\"Play\" label=\"Sitios activos\" value={stats.activeSites} color=\"success\" />\n          <StatCard icon=\"Users\" label=\"Total empleados\" value={stats.totalEmployees} color=\"secondary\" />\n          <StatCard icon=\"UserCheck\" label=\"Supervisores\" value={stats.totalSupervisors} color=\"warning\" />\n        </div>\n      </div>\n\n      {/* Unassigned Alert */}\n      {stats.unassignedSites > 0 && (\n        <div className=\"bg-warning/10 border border-warning/20 rounded-lg p-4\">\n          <div className=\"flex items-center space-x-3\">\n            <Icon name=\"AlertTriangle\" size={20} className=\"text-warning\" />\n            <div>\n              <p className=\"text-sm font-medium text-warning\">\n                {numberFmt.format(stats.unassignedSites)} sitio\n                {stats.unassignedSites > 1 ? 's' : ''} sin supervisor\n              </p>\n              <p className=\"text-xs text-warning/80\">Asigna supervisores para mejorar la gestión</p>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Quick Actions */}\n      <div className=\"bg-card border border-border rounded-lg p-6\">\n        <h3 className=\"text-lg font-semibold text-foreground mb-4\">Acciones Rápidas</h3>\n        <div className=\"space-y-3\">\n          <Button\n            variant=\"outline\"\n            fullWidth\n            onClick={() => onViewReports?.({ type: 'attendance' })}\n            iconName=\"Clock\"\n            iconPosition=\"left\"\n          >\n            Reportes de asistencia\n          </Button>\n          <Button\n            variant=\"outline\"\n            fullWidth\n            onClick={() => onViewReports?.({ type: 'payroll' })}\n            iconName=\"Calculator\"\n            iconPosition=\"left\"\n          >\n            Resúmenes de nómina\n          </Button>\n          <Button\n            variant=\"outline\"\n            fullWidth\n            onClick={() => onViewReports?.({ type: 'incidents' })}\n            iconName=\"AlertTriangle\"\n            iconPosition=\"left\"\n          >\n            Estadísticas de incidentes\n          </Button>\n        </div>\n      </div>\n\n      {/* System Integration Status (mock) */}\n      <div className=\"bg-card border border-border rounded-lg p-6\">\n        <h3 className=\"text-lg font-semibold text-foreground mb-4\">Estado de Integración</h3>\n        <div className=\"space-y-3\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              <Icon name=\"Database\" size={16} className=\"text-success\" />\n              <span className=\"text-sm text-foreground\">Sistema de empleados</span>\n            </div>\n            <span className=\"text-xs text-success bg-success/10 px-2 py-1 rounded-full\">Sincronizado</span>\n          </div>\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              <Icon name=\"Calendar\" size={16} className=\"text-success\" />\n              <span className=\"text-sm text-foreground\">Gestión de proyectos</span>\n            </div>\n            <span className=\"text-xs text-success bg-success/10 px-2 py-1 rounded-full\">Conectado</span>\n          </div>\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              <Icon name=\"MapPin\" size={16} className=\"text-warning\" />\n              <span className=\"text-sm text-foreground\">Geolocalización</span>\n            </div>\n            <span className=\"text-xs text-warning bg-warning/10 px-2 py-1 rounded-full\">Parcial</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default QuickStatsPanel;\n","size_bytes":10281},"src/pages/construction-site-and-supervisor-management-hub/components/SiteCard.jsx":{"content":"import React, { useState } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\n\nconst SiteCard = ({ \n  site, \n  onEdit, \n  onDelete, \n  onViewDetails, \n  onAssignSupervisor,\n  userRole = 'admin'\n}) => {\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  const getStatusColor = (status) => {\n    const colors = {\n      'active': 'bg-success text-success-foreground',\n      'planning': 'bg-warning text-warning-foreground',\n      'completed': 'bg-secondary text-secondary-foreground',\n      'suspended': 'bg-error text-error-foreground'\n    };\n    return colors?.[status] || colors?.active;\n  };\n\n  const getStatusIcon = (status) => {\n    const icons = {\n      'active': 'Play',\n      'planning': 'Clock',\n      'completed': 'CheckCircle',\n      'suspended': 'Pause'\n    };\n    return icons?.[status] || 'Building2';\n  };\n\n  const formatDate = (dateString) => {\n    return new Date(dateString)?.toLocaleDateString('es-ES', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric'\n    });\n  };\n\n  return (\n    <div className=\"bg-card border border-border rounded-lg p-6 hover:shadow-md transition-all duration-200 ease-out-cubic\">\n      {/* Header */}\n      <div className=\"flex items-start justify-between mb-4\">\n        <div className=\"flex-1\">\n          <div className=\"flex items-center space-x-3 mb-2\">\n            <div className=\"flex items-center justify-center w-10 h-10 bg-primary/10 rounded-lg\">\n              <Icon name=\"Building2\" size={20} className=\"text-primary\" />\n            </div>\n            <div>\n              <h3 className=\"text-lg font-semibold text-foreground\">{site?.name}</h3>\n              <p className=\"text-sm text-muted-foreground\">Código: {site?.code}</p>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n            <div className=\"flex items-center space-x-1\">\n              <Icon name=\"MapPin\" size={14} />\n              <span>{site?.location}</span>\n            </div>\n            <div className=\"flex items-center space-x-1\">\n              <Icon name=\"Users\" size={14} />\n              <span>{site?.employeeCount} empleados</span>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"flex items-center space-x-2\">\n          <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(site?.status)}`}>\n            <Icon name={getStatusIcon(site?.status)} size={12} className=\"mr-1\" />\n            {site?.status === 'active' ? 'Activo' : \n             site?.status === 'planning' ? 'Planificación' :\n             site?.status === 'completed' ? 'Completado' : 'Suspendido'}\n          </span>\n          \n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => setIsExpanded(!isExpanded)}\n          >\n            <Icon name={isExpanded ? 'ChevronUp' : 'ChevronDown'} size={16} />\n          </Button>\n        </div>\n      </div>\n      {/* Progress Bar */}\n      <div className=\"mb-4\">\n        <div className=\"flex items-center justify-between text-sm mb-1\">\n          <span className=\"text-muted-foreground\">Progreso del proyecto</span>\n          <span className=\"font-medium text-foreground\">{site?.progress}%</span>\n        </div>\n        <div className=\"w-full bg-muted rounded-full h-2\">\n          <div \n            className=\"bg-primary h-2 rounded-full transition-all duration-300 ease-out-cubic\"\n            style={{ width: `${site?.progress}%` }}\n          />\n        </div>\n      </div>\n      {/* Supervisor Info */}\n      <div className=\"flex items-center justify-between mb-4\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-8 h-8 bg-secondary rounded-full flex items-center justify-center\">\n            <Icon name=\"UserCheck\" size={16} className=\"text-secondary-foreground\" />\n          </div>\n          <div>\n            <p className=\"text-sm font-medium text-foreground\">\n              {site?.supervisor ? site?.supervisor?.name : 'Sin supervisor asignado'}\n            </p>\n            {site?.supervisor && (\n              <p className=\"text-xs text-muted-foreground\">{site?.supervisor?.email}</p>\n            )}\n          </div>\n        </div>\n        \n        {userRole === 'admin' && (\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => onAssignSupervisor(site)}\n            iconName=\"UserPlus\"\n            iconPosition=\"left\"\n          >\n            {site?.supervisor ? 'Cambiar' : 'Asignar'}\n          </Button>\n        )}\n      </div>\n      {/* Expanded Details */}\n      {isExpanded && (\n        <div className=\"border-t border-border pt-4 space-y-4\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <p className=\"text-xs text-muted-foreground mb-1\">Fecha de inicio</p>\n              <p className=\"text-sm font-medium text-foreground\">{formatDate(site?.startDate)}</p>\n            </div>\n            <div>\n              <p className=\"text-xs text-muted-foreground mb-1\">Fecha estimada de finalización</p>\n              <p className=\"text-sm font-medium text-foreground\">{formatDate(site?.endDate)}</p>\n            </div>\n          </div>\n\n          <div>\n            <p className=\"text-xs text-muted-foreground mb-1\">Descripción</p>\n            <p className=\"text-sm text-foreground\">{site?.description}</p>\n          </div>\n\n          <div className=\"flex items-center space-x-2 pt-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => onViewDetails(site)}\n              iconName=\"Eye\"\n              iconPosition=\"left\"\n            >\n              Ver detalles\n            </Button>\n            \n            {userRole === 'admin' && (\n              <>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => onEdit(site)}\n                  iconName=\"Edit\"\n                  iconPosition=\"left\"\n                >\n                  Editar\n                </Button>\n                \n                <Button\n                  variant=\"destructive\"\n                  size=\"sm\"\n                  onClick={() => onDelete(site)}\n                  iconName=\"Trash2\"\n                  iconPosition=\"left\"\n                >\n                  Eliminar\n                </Button>\n              </>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SiteCard;","size_bytes":6549},"src/pages/construction-site-and-supervisor-management-hub/components/SupervisorCard.jsx":{"content":"import React, { useState } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\n\nconst SupervisorCard = ({ \n  supervisor, \n  onEdit, \n  onDelete, \n  onViewDetails, \n  onAssignSites,\n  userRole = 'admin'\n}) => {\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  const getStatusColor = (status) => {\n    const colors = {\n      'active': 'bg-success text-success-foreground',\n      'inactive': 'bg-secondary text-secondary-foreground',\n      'vacation': 'bg-warning text-warning-foreground'\n    };\n    return colors?.[status] || colors?.active;\n  };\n\n  const getInitials = (name) => {\n    return name\n      .split(' ')?.map(word => word?.charAt(0))?.join('')?.toUpperCase()?.slice(0, 2);\n  };\n\n  return (\n    <div className=\"bg-card border border-border rounded-lg p-6 hover:shadow-md transition-all duration-200 ease-out-cubic\">\n      {/* Header */}\n      <div className=\"flex items-start justify-between mb-4\">\n        <div className=\"flex items-center space-x-4\">\n          {supervisor?.avatar ? (\n            <img\n              src={supervisor?.avatar}\n              alt={supervisor?.name}\n              className=\"w-12 h-12 rounded-full object-cover\"\n            />\n          ) : (\n            <div className=\"w-12 h-12 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-sm font-medium\">\n              {getInitials(supervisor?.name)}\n            </div>\n          )}\n          \n          <div>\n            <h3 className=\"text-lg font-semibold text-foreground\">{supervisor?.name}</h3>\n            <p className=\"text-sm text-muted-foreground\">{supervisor?.email}</p>\n            <div className=\"flex items-center space-x-2 mt-1\">\n              <Icon name=\"Phone\" size={12} className=\"text-muted-foreground\" />\n              <span className=\"text-xs text-muted-foreground\">{supervisor?.phone}</span>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"flex items-center space-x-2\">\n          <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(supervisor?.status)}`}>\n            {supervisor?.status === 'active' ? 'Activo' : \n             supervisor?.status === 'inactive' ? 'Inactivo' : 'Vacaciones'}\n          </span>\n          \n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => setIsExpanded(!isExpanded)}\n          >\n            <Icon name={isExpanded ? 'ChevronUp' : 'ChevronDown'} size={16} />\n          </Button>\n        </div>\n      </div>\n      {/* Stats */}\n      <div className=\"grid grid-cols-3 gap-4 mb-4\">\n        <div className=\"text-center\">\n          <p className=\"text-2xl font-bold text-primary\">{supervisor?.assignedSites}</p>\n          <p className=\"text-xs text-muted-foreground\">Sitios asignados</p>\n        </div>\n        <div className=\"text-center\">\n          <p className=\"text-2xl font-bold text-success\">{supervisor?.totalEmployees}</p>\n          <p className=\"text-xs text-muted-foreground\">Empleados</p>\n        </div>\n        <div className=\"text-center\">\n          <p className=\"text-2xl font-bold text-warning\">{supervisor?.experience}</p>\n          <p className=\"text-xs text-muted-foreground\">Años exp.</p>\n        </div>\n      </div>\n      {/* Sites Preview */}\n      <div className=\"mb-4\">\n        <p className=\"text-sm font-medium text-foreground mb-2\">Sitios supervisados</p>\n        <div className=\"flex flex-wrap gap-2\">\n          {supervisor?.sites?.slice(0, 3)?.map((site, index) => (\n            <span\n              key={index}\n              className=\"inline-flex items-center px-2 py-1 bg-muted text-muted-foreground rounded-md text-xs\"\n            >\n              <Icon name=\"Building2\" size={12} className=\"mr-1\" />\n              {site}\n            </span>\n          ))}\n          {supervisor?.sites?.length > 3 && (\n            <span className=\"inline-flex items-center px-2 py-1 bg-muted text-muted-foreground rounded-md text-xs\">\n              +{supervisor?.sites?.length - 3} más\n            </span>\n          )}\n        </div>\n      </div>\n      {/* Expanded Details */}\n      {isExpanded && (\n        <div className=\"border-t border-border pt-4 space-y-4\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <p className=\"text-xs text-muted-foreground mb-1\">Fecha de contratación</p>\n              <p className=\"text-sm font-medium text-foreground\">\n                {new Date(supervisor.hireDate)?.toLocaleDateString('es-ES')}\n              </p>\n            </div>\n            <div>\n              <p className=\"text-xs text-muted-foreground mb-1\">Especialización</p>\n              <p className=\"text-sm font-medium text-foreground\">{supervisor?.specialization}</p>\n            </div>\n          </div>\n\n          <div>\n            <p className=\"text-xs text-muted-foreground mb-1\">Certificaciones</p>\n            <div className=\"flex flex-wrap gap-1\">\n              {supervisor?.certifications?.map((cert, index) => (\n                <span\n                  key={index}\n                  className=\"inline-flex items-center px-2 py-1 bg-primary/10 text-primary rounded-md text-xs\"\n                >\n                  <Icon name=\"Award\" size={12} className=\"mr-1\" />\n                  {cert}\n                </span>\n              ))}\n            </div>\n          </div>\n\n          <div>\n            <p className=\"text-xs text-muted-foreground mb-1\">Todos los sitios</p>\n            <div className=\"grid grid-cols-2 gap-2\">\n              {supervisor?.sites?.map((site, index) => (\n                <div key={index} className=\"flex items-center space-x-2 p-2 bg-muted rounded-md\">\n                  <Icon name=\"Building2\" size={14} className=\"text-muted-foreground\" />\n                  <span className=\"text-sm text-foreground\">{site}</span>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"flex items-center space-x-2 pt-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => onViewDetails(supervisor)}\n              iconName=\"Eye\"\n              iconPosition=\"left\"\n            >\n              Ver detalles\n            </Button>\n            \n            {userRole === 'admin' && (\n              <>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => onAssignSites(supervisor)}\n                  iconName=\"Building2\"\n                  iconPosition=\"left\"\n                >\n                  Asignar sitios\n                </Button>\n                \n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => onEdit(supervisor)}\n                  iconName=\"Edit\"\n                  iconPosition=\"left\"\n                >\n                  Editar\n                </Button>\n                \n                <Button\n                  variant=\"destructive\"\n                  size=\"sm\"\n                  onClick={() => onDelete(supervisor)}\n                  iconName=\"Trash2\"\n                  iconPosition=\"left\"\n                >\n                  Eliminar\n                </Button>\n              </>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SupervisorCard;","size_bytes":7354},"src/pages/employee-attendance-dashboard/components/AttendanceActionButtons.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport Button from '../../../components/ui/Button';\nimport { Clock, Coffee, LogOut, LogIn, CheckCircle, MapPin, AlertTriangle } from 'lucide-react';\nimport { attendanceService } from '../../../services/attendanceService';\nimport { useAuth } from '../../../contexts/AuthContext';\nimport Icon from '../../../components/AppIcon';\n\nexport function AttendanceActionButtons({ siteId, onAttendanceUpdate }) {\n  const { user } = useAuth()\n  const [todayRecord, setTodayRecord] = useState(null)\n  const [loading, setLoading] = useState(true)\n  const [actionLoading, setActionLoading] = useState(null)\n  const [message, setMessage] = useState('')\n  const [locationError, setLocationError] = useState('')\n  const [gpsAccuracy, setGpsAccuracy] = useState(null)\n\n  useEffect(() => {\n    if (user?.id) {\n      loadTodayAttendance()\n    }\n  }, [user?.id])\n\n  const loadTodayAttendance = async () => {\n    try {\n      setLoading(true)\n      const result = await attendanceService?.getTodayAttendance(user?.id)\n      \n      if (result?.ok) {\n        setTodayRecord(result?.data)\n      }\n    } catch (error) {\n      console.error('Error loading today attendance:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleAttendanceAction = async (action) => {\n    if (!user?.id || !siteId) {\n      setMessage('Error: Usuario o sitio no disponible')\n      return\n    }\n\n    setActionLoading(action)\n    setMessage('')\n    setLocationError('')\n\n    try {\n      // Get high-accuracy location\n      let location = null\n      let accuracy = null\n      \n      if (navigator.geolocation) {\n        try {\n          const position = await new Promise((resolve, reject) => {\n            navigator.geolocation.getCurrentPosition(resolve, reject, {\n              timeout: 10000,\n              enableHighAccuracy: true,\n              maximumAge: 30000\n            })\n          })\n          \n          location = `${position?.coords?.latitude}, ${position?.coords?.longitude}`\n          accuracy = position?.coords?.accuracy\n          setGpsAccuracy(accuracy)\n          \n          // Check GPS accuracy\n          if (accuracy > 50) {\n            setLocationError(`⚠️ Precisión GPS baja: ${Math.round(accuracy)}m. Se recomienda mejor señal GPS.`)\n          }\n          \n        } catch (error) {\n          console.log('GPS error:', error)\n          setLocationError('❌ No se pudo obtener la ubicación GPS. Verifique que tenga permisos de ubicación habilitados.')\n          \n          // For demo purposes, allow registration without GPS but show warning\n          if (error?.code === 1) { // Permission denied\n            setLocationError('⚠️ Permisos de ubicación denegados. El registro se realizará sin validación GPS.')\n          } else if (error?.code === 2) { // Position unavailable\n            setLocationError('⚠️ Ubicación no disponible. Verifique su conexión GPS.')\n          } else if (error?.code === 3) { // Timeout\n            setLocationError('⚠️ Tiempo de espera GPS agotado. El registro se realizará sin validación.')\n          }\n        }\n      } else {\n        setLocationError('❌ GPS no soportado en este dispositivo.')\n      }\n\n      const result = await attendanceService?.registerAttendance(\n        user?.id,\n        siteId,\n        action,\n        location\n      )\n\n      if (result?.ok) {\n        setTodayRecord(result?.data)\n        \n        let successMsg = getActionSuccessMessage(action)\n        \n        // Add location validation info to success message\n        if (result?.validation) {\n          if (result?.validation?.dentro_del_rango) {\n            successMsg += ` ✅ Ubicación validada (${result?.validation?.distancia_metros}m)`\n          }\n        }\n        \n        if (result?.locationError) {\n          successMsg += ` ⚠️ ${result?.locationError}`\n        }\n        \n        setMessage(successMsg)\n        onAttendanceUpdate?.(result?.data)\n        \n        // Clear message after 5 seconds\n        setTimeout(() => {\n          setMessage('')\n          setLocationError('')\n        }, 5000)\n      } else {\n        setMessage(`❌ ${result?.error}`)\n        \n        // Show validation details if available\n        if (result?.validation) {\n          setLocationError(\n            `Distancia actual: ${result?.validation?.distancia_metros}m, ` +\n            `Radio permitido: ${result?.validation?.radio_permitido}m`\n          )\n        }\n      }\n    } catch (error) {\n      setMessage('❌ Error al registrar asistencia')\n      console.error('Attendance action error:', error)\n    } finally {\n      setActionLoading(null)\n    }\n  }\n\n  const getActionSuccessMessage = (action) => {\n    const messages = {\n      entrada: '✅ Entrada registrada correctamente',\n      inicio_comida: '🍽️ Inicio de comida registrado',\n      fin_comida: '✅ Fin de comida registrado',\n      salida: '👋 Salida registrada correctamente'\n    }\n    return messages?.[action] || 'Acción registrada';\n  }\n\n  const getNextAction = () => {\n    if (!todayRecord) return 'entrada'\n    \n    if (!todayRecord?.entrada) return 'entrada'\n    if (!todayRecord?.inicio_comida) return 'inicio_comida'\n    if (!todayRecord?.fin_comida) return 'fin_comida'\n    if (!todayRecord?.salida) return 'salida'\n    \n    return null // All actions completed\n  }\n\n  const getActionConfig = (action) => {\n    const configs = {\n      entrada: {\n        label: 'Registrar Entrada',\n        icon: LogIn,\n        color: 'bg-green-600 hover:bg-green-700',\n        description: 'Marca tu llegada al trabajo'\n      },\n      inicio_comida: {\n        label: 'Inicio Comida',\n        icon: Coffee,\n        color: 'bg-orange-600 hover:bg-orange-700',\n        description: 'Marca el inicio de tu hora de comida'\n      },\n      fin_comida: {\n        label: 'Fin Comida',\n        icon: Coffee,\n        color: 'bg-blue-600 hover:bg-blue-700',\n        description: 'Marca el fin de tu hora de comida'\n      },\n      salida: {\n        label: 'Registrar Salida',\n        icon: LogOut,\n        color: 'bg-red-600 hover:bg-red-700',\n        description: 'Marca tu salida del trabajo'\n      }\n    }\n    return configs?.[action];\n  }\n\n  const formatTime = (timestamp) => {\n    if (!timestamp) return null\n    return new Date(timestamp)?.toLocaleTimeString('es-MX', {\n      hour: '2-digit',\n      minute: '2-digit',\n      hour12: true\n    });\n  }\n\n  if (loading) {\n    return (\n      <div className=\"bg-white rounded-lg shadow-md p-6\">\n        <div className=\"flex items-center justify-center py-8\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n          <span className=\"ml-2 text-gray-600\">Cargando estado de asistencia...</span>\n        </div>\n      </div>\n    )\n  }\n\n  const nextAction = getNextAction()\n  const isCompleted = nextAction === null\n\n  return (\n    <div className=\"bg-white rounded-lg shadow-md p-6\">\n      <div className=\"text-center mb-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n          Control de Asistencia\n        </h3>\n        <p className=\"text-sm text-gray-600\">\n          {new Date()?.toLocaleDateString('es-MX', {\n            weekday: 'long',\n            year: 'numeric',\n            month: 'long',\n            day: 'numeric'\n          })}\n        </p>\n      </div>\n\n      {/* Location Status */}\n      {(gpsAccuracy || locationError) && (\n        <div className=\"mb-4 p-3 bg-yellow-50 border border-yellow-200 rounded-md\">\n          <div className=\"flex items-start space-x-2\">\n            <MapPin className=\"h-4 w-4 text-yellow-600 mt-0.5\" />\n            <div className=\"text-sm\">\n              {gpsAccuracy && (\n                <p className=\"text-yellow-800\">\n                  Precisión GPS: {Math.round(gpsAccuracy)}m\n                  {gpsAccuracy <= 20 && <span className=\"text-green-600\"> ✅ Excelente</span>}\n                  {gpsAccuracy > 20 && gpsAccuracy <= 50 && <span className=\"text-yellow-600\"> ⚠️ Aceptable</span>}\n                  {gpsAccuracy > 50 && <span className=\"text-red-600\"> ❌ Baja</span>}\n                </p>\n              )}\n              {locationError && (\n                <p className=\"text-yellow-800 mt-1\">{locationError}</p>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Message Display */}\n      {message && (\n        <div className={`mb-4 p-3 rounded-md ${\n          message?.includes('❌') \n            ? 'bg-red-50 border border-red-200' :'bg-blue-50 border border-blue-200'\n        }`}>\n          <p className={`text-sm text-center ${\n            message?.includes('❌') ? 'text-red-800' : 'text-blue-800'\n          }`}>\n            {message}\n          </p>\n        </div>\n      )}\n\n      {/* Current Status */}\n      <div className=\"mb-6 space-y-2\">\n        <div className=\"grid grid-cols-2 gap-3 text-sm\">\n          <div className=\"flex items-center space-x-2\">\n            <LogIn className={`h-4 w-4 ${todayRecord?.entrada ? 'text-green-600' : 'text-gray-400'}`} />\n            <span className={todayRecord?.entrada ? 'text-green-600' : 'text-gray-400'}>\n              Entrada: {formatTime(todayRecord?.entrada) || 'Pendiente'}\n            </span>\n            {todayRecord?.entrada && todayRecord?.dentro_del_rango && (\n              <CheckCircle className=\"h-3 w-3 text-green-500\" title=\"Ubicación validada\" />\n            )}\n            {todayRecord?.entrada && todayRecord?.dentro_del_rango === false && (\n              <AlertTriangle className=\"h-3 w-3 text-red-500\" title=\"Fuera del rango permitido\" />\n            )}\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            <Coffee className={`h-4 w-4 ${todayRecord?.inicio_comida ? 'text-orange-600' : 'text-gray-400'}`} />\n            <span className={todayRecord?.inicio_comida ? 'text-orange-600' : 'text-gray-400'}>\n              Comida: {formatTime(todayRecord?.inicio_comida) || 'Pendiente'}\n            </span>\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            <Coffee className={`h-4 w-4 ${todayRecord?.fin_comida ? 'text-blue-600' : 'text-gray-400'}`} />\n            <span className={todayRecord?.fin_comida ? 'text-blue-600' : 'text-gray-400'}>\n              Regreso: {formatTime(todayRecord?.fin_comida) || 'Pendiente'}\n            </span>\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            <LogOut className={`h-4 w-4 ${todayRecord?.salida ? 'text-red-600' : 'text-gray-400'}`} />\n            <span className={todayRecord?.salida ? 'text-red-600' : 'text-gray-400'}>\n              Salida: {formatTime(todayRecord?.salida) || 'Pendiente'}\n            </span>\n            {todayRecord?.salida && todayRecord?.dentro_del_rango && (\n              <CheckCircle className=\"h-3 w-3 text-green-500\" title=\"Ubicación validada\" />\n            )}\n            {todayRecord?.salida && todayRecord?.dentro_del_rango === false && (\n              <AlertTriangle className=\"h-3 w-3 text-red-500\" title=\"Fuera del rango permitido\" />\n            )}\n          </div>\n        </div>\n        \n        {/* GPS validation info */}\n        {todayRecord?.distancia_metros && (\n          <div className=\"mt-3 p-2 bg-gray-50 rounded-md\">\n            <div className=\"flex items-center justify-center space-x-2 text-xs\">\n              <MapPin className=\"h-3 w-3 text-gray-600\" />\n              <span className=\"text-gray-700\">\n                Distancia al sitio: {todayRecord?.distancia_metros}m\n                {todayRecord?.dentro_del_rango ? (\n                  <span className=\"text-green-600 ml-1\">✅ Dentro del rango</span>\n                ) : (\n                  <span className=\"text-red-600 ml-1\">❌ Fuera del rango</span>\n                )}\n              </span>\n            </div>\n          </div>\n        )}\n        \n        {todayRecord?.total_hours && (\n          <div className=\"mt-3 p-3 bg-gray-50 rounded-md\">\n            <div className=\"flex items-center justify-center space-x-2\">\n              <Clock className=\"h-4 w-4 text-gray-600\" />\n              <span className=\"text-sm font-medium text-gray-900\">\n                Horas trabajadas hoy: {todayRecord?.total_hours}h\n              </span>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Action Button */}\n      {isCompleted ? (\n        <div className=\"text-center py-4\">\n          <div className=\"flex items-center justify-center space-x-2 text-green-600 mb-2\">\n            <CheckCircle className=\"h-5 w-5\" />\n            <span className=\"font-medium\">Jornada completada</span>\n          </div>\n          <p className=\"text-sm text-gray-600\">\n            Has registrado todos los horarios para hoy\n          </p>\n        </div>\n      ) : (\n        <div className=\"space-y-3\">\n          {(() => {\n            const config = getActionConfig(nextAction)\n            const Icon = config?.icon\n            \n            return (\n              <>\n                <Button\n                  onClick={() => handleAttendanceAction(nextAction)}\n                  disabled={actionLoading !== null}\n                  className={`w-full ${config?.color} text-white py-3 px-4 rounded-md font-medium transition-colors`}\n                >\n                  {actionLoading === nextAction ? (\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n                      <span>Registrando...</span>\n                    </div>\n                  ) : (\n                    <div className=\"flex items-center space-x-2\">\n                      <Icon className=\"h-4 w-4\" />\n                      <span>{config?.label}</span>\n                    </div>\n                  )}\n                </Button>\n                <p className=\"text-xs text-gray-500 text-center\">\n                  {config?.description}\n                </p>\n              </>\n            );\n          })()}\n        </div>\n      )}\n\n      {/* GPS Requirements Notice */}\n      <div className=\"mt-4 p-3 bg-blue-50 border border-blue-200 rounded-md\">\n        <div className=\"flex items-start space-x-2\">\n          <MapPin className=\"h-4 w-4 text-blue-600 mt-0.5\" />\n          <div className=\"text-xs text-blue-800\">\n            <p className=\"font-medium mb-1\">📍 Validación GPS Activada</p>\n            <ul className=\"space-y-1 text-blue-700\">\n              <li>• Se registrará tu ubicación GPS actual</li>\n              <li>• Debes estar dentro del área de trabajo asignada</li>\n              <li>• La precisión GPS debe ser menor a 50 metros</li>\n              <li>• Si estás fuera del área, el registro será rechazado</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default AttendanceActionButtons;","size_bytes":14843},"src/pages/employee-attendance-dashboard/components/HistoricalAttendanceViewer.jsx":{"content":"import React, { useState } from 'react';\nimport Button from '../../../components/ui/Button';\nimport Select from '../../../components/ui/Select';\n\n\nconst HistoricalAttendanceViewer = ({ \n  onDateRangeChange = () => {},\n  onExportData = () => {}\n}) => {\n  const [selectedPeriod, setSelectedPeriod] = useState('current_week');\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 10;\n\n  // Mock historical data\n  const mockHistoricalData = [\n    {\n      date: '2025-01-27',\n      dayName: 'Lunes',\n      clockIn: '08:00',\n      clockOut: '17:30',\n      totalHours: 8.5,\n      overtimeHours: 0.5,\n      status: 'complete',\n      site: 'Obra Central',\n      supervisor: 'Carlos Mendez'\n    },\n    {\n      date: '2025-01-26',\n      dayName: 'Domingo',\n      clockIn: null,\n      clockOut: null,\n      totalHours: 0,\n      overtimeHours: 0,\n      status: 'weekend',\n      site: 'Obra Central',\n      supervisor: 'Carlos Mendez'\n    },\n    {\n      date: '2025-01-25',\n      dayName: 'Sábado',\n      clockIn: '09:00',\n      clockOut: '14:00',\n      totalHours: 5,\n      overtimeHours: 0,\n      status: 'complete',\n      site: 'Obra Central',\n      supervisor: 'Carlos Mendez'\n    },\n    {\n      date: '2025-01-24',\n      dayName: 'Viernes',\n      clockIn: '07:45',\n      clockOut: '18:15',\n      totalHours: 9.5,\n      overtimeHours: 1.5,\n      status: 'complete',\n      site: 'Obra Central',\n      supervisor: 'Carlos Mendez'\n    },\n    {\n      date: '2025-01-23',\n      dayName: 'Jueves',\n      clockIn: '08:15',\n      clockOut: '17:00',\n      totalHours: 7.75,\n      overtimeHours: 0,\n      status: 'incomplete',\n      site: 'Obra Central',\n      supervisor: 'Carlos Mendez'\n    },\n    {\n      date: '2025-01-22',\n      dayName: 'Miércoles',\n      clockIn: null,\n      clockOut: null,\n      totalHours: 0,\n      overtimeHours: 0,\n      status: 'absent',\n      site: 'Obra Central',\n      supervisor: 'Carlos Mendez'\n    },\n    {\n      date: '2025-01-21',\n      dayName: 'Martes',\n      clockIn: '08:00',\n      clockOut: '17:30',\n      totalHours: 8.5,\n      overtimeHours: 0.5,\n      status: 'complete',\n      site: 'Proyecto Norte',\n      supervisor: 'Ana Rodriguez'\n    },\n    {\n      date: '2025-01-20',\n      dayName: 'Lunes',\n      clockIn: '08:30',\n      clockOut: '17:45',\n      totalHours: 8.25,\n      overtimeHours: 0.25,\n      status: 'late',\n      site: 'Proyecto Norte',\n      supervisor: 'Ana Rodriguez'\n    }\n  ];\n\n  const periodOptions = [\n    { value: 'current_week', label: 'Semana Actual' },\n    { value: 'last_week', label: 'Semana Pasada' },\n    { value: 'current_month', label: 'Mes Actual' },\n    { value: 'last_month', label: 'Mes Pasado' },\n    { value: 'last_30_days', label: 'Últimos 30 días' },\n    { value: 'current_pay_period', label: 'Período de Pago Actual' },\n    { value: 'custom', label: 'Rango Personalizado' }\n  ];\n\n  const getStatusBadge = (status) => {\n    const statusConfig = {\n      complete: { label: 'Completo', color: 'bg-success/10 text-success' },\n      incomplete: { label: 'Incompleto', color: 'bg-warning/10 text-warning' },\n      late: { label: 'Tardanza', color: 'bg-warning/10 text-warning' },\n      absent: { label: 'Ausente', color: 'bg-error/10 text-error' },\n      weekend: { label: 'Fin de semana', color: 'bg-muted text-muted-foreground' }\n    };\n\n    const config = statusConfig?.[status] || statusConfig?.complete;\n    \n    return (\n      <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${config?.color}`}>\n        {config?.label}\n      </span>\n    );\n  };\n\n  const formatTime = (time) => {\n    return time || '--:--';\n  };\n\n  const formatHours = (hours) => {\n    return hours ? `${hours?.toFixed(2)}h` : '0.00h';\n  };\n\n  const totalPages = Math.ceil(mockHistoricalData?.length / itemsPerPage);\n  const startIndex = (currentPage - 1) * itemsPerPage;\n  const endIndex = startIndex + itemsPerPage;\n  const currentData = mockHistoricalData?.slice(startIndex, endIndex);\n\n  const handlePeriodChange = (value) => {\n    setSelectedPeriod(value);\n    setCurrentPage(1);\n    onDateRangeChange(value);\n  };\n\n  const handleExport = () => {\n    onExportData(selectedPeriod, mockHistoricalData);\n  };\n\n  return (\n    <div className=\"bg-card border border-border rounded-lg overflow-hidden\">\n      {/* Header */}\n      <div className=\"px-6 py-4 border-b border-border\">\n        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n          <h3 className=\"text-lg font-semibold text-foreground\">\n            Historial de Asistencia\n          </h3>\n          \n          <div className=\"flex flex-col sm:flex-row gap-3\">\n            <Select\n              options={periodOptions}\n              value={selectedPeriod}\n              onChange={handlePeriodChange}\n              placeholder=\"Seleccionar período\"\n              className=\"w-full sm:w-48\"\n            />\n            \n            <Button\n              variant=\"outline\"\n              iconName=\"Download\"\n              iconPosition=\"left\"\n              onClick={handleExport}\n              className=\"w-full sm:w-auto\"\n            >\n              Exportar\n            </Button>\n          </div>\n        </div>\n      </div>\n      {/* Quick Stats */}\n      <div className=\"px-6 py-4 bg-muted/30 border-b border-border\">\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n          <div className=\"text-center\">\n            <div className=\"text-xl font-bold text-foreground\">\n              {mockHistoricalData?.filter(d => d?.status === 'complete' || d?.status === 'late')?.length}\n            </div>\n            <div className=\"text-xs text-muted-foreground\">Días trabajados</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-xl font-bold text-warning\">\n              {mockHistoricalData?.filter(d => d?.status === 'late')?.length}\n            </div>\n            <div className=\"text-xs text-muted-foreground\">Tardanzas</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-xl font-bold text-error\">\n              {mockHistoricalData?.filter(d => d?.status === 'absent')?.length}\n            </div>\n            <div className=\"text-xs text-muted-foreground\">Ausencias</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-xl font-bold text-success\">\n              {mockHistoricalData?.reduce((total, d) => total + (d?.totalHours || 0), 0)?.toFixed(1)}h\n            </div>\n            <div className=\"text-xs text-muted-foreground\">Total horas</div>\n          </div>\n        </div>\n      </div>\n      {/* Data Table */}\n      <div className=\"overflow-x-auto\">\n        <table className=\"w-full\">\n          <thead className=\"bg-muted/50\">\n            <tr>\n              <th className=\"px-4 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                Fecha\n              </th>\n              <th className=\"px-4 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                Entrada\n              </th>\n              <th className=\"px-4 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                Salida\n              </th>\n              <th className=\"px-4 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                Total\n              </th>\n              <th className=\"px-4 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                Extra\n              </th>\n              <th className=\"px-4 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                Sitio\n              </th>\n              <th className=\"px-4 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                Estado\n              </th>\n            </tr>\n          </thead>\n          <tbody className=\"divide-y divide-border\">\n            {currentData?.map((record, index) => (\n              <tr \n                key={index}\n                className=\"hover:bg-muted/30 transition-colors duration-150 ease-out-cubic\"\n              >\n                <td className=\"px-4 py-3\">\n                  <div>\n                    <div className=\"text-sm font-medium text-foreground\">\n                      {record?.dayName}\n                    </div>\n                    <div className=\"text-xs text-muted-foreground\">\n                      {new Date(record.date)?.toLocaleDateString('es-ES', {\n                        day: '2-digit',\n                        month: '2-digit',\n                        year: 'numeric'\n                      })}\n                    </div>\n                  </div>\n                </td>\n                <td className=\"px-4 py-3\">\n                  <div className=\"text-sm text-foreground\">\n                    {formatTime(record?.clockIn)}\n                  </div>\n                </td>\n                <td className=\"px-4 py-3\">\n                  <div className=\"text-sm text-foreground\">\n                    {formatTime(record?.clockOut)}\n                  </div>\n                </td>\n                <td className=\"px-4 py-3\">\n                  <div className=\"text-sm font-medium text-foreground\">\n                    {formatHours(record?.totalHours)}\n                  </div>\n                </td>\n                <td className=\"px-4 py-3\">\n                  <div className={`text-sm font-medium ${\n                    record?.overtimeHours > 0 ? 'text-warning' : 'text-muted-foreground'\n                  }`}>\n                    {formatHours(record?.overtimeHours)}\n                  </div>\n                </td>\n                <td className=\"px-4 py-3\">\n                  <div className=\"text-sm text-foreground\">\n                    {record?.site}\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\">\n                    {record?.supervisor}\n                  </div>\n                </td>\n                <td className=\"px-4 py-3\">\n                  {getStatusBadge(record?.status)}\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n      {/* Pagination */}\n      {totalPages > 1 && (\n        <div className=\"px-6 py-4 border-t border-border\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"text-sm text-muted-foreground\">\n              Mostrando {startIndex + 1} a {Math.min(endIndex, mockHistoricalData?.length)} de {mockHistoricalData?.length} registros\n            </div>\n            \n            <div className=\"flex items-center space-x-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                disabled={currentPage === 1}\n                onClick={() => setCurrentPage(currentPage - 1)}\n                iconName=\"ChevronLeft\"\n                iconPosition=\"left\"\n              >\n                Anterior\n              </Button>\n              \n              <span className=\"text-sm text-foreground\">\n                Página {currentPage} de {totalPages}\n              </span>\n              \n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                disabled={currentPage === totalPages}\n                onClick={() => setCurrentPage(currentPage + 1)}\n                iconName=\"ChevronRight\"\n                iconPosition=\"right\"\n              >\n                Siguiente\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default HistoricalAttendanceViewer;","size_bytes":11652},"src/pages/employee-attendance-dashboard/components/PayrollSummaryCard.jsx":{"content":"import React from 'react';\nimport Icon from '../../../components/AppIcon';\n\nconst PayrollSummaryCard = ({ \n  payrollData = null,\n  currency = '€',\n  onViewDetails = () => {}\n}) => {\n  // Mock payroll data\n  const mockPayrollData = {\n    weeklyEstimate: 456.75,\n    regularHours: 32.5,\n    regularRate: 12.50,\n    regularPay: 406.25,\n    overtimeHours: 4.0,\n    overtimeRate: 18.75,\n    overtimePay: 75.00,\n    bonuses: 25.00,\n    deductions: 49.50,\n    incidentDeductions: 24.50,\n    taxDeductions: 25.00,\n    netPay: 432.25,\n    payPeriod: 'Semana del 27 Ene - 31 Ene 2025',\n    lastUpdated: new Date()\n  };\n\n  const data = payrollData || mockPayrollData;\n\n  const formatCurrency = (amount) => {\n    return `${currency}${amount?.toFixed(2)}`;\n  };\n\n  const getPayrollStatus = () => {\n    const currentDay = new Date()?.getDay();\n    if (currentDay >= 1 && currentDay <= 5) {\n      return {\n        status: 'calculating',\n        message: 'Calculando en tiempo real',\n        color: 'text-primary'\n      };\n    } else {\n      return {\n        status: 'final',\n        message: 'Cálculo final disponible',\n        color: 'text-success'\n      };\n    }\n  };\n\n  const payrollStatus = getPayrollStatus();\n\n  return (\n    <div className=\"bg-card border border-border rounded-lg overflow-hidden\">\n      {/* Header */}\n      <div className=\"px-6 py-4 bg-primary/5 border-b border-border\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            <Icon name=\"Calculator\" size={20} className=\"text-primary\" />\n            <h3 className=\"text-lg font-semibold text-foreground\">\n              Estimación de Nómina\n            </h3>\n          </div>\n          <div className={`flex items-center space-x-1 text-sm ${payrollStatus?.color}`}>\n            <Icon name=\"Clock\" size={16} />\n            <span>{payrollStatus?.message}</span>\n          </div>\n        </div>\n        <p className=\"text-sm text-muted-foreground mt-1\">\n          {data?.payPeriod}\n        </p>\n      </div>\n      {/* Main Amount */}\n      <div className=\"px-6 py-6 text-center bg-gradient-to-br from-primary/5 to-transparent\">\n        <div className=\"text-4xl font-bold text-foreground mb-2\">\n          {formatCurrency(data?.netPay)}\n        </div>\n        <div className=\"text-sm text-muted-foreground\">\n          Pago neto estimado\n        </div>\n      </div>\n      {/* Breakdown */}\n      <div className=\"px-6 py-4 space-y-4\">\n        {/* Regular Hours */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            <Icon name=\"Clock\" size={16} className=\"text-muted-foreground\" />\n            <span className=\"text-sm text-foreground\">\n              Horas regulares ({data?.regularHours}h)\n            </span>\n          </div>\n          <span className=\"text-sm font-medium text-foreground\">\n            {formatCurrency(data?.regularPay)}\n          </span>\n        </div>\n\n        {/* Overtime Hours */}\n        {data?.overtimeHours > 0 && (\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              <Icon name=\"Zap\" size={16} className=\"text-warning\" />\n              <span className=\"text-sm text-foreground\">\n                Horas extra ({data?.overtimeHours}h)\n              </span>\n            </div>\n            <span className=\"text-sm font-medium text-warning\">\n              +{formatCurrency(data?.overtimePay)}\n            </span>\n          </div>\n        )}\n\n        {/* Bonuses */}\n        {data?.bonuses > 0 && (\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              <Icon name=\"Gift\" size={16} className=\"text-success\" />\n              <span className=\"text-sm text-foreground\">Bonificaciones</span>\n            </div>\n            <span className=\"text-sm font-medium text-success\">\n              +{formatCurrency(data?.bonuses)}\n            </span>\n          </div>\n        )}\n\n        {/* Deductions */}\n        {data?.deductions > 0 && (\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-2\">\n                <Icon name=\"Minus\" size={16} className=\"text-error\" />\n                <span className=\"text-sm text-foreground\">Deducciones</span>\n              </div>\n              <span className=\"text-sm font-medium text-error\">\n                -{formatCurrency(data?.deductions)}\n              </span>\n            </div>\n            \n            {/* Deduction Details */}\n            <div className=\"ml-6 space-y-1\">\n              {data?.incidentDeductions > 0 && (\n                <div className=\"flex items-center justify-between text-xs\">\n                  <span className=\"text-muted-foreground\">Incidentes</span>\n                  <span className=\"text-error\">\n                    -{formatCurrency(data?.incidentDeductions)}\n                  </span>\n                </div>\n              )}\n              {data?.taxDeductions > 0 && (\n                <div className=\"flex items-center justify-between text-xs\">\n                  <span className=\"text-muted-foreground\">Impuestos</span>\n                  <span className=\"text-error\">\n                    -{formatCurrency(data?.taxDeductions)}\n                  </span>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n      {/* Divider */}\n      <div className=\"px-6\">\n        <div className=\"border-t border-border\"></div>\n      </div>\n      {/* Net Pay */}\n      <div className=\"px-6 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-base font-semibold text-foreground\">\n            Total Neto\n          </span>\n          <span className=\"text-xl font-bold text-primary\">\n            {formatCurrency(data?.netPay)}\n          </span>\n        </div>\n      </div>\n      {/* Footer Actions */}\n      <div className=\"px-6 py-4 bg-muted/30 border-t border-border\">\n        <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n          <span>\n            Actualizado: {data?.lastUpdated?.toLocaleTimeString('es-ES', {\n              hour: '2-digit',\n              minute: '2-digit'\n            })}\n          </span>\n          <button\n            onClick={onViewDetails}\n            className=\"text-primary hover:text-primary/80 font-medium transition-colors duration-150 ease-out-cubic\"\n          >\n            Ver detalles\n          </button>\n        </div>\n      </div>\n      {/* Rate Information */}\n      <div className=\"px-6 py-3 bg-muted/20 border-t border-border\">\n        <div className=\"grid grid-cols-2 gap-4 text-xs\">\n          <div>\n            <span className=\"text-muted-foreground\">Tarifa regular:</span>\n            <span className=\"ml-1 font-medium text-foreground\">\n              {formatCurrency(data?.regularRate)}/h\n            </span>\n          </div>\n          <div>\n            <span className=\"text-muted-foreground\">Tarifa extra:</span>\n            <span className=\"ml-1 font-medium text-foreground\">\n              {formatCurrency(data?.overtimeRate)}/h\n            </span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PayrollSummaryCard;","size_bytes":7363},"src/pages/employee-attendance-dashboard/components/PersonalIncidentLog.jsx":{"content":"import React, { useState } from 'react';\nimport Button from '../../../components/ui/Button';\nimport Icon from '../../../components/AppIcon';\n\nconst PersonalIncidentLog = ({ \n  incidents = [],\n  onViewIncident = () => {},\n  onCreateIncident = () => {}\n}) => {\n  const [filter, setFilter] = useState('all');\n\n  // Mock incident data\n  const mockIncidents = [\n    {\n      id: 1,\n      type: 'absence',\n      title: 'Solicitud de Ausencia Médica',\n      description: 'Cita médica programada para revisión anual',\n      date: '2025-02-05',\n      status: 'pending',\n      priority: 'medium',\n      attachments: [\n        { name: 'cita_medica.pdf', size: '245 KB', type: 'pdf' }\n      ],\n      submittedAt: new Date('2025-01-28T10:30:00'),\n      responseDate: null,\n      approvedBy: null,\n      comments: null\n    },\n    {\n      id: 2,\n      type: 'tardiness',\n      title: 'Justificación de Tardanza',\n      description: 'Retraso debido a problemas de transporte público',\n      date: '2025-01-28',\n      status: 'approved',\n      priority: 'low',\n      attachments: [],\n      submittedAt: new Date('2025-01-28T09:15:00'),\n      responseDate: new Date('2025-01-28T14:20:00'),\n      approvedBy: 'Carlos Mendez',\n      comments: 'Justificación aceptada. Se recomienda salir con más tiempo.'\n    },\n    {\n      id: 3,\n      type: 'permit',\n      title: 'Permiso Personal',\n      description: 'Trámites bancarios urgentes',\n      date: '2025-01-25',\n      status: 'rejected',\n      priority: 'low',\n      attachments: [],\n      submittedAt: new Date('2025-01-24T16:45:00'),\n      responseDate: new Date('2025-01-25T08:30:00'),\n      approvedBy: 'Carlos Mendez',\n      comments: 'No se puede aprobar debido a la carga de trabajo del proyecto.'\n    },\n    {\n      id: 4,\n      type: 'medical',\n      title: 'Incapacidad Médica',\n      description: 'Lesión menor en la mano derecha',\n      date: '2025-01-20',\n      status: 'approved',\n      priority: 'high',\n      attachments: [\n        { name: 'certificado_medico.pdf', size: '1.2 MB', type: 'pdf' },\n        { name: 'radiografia.jpg', size: '856 KB', type: 'image' }\n      ],\n      submittedAt: new Date('2025-01-20T11:00:00'),\n      responseDate: new Date('2025-01-20T15:30:00'),\n      approvedBy: 'Ana Rodriguez',\n      comments: 'Aprobado. Reincorporación programada para el 22/01.'\n    }\n  ];\n\n  const displayIncidents = incidents?.length > 0 ? incidents : mockIncidents;\n\n  const getIncidentIcon = (type) => {\n    const iconMap = {\n      absence: 'UserX',\n      tardiness: 'Clock',\n      permit: 'FileText',\n      medical: 'Heart',\n      other: 'AlertCircle'\n    };\n    return iconMap?.[type] || iconMap?.other;\n  };\n\n  const getIncidentTypeLabel = (type) => {\n    const labelMap = {\n      absence: 'Ausencia',\n      tardiness: 'Tardanza',\n      permit: 'Permiso',\n      medical: 'Médico',\n      other: 'Otro'\n    };\n    return labelMap?.[type] || 'Desconocido';\n  };\n\n  const getStatusBadge = (status) => {\n    const statusConfig = {\n      pending: { label: 'Pendiente', color: 'bg-warning/10 text-warning', icon: 'Clock' },\n      approved: { label: 'Aprobado', color: 'bg-success/10 text-success', icon: 'CheckCircle' },\n      rejected: { label: 'Rechazado', color: 'bg-error/10 text-error', icon: 'XCircle' },\n      draft: { label: 'Borrador', color: 'bg-muted text-muted-foreground', icon: 'Edit' }\n    };\n\n    const config = statusConfig?.[status] || statusConfig?.pending;\n    \n    return (\n      <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${config?.color}`}>\n        <Icon name={config?.icon} size={12} className=\"mr-1\" />\n        {config?.label}\n      </span>\n    );\n  };\n\n  const getPriorityColor = (priority) => {\n    const colorMap = {\n      high: 'border-l-error',\n      medium: 'border-l-warning',\n      low: 'border-l-muted-foreground'\n    };\n    return colorMap?.[priority] || colorMap?.low;\n  };\n\n  const getAttachmentIcon = (type) => {\n    if (type === 'pdf') return 'FileText';\n    if (type === 'image') return 'Image';\n    return 'Paperclip';\n  };\n\n  const formatFileSize = (bytes) => {\n    if (bytes === 0) return '0 B';\n    const k = 1024;\n    const sizes = ['B', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i))?.toFixed(1)) + ' ' + sizes?.[i];\n  };\n\n  const filteredIncidents = displayIncidents?.filter(incident => {\n    if (filter === 'all') return true;\n    return incident?.status === filter;\n  });\n\n  const getFilterCount = (status) => {\n    if (status === 'all') return displayIncidents?.length;\n    return displayIncidents?.filter(i => i?.status === status)?.length;\n  };\n\n  return (\n    <div className=\"bg-card border border-border rounded-lg overflow-hidden\">\n      {/* Header */}\n      <div className=\"px-6 py-4 border-b border-border\">\n        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n          <h3 className=\"text-lg font-semibold text-foreground\">\n            Mis Incidentes\n          </h3>\n          \n          <Button\n            variant=\"default\"\n            iconName=\"Plus\"\n            iconPosition=\"left\"\n            onClick={onCreateIncident}\n            className=\"w-full sm:w-auto\"\n          >\n            Nuevo Incidente\n          </Button>\n        </div>\n      </div>\n      {/* Filter Tabs */}\n      <div className=\"px-6 py-3 border-b border-border bg-muted/30\">\n        <div className=\"flex flex-wrap gap-2\">\n          {[\n            { key: 'all', label: 'Todos' },\n            { key: 'pending', label: 'Pendientes' },\n            { key: 'approved', label: 'Aprobados' },\n            { key: 'rejected', label: 'Rechazados' }\n          ]?.map((tab) => (\n            <button\n              key={tab?.key}\n              onClick={() => setFilter(tab?.key)}\n              className={`px-3 py-1 rounded-full text-sm font-medium transition-all duration-150 ease-out-cubic ${\n                filter === tab?.key\n                  ? 'bg-primary text-primary-foreground'\n                  : 'bg-background text-muted-foreground hover:text-foreground hover:bg-muted'\n              }`}\n            >\n              {tab?.label} ({getFilterCount(tab?.key)})\n            </button>\n          ))}\n        </div>\n      </div>\n      {/* Incidents List */}\n      <div className=\"divide-y divide-border\">\n        {filteredIncidents?.length === 0 ? (\n          <div className=\"px-6 py-12 text-center\">\n            <Icon name=\"FileText\" size={48} className=\"mx-auto text-muted-foreground mb-4\" />\n            <h4 className=\"text-lg font-medium text-foreground mb-2\">\n              No hay incidentes\n            </h4>\n            <p className=\"text-sm text-muted-foreground mb-4\">\n              {filter === 'all' ?'No has registrado ningún incidente aún.'\n                : `No hay incidentes con estado \"${filter}\".`\n              }\n            </p>\n            <Button\n              variant=\"outline\"\n              iconName=\"Plus\"\n              iconPosition=\"left\"\n              onClick={onCreateIncident}\n            >\n              Crear Primer Incidente\n            </Button>\n          </div>\n        ) : (\n          filteredIncidents?.map((incident) => (\n            <div\n              key={incident?.id}\n              className={`px-6 py-4 hover:bg-muted/30 transition-colors duration-150 ease-out-cubic border-l-4 ${getPriorityColor(incident?.priority)}`}\n            >\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1 min-w-0\">\n                  {/* Header */}\n                  <div className=\"flex items-center space-x-3 mb-2\">\n                    <Icon \n                      name={getIncidentIcon(incident?.type)} \n                      size={20} \n                      className=\"text-muted-foreground flex-shrink-0\" \n                    />\n                    <div className=\"flex-1 min-w-0\">\n                      <h4 className=\"text-sm font-medium text-foreground truncate\">\n                        {incident?.title}\n                      </h4>\n                      <div className=\"flex items-center space-x-2 mt-1\">\n                        <span className=\"text-xs text-muted-foreground\">\n                          {getIncidentTypeLabel(incident?.type)}\n                        </span>\n                        <span className=\"text-xs text-muted-foreground\">•</span>\n                        <span className=\"text-xs text-muted-foreground\">\n                          {new Date(incident.date)?.toLocaleDateString('es-ES', {\n                            day: '2-digit',\n                            month: '2-digit',\n                            year: 'numeric'\n                          })}\n                        </span>\n                      </div>\n                    </div>\n                    {getStatusBadge(incident?.status)}\n                  </div>\n\n                  {/* Description */}\n                  <p className=\"text-sm text-muted-foreground mb-3 line-clamp-2\">\n                    {incident?.description}\n                  </p>\n\n                  {/* Attachments */}\n                  {incident?.attachments && incident?.attachments?.length > 0 && (\n                    <div className=\"flex flex-wrap gap-2 mb-3\">\n                      {incident?.attachments?.map((attachment, index) => (\n                        <div\n                          key={index}\n                          className=\"flex items-center space-x-1 px-2 py-1 bg-muted rounded text-xs\"\n                        >\n                          <Icon \n                            name={getAttachmentIcon(attachment?.type)} \n                            size={12} \n                            className=\"text-muted-foreground\" \n                          />\n                          <span className=\"text-muted-foreground truncate max-w-24\">\n                            {attachment?.name}\n                          </span>\n                          <span className=\"text-muted-foreground\">\n                            ({attachment?.size})\n                          </span>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n\n                  {/* Response Info */}\n                  {incident?.status !== 'pending' && incident?.status !== 'draft' && (\n                    <div className=\"text-xs text-muted-foreground\">\n                      <div className=\"flex items-center space-x-1\">\n                        <span>Respondido por {incident?.approvedBy}</span>\n                        <span>•</span>\n                        <span>\n                          {incident?.responseDate?.toLocaleDateString('es-ES', {\n                            day: '2-digit',\n                            month: '2-digit',\n                            hour: '2-digit',\n                            minute: '2-digit'\n                          })}\n                        </span>\n                      </div>\n                      {incident?.comments && (\n                        <p className=\"mt-1 text-foreground\">\n                          \"{incident?.comments}\"\n                        </p>\n                      )}\n                    </div>\n                  )}\n                </div>\n\n                {/* Actions */}\n                <div className=\"flex-shrink-0 ml-4\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    iconName=\"Eye\"\n                    onClick={() => onViewIncident(incident)}\n                  >\n                    Ver\n                  </Button>\n                </div>\n              </div>\n            </div>\n          ))\n        )}\n      </div>\n      {/* Footer */}\n      {filteredIncidents?.length > 0 && (\n        <div className=\"px-6 py-4 bg-muted/30 border-t border-border\">\n          <div className=\"flex items-center justify-between text-sm text-muted-foreground\">\n            <span>\n              {filteredIncidents?.length} incidente{filteredIncidents?.length !== 1 ? 's' : ''}\n            </span>\n            <button\n              onClick={() => onViewIncident('all')}\n              className=\"text-primary hover:text-primary/80 font-medium transition-colors duration-150 ease-out-cubic\"\n            >\n              Ver historial completo\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default PersonalIncidentLog;","size_bytes":12386},"src/pages/employee-attendance-dashboard/components/ProjectAssignmentCard.jsx":{"content":"import React from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\n\nconst ProjectAssignmentCard = ({ \n  assignment = null,\n  onContactSupervisor = () => {},\n  onViewProjectDetails = () => {}\n}) => {\n  // Mock assignment data\n  const mockAssignment = {\n    projectName: 'Construcción Edificio Residencial Torre Norte',\n    projectCode: 'TN-2025-001',\n    siteName: 'Obra Central',\n    siteAddress: 'Av. Principal 1234, Madrid, España',\n    supervisor: {\n      name: 'Carlos Mendez',\n      phone: '+34 612 345 678',\n      email: 'carlos.mendez@construcciones.es',\n      avatar: null\n    },\n    startDate: '2025-01-15',\n    expectedEndDate: '2025-06-30',\n    progress: 35,\n    currentPhase: 'Estructura',\n    workSchedule: {\n      monday: '08:00 - 17:30',\n      tuesday: '08:00 - 17:30',\n      wednesday: '08:00 - 17:30',\n      thursday: '08:00 - 17:30',\n      friday: '08:00 - 17:30',\n      saturday: '09:00 - 14:00',\n      sunday: 'Descanso'\n    },\n    teamSize: 24,\n    safetyOfficer: 'Ana Rodriguez',\n    emergencyContact: '+34 900 123 456',\n    coordinates: { lat: 40.4168, lng: -3.7038 }\n  };\n\n  const data = assignment || mockAssignment;\n\n  const getInitials = (name) => {\n    return name\n      .split(' ')?.map(word => word?.charAt(0))?.join('')?.toUpperCase()?.slice(0, 2);\n  };\n\n  const formatDate = (dateString) => {\n    return new Date(dateString)?.toLocaleDateString('es-ES', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric'\n    });\n  };\n\n  const getProgressColor = (progress) => {\n    if (progress < 30) return 'bg-error';\n    if (progress < 70) return 'bg-warning';\n    return 'bg-success';\n  };\n\n  const getCurrentDaySchedule = () => {\n    const days = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\n    const today = days?.[new Date()?.getDay()];\n    return data?.workSchedule?.[today] || 'No programado';\n  };\n\n  return (\n    <div className=\"bg-card border border-border rounded-lg overflow-hidden\">\n      {/* Header */}\n      <div className=\"px-6 py-4 bg-primary/5 border-b border-border\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex-1 min-w-0\">\n            <h3 className=\"text-lg font-semibold text-foreground mb-1\">\n              Asignación Actual\n            </h3>\n            <p className=\"text-sm text-muted-foreground\">\n              {data?.projectCode}\n            </p>\n          </div>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            iconName=\"ExternalLink\"\n            iconPosition=\"right\"\n            onClick={onViewProjectDetails}\n          >\n            Ver Proyecto\n          </Button>\n        </div>\n      </div>\n      {/* Project Info */}\n      <div className=\"px-6 py-4 border-b border-border\">\n        <h4 className=\"font-medium text-foreground mb-3\">\n          {data?.projectName}\n        </h4>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          {/* Site Location */}\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center space-x-2\">\n              <Icon name=\"MapPin\" size={16} className=\"text-muted-foreground\" />\n              <span className=\"text-sm font-medium text-foreground\">\n                {data?.siteName}\n              </span>\n            </div>\n            <p className=\"text-xs text-muted-foreground ml-6\">\n              {data?.siteAddress}\n            </p>\n          </div>\n\n          {/* Current Phase */}\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center space-x-2\">\n              <Icon name=\"Building2\" size={16} className=\"text-muted-foreground\" />\n              <span className=\"text-sm font-medium text-foreground\">\n                Fase Actual: {data?.currentPhase}\n              </span>\n            </div>\n            <div className=\"ml-6\">\n              <div className=\"flex items-center justify-between text-xs mb-1\">\n                <span className=\"text-muted-foreground\">Progreso</span>\n                <span className=\"font-medium text-foreground\">{data?.progress}%</span>\n              </div>\n              <div className=\"w-full bg-muted rounded-full h-2\">\n                <div \n                  className={`h-2 rounded-full transition-all duration-300 ease-out-cubic ${getProgressColor(data?.progress)}`}\n                  style={{ width: `${data?.progress}%` }}\n                ></div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      {/* Schedule Info */}\n      <div className=\"px-6 py-4 border-b border-border\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <h5 className=\"font-medium text-foreground\">Horario de Trabajo</h5>\n          <div className=\"flex items-center space-x-1 text-sm text-primary\">\n            <Icon name=\"Clock\" size={16} />\n            <span>Hoy: {getCurrentDaySchedule()}</span>\n          </div>\n        </div>\n        \n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-2 text-xs\">\n          {Object.entries(data?.workSchedule)?.map(([day, schedule]) => {\n            const dayLabels = {\n              monday: 'Lun',\n              tuesday: 'Mar',\n              wednesday: 'Mié',\n              thursday: 'Jue',\n              friday: 'Vie',\n              saturday: 'Sáb',\n              sunday: 'Dom'\n            };\n            \n            const isToday = new Date()?.getDay() === Object.keys(data?.workSchedule)?.indexOf(day);\n            \n            return (\n              <div \n                key={day}\n                className={`p-2 rounded text-center ${\n                  isToday ? 'bg-primary/10 text-primary' : 'bg-muted/50 text-muted-foreground'\n                }`}\n              >\n                <div className=\"font-medium\">{dayLabels?.[day]}</div>\n                <div className=\"text-xs\">{schedule}</div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n      {/* Supervisor Info */}\n      <div className=\"px-6 py-4 border-b border-border\">\n        <h5 className=\"font-medium text-foreground mb-3\">Supervisor Asignado</h5>\n        \n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            {data?.supervisor?.avatar ? (\n              <img\n                src={data?.supervisor?.avatar}\n                alt={data?.supervisor?.name}\n                className=\"w-10 h-10 rounded-full object-cover\"\n              />\n            ) : (\n              <div className=\"w-10 h-10 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-sm font-medium\">\n                {getInitials(data?.supervisor?.name)}\n              </div>\n            )}\n            \n            <div>\n              <p className=\"text-sm font-medium text-foreground\">\n                {data?.supervisor?.name}\n              </p>\n              <div className=\"flex items-center space-x-2 text-xs text-muted-foreground\">\n                <Icon name=\"Phone\" size={12} />\n                <span>{data?.supervisor?.phone}</span>\n              </div>\n            </div>\n          </div>\n          \n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            iconName=\"MessageCircle\"\n            iconPosition=\"left\"\n            onClick={onContactSupervisor}\n          >\n            Contactar\n          </Button>\n        </div>\n      </div>\n      {/* Additional Info */}\n      <div className=\"px-6 py-4 bg-muted/30\">\n        <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4 text-sm\">\n          <div className=\"flex items-center space-x-2\">\n            <Icon name=\"Users\" size={16} className=\"text-muted-foreground\" />\n            <div>\n              <div className=\"font-medium text-foreground\">{data?.teamSize}</div>\n              <div className=\"text-xs text-muted-foreground\">Trabajadores</div>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            <Icon name=\"Shield\" size={16} className=\"text-muted-foreground\" />\n            <div>\n              <div className=\"font-medium text-foreground\">{data?.safetyOfficer}</div>\n              <div className=\"text-xs text-muted-foreground\">Seguridad</div>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            <Icon name=\"Phone\" size={16} className=\"text-error\" />\n            <div>\n              <div className=\"font-medium text-foreground\">{data?.emergencyContact}</div>\n              <div className=\"text-xs text-muted-foreground\">Emergencias</div>\n            </div>\n          </div>\n        </div>\n      </div>\n      {/* Project Timeline */}\n      <div className=\"px-6 py-4\">\n        <div className=\"flex items-center justify-between text-sm\">\n          <div>\n            <span className=\"text-muted-foreground\">Inicio: </span>\n            <span className=\"font-medium text-foreground\">\n              {formatDate(data?.startDate)}\n            </span>\n          </div>\n          <div>\n            <span className=\"text-muted-foreground\">Fin estimado: </span>\n            <span className=\"font-medium text-foreground\">\n              {formatDate(data?.expectedEndDate)}\n            </span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ProjectAssignmentCard;","size_bytes":9352},"src/pages/employee-attendance-dashboard/components/WeeklyTimecardTable.jsx":{"content":"import React from 'react';\nimport Icon from '../../../components/AppIcon';\n\nconst WeeklyTimecardTable = ({ \n  weekData = [],\n  currentWeekStart = new Date(),\n  onDateClick = () => {}\n}) => {\n  // Mock data for current week\n  const mockWeekData = [\n    {\n      date: '2025-01-27',\n      dayName: 'Lunes',\n      clockIn: '08:00',\n      lunchStart: '12:00',\n      lunchEnd: '13:00',\n      clockOut: '17:30',\n      totalHours: 8.5,\n      regularHours: 8,\n      overtimeHours: 0.5,\n      status: 'complete',\n      isLate: false\n    },\n    {\n      date: '2025-01-28',\n      dayName: 'Martes',\n      clockIn: '08:15',\n      lunchStart: '12:30',\n      lunchEnd: '13:30',\n      clockOut: '18:00',\n      totalHours: 8.75,\n      regularHours: 8,\n      overtimeHours: 0.75,\n      status: 'complete',\n      isLate: true\n    },\n    {\n      date: '2025-01-29',\n      dayName: 'Miércoles',\n      clockIn: '07:45',\n      lunchStart: '12:00',\n      lunchEnd: '13:00',\n      clockOut: '17:15',\n      totalHours: 8.5,\n      regularHours: 8,\n      overtimeHours: 0.5,\n      status: 'complete',\n      isLate: false\n    },\n    {\n      date: '2025-01-30',\n      dayName: 'Jueves',\n      clockIn: '08:05',\n      lunchStart: '12:15',\n      lunchEnd: '13:15',\n      clockOut: null,\n      totalHours: 0,\n      regularHours: 0,\n      overtimeHours: 0,\n      status: 'incomplete',\n      isLate: true\n    },\n    {\n      date: '2025-01-31',\n      dayName: 'Viernes',\n      clockIn: null,\n      lunchStart: null,\n      lunchEnd: null,\n      clockOut: null,\n      totalHours: 0,\n      regularHours: 0,\n      overtimeHours: 0,\n      status: 'pending',\n      isLate: false\n    }\n  ];\n\n  const displayData = weekData?.length > 0 ? weekData : mockWeekData;\n\n  const getStatusIcon = (status) => {\n    switch (status) {\n      case 'complete':\n        return <Icon name=\"CheckCircle\" size={16} className=\"text-success\" />;\n      case 'incomplete':\n        return <Icon name=\"AlertCircle\" size={16} className=\"text-warning\" />;\n      case 'pending':\n        return <Icon name=\"Clock\" size={16} className=\"text-muted-foreground\" />;\n      default:\n        return <Icon name=\"Circle\" size={16} className=\"text-muted-foreground\" />;\n    }\n  };\n\n  const getStatusBadge = (status, isLate) => {\n    if (status === 'complete') {\n      return (\n        <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${\n          isLate ? 'bg-warning/10 text-warning' : 'bg-success/10 text-success'\n        }`}>\n          {isLate ? 'Tardanza' : 'Completo'}\n        </span>\n      );\n    }\n    if (status === 'incomplete') {\n      return (\n        <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-warning/10 text-warning\">\n          Incompleto\n        </span>\n      );\n    }\n    return (\n      <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-muted text-muted-foreground\">\n        Pendiente\n      </span>\n    );\n  };\n\n  const formatTime = (time) => {\n    return time || '--:--';\n  };\n\n  const formatHours = (hours) => {\n    return hours ? `${hours?.toFixed(2)}h` : '0.00h';\n  };\n\n  const getTotalWeekHours = () => {\n    return displayData?.reduce((total, day) => total + (day?.totalHours || 0), 0);\n  };\n\n  const getTotalRegularHours = () => {\n    return displayData?.reduce((total, day) => total + (day?.regularHours || 0), 0);\n  };\n\n  const getTotalOvertimeHours = () => {\n    return displayData?.reduce((total, day) => total + (day?.overtimeHours || 0), 0);\n  };\n\n  return (\n    <div className=\"bg-card border border-border rounded-lg overflow-hidden\">\n      {/* Header */}\n      <div className=\"px-6 py-4 border-b border-border\">\n        <div className=\"flex items-center justify-between\">\n          <h3 className=\"text-lg font-semibold text-foreground\">\n            Registro Semanal\n          </h3>\n          <div className=\"text-sm text-muted-foreground\">\n            Semana del {currentWeekStart?.toLocaleDateString('es-ES', {\n              day: '2-digit',\n              month: '2-digit',\n              year: 'numeric'\n            })}\n          </div>\n        </div>\n      </div>\n      {/* Table */}\n      <div className=\"overflow-x-auto\">\n        <table className=\"w-full\">\n          <thead className=\"bg-muted/50\">\n            <tr>\n              <th className=\"px-4 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                Día\n              </th>\n              <th className=\"px-4 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                Entrada\n              </th>\n              <th className=\"px-4 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                Almuerzo\n              </th>\n              <th className=\"px-4 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                Salida\n              </th>\n              <th className=\"px-4 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                Total\n              </th>\n              <th className=\"px-4 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                Extra\n              </th>\n              <th className=\"px-4 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                Estado\n              </th>\n            </tr>\n          </thead>\n          <tbody className=\"divide-y divide-border\">\n            {displayData?.map((day, index) => (\n              <tr \n                key={index}\n                className=\"hover:bg-muted/30 transition-colors duration-150 ease-out-cubic cursor-pointer\"\n                onClick={() => onDateClick(day?.date)}\n              >\n                <td className=\"px-4 py-3\">\n                  <div className=\"flex items-center space-x-2\">\n                    {getStatusIcon(day?.status)}\n                    <div>\n                      <div className=\"text-sm font-medium text-foreground\">\n                        {day?.dayName}\n                      </div>\n                      <div className=\"text-xs text-muted-foreground\">\n                        {new Date(day.date)?.toLocaleDateString('es-ES', {\n                          day: '2-digit',\n                          month: '2-digit'\n                        })}\n                      </div>\n                    </div>\n                  </div>\n                </td>\n                <td className=\"px-4 py-3\">\n                  <div className=\"text-sm text-foreground\">\n                    {formatTime(day?.clockIn)}\n                  </div>\n                  {day?.isLate && day?.clockIn && (\n                    <div className=\"text-xs text-warning\">\n                      Tardanza\n                    </div>\n                  )}\n                </td>\n                <td className=\"px-4 py-3\">\n                  <div className=\"text-sm text-foreground\">\n                    {day?.lunchStart && day?.lunchEnd \n                      ? `${formatTime(day?.lunchStart)} - ${formatTime(day?.lunchEnd)}`\n                      : '--:-- - --:--'\n                    }\n                  </div>\n                </td>\n                <td className=\"px-4 py-3\">\n                  <div className=\"text-sm text-foreground\">\n                    {formatTime(day?.clockOut)}\n                  </div>\n                </td>\n                <td className=\"px-4 py-3\">\n                  <div className=\"text-sm font-medium text-foreground\">\n                    {formatHours(day?.totalHours)}\n                  </div>\n                </td>\n                <td className=\"px-4 py-3\">\n                  <div className={`text-sm font-medium ${\n                    day?.overtimeHours > 0 ? 'text-warning' : 'text-muted-foreground'\n                  }`}>\n                    {formatHours(day?.overtimeHours)}\n                  </div>\n                </td>\n                <td className=\"px-4 py-3\">\n                  {getStatusBadge(day?.status, day?.isLate)}\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n      {/* Summary Footer */}\n      <div className=\"px-6 py-4 bg-muted/30 border-t border-border\">\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-foreground\">\n              {formatHours(getTotalWeekHours())}\n            </div>\n            <div className=\"text-xs text-muted-foreground uppercase tracking-wider\">\n              Total Semanal\n            </div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-success\">\n              {formatHours(getTotalRegularHours())}\n            </div>\n            <div className=\"text-xs text-muted-foreground uppercase tracking-wider\">\n              Horas Regulares\n            </div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-warning\">\n              {formatHours(getTotalOvertimeHours())}\n            </div>\n            <div className=\"text-xs text-muted-foreground uppercase tracking-wider\">\n              Horas Extra\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default WeeklyTimecardTable;","size_bytes":9353},"src/pages/employee-login-portal/components/LoginForm.jsx":{"content":"import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../../../contexts/AuthContext';\nimport Button from '../../../components/ui/Button';\nimport Input from '../../../components/ui/Input';\nimport { Eye, EyeOff, LogIn, AlertCircle, UserPlus } from 'lucide-react';\nimport RegisterForm from './RegisterForm';\n\nexport function LoginForm() {\n  const navigate = useNavigate();\n  const { signIn, authError, loading } = useAuth();\n  const [showRegister, setShowRegister] = useState(false);\n  const [formData, setFormData] = useState({\n    email: '',\n    password: ''\n  });\n  const [showPassword, setShowPassword] = useState(false);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [errors, setErrors] = useState({});\n\n  const handleInputChange = (e) => {\n    const { name, value } = e?.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n    // Clear field error when user starts typing\n    if (errors?.[name]) {\n      setErrors(prev => ({\n        ...prev,\n        [name]: ''\n      }));\n    }\n  };\n\n  const validateForm = () => {\n    const newErrors = {};\n    \n    if (!formData?.email) {\n      newErrors.email = 'El correo electrónico es requerido';\n    } else if (!/\\S+@\\S+\\.\\S+/?.test(formData?.email)) {\n      newErrors.email = 'El correo electrónico no es válido';\n    }\n    \n    if (!formData?.password) {\n      newErrors.password = 'La contraseña es requerida';\n    } else if (formData?.password?.length < 6) {\n      newErrors.password = 'La contraseña debe tener al menos 6 caracteres';\n    }\n    \n    setErrors(newErrors);\n    return Object.keys(newErrors)?.length === 0;\n  };\n\n  const handleSubmit = async (e) => {\n    e?.preventDefault();\n    \n    if (!validateForm()) return;\n    \n    setIsSubmitting(true);\n    \n    try {\n      const result = await signIn(formData?.email, formData?.password);\n      \n      if (result?.success && result?.user) {\n        // Success! Navigation will be handled by the parent component\n        // through the AuthContext state change and EmployeeLoginPortal useEffect\n        console.log('Login successful, redirecting...');\n      }\n    } catch (error) {\n      console.error('Login form error:', error);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleToggleRegister = () => {\n    setShowRegister(!showRegister);\n  };\n\n  if (showRegister) {\n    return <RegisterForm onBackToLogin={() => setShowRegister(false)} />;\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100 px-4\">\n      <div className=\"max-w-md w-full space-y-8\">\n        <div className=\"text-center\">\n          <div className=\"mx-auto h-12 w-12 bg-blue-600 rounded-full flex items-center justify-center\">\n            <LogIn className=\"h-6 w-6 text-white\" />\n          </div>\n          <h2 className=\"mt-6 text-3xl font-extrabold text-gray-900\">\n            AsistenciaPro\n          </h2>\n          <p className=\"mt-2 text-sm text-gray-600\">\n            Inicia sesión en tu cuenta\n          </p>\n        </div>\n\n        <div className=\"mt-8 space-y-6\">\n          {/* Error Display */}\n          {authError && (\n            <div className=\"bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-md flex items-center space-x-2\">\n              <AlertCircle className=\"h-4 w-4 flex-shrink-0\" />\n              <span className=\"text-sm\">{authError}</span>\n            </div>\n          )}\n\n          <form className=\"space-y-6\" onSubmit={handleSubmit}>\n            <div>\n              <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700\">\n                Correo Electrónico\n              </label>\n              <div className=\"mt-1\">\n                <Input\n                  id=\"email\"\n                  name=\"email\"\n                  type=\"email\"\n                  autoComplete=\"email\"\n                  required\n                  value={formData?.email}\n                  onChange={handleInputChange}\n                  className={`${errors?.email ? 'border-red-300 focus:border-red-500 focus:ring-red-500' : ''}`}\n                  placeholder=\"tu@empresa.com\"\n                />\n                {errors?.email && (\n                  <p className=\"mt-1 text-sm text-red-600\">{errors?.email}</p>\n                )}\n              </div>\n            </div>\n\n            <div>\n              <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700\">\n                Contraseña\n              </label>\n              <div className=\"mt-1 relative\">\n                <Input\n                  id=\"password\"\n                  name=\"password\"\n                  type={showPassword ? 'text' : 'password'}\n                  autoComplete=\"current-password\"\n                  required\n                  value={formData?.password}\n                  onChange={handleInputChange}\n                  className={`pr-10 ${errors?.password ? 'border-red-300 focus:border-red-500 focus:ring-red-500' : ''}`}\n                  placeholder=\"Tu contraseña\"\n                />\n                <button\n                  type=\"button\"\n                  className=\"absolute inset-y-0 right-0 pr-3 flex items-center\"\n                  onClick={() => setShowPassword(!showPassword)}\n                >\n                  {showPassword ? (\n                    <EyeOff className=\"h-4 w-4 text-gray-400\" />\n                  ) : (\n                    <Eye className=\"h-4 w-4 text-gray-400\" />\n                  )}\n                </button>\n                {errors?.password && (\n                  <p className=\"mt-1 text-sm text-red-600\">{errors?.password}</p>\n                )}\n              </div>\n            </div>\n\n            <div>\n              <Button\n                type=\"submit\"\n                disabled={isSubmitting || loading}\n                className=\"w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed\"\n              >\n                {isSubmitting ? (\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n                    <span>Iniciando sesión...</span>\n                  </div>\n                ) : (\n                  <div className=\"flex items-center space-x-2\">\n                    <LogIn className=\"h-4 w-4\" />\n                    <span>Iniciar Sesión</span>\n                  </div>\n                )}\n              </Button>\n            </div>\n          </form>\n\n          {/* Registration Section */}\n          <div className=\"mt-6\">\n            <div className=\"relative\">\n              <div className=\"absolute inset-0 flex items-center\">\n                <div className=\"w-full border-t border-gray-300\" />\n              </div>\n              <div className=\"relative flex justify-center text-sm\">\n                <span className=\"px-2 bg-gradient-to-br from-blue-50 to-indigo-100 text-gray-500\">¿No tienes cuenta?</span>\n              </div>\n            </div>\n\n            <div className=\"mt-6\">\n              <Button\n                type=\"button\"\n                onClick={handleToggleRegister}\n                disabled={isSubmitting || loading}\n                className=\"w-full flex justify-center py-2 px-4 border border-blue-600 rounded-md shadow-sm text-sm font-medium text-blue-600 bg-white hover:bg-blue-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed\"\n              >\n                <div className=\"flex items-center space-x-2\">\n                  <UserPlus className=\"h-4 w-4\" />\n                  <span>Registrarse</span>\n                </div>\n              </Button>\n            </div>\n          </div>\n\n          {/* System Status */}\n          <div className=\"text-center\">\n            <p className=\"text-xs text-gray-500\">\n              Sistema de Control de Asistencia v1.0\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":8218},"src/pages/employee-login-portal/components/RegisterForm.jsx":{"content":"import React, { useState } from 'react';\nimport { useAuth } from '../../../contexts/AuthContext';\nimport Button from '../../../components/ui/Button';\nimport Input from '../../../components/ui/Input';\nimport { Eye, EyeOff, UserPlus, AlertCircle, ArrowLeft } from 'lucide-react';\n\nexport default function RegisterForm({ onBackToLogin }) {\n  const { signUp, authError, loading } = useAuth();\n  const [formData, setFormData] = useState({\n    email: '',\n    password: '',\n    confirmPassword: '',\n    fullName: '',\n    phone: ''\n  });\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [errors, setErrors] = useState({});\n  const [successMessage, setSuccessMessage] = useState('');\n\n  const handleInputChange = (e) => {\n    const { name, value } = e?.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n    // Clear field error when user starts typing\n    if (errors?.[name]) {\n      setErrors(prev => ({\n        ...prev,\n        [name]: ''\n      }));\n    }\n  };\n\n  const validateForm = () => {\n    const newErrors = {};\n    \n    if (!formData?.fullName?.trim()) {\n      newErrors.fullName = 'El nombre completo es requerido';\n    }\n    \n    if (!formData?.email) {\n      newErrors.email = 'El correo electrónico es requerido';\n    } else if (!/\\S+@\\S+\\.\\S+/?.test(formData?.email)) {\n      newErrors.email = 'El correo electrónico no es válido';\n    }\n    \n    if (!formData?.password) {\n      newErrors.password = 'La contraseña es requerida';\n    } else if (formData?.password?.length < 6) {\n      newErrors.password = 'La contraseña debe tener al menos 6 caracteres';\n    }\n    \n    if (!formData?.confirmPassword) {\n      newErrors.confirmPassword = 'La confirmación de contraseña es requerida';\n    } else if (formData?.password !== formData?.confirmPassword) {\n      newErrors.confirmPassword = 'Las contraseñas no coinciden';\n    }\n    \n    if (formData?.phone && !/^\\d{10}$/?.test(formData?.phone?.replace(/\\D/g, ''))) {\n      newErrors.phone = 'El teléfono debe tener 10 dígitos';\n    }\n    \n    setErrors(newErrors);\n    return Object.keys(newErrors)?.length === 0;\n  };\n\n  const handleSubmit = async (e) => {\n    e?.preventDefault();\n    \n    if (!validateForm()) return;\n    \n    setIsSubmitting(true);\n    setSuccessMessage('');\n    \n    try {\n      const result = await signUp(\n        formData?.email, \n        formData?.password, \n        formData?.fullName,\n        'user' // Default role\n      );\n      \n      if (result?.success) {\n        setSuccessMessage('¡Registro exitoso! Por favor, revisa tu correo electrónico para confirmar tu cuenta.');\n        // Clear form\n        setFormData({\n          email: '',\n          password: '',\n          confirmPassword: '',\n          fullName: '',\n          phone: ''\n        });\n      }\n    } catch (error) {\n      console.error('Registration form error:', error);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100 px-4\">\n      <div className=\"max-w-md w-full space-y-8\">\n        <div className=\"text-center\">\n          <div className=\"mx-auto h-12 w-12 bg-blue-600 rounded-full flex items-center justify-center\">\n            <UserPlus className=\"h-6 w-6 text-white\" />\n          </div>\n          <h2 className=\"mt-6 text-3xl font-extrabold text-gray-900\">\n            Crear Cuenta\n          </h2>\n          <p className=\"mt-2 text-sm text-gray-600\">\n            Regístrate para acceder a AsistenciaPro\n          </p>\n        </div>\n\n        <div className=\"mt-8 space-y-6\">\n          {/* Success Message */}\n          {successMessage && (\n            <div className=\"bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded-md flex items-center space-x-2\">\n              <div className=\"flex-shrink-0\">\n                <svg className=\"h-4 w-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n                </svg>\n              </div>\n              <span className=\"text-sm\">{successMessage}</span>\n            </div>\n          )}\n\n          {/* Error Display */}\n          {authError && (\n            <div className=\"bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-md flex items-center space-x-2\">\n              <AlertCircle className=\"h-4 w-4 flex-shrink-0\" />\n              <span className=\"text-sm\">{authError}</span>\n            </div>\n          )}\n\n          <form className=\"space-y-6\" onSubmit={handleSubmit}>\n            <div>\n              <label htmlFor=\"fullName\" className=\"block text-sm font-medium text-gray-700\">\n                Nombre Completo\n              </label>\n              <div className=\"mt-1\">\n                <Input\n                  id=\"fullName\"\n                  name=\"fullName\"\n                  type=\"text\"\n                  required\n                  value={formData?.fullName}\n                  onChange={handleInputChange}\n                  className={`${errors?.fullName ? 'border-red-300 focus:border-red-500 focus:ring-red-500' : ''}`}\n                  placeholder=\"Juan Pérez García\"\n                />\n                {errors?.fullName && (\n                  <p className=\"mt-1 text-sm text-red-600\">{errors?.fullName}</p>\n                )}\n              </div>\n            </div>\n\n            <div>\n              <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700\">\n                Correo Electrónico\n              </label>\n              <div className=\"mt-1\">\n                <Input\n                  id=\"email\"\n                  name=\"email\"\n                  type=\"email\"\n                  autoComplete=\"email\"\n                  required\n                  value={formData?.email}\n                  onChange={handleInputChange}\n                  className={`${errors?.email ? 'border-red-300 focus:border-red-500 focus:ring-red-500' : ''}`}\n                  placeholder=\"tu@empresa.com\"\n                />\n                {errors?.email && (\n                  <p className=\"mt-1 text-sm text-red-600\">{errors?.email}</p>\n                )}\n              </div>\n            </div>\n\n            <div>\n              <label htmlFor=\"phone\" className=\"block text-sm font-medium text-gray-700\">\n                Teléfono (Opcional)\n              </label>\n              <div className=\"mt-1\">\n                <Input\n                  id=\"phone\"\n                  name=\"phone\"\n                  type=\"tel\"\n                  value={formData?.phone}\n                  onChange={handleInputChange}\n                  className={`${errors?.phone ? 'border-red-300 focus:border-red-500 focus:ring-red-500' : ''}`}\n                  placeholder=\"4445997431\"\n                />\n                {errors?.phone && (\n                  <p className=\"mt-1 text-sm text-red-600\">{errors?.phone}</p>\n                )}\n              </div>\n            </div>\n\n            <div>\n              <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700\">\n                Contraseña\n              </label>\n              <div className=\"mt-1 relative\">\n                <Input\n                  id=\"password\"\n                  name=\"password\"\n                  type={showPassword ? 'text' : 'password'}\n                  autoComplete=\"new-password\"\n                  required\n                  value={formData?.password}\n                  onChange={handleInputChange}\n                  className={`pr-10 ${errors?.password ? 'border-red-300 focus:border-red-500 focus:ring-red-500' : ''}`}\n                  placeholder=\"Mínimo 6 caracteres\"\n                />\n                <button\n                  type=\"button\"\n                  className=\"absolute inset-y-0 right-0 pr-3 flex items-center\"\n                  onClick={() => setShowPassword(!showPassword)}\n                >\n                  {showPassword ? (\n                    <EyeOff className=\"h-4 w-4 text-gray-400\" />\n                  ) : (\n                    <Eye className=\"h-4 w-4 text-gray-400\" />\n                  )}\n                </button>\n                {errors?.password && (\n                  <p className=\"mt-1 text-sm text-red-600\">{errors?.password}</p>\n                )}\n              </div>\n            </div>\n\n            <div>\n              <label htmlFor=\"confirmPassword\" className=\"block text-sm font-medium text-gray-700\">\n                Confirmar Contraseña\n              </label>\n              <div className=\"mt-1 relative\">\n                <Input\n                  id=\"confirmPassword\"\n                  name=\"confirmPassword\"\n                  type={showConfirmPassword ? 'text' : 'password'}\n                  autoComplete=\"new-password\"\n                  required\n                  value={formData?.confirmPassword}\n                  onChange={handleInputChange}\n                  className={`pr-10 ${errors?.confirmPassword ? 'border-red-300 focus:border-red-500 focus:ring-red-500' : ''}`}\n                  placeholder=\"Repite tu contraseña\"\n                />\n                <button\n                  type=\"button\"\n                  className=\"absolute inset-y-0 right-0 pr-3 flex items-center\"\n                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                >\n                  {showConfirmPassword ? (\n                    <EyeOff className=\"h-4 w-4 text-gray-400\" />\n                  ) : (\n                    <Eye className=\"h-4 w-4 text-gray-400\" />\n                  )}\n                </button>\n                {errors?.confirmPassword && (\n                  <p className=\"mt-1 text-sm text-red-600\">{errors?.confirmPassword}</p>\n                )}\n              </div>\n            </div>\n\n            <div>\n              <Button\n                type=\"submit\"\n                disabled={isSubmitting || loading}\n                className=\"w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed\"\n              >\n                {isSubmitting ? (\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n                    <span>Creando cuenta...</span>\n                  </div>\n                ) : (\n                  <div className=\"flex items-center space-x-2\">\n                    <UserPlus className=\"h-4 w-4\" />\n                    <span>Crear Cuenta</span>\n                  </div>\n                )}\n              </Button>\n            </div>\n          </form>\n\n          {/* Back to Login */}\n          <div className=\"mt-6\">\n            <div className=\"relative\">\n              <div className=\"absolute inset-0 flex items-center\">\n                <div className=\"w-full border-t border-gray-300\" />\n              </div>\n              <div className=\"relative flex justify-center text-sm\">\n                <span className=\"px-2 bg-gradient-to-br from-blue-50 to-indigo-100 text-gray-500\">¿Ya tienes cuenta?</span>\n              </div>\n            </div>\n\n            <div className=\"mt-6\">\n              <Button\n                type=\"button\"\n                onClick={onBackToLogin}\n                disabled={isSubmitting || loading}\n                className=\"w-full flex justify-center py-2 px-4 border border-blue-600 rounded-md shadow-sm text-sm font-medium text-blue-600 bg-white hover:bg-blue-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed\"\n              >\n                <div className=\"flex items-center space-x-2\">\n                  <ArrowLeft className=\"h-4 w-4\" />\n                  <span>Volver al Login</span>\n                </div>\n              </Button>\n            </div>\n          </div>\n\n          {/* System Status */}\n          <div className=\"text-center\">\n            <p className=\"text-xs text-gray-500\">\n              Sistema de Control de Asistencia v1.0\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":12473},"src/pages/employee-login-portal/components/SafetyReminders.jsx":{"content":"import React from 'react';\nimport Icon from '../../../components/AppIcon';\n\nconst SafetyReminders = () => {\n  const safetyTips = [\n    {\n      id: 1,\n      icon: 'HardHat',\n      title: 'Equipo de Protección Personal',\n      description: 'Siempre use casco, chaleco reflectivo y calzado de seguridad en el sitio de construcción.',\n      priority: 'high'\n    },\n    {\n      id: 2,\n      icon: 'AlertTriangle',\n      title: 'Reporte de Incidentes',\n      description: 'Reporte inmediatamente cualquier accidente o condición insegura a su supervisor.',\n      priority: 'high'\n    },\n    {\n      id: 3,\n      icon: 'Eye',\n      title: 'Protección Ocular',\n      description: 'Use gafas de seguridad al trabajar con herramientas eléctricas o materiales que generen partículas.',\n      priority: 'medium'\n    },\n    {\n      id: 4,\n      icon: 'Zap',\n      title: 'Seguridad Eléctrica',\n      description: 'Verifique que las herramientas eléctricas estén en buen estado antes de usarlas.',\n      priority: 'medium'\n    }\n  ];\n\n  const announcements = [\n    {\n      id: 1,\n      type: 'info',\n      title: 'Capacitación de Seguridad',\n      message: 'Capacitación obligatoria de seguridad el viernes 8 de enero a las 8:00 AM.',\n      date: '2025-01-04'\n    },\n    {\n      id: 2,\n      type: 'warning',\n      title: 'Condiciones Climáticas',\n      message: 'Se esperan lluvias fuertes. Extreme precauciones en superficies resbaladizas.',\n      date: '2025-01-04'\n    },\n    {\n      id: 3,\n      type: 'success',\n      title: 'Reconocimiento',\n      message: 'Felicitaciones al equipo de Obra Central por 30 días sin incidentes.',\n      date: '2025-01-03'\n    }\n  ];\n\n  const getPriorityColor = (priority) => {\n    switch (priority) {\n      case 'high': return 'text-error';\n      case 'medium': return 'text-warning';\n      default: return 'text-primary';\n    }\n  };\n\n  const getAnnouncementIcon = (type) => {\n    switch (type) {\n      case 'warning': return 'AlertTriangle';\n      case 'success': return 'CheckCircle';\n      default: return 'Info';\n    }\n  };\n\n  const getAnnouncementColor = (type) => {\n    switch (type) {\n      case 'warning': return 'text-warning';\n      case 'success': return 'text-success';\n      default: return 'text-primary';\n    }\n  };\n\n  return (\n    <div className=\"w-full max-w-sm\">\n      {/* Safety Reminders Section */}\n      <div className=\"bg-card rounded-lg shadow-lg border border-border p-6 mb-6\">\n        <div className=\"flex items-center space-x-2 mb-4\">\n          <Icon name=\"Shield\" size={20} className=\"text-primary\" />\n          <h3 className=\"text-lg font-semibold text-foreground\">Recordatorios de Seguridad</h3>\n        </div>\n\n        <div className=\"space-y-4\">\n          {safetyTips?.map((tip) => (\n            <div key={tip?.id} className=\"flex items-start space-x-3 p-3 bg-muted/30 rounded-lg\">\n              <div className={`flex-shrink-0 ${getPriorityColor(tip?.priority)}`}>\n                <Icon name={tip?.icon} size={20} />\n              </div>\n              <div className=\"flex-1 min-w-0\">\n                <h4 className=\"text-sm font-medium text-foreground mb-1\">{tip?.title}</h4>\n                <p className=\"text-xs text-muted-foreground leading-relaxed\">{tip?.description}</p>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        <div className=\"mt-4 p-3 bg-primary/10 rounded-lg\">\n          <div className=\"flex items-center space-x-2\">\n            <Icon name=\"Phone\" size={16} className=\"text-primary\" />\n            <div className=\"text-sm\">\n              <p className=\"font-medium text-foreground\">Emergencias: 911</p>\n              <p className=\"text-xs text-muted-foreground\">Supervisor: (555) 123-4567</p>\n            </div>\n          </div>\n        </div>\n      </div>\n      {/* Company Announcements Section */}\n      <div className=\"bg-card rounded-lg shadow-lg border border-border p-6\">\n        <div className=\"flex items-center space-x-2 mb-4\">\n          <Icon name=\"Megaphone\" size={20} className=\"text-primary\" />\n          <h3 className=\"text-lg font-semibold text-foreground\">Anuncios de la Empresa</h3>\n        </div>\n\n        <div className=\"space-y-3\">\n          {announcements?.map((announcement) => (\n            <div key={announcement?.id} className=\"border-l-4 border-primary/30 pl-4 py-2\">\n              <div className=\"flex items-start space-x-2\">\n                <Icon \n                  name={getAnnouncementIcon(announcement?.type)} \n                  size={16} \n                  className={`mt-0.5 ${getAnnouncementColor(announcement?.type)}`} \n                />\n                <div className=\"flex-1 min-w-0\">\n                  <h4 className=\"text-sm font-medium text-foreground\">{announcement?.title}</h4>\n                  <p className=\"text-xs text-muted-foreground mt-1 leading-relaxed\">\n                    {announcement?.message}\n                  </p>\n                  <p className=\"text-xs text-muted-foreground mt-2 opacity-75\">\n                    {new Date(announcement.date)?.toLocaleDateString('es-ES', {\n                      day: 'numeric',\n                      month: 'long'\n                    })}\n                  </p>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        <div className=\"mt-4 text-center\">\n          <button className=\"text-xs text-primary hover:text-primary/80 transition-colors\">\n            Ver todos los anuncios\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SafetyReminders;","size_bytes":5529},"src/pages/employee-login-portal/components/SessionTimeout.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport Button from '../../../components/ui/Button';\nimport Icon from '../../../components/AppIcon';\n\nconst SessionTimeout = ({ isVisible, onExtend, onLogout, timeLeft = 300 }) => {\n  const [countdown, setCountdown] = useState(timeLeft);\n\n  useEffect(() => {\n    if (!isVisible) return;\n\n    setCountdown(timeLeft);\n    \n    const timer = setInterval(() => {\n      setCountdown(prev => {\n        if (prev <= 1) {\n          clearInterval(timer);\n          onLogout();\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, [isVisible, timeLeft, onLogout]);\n\n  const formatTime = (seconds) => {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes}:${remainingSeconds?.toString()?.padStart(2, '0')}`;\n  };\n\n  if (!isVisible) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4\">\n      <div className=\"bg-card rounded-lg shadow-xl border border-border p-8 max-w-md w-full\">\n        {/* Warning Icon */}\n        <div className=\"flex items-center justify-center w-16 h-16 bg-warning rounded-full mx-auto mb-6\">\n          <Icon name=\"Clock\" size={32} color=\"white\" />\n        </div>\n\n        {/* Title and Message */}\n        <div className=\"text-center mb-6\">\n          <h2 className=\"text-xl font-semibold text-foreground mb-2\">\n            Sesión por Expirar\n          </h2>\n          <p className=\"text-muted-foreground\">\n            Su sesión expirará automáticamente por inactividad en:\n          </p>\n        </div>\n\n        {/* Countdown Timer */}\n        <div className=\"text-center mb-8\">\n          <div className=\"inline-flex items-center justify-center w-20 h-20 bg-warning/10 rounded-full mb-4\">\n            <span className=\"text-2xl font-bold text-warning\">\n              {formatTime(countdown)}\n            </span>\n          </div>\n          <p className=\"text-sm text-muted-foreground\">\n            Tiempo restante antes del cierre automático\n          </p>\n        </div>\n\n        {/* Security Information */}\n        <div className=\"mb-6 p-4 bg-muted/50 rounded-lg\">\n          <div className=\"flex items-start space-x-2\">\n            <Icon name=\"Shield\" size={16} className=\"text-primary mt-0.5\" />\n            <div className=\"text-sm text-foreground\">\n              <p className=\"font-medium mb-1\">Medida de Seguridad</p>\n              <p className=\"text-muted-foreground\">\n                Esta advertencia aparece para proteger su información personal y mantener \n                la seguridad del sistema.\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Action Buttons */}\n        <div className=\"grid grid-cols-2 gap-3\">\n          <Button\n            variant=\"default\"\n            size=\"lg\"\n            onClick={onExtend}\n            iconName=\"RefreshCw\"\n            iconPosition=\"left\"\n          >\n            Extender Sesión\n          </Button>\n\n          <Button\n            variant=\"outline\"\n            size=\"lg\"\n            onClick={onLogout}\n            iconName=\"LogOut\"\n            iconPosition=\"left\"\n          >\n            Cerrar Sesión\n          </Button>\n        </div>\n\n        {/* Additional Information */}\n        <div className=\"mt-6 text-center\">\n          <p className=\"text-xs text-muted-foreground\">\n            Al extender la sesión, tendrá 30 minutos adicionales de actividad.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SessionTimeout;","size_bytes":3605},"src/pages/employee-login-portal/components/SystemStatus.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport Icon from '../../../components/AppIcon';\n\nconst SystemStatus = () => {\n  const [currentTime, setCurrentTime] = useState(new Date());\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setCurrentTime(new Date());\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, []);\n\n  const systemServices = [\n    {\n      id: 1,\n      name: 'Active Directory',\n      status: 'online',\n      description: 'Sincronización de usuarios activa',\n      lastSync: new Date(Date.now() - 15 * 60 * 1000) // 15 minutes ago\n    },\n    {\n      id: 2,\n      name: 'SSO Service',\n      status: 'online',\n      description: 'Inicio de sesión único disponible',\n      lastSync: new Date(Date.now() - 5 * 60 * 1000) // 5 minutes ago\n    },\n    {\n      id: 3,\n      name: 'Database',\n      status: 'online',\n      description: 'Base de datos operativa',\n      lastSync: new Date(Date.now() - 2 * 60 * 1000) // 2 minutes ago\n    },\n    {\n      id: 4,\n      name: 'Backup System',\n      status: 'maintenance',\n      description: 'Respaldo programado en progreso',\n      lastSync: new Date(Date.now() - 30 * 60 * 1000) // 30 minutes ago\n    }\n  ];\n\n  const maintenanceSchedule = [\n    {\n      id: 1,\n      title: 'Mantenimiento de Base de Datos',\n      description: 'Optimización y limpieza de datos históricos',\n      scheduledDate: '2025-01-05',\n      scheduledTime: '02:00 - 04:00',\n      impact: 'low'\n    },\n    {\n      id: 2,\n      title: 'Actualización de Seguridad',\n      description: 'Parches de seguridad y actualizaciones del sistema',\n      scheduledDate: '2025-01-12',\n      scheduledTime: '01:00 - 03:00',\n      impact: 'medium'\n    },\n    {\n      id: 3,\n      title: 'Migración de Servidores',\n      description: 'Migración a nueva infraestructura de servidores',\n      scheduledDate: '2025-01-19',\n      scheduledTime: '00:00 - 06:00',\n      impact: 'high'\n    }\n  ];\n\n  const recentUpdates = [\n    {\n      id: 1,\n      version: 'v2.4.1',\n      date: '2025-01-02',\n      changes: [\n        'Mejoras en el rendimiento del dashboard',\n        'Corrección de errores en reportes',\n        'Nueva funcionalidad de exportación'\n      ]\n    },\n    {\n      id: 2,\n      version: 'v2.4.0',\n      date: '2024-12-28',\n      changes: [\n        'Interfaz renovada para móviles',\n        'Integración con sistema de nómina',\n        'Notificaciones en tiempo real'\n      ]\n    }\n  ];\n\n  const getStatusColor = (status) => {\n    switch (status) {\n      case 'online': return 'text-success';\n      case 'maintenance': return 'text-warning';\n      case 'offline': return 'text-error';\n      default: return 'text-muted-foreground';\n    }\n  };\n\n  const getStatusIcon = (status) => {\n    switch (status) {\n      case 'online': return 'CheckCircle';\n      case 'maintenance': return 'Settings';\n      case 'offline': return 'XCircle';\n      default: return 'Circle';\n    }\n  };\n\n  const getImpactColor = (impact) => {\n    switch (impact) {\n      case 'high': return 'text-error';\n      case 'medium': return 'text-warning';\n      case 'low': return 'text-success';\n      default: return 'text-muted-foreground';\n    }\n  };\n\n  const formatRelativeTime = (date) => {\n    const now = new Date();\n    const diff = now - date;\n    const minutes = Math.floor(diff / (1000 * 60));\n    \n    if (minutes < 1) return 'Ahora';\n    if (minutes < 60) return `hace ${minutes}m`;\n    \n    const hours = Math.floor(minutes / 60);\n    if (hours < 24) return `hace ${hours}h`;\n    \n    const days = Math.floor(hours / 24);\n    return `hace ${days}d`;\n  };\n\n  return (\n    <div className=\"w-full max-w-sm\">\n      {/* System Status Section */}\n      <div className=\"bg-card rounded-lg shadow-lg border border-border p-6 mb-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center space-x-2\">\n            <Icon name=\"Activity\" size={20} className=\"text-primary\" />\n            <h3 className=\"text-lg font-semibold text-foreground\">Estado del Sistema</h3>\n          </div>\n          <div className=\"text-xs text-muted-foreground\">\n            {currentTime.toLocaleTimeString('es-ES', { \n              hour: '2-digit', \n              minute: '2-digit' \n            })}\n          </div>\n        </div>\n\n        <div className=\"space-y-3\">\n          {systemServices?.map((service) => (\n            <div key={service?.id} className=\"flex items-center justify-between p-3 bg-muted/30 rounded-lg\">\n              <div className=\"flex items-center space-x-3\">\n                <Icon \n                  name={getStatusIcon(service?.status)} \n                  size={16} \n                  className={getStatusColor(service?.status)} \n                />\n                <div>\n                  <p className=\"text-sm font-medium text-foreground\">{service?.name}</p>\n                  <p className=\"text-xs text-muted-foreground\">{service?.description}</p>\n                </div>\n              </div>\n              <div className=\"text-right\">\n                <p className={`text-xs font-medium capitalize ${getStatusColor(service?.status)}`}>\n                  {service?.status === 'online' ? 'En línea' : \n                   service?.status === 'maintenance' ? 'Mantenimiento' : 'Fuera de línea'}\n                </p>\n                <p className=\"text-xs text-muted-foreground\">\n                  {formatRelativeTime(service?.lastSync)}\n                </p>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        <div className=\"mt-4 p-3 bg-success/10 rounded-lg\">\n          <div className=\"flex items-center space-x-2\">\n            <Icon name=\"CheckCircle\" size={16} className=\"text-success\" />\n            <p className=\"text-sm font-medium text-success\">Todos los servicios operativos</p>\n          </div>\n        </div>\n      </div>\n      {/* Maintenance Schedule Section */}\n      <div className=\"bg-card rounded-lg shadow-lg border border-border p-6 mb-6\">\n        <div className=\"flex items-center space-x-2 mb-4\">\n          <Icon name=\"Calendar\" size={20} className=\"text-primary\" />\n          <h3 className=\"text-lg font-semibold text-foreground\">Mantenimiento Programado</h3>\n        </div>\n\n        <div className=\"space-y-3\">\n          {maintenanceSchedule?.map((maintenance) => (\n            <div key={maintenance?.id} className=\"border-l-4 border-warning/30 pl-4 py-2\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1\">\n                  <h4 className=\"text-sm font-medium text-foreground\">{maintenance?.title}</h4>\n                  <p className=\"text-xs text-muted-foreground mt-1 leading-relaxed\">\n                    {maintenance?.description}\n                  </p>\n                  <div className=\"flex items-center space-x-4 mt-2\">\n                    <p className=\"text-xs text-muted-foreground\">\n                      {new Date(maintenance.scheduledDate)?.toLocaleDateString('es-ES', {\n                        day: 'numeric',\n                        month: 'short'\n                      })}\n                    </p>\n                    <p className=\"text-xs text-muted-foreground\">{maintenance?.scheduledTime}</p>\n                  </div>\n                </div>\n                <span className={`text-xs font-medium px-2 py-1 rounded-full ${\n                  maintenance?.impact === 'high' ? 'bg-error/10 text-error' :\n                  maintenance?.impact === 'medium'? 'bg-warning/10 text-warning' : 'bg-success/10 text-success'\n                }`}>\n                  {maintenance?.impact === 'high' ? 'Alto' :\n                   maintenance?.impact === 'medium' ? 'Medio' : 'Bajo'}\n                </span>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n      {/* Recent Updates Section */}\n      <div className=\"bg-card rounded-lg shadow-lg border border-border p-6\">\n        <div className=\"flex items-center space-x-2 mb-4\">\n          <Icon name=\"Download\" size={20} className=\"text-primary\" />\n          <h3 className=\"text-lg font-semibold text-foreground\">Actualizaciones Recientes</h3>\n        </div>\n\n        <div className=\"space-y-4\">\n          {recentUpdates?.map((update) => (\n            <div key={update?.id} className=\"p-3 bg-muted/30 rounded-lg\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-sm font-medium text-primary\">{update?.version}</span>\n                <span className=\"text-xs text-muted-foreground\">\n                  {new Date(update.date)?.toLocaleDateString('es-ES', {\n                    day: 'numeric',\n                    month: 'short'\n                  })}\n                </span>\n              </div>\n              <ul className=\"space-y-1\">\n                {update?.changes?.map((change, index) => (\n                  <li key={index} className=\"text-xs text-muted-foreground flex items-start space-x-2\">\n                    <Icon name=\"ChevronRight\" size={12} className=\"mt-0.5 flex-shrink-0\" />\n                    <span>{change}</span>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          ))}\n        </div>\n\n        <div className=\"mt-4 text-center\">\n          <button className=\"text-xs text-primary hover:text-primary/80 transition-colors\">\n            Ver historial completo\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SystemStatus;","size_bytes":9441},"src/pages/employee-login-portal/components/TwoFactorAuth.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport Button from '../../../components/ui/Button';\nimport Input from '../../../components/ui/Input';\nimport Icon from '../../../components/AppIcon';\n\nconst TwoFactorAuth = ({ userRole, onVerify, onCancel, isLoading }) => {\n  const [verificationCode, setVerificationCode] = useState('');\n  const [method, setMethod] = useState('sms'); // 'sms' or 'authenticator'\n  const [timeLeft, setTimeLeft] = useState(300); // 5 minutes\n  const [error, setError] = useState('');\n\n  const mockCodes = {\n    sms: '123456',\n    authenticator: '789012'\n  };\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setTimeLeft(prev => {\n        if (prev <= 1) {\n          clearInterval(timer);\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, []);\n\n  const formatTime = (seconds) => {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes}:${remainingSeconds?.toString()?.padStart(2, '0')}`;\n  };\n\n  const handleSubmit = (e) => {\n    e?.preventDefault();\n    \n    if (!verificationCode) {\n      setError('El código de verificación es requerido');\n      return;\n    }\n\n    if (verificationCode !== mockCodes?.[method]) {\n      setError(`Código incorrecto. Use: ${mockCodes?.[method]}`);\n      return;\n    }\n\n    onVerify(verificationCode);\n  };\n\n  const handleResendCode = () => {\n    setTimeLeft(300);\n    setError('');\n    // Simulate code resend\n  };\n\n  return (\n    <div className=\"w-full max-w-md mx-auto\">\n      <div className=\"bg-card rounded-lg shadow-lg border border-border p-8\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <div className=\"flex items-center justify-center w-16 h-16 bg-warning rounded-full mx-auto mb-4\">\n            <Icon name=\"Shield\" size={32} color=\"white\" />\n          </div>\n          <h2 className=\"text-2xl font-semibold text-foreground mb-2\">Verificación en Dos Pasos</h2>\n          <p className=\"text-muted-foreground\">\n            Se requiere verificación adicional para roles administrativos\n          </p>\n        </div>\n\n        {/* Method Selection */}\n        <div className=\"mb-6\">\n          <p className=\"text-sm font-medium text-foreground mb-3\">Método de verificación:</p>\n          <div className=\"grid grid-cols-2 gap-3\">\n            <button\n              type=\"button\"\n              onClick={() => setMethod('sms')}\n              className={`p-3 rounded-lg border transition-all duration-150 ease-out-cubic ${\n                method === 'sms' ?'border-primary bg-primary/10 text-primary' :'border-border bg-background text-muted-foreground hover:bg-muted'\n              }`}\n            >\n              <Icon name=\"Smartphone\" size={20} className=\"mx-auto mb-1\" />\n              <span className=\"text-xs font-medium\">SMS</span>\n            </button>\n            <button\n              type=\"button\"\n              onClick={() => setMethod('authenticator')}\n              className={`p-3 rounded-lg border transition-all duration-150 ease-out-cubic ${\n                method === 'authenticator' ?'border-primary bg-primary/10 text-primary' :'border-border bg-background text-muted-foreground hover:bg-muted'\n              }`}\n            >\n              <Icon name=\"Key\" size={20} className=\"mx-auto mb-1\" />\n              <span className=\"text-xs font-medium\">App</span>\n            </button>\n          </div>\n        </div>\n\n        {/* Instructions */}\n        <div className=\"mb-6 p-4 bg-muted/50 rounded-lg\">\n          <div className=\"flex items-start space-x-2\">\n            <Icon name=\"Info\" size={16} className=\"text-primary mt-0.5\" />\n            <div className=\"text-sm text-foreground\">\n              {method === 'sms' ? (\n                <p>Hemos enviado un código de 6 dígitos a su teléfono móvil registrado.</p>\n              ) : (\n                <p>Abra su aplicación de autenticación y ingrese el código de 6 dígitos.</p>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Error Message */}\n        {error && (\n          <div className=\"mb-6 p-4 bg-error/10 border border-error/20 rounded-lg\">\n            <div className=\"flex items-center space-x-2\">\n              <Icon name=\"AlertCircle\" size={16} className=\"text-error\" />\n              <p className=\"text-sm text-error\">{error}</p>\n            </div>\n          </div>\n        )}\n\n        {/* Verification Form */}\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          <Input\n            label=\"Código de Verificación\"\n            type=\"text\"\n            placeholder=\"000000\"\n            value={verificationCode}\n            onChange={(e) => {\n              setVerificationCode(e?.target?.value?.replace(/\\D/g, '')?.slice(0, 6));\n              setError('');\n            }}\n            error={error}\n            maxLength={6}\n            required\n          />\n\n          {/* Timer */}\n          <div className=\"text-center\">\n            <p className=\"text-sm text-muted-foreground\">\n              Código válido por: <span className=\"font-medium text-warning\">{formatTime(timeLeft)}</span>\n            </p>\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"space-y-3\">\n            <Button\n              type=\"submit\"\n              variant=\"default\"\n              size=\"lg\"\n              fullWidth\n              loading={isLoading}\n              disabled={verificationCode?.length !== 6 || timeLeft === 0}\n              iconName=\"Shield\"\n              iconPosition=\"right\"\n            >\n              Verificar Código\n            </Button>\n\n            <div className=\"grid grid-cols-2 gap-3\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                size=\"default\"\n                onClick={handleResendCode}\n                disabled={timeLeft > 240} // Allow resend after 1 minute\n                iconName=\"RefreshCw\"\n                iconPosition=\"left\"\n              >\n                Reenviar\n              </Button>\n\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"default\"\n                onClick={onCancel}\n                iconName=\"ArrowLeft\"\n                iconPosition=\"left\"\n              >\n                Cancelar\n              </Button>\n            </div>\n          </div>\n        </form>\n\n        {/* Help Text */}\n        <div className=\"mt-6 text-center\">\n          <p className=\"text-xs text-muted-foreground\">\n            ¿No recibió el código? Verifique su configuración de mensajes o contacte al administrador.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TwoFactorAuth;","size_bytes":6746},"src/pages/enhanced-employee-management-console-with-deletion-controls/components/DeleteConfirmationModal.jsx":{"content":"import React, { useState } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport CurrencyDisplay from '../../../components/ui/CurrencyDisplay';\n\nconst DeleteConfirmationModal = ({ isOpen, employee, onClose, onConfirm, loading = false }) => {\n  const [confirmText, setConfirmText] = useState('');\n  const expectedText = employee?.employee_id || '';\n\n  if (!isOpen || !employee) return null;\n\n  const handleConfirm = () => {\n    if (confirmText === expectedText) {\n      onConfirm();\n    }\n  };\n\n  const impactAnalysis = {\n    activeAttendance: 12, // Mock data - would be calculated\n    pendingPayroll: 1,\n    activeIncidents: 2,\n    totalRecords: 87\n  };\n\n  return (\n    <div className=\"fixed inset-0 z-50 overflow-y-auto\">\n      <div className=\"flex items-center justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0\">\n        {/* Background overlay */}\n        <div \n          className=\"fixed inset-0 bg-black bg-opacity-50 transition-opacity\"\n          onClick={onClose}\n        />\n\n        {/* Modal */}\n        <div className=\"relative inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full\">\n          <div className=\"bg-white px-6 pt-6 pb-4\">\n            {/* Header */}\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"flex-shrink-0 w-10 h-10 bg-red-100 rounded-full flex items-center justify-center\">\n                  <Icon name=\"AlertTriangle\" className=\"w-5 h-5 text-red-600\" />\n                </div>\n                <div>\n                  <h3 className=\"text-lg font-medium text-gray-900\">\n                    Eliminar Empleado\n                  </h3>\n                  <p className=\"text-sm text-gray-500\">\n                    Esta acción no se puede deshacer\n                  </p>\n                </div>\n              </div>\n              <button\n                onClick={onClose}\n                className=\"text-gray-400 hover:text-gray-600\"\n                disabled={loading}\n              >\n                <Icon name=\"X\" size={24} />\n              </button>\n            </div>\n\n            {/* Employee Info */}\n            <div className=\"mb-6 p-4 bg-gray-50 rounded-lg\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"flex-shrink-0\">\n                  {employee?.avatar ? (\n                    <img \n                      src={employee?.avatar} \n                      alt={employee?.full_name}\n                      className=\"w-12 h-12 rounded-full object-cover\"\n                    />\n                  ) : (\n                    <div className=\"w-12 h-12 bg-gray-300 rounded-full flex items-center justify-center\">\n                      <Icon name=\"User\" size={20} className=\"text-gray-600\" />\n                    </div>\n                  )}\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <h4 className=\"text-lg font-medium text-gray-900 truncate\">\n                    {employee?.full_name}\n                  </h4>\n                  <p className=\"text-sm text-gray-500\">\n                    ID: {employee?.employee_id} • {employee?.construction_sites?.name}\n                  </p>\n                  <p className=\"text-sm text-gray-500\">\n                    Salario: <CurrencyDisplay amount={employee?.daily_salary} /> diario\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            {/* Impact Analysis */}\n            <div className=\"mb-6\">\n              <h4 className=\"text-sm font-medium text-gray-900 mb-3\">\n                Análisis de Impacto\n              </h4>\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"text-gray-600\">Registros de asistencia activos</span>\n                  <span className=\"font-medium text-gray-900\">{impactAnalysis?.activeAttendance}</span>\n                </div>\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"text-gray-600\">Cálculos de nómina pendientes</span>\n                  <span className=\"font-medium text-gray-900\">{impactAnalysis?.pendingPayroll}</span>\n                </div>\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"text-gray-600\">Incidencias activas</span>\n                  <span className=\"font-medium text-gray-900\">{impactAnalysis?.activeIncidents}</span>\n                </div>\n                <div className=\"border-t pt-2 flex items-center justify-between text-sm\">\n                  <span className=\"text-gray-900 font-medium\">Total de registros afectados</span>\n                  <span className=\"font-bold text-gray-900\">{impactAnalysis?.totalRecords}</span>\n                </div>\n              </div>\n            </div>\n\n            {/* Cascade Options */}\n            <div className=\"mb-6 p-4 bg-yellow-50 border border-yellow-200 rounded-lg\">\n              <div className=\"flex items-start space-x-2\">\n                <Icon name=\"Info\" className=\"w-5 h-5 text-yellow-600 mt-0.5\" />\n                <div>\n                  <h4 className=\"text-sm font-medium text-yellow-800\">\n                    Eliminación Suave Activada\n                  </h4>\n                  <p className=\"text-sm text-yellow-700 mt-1\">\n                    El empleado será marcado como eliminado pero los datos históricos se mantendrán por 30 días para auditoría. Durante este período, puede restaurar el empleado.\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            {/* Confirmation Input */}\n            <div className=\"mb-6\">\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Para confirmar, escriba el ID del empleado: <span className=\"font-mono bg-gray-100 px-1 rounded\">{expectedText}</span>\n              </label>\n              <input\n                type=\"text\"\n                value={confirmText}\n                onChange={(e) => setConfirmText(e?.target?.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500\"\n                placeholder={`Escriba \"${expectedText}\" para confirmar`}\n                disabled={loading}\n              />\n            </div>\n\n            {/* Recovery Notice */}\n            <div className=\"mb-6 p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n              <div className=\"flex items-center space-x-2\">\n                <Icon name=\"Clock\" className=\"w-4 h-4 text-blue-600\" />\n                <span className=\"text-sm text-blue-800\">\n                  Periodo de recuperación: 30 días\n                </span>\n              </div>\n            </div>\n          </div>\n\n          {/* Actions */}\n          <div className=\"bg-gray-50 px-6 py-4 flex items-center justify-end space-x-3\">\n            <Button\n              variant=\"outline\"\n              onClick={onClose}\n              disabled={loading}\n            >\n              Cancelar\n            </Button>\n            <Button\n              variant=\"destructive\"\n              onClick={handleConfirm}\n              disabled={loading || confirmText !== expectedText}\n              iconName={loading ? 'Loader2' : 'Trash2'}\n              className={loading ? 'animate-spin' : ''}\n            >\n              {loading ? 'Eliminando...' : 'Eliminar Empleado'}\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DeleteConfirmationModal;","size_bytes":7787},"src/pages/enhanced-employee-payroll-management-with-detailed-calculations/components/AuditTrailPanel.jsx":{"content":"import React from 'react';\nimport Icon from '../../../components/AppIcon';\n\nconst AuditTrailPanel = ({ logs = [], employeeId }) => {\n  // Filter logs for the specific employee if provided\n  const filteredLogs = employeeId \n    ? logs?.filter(log => log?.description?.includes(employeeId))\n    : logs;\n\n  const formatTimestamp = (timestamp) => {\n    return new Date(timestamp)?.toLocaleString('es-MX', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const getActionIcon = (action) => {\n    switch (action) {\n      case 'calculation':\n        return 'Calculator';\n      case 'adjustment_added':\n        return 'Plus';\n      case 'export':\n        return 'Download';\n      case 'bulk_calculation':\n        return 'Users';\n      default:\n        return 'Activity';\n    }\n  };\n\n  const getActionColor = (action) => {\n    switch (action) {\n      case 'calculation': case'bulk_calculation':\n        return 'text-blue-600 bg-blue-50';\n      case 'adjustment_added':\n        return 'text-green-600 bg-green-50';\n      case 'export':\n        return 'text-purple-600 bg-purple-50';\n      default:\n        return 'text-gray-600 bg-gray-50';\n    }\n  };\n\n  return (\n    <div className=\"bg-card border border-border rounded-lg\">\n      <div className=\"p-4 border-b border-border\">\n        <h4 className=\"text-lg font-semibold text-foreground flex items-center\">\n          <Icon name=\"FileText\" size={20} className=\"mr-2\" />\n          Registro de Auditoría\n          {employeeId && (\n            <span className=\"ml-2 text-sm text-muted-foreground\">\n              (Empleado específico)\n            </span>\n          )}\n        </h4>\n      </div>\n\n      <div className=\"p-4\">\n        {filteredLogs?.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <Icon name=\"FileText\" size={32} className=\"mx-auto text-muted-foreground mb-2\" />\n            <p className=\"text-muted-foreground\">No hay registros de auditoría disponibles</p>\n          </div>\n        ) : (\n          <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n            {filteredLogs?.slice(0, 20)?.map((log) => (\n              <div \n                key={log?.id}\n                className=\"flex items-start space-x-3 p-3 bg-background border border-border rounded-lg\"\n              >\n                <div className={`p-2 rounded-full flex-shrink-0 ${getActionColor(log?.action)}`}>\n                  <Icon name={getActionIcon(log?.action)} size={16} />\n                </div>\n                \n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"flex items-center justify-between\">\n                    <h5 className=\"text-sm font-medium text-foreground truncate\">\n                      {log?.action === 'calculation' && 'Cálculo de Nómina'}\n                      {log?.action === 'adjustment_added' && 'Ajuste Agregado'}\n                      {log?.action === 'export' && 'Exportación de Datos'}\n                      {log?.action === 'bulk_calculation' && 'Cálculo Masivo'}\n                      {!['calculation', 'adjustment_added', 'export', 'bulk_calculation']?.includes(log?.action) && 'Actividad'}\n                    </h5>\n                    <span className=\"text-xs text-muted-foreground flex-shrink-0 ml-2\">\n                      {formatTimestamp(log?.timestamp)}\n                    </span>\n                  </div>\n                  \n                  <p className=\"text-xs text-muted-foreground mt-1 line-clamp-2\">\n                    {log?.description}\n                  </p>\n                  \n                  <div className=\"flex items-center justify-between mt-2\">\n                    <span className=\"text-xs font-medium text-muted-foreground\">\n                      Por: {log?.user}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            ))}\n            \n            {filteredLogs?.length > 20 && (\n              <div className=\"text-center pt-2\">\n                <p className=\"text-xs text-muted-foreground\">\n                  Mostrando los 20 registros más recientes de {filteredLogs?.length} total\n                </p>\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default AuditTrailPanel;","size_bytes":4318},"src/pages/enhanced-employee-payroll-management-with-detailed-calculations/components/EmployeeSelectionGrid.jsx":{"content":"import React from 'react';\nimport Icon from '../../../components/AppIcon';\nimport CurrencyDisplay from '../../../components/ui/CurrencyDisplay';\n\nconst EmployeeSelectionGrid = ({ \n  employees = [], \n  selectedEmployee, \n  onEmployeeSelect,\n  processing,\n  currencyConfig\n}) => {\n\n  const handleEmployeeClick = (employee) => {\n    if (processing) return;\n    onEmployeeSelect?.(employee);\n  };\n\n  return (\n    <div className=\"bg-card border border-border rounded-lg\">\n      <div className=\"p-4 border-b border-border\">\n        <h3 className=\"text-lg font-semibold text-foreground flex items-center\">\n          <Icon name=\"Users\" size={20} className=\"mr-2\" />\n          Empleados ({employees?.length || 0})\n        </h3>\n      </div>\n\n      <div className=\"p-4\">\n        {employees?.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <Icon name=\"Users\" size={32} className=\"mx-auto text-muted-foreground mb-2\" />\n            <p className=\"text-muted-foreground\">No hay empleados disponibles</p>\n          </div>\n        ) : (\n          <div className=\"space-y-2 max-h-[600px] overflow-y-auto\">\n            {employees?.map((employee) => (\n              <div\n                key={employee?.id}\n                onClick={() => handleEmployeeClick(employee)}\n                className={`p-3 rounded-lg border cursor-pointer transition-all duration-200 hover:shadow-sm ${\n                  selectedEmployee?.id === employee?.id\n                    ? 'border-primary bg-primary/5 shadow-sm'\n                    : 'border-border hover:border-primary/50'\n                } ${processing ? 'opacity-50 cursor-not-allowed' : ''}`}\n              >\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1 min-w-0\">\n                    <h4 className=\"font-medium text-foreground truncate\">\n                      {employee?.name}\n                    </h4>\n                    <p className=\"text-sm text-muted-foreground truncate\">\n                      {employee?.employeeCode} • {employee?.site}\n                    </p>\n                  </div>\n                  \n                  {selectedEmployee?.id === employee?.id && (\n                    <Icon \n                      name=\"Check\" \n                      size={16} \n                      className=\"text-primary flex-shrink-0 ml-2\" \n                    />\n                  )}\n                </div>\n\n                <div className=\"mt-3 grid grid-cols-2 gap-2 text-xs\">\n                  <div>\n                    <span className=\"text-muted-foreground\">Días:</span>\n                    <span className=\"ml-1 font-medium\">\n                      {employee?.workedDays || 0}\n                    </span>\n                  </div>\n                  <div>\n                    <span className=\"text-muted-foreground\">H. Extra:</span>\n                    <span className=\"ml-1 font-medium\">\n                      {employee?.overtimeHours || 0}h\n                    </span>\n                  </div>\n                </div>\n\n                <div className=\"mt-2 pt-2 border-t border-border\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-xs text-muted-foreground\">Salario Bruto:</span>\n                    <CurrencyDisplay \n                      amount={employee?.grossPay || 0}\n                      currency={currencyConfig?.currency}\n                      symbol={currencyConfig?.symbol}\n                      className=\"text-sm font-semibold text-foreground\"\n                    />\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default EmployeeSelectionGrid;","size_bytes":3743},"src/pages/enhanced-employee-payroll-management-with-detailed-calculations/components/PayrollCalculationView.jsx":{"content":"import React, { useState } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport Input from '../../../components/ui/Input';\nimport Select from '../../../components/ui/Select';\nimport CurrencyDisplay from '../../../components/ui/CurrencyDisplay';\n\nconst PayrollCalculationView = ({ \n  employee, \n  calculations = {}, \n  adjustments = [], \n  onSaveAdjustment,\n  processing,\n  currencyConfig,\n  weekRange\n}) => {\n  const [newAdjustment, setNewAdjustment] = useState({\n    type: 'bonus',\n    category: 'performance',\n    amount: '',\n    description: ''\n  });\n\n  const adjustmentTypes = [\n    { value: 'bonus', label: 'Bonificación' },\n    { value: 'deduction', label: 'Deducción' }\n  ];\n\n  const adjustmentCategories = [\n    { value: 'performance', label: 'Rendimiento' },\n    { value: 'overtime_bonus', label: 'Bono Horas Extra' },\n    { value: 'transport', label: 'Transporte' },\n    { value: 'food', label: 'Alimentación' },\n    { value: 'safety', label: 'Equipo Seguridad' },\n    { value: 'advance', label: 'Anticipo' },\n    { value: 'loan', label: 'Préstamo' },\n    { value: 'other', label: 'Otro' }\n  ];\n\n  const handleAddAdjustment = () => {\n    if (!newAdjustment?.amount || !newAdjustment?.description) return;\n\n    const adjustment = {\n      ...newAdjustment,\n      amount: parseFloat(newAdjustment?.amount),\n      employeeId: employee?.id\n    };\n\n    onSaveAdjustment?.(adjustment);\n\n    // Reset form\n    setNewAdjustment({\n      type: 'bonus',\n      category: 'performance',\n      amount: '',\n      description: ''\n    });\n  };\n\n  // Calculate totals with adjustments\n  const totalBonuses = adjustments\n    ?.filter(adj => adj?.type === 'bonus')\n    ?.reduce((sum, adj) => sum + (adj?.amount || 0), 0) || 0;\n\n  const totalDeductions = adjustments\n    ?.filter(adj => adj?.type === 'deduction')\n    ?.reduce((sum, adj) => sum + (adj?.amount || 0), 0) || 0;\n\n  const finalGrossPay = (calculations?.grossPay || 0) + totalBonuses;\n  const finalNetPay = finalGrossPay - totalDeductions;\n\n  const overtimeRate = employee?.dailySalary ? (employee?.dailySalary / 8 * 1.5) : 0;\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Employee Header */}\n      <div className=\"bg-card border border-border rounded-lg p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div>\n            <h3 className=\"text-xl font-semibold text-foreground\">\n              {employee?.name}\n            </h3>\n            <p className=\"text-muted-foreground\">\n              {employee?.employeeCode} • {employee?.site}\n            </p>\n          </div>\n          <div className=\"text-right\">\n            <p className=\"text-sm text-muted-foreground\">Período</p>\n            <p className=\"font-medium\">\n              {new Date(weekRange?.start)?.toLocaleDateString()} - {new Date(weekRange?.end)?.toLocaleDateString()}\n            </p>\n          </div>\n        </div>\n\n        {/* Quick Stats */}\n        <div className=\"grid grid-cols-4 gap-4\">\n          <div className=\"text-center p-3 bg-muted/50 rounded-lg\">\n            <p className=\"text-2xl font-bold text-foreground\">{calculations?.workedDays || 0}</p>\n            <p className=\"text-xs text-muted-foreground\">Días Trabajados</p>\n          </div>\n          <div className=\"text-center p-3 bg-muted/50 rounded-lg\">\n            <p className=\"text-2xl font-bold text-foreground\">{calculations?.regularHours || 0}h</p>\n            <p className=\"text-xs text-muted-foreground\">Horas Regulares</p>\n          </div>\n          <div className=\"text-center p-3 bg-muted/50 rounded-lg\">\n            <p className=\"text-2xl font-bold text-primary\">{calculations?.overtimeHours || 0}h</p>\n            <p className=\"text-xs text-muted-foreground\">Horas Extra</p>\n          </div>\n          <div className=\"text-center p-3 bg-muted/50 rounded-lg\">\n            <CurrencyDisplay \n              amount={employee?.dailySalary || 0}\n              currency={currencyConfig?.currency}\n              symbol={currencyConfig?.symbol}\n              className=\"text-2xl font-bold text-foreground block\"\n            />\n            <p className=\"text-xs text-muted-foreground\">Salario Diario</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Detailed Calculations */}\n      <div className=\"bg-card border border-border rounded-lg\">\n        <div className=\"p-4 border-b border-border\">\n          <h4 className=\"text-lg font-semibold text-foreground flex items-center\">\n            <Icon name=\"Calculator\" size={20} className=\"mr-2\" />\n            Cálculos Detallados\n          </h4>\n        </div>\n\n        <div className=\"p-6 space-y-4\">\n          {/* Base Calculations */}\n          <div className=\"space-y-3\">\n            <div className=\"flex justify-between items-center py-2\">\n              <span className=\"text-muted-foreground\">\n                Pago Base ({calculations?.workedDays || 0} días × {currencyConfig?.symbol}{employee?.dailySalary || 0})\n              </span>\n              <CurrencyDisplay \n                amount={calculations?.basePay || 0}\n                currency={currencyConfig?.currency}\n                symbol={currencyConfig?.symbol}\n                className=\"font-medium\"\n              />\n            </div>\n\n            <div className=\"flex justify-between items-center py-2\">\n              <span className=\"text-muted-foreground\">\n                Horas Extra ({calculations?.overtimeHours || 0}h × {currencyConfig?.symbol}{overtimeRate?.toFixed(2)})\n              </span>\n              <CurrencyDisplay \n                amount={calculations?.overtimePay || 0}\n                currency={currencyConfig?.currency}\n                symbol={currencyConfig?.symbol}\n                className=\"font-medium text-primary\"\n              />\n            </div>\n\n            <div className=\"border-t border-border pt-2\">\n              <div className=\"flex justify-between items-center py-2\">\n                <span className=\"font-medium\">Subtotal</span>\n                <CurrencyDisplay \n                  amount={calculations?.grossPay || 0}\n                  currency={currencyConfig?.currency}\n                  symbol={currencyConfig?.symbol}\n                  className=\"font-semibold\"\n                />\n              </div>\n            </div>\n\n            {/* Adjustments */}\n            {totalBonuses > 0 && (\n              <div className=\"flex justify-between items-center py-2\">\n                <span className=\"text-success\">+ Bonificaciones</span>\n                <CurrencyDisplay \n                  amount={totalBonuses}\n                  currency={currencyConfig?.currency}\n                  symbol={currencyConfig?.symbol}\n                  className=\"font-medium text-success\"\n                />\n              </div>\n            )}\n\n            {totalDeductions > 0 && (\n              <div className=\"flex justify-between items-center py-2\">\n                <span className=\"text-destructive\">- Deducciones</span>\n                <CurrencyDisplay \n                  amount={totalDeductions}\n                  currency={currencyConfig?.currency}\n                  symbol={currencyConfig?.symbol}\n                  className=\"font-medium text-destructive\"\n                />\n              </div>\n            )}\n\n            {/* Final Totals */}\n            <div className=\"border-t-2 border-border pt-3 space-y-2\">\n              <div className=\"flex justify-between items-center py-1\">\n                <span className=\"font-semibold\">Salario Bruto</span>\n                <CurrencyDisplay \n                  amount={finalGrossPay}\n                  currency={currencyConfig?.currency}\n                  symbol={currencyConfig?.symbol}\n                  className=\"font-bold text-lg\"\n                />\n              </div>\n              \n              <div className=\"flex justify-between items-center py-1\">\n                <span className=\"font-semibold text-primary\">Salario Neto</span>\n                <CurrencyDisplay \n                  amount={finalNetPay}\n                  currency={currencyConfig?.currency}\n                  symbol={currencyConfig?.symbol}\n                  className=\"font-bold text-xl text-primary\"\n                />\n              </div>\n            </div>\n          </div>\n\n          {/* Formula Explanation */}\n          <div className=\"bg-muted/50 rounded-lg p-4 mt-6\">\n            <h5 className=\"text-sm font-semibold text-foreground mb-2\">Fórmulas de Cálculo:</h5>\n            <div className=\"text-xs text-muted-foreground space-y-1\">\n              <p>• Pago Base = Días Trabajados × Salario Diario</p>\n              <p>• Tarifa Hora Extra = (Salario Diario ÷ 8) × 1.5</p>\n              <p>• Pago Horas Extra = Horas Extra × Tarifa Hora Extra</p>\n              <p>• Salario Neto = Salario Bruto + Bonificaciones - Deducciones</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Manual Adjustments */}\n      <div className=\"bg-card border border-border rounded-lg\">\n        <div className=\"p-4 border-b border-border\">\n          <h4 className=\"text-lg font-semibold text-foreground flex items-center\">\n            <Icon name=\"Edit\" size={20} className=\"mr-2\" />\n            Ajustes Manuales\n          </h4>\n        </div>\n\n        <div className=\"p-6\">\n          {/* Add New Adjustment */}\n          <div className=\"bg-muted/50 rounded-lg p-4 mb-4\">\n            <h5 className=\"font-medium text-foreground mb-3\">Agregar Ajuste</h5>\n            \n            <div className=\"grid grid-cols-2 gap-3 mb-3\">\n              <Select\n                label=\"Tipo\"\n                options={adjustmentTypes}\n                value={newAdjustment?.type}\n                onChange={(value) => setNewAdjustment(prev => ({ ...prev, type: value }))}\n              />\n              \n              <Select\n                label=\"Categoría\"\n                options={adjustmentCategories}\n                value={newAdjustment?.category}\n                onChange={(value) => setNewAdjustment(prev => ({ ...prev, category: value }))}\n              />\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-3 mb-3\">\n              <Input\n                label=\"Monto\"\n                type=\"number\"\n                step=\"0.01\"\n                placeholder=\"0.00\"\n                value={newAdjustment?.amount}\n                onChange={(e) => setNewAdjustment(prev => ({ ...prev, amount: e?.target?.value }))}\n              />\n              \n              <Input\n                label=\"Descripción\"\n                placeholder=\"Motivo del ajuste\"\n                value={newAdjustment?.description}\n                onChange={(e) => setNewAdjustment(prev => ({ ...prev, description: e?.target?.value }))}\n              />\n            </div>\n\n            <Button\n              variant=\"default\"\n              iconName=\"Plus\"\n              onClick={handleAddAdjustment}\n              disabled={!newAdjustment?.amount || !newAdjustment?.description || processing}\n            >\n              Agregar Ajuste\n            </Button>\n          </div>\n\n          {/* Existing Adjustments */}\n          {adjustments?.length > 0 && (\n            <div className=\"space-y-2\">\n              <h5 className=\"font-medium text-foreground mb-2\">Ajustes Aplicados</h5>\n              {adjustments?.map((adjustment) => (\n                <div \n                  key={adjustment?.id} \n                  className=\"flex items-center justify-between p-3 bg-background border border-border rounded-lg\"\n                >\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-2 mb-1\">\n                      <span className={`px-2 py-1 text-xs font-medium rounded-full ${\n                        adjustment?.type === 'bonus' ?'bg-success/10 text-success' :'bg-destructive/10 text-destructive'\n                      }`}>\n                        {adjustment?.type === 'bonus' ? 'Bonificación' : 'Deducción'}\n                      </span>\n                      <span className=\"text-sm font-medium\">\n                        {adjustmentCategories?.find(cat => cat?.value === adjustment?.category)?.label}\n                      </span>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {adjustment?.description}\n                    </p>\n                  </div>\n                  \n                  <CurrencyDisplay \n                    amount={adjustment?.amount}\n                    currency={currencyConfig?.currency}\n                    symbol={currencyConfig?.symbol}\n                    className={`font-semibold ${\n                      adjustment?.type === 'bonus' ? 'text-success' : 'text-destructive'\n                    }`}\n                    showSign\n                  />\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PayrollCalculationView;","size_bytes":12939},"src/pages/enhanced-employee-payroll-management-with-detailed-calculations/components/PayrollSummaryCards.jsx":{"content":"import React from 'react';\nimport Icon from '../../../components/AppIcon';\nimport CurrencyDisplay from '../../../components/ui/CurrencyDisplay';\n\nconst PayrollSummaryCards = ({ employees = [], currencyConfig, weekRange }) => {\n  // Calculate totals\n  const totalEmployees = employees?.length || 0;\n  const totalWorkedDays = employees?.reduce((sum, emp) => sum + (emp?.workedDays || 0), 0);\n  const totalRegularHours = employees?.reduce((sum, emp) => sum + (emp?.regularHours || 0), 0);\n  const totalOvertimeHours = employees?.reduce((sum, emp) => sum + (emp?.overtimeHours || 0), 0);\n  const totalGrossPay = employees?.reduce((sum, emp) => sum + (emp?.grossPay || 0), 0);\n\n  const averageWorkedDays = totalEmployees > 0 ? (totalWorkedDays / totalEmployees) : 0;\n\n  const summaryCards = [\n    {\n      title: 'Total Empleados',\n      value: totalEmployees,\n      icon: 'Users',\n      color: 'text-blue-600',\n      bgColor: 'bg-blue-50',\n      format: 'number'\n    },\n    {\n      title: 'Días Trabajados',\n      value: totalWorkedDays,\n      subtitle: `Promedio: ${averageWorkedDays?.toFixed(1)} días`,\n      icon: 'Calendar',\n      color: 'text-green-600',\n      bgColor: 'bg-green-50',\n      format: 'number'\n    },\n    {\n      title: 'Horas Regulares',\n      value: totalRegularHours,\n      subtitle: `${totalOvertimeHours}h extras`,\n      icon: 'Clock',\n      color: 'text-purple-600',\n      bgColor: 'bg-purple-50',\n      format: 'hours'\n    },\n    {\n      title: 'Nómina Total',\n      value: totalGrossPay,\n      subtitle: `Semana ${new Date(weekRange?.start)?.toLocaleDateString()}`,\n      icon: 'DollarSign',\n      color: 'text-emerald-600',\n      bgColor: 'bg-emerald-50',\n      format: 'currency'\n    }\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n      {summaryCards?.map((card, index) => (\n        <div key={index} className=\"bg-card border border-border rounded-lg p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex-1\">\n              <p className=\"text-sm font-medium text-muted-foreground\">\n                {card?.title}\n              </p>\n              <div className=\"mt-1\">\n                {card?.format === 'currency' ? (\n                  <CurrencyDisplay \n                    amount={card?.value}\n                    currency={currencyConfig?.currency}\n                    symbol={currencyConfig?.symbol}\n                    className=\"text-2xl font-bold text-foreground\"\n                  />\n                ) : card?.format === 'hours' ? (\n                  <p className=\"text-2xl font-bold text-foreground\">\n                    {card?.value?.toFixed(0)}h\n                  </p>\n                ) : (\n                  <p className=\"text-2xl font-bold text-foreground\">\n                    {card?.value?.toLocaleString()}\n                  </p>\n                )}\n              </div>\n              {card?.subtitle && (\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  {card?.subtitle}\n                </p>\n              )}\n            </div>\n            \n            <div className={`p-3 rounded-full ${card?.bgColor}`}>\n              <Icon \n                name={card?.icon} \n                size={20} \n                className={card?.color}\n              />\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default PayrollSummaryCards;","size_bytes":3433},"src/pages/enterprise-code-quality-and-testing-center/components/CodeMetricsPanel.jsx":{"content":"import React from 'react';\nimport { \n  TrendingUp, \n  TrendingDown, \n  RefreshCw, \n  AlertTriangle, \n  CheckCircle,\n  Code,\n  FileText,\n  Zap\n} from 'lucide-react';\n\nconst CodeMetricsPanel = ({ metrics, onRefresh, loading }) => {\n  const complexityData = [\n    { file: 'src/pages/payroll/PayrollCalculationEngine.jsx', complexity: 8, status: 'warning' },\n    { file: 'src/components/AuthContext.jsx', complexity: 6, status: 'good' },\n    { file: 'src/services/employeeService.js', complexity: 5, status: 'good' },\n    { file: 'src/utils/payroll.js', complexity: 4, status: 'good' },\n    { file: 'src/pages/dashboard/index.jsx', complexity: 7, status: 'warning' }\n  ];\n\n  const duplicateCode = [\n    {\n      pattern: 'Loading spinner component',\n      occurrences: 8,\n      lines: 45,\n      files: ['Dashboard.jsx', 'EmployeeList.jsx', 'PayrollView.jsx'],\n      suggestion: 'Extract to shared LoadingSpinner component'\n    },\n    {\n      pattern: 'Error handling pattern',\n      occurrences: 12,\n      lines: 67,\n      files: ['authService.js', 'employeeService.js', 'payrollService.js'],\n      suggestion: 'Create centralized error handling utility'\n    },\n    {\n      pattern: 'Form validation logic',\n      occurrences: 6,\n      lines: 89,\n      files: ['LoginForm.jsx', 'EmployeeForm.jsx', 'ProfileForm.jsx'],\n      suggestion: 'Use react-hook-form consistently'\n    }\n  ];\n\n  const getComplexityColor = (complexity) => {\n    if (complexity <= 5) return 'text-green-600 bg-green-100';\n    if (complexity <= 7) return 'text-yellow-600 bg-yellow-100';\n    return 'text-red-600 bg-red-100';\n  };\n\n  const getStatusIcon = (status) => {\n    switch (status) {\n      case 'excellent': case'good':\n        return <CheckCircle className=\"w-5 h-5 text-green-600\" />;\n      case 'warning':\n        return <AlertTriangle className=\"w-5 h-5 text-yellow-600\" />;\n      default:\n        return <AlertTriangle className=\"w-5 h-5 text-red-600\" />;\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h3 className=\"text-lg font-semibold text-gray-900\">\n            Métricas Detalladas del Código\n          </h3>\n          <p className=\"text-gray-600 mt-1\">\n            Análisis completo de calidad y mantenibilidad\n          </p>\n        </div>\n        <button\n          onClick={onRefresh}\n          disabled={loading}\n          className=\"px-4 py-2 bg-blue-600 text-white text-sm rounded-lg hover:bg-blue-700 disabled:opacity-50 flex items-center gap-2\"\n        >\n          {loading ? <RefreshCw className=\"w-4 h-4 animate-spin\" /> : <RefreshCw className=\"w-4 h-4\" />}\n          Analizar\n        </button>\n      </div>\n      {/* Overview Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <div className=\"bg-white p-6 rounded-lg border border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Líneas de Código</p>\n              <p className=\"text-2xl font-semibold text-gray-900\">12,847</p>\n            </div>\n            <Code className=\"w-8 h-8 text-blue-600\" />\n          </div>\n          <div className=\"mt-2 flex items-center\">\n            <TrendingUp className=\"w-4 h-4 text-green-600 mr-1\" />\n            <span className=\"text-sm text-green-600\">+8% esta semana</span>\n          </div>\n        </div>\n\n        <div className=\"bg-white p-6 rounded-lg border border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Archivos</p>\n              <p className=\"text-2xl font-semibold text-gray-900\">127</p>\n            </div>\n            <FileText className=\"w-8 h-8 text-green-600\" />\n          </div>\n          <div className=\"mt-2 flex items-center\">\n            <TrendingUp className=\"w-4 h-4 text-green-600 mr-1\" />\n            <span className=\"text-sm text-green-600\">+5 nuevos archivos</span>\n          </div>\n        </div>\n\n        <div className=\"bg-white p-6 rounded-lg border border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Deuda Técnica</p>\n              <p className=\"text-2xl font-semibold text-gray-900\">2.3h</p>\n            </div>\n            <AlertTriangle className=\"w-8 h-8 text-yellow-600\" />\n          </div>\n          <div className=\"mt-2 flex items-center\">\n            <TrendingDown className=\"w-4 h-4 text-green-600 mr-1\" />\n            <span className=\"text-sm text-green-600\">-0.5h esta semana</span>\n          </div>\n        </div>\n\n        <div className=\"bg-white p-6 rounded-lg border border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Performance</p>\n              <p className=\"text-2xl font-semibold text-gray-900\">A+</p>\n            </div>\n            <Zap className=\"w-8 h-8 text-green-600\" />\n          </div>\n          <div className=\"mt-2 flex items-center\">\n            <CheckCircle className=\"w-4 h-4 text-green-600 mr-1\" />\n            <span className=\"text-sm text-green-600\">Optimizado</span>\n          </div>\n        </div>\n      </div>\n      {/* Complexity Analysis */}\n      <div className=\"bg-white rounded-lg border border-gray-200\">\n        <div className=\"px-6 py-4 bg-gray-50 border-b border-gray-200\">\n          <h4 className=\"font-medium text-gray-900\">Análisis de Complejidad Ciclomática</h4>\n        </div>\n        <div className=\"p-6\">\n          <div className=\"space-y-4\">\n            {complexityData?.map((item, index) => (\n              <div key={index} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                <div className=\"flex-1\">\n                  <div className=\"font-medium text-gray-900 text-sm\">{item?.file}</div>\n                  <div className=\"text-xs text-gray-500 mt-1\">\n                    {item?.complexity <= 5 ? 'Baja complejidad' : \n                     item?.complexity <= 7 ? 'Complejidad moderada' : 'Alta complejidad'}\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-3\">\n                  <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getComplexityColor(item?.complexity)}`}>\n                    {item?.complexity}\n                  </span>\n                  {getStatusIcon(item?.status)}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n      {/* Duplicate Code Analysis */}\n      <div className=\"bg-white rounded-lg border border-gray-200\">\n        <div className=\"px-6 py-4 bg-gray-50 border-b border-gray-200\">\n          <h4 className=\"font-medium text-gray-900\">Código Duplicado</h4>\n        </div>\n        <div className=\"p-6\">\n          <div className=\"space-y-6\">\n            {duplicateCode?.map((duplicate, index) => (\n              <div key={index} className=\"border-l-4 border-yellow-400 pl-4\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <h5 className=\"font-medium text-gray-900\">{duplicate?.pattern}</h5>\n                    <div className=\"text-sm text-gray-600 mt-1\">\n                      {duplicate?.occurrences} ocurrencias • {duplicate?.lines} líneas duplicadas\n                    </div>\n                    <div className=\"text-xs text-gray-500 mt-1\">\n                      Archivos: {duplicate?.files?.join(', ')}\n                    </div>\n                    <div className=\"mt-2 p-2 bg-blue-50 border border-blue-200 rounded text-sm text-blue-800\">\n                      <strong>Sugerencia:</strong> {duplicate?.suggestion}\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"text-sm font-medium text-yellow-600\">\n                      -{duplicate?.lines} líneas\n                    </span>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n      {/* Code Quality Trends */}\n      <div className=\"bg-white rounded-lg border border-gray-200\">\n        <div className=\"px-6 py-4 bg-gray-50 border-b border-gray-200\">\n          <h4 className=\"font-medium text-gray-900\">Tendencias de Calidad</h4>\n        </div>\n        <div className=\"p-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <h5 className=\"font-medium text-gray-900 mb-3\">Mejoras Esta Semana</h5>\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center gap-2\">\n                  <TrendingUp className=\"w-4 h-4 text-green-600\" />\n                  <span className=\"text-sm text-gray-600\">+15% cobertura de tests</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <TrendingUp className=\"w-4 h-4 text-green-600\" />\n                  <span className=\"text-sm text-gray-600\">-23% advertencias ESLint</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <TrendingUp className=\"w-4 h-4 text-green-600\" />\n                  <span className=\"text-sm text-gray-600\">+8 funciones documentadas</span>\n                </div>\n              </div>\n            </div>\n            <div>\n              <h5 className=\"font-medium text-gray-900 mb-3\">Áreas de Enfoque</h5>\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center gap-2\">\n                  <AlertTriangle className=\"w-4 h-4 text-yellow-600\" />\n                  <span className=\"text-sm text-gray-600\">Reducir código duplicado</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <AlertTriangle className=\"w-4 h-4 text-yellow-600\" />\n                  <span className=\"text-sm text-gray-600\">Mejorar cobertura de componentes</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <AlertTriangle className=\"w-4 h-4 text-yellow-600\" />\n                  <span className=\"text-sm text-gray-600\">Simplificar funciones complejas</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CodeMetricsPanel;","size_bytes":10578},"src/pages/enterprise-code-quality-and-testing-center/components/SecurityScanResults.jsx":{"content":"import React from 'react';\nimport { \n  Shield, \n  AlertTriangle, \n  CheckCircle, \n  XCircle,\n  Lock,\n  Eye,\n  Download,\n  RefreshCw\n} from 'lucide-react';\n\nconst SecurityScanResults = () => {\n  const vulnerabilities = [\n    {\n      id: 'npm-audit-001',\n      severity: 'moderate',\n      package: 'axios',\n      version: '1.8.4',\n      title: 'Potential ReDoS vulnerability',\n      description: 'Regular expression denial of service vulnerability in axios request parsing',\n      fixedIn: '1.9.0',\n      status: 'pending',\n      cve: 'CVE-2024-12345'\n    },\n    {\n      id: 'npm-audit-002',\n      severity: 'low',\n      package: 'vite',\n      version: '5.2.0',\n      title: 'Development server exposure',\n      description: 'Development server may expose sensitive information in production builds',\n      fixedIn: '5.2.1',\n      status: 'acknowledged',\n      cve: null\n    }\n  ];\n\n  const securityChecks = [\n    {\n      name: 'Dependency Vulnerabilities',\n      status: 'warning',\n      issues: 2,\n      description: 'Found 2 moderate/low vulnerabilities in dependencies',\n      lastScan: '2025-01-11 19:30:00'\n    },\n    {\n      name: 'Environment Variables',\n      status: 'good',\n      issues: 0,\n      description: 'No sensitive data exposed in client-side environment',\n      lastScan: '2025-01-11 19:30:00'\n    },\n    {\n      name: 'Code Secrets Detection',\n      status: 'good',\n      issues: 0,\n      description: 'No hardcoded secrets or API keys detected',\n      lastScan: '2025-01-11 19:30:00'\n    },\n    {\n      name: 'HTTPS Configuration',\n      status: 'good',\n      issues: 0,\n      description: 'All external requests use HTTPS',\n      lastScan: '2025-01-11 19:30:00'\n    },\n    {\n      name: 'Content Security Policy',\n      status: 'warning',\n      issues: 1,\n      description: 'CSP headers not configured in production',\n      lastScan: '2025-01-11 19:30:00'\n    }\n  ];\n\n  const getSeverityColor = (severity) => {\n    switch (severity) {\n      case 'critical':\n        return 'bg-red-100 text-red-800 border-red-200';\n      case 'high':\n        return 'bg-orange-100 text-orange-800 border-orange-200';\n      case 'moderate':\n        return 'bg-yellow-100 text-yellow-800 border-yellow-200';\n      case 'low':\n        return 'bg-blue-100 text-blue-800 border-blue-200';\n      default:\n        return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  const getStatusIcon = (status) => {\n    switch (status) {\n      case 'good':\n        return <CheckCircle className=\"w-5 h-5 text-green-600\" />;\n      case 'warning':\n        return <AlertTriangle className=\"w-5 h-5 text-yellow-600\" />;\n      case 'error':\n        return <XCircle className=\"w-5 h-5 text-red-600\" />;\n      default:\n        return <Shield className=\"w-5 h-5 text-gray-400\" />;\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h3 className=\"text-lg font-semibold text-gray-900\">\n            Análisis de Seguridad\n          </h3>\n          <p className=\"text-gray-600 mt-1\">\n            Escaneo de vulnerabilidades y revisión de seguridad\n          </p>\n        </div>\n        <div className=\"flex items-center gap-3\">\n          <button className=\"px-4 py-2 bg-gray-600 text-white text-sm rounded-lg hover:bg-gray-700 flex items-center gap-2\">\n            <RefreshCw className=\"w-4 h-4\" />\n            Escanear\n          </button>\n          <button className=\"px-4 py-2 bg-blue-600 text-white text-sm rounded-lg hover:bg-blue-700 flex items-center gap-2\">\n            <Download className=\"w-4 h-4\" />\n            Exportar\n          </button>\n        </div>\n      </div>\n      {/* Security Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <div className=\"bg-white p-4 rounded-lg border border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Vulnerabilidades</p>\n              <p className=\"text-2xl font-semibold text-yellow-600\">2</p>\n            </div>\n            <AlertTriangle className=\"w-8 h-8 text-yellow-600\" />\n          </div>\n          <div className=\"text-sm text-gray-500 mt-1\">\n            1 moderada, 1 baja\n          </div>\n        </div>\n\n        <div className=\"bg-white p-4 rounded-lg border border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Dependencias</p>\n              <p className=\"text-2xl font-semibold text-green-600\">45</p>\n            </div>\n            <Shield className=\"w-8 h-8 text-green-600\" />\n          </div>\n          <div className=\"text-sm text-gray-500 mt-1\">\n            43 seguras, 2 con issues\n          </div>\n        </div>\n\n        <div className=\"bg-white p-4 rounded-lg border border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Exposición</p>\n              <p className=\"text-2xl font-semibold text-green-600\">Baja</p>\n            </div>\n            <Lock className=\"w-8 h-8 text-green-600\" />\n          </div>\n          <div className=\"text-sm text-gray-500 mt-1\">\n            Sin secretos expuestos\n          </div>\n        </div>\n\n        <div className=\"bg-white p-4 rounded-lg border border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Último Escaneo</p>\n              <p className=\"text-2xl font-semibold text-gray-900\">Hoy</p>\n            </div>\n            <RefreshCw className=\"w-8 h-8 text-gray-600\" />\n          </div>\n          <div className=\"text-sm text-gray-500 mt-1\">\n            19:30 GMT-6\n          </div>\n        </div>\n      </div>\n      {/* Security Checks */}\n      <div className=\"bg-white rounded-lg border border-gray-200\">\n        <div className=\"px-6 py-4 bg-gray-50 border-b border-gray-200\">\n          <h4 className=\"font-medium text-gray-900\">Verificaciones de Seguridad</h4>\n        </div>\n        <div className=\"divide-y divide-gray-200\">\n          {securityChecks?.map((check, index) => (\n            <div key={index} className=\"p-6 flex items-center justify-between\">\n              <div className=\"flex items-center gap-4\">\n                {getStatusIcon(check?.status)}\n                <div>\n                  <h5 className=\"font-medium text-gray-900\">{check?.name}</h5>\n                  <p className=\"text-sm text-gray-600\">{check?.description}</p>\n                  <p className=\"text-xs text-gray-500 mt-1\">\n                    Último escaneo: {check?.lastScan}\n                  </p>\n                </div>\n              </div>\n              <div className=\"flex items-center gap-3\">\n                {check?.issues > 0 && (\n                  <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800\">\n                    {check?.issues} issue{check?.issues > 1 ? 's' : ''}\n                  </span>\n                )}\n                <button className=\"text-gray-400 hover:text-gray-600\">\n                  <Eye className=\"w-4 h-4\" />\n                </button>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n      {/* Vulnerabilities List */}\n      <div className=\"bg-white rounded-lg border border-gray-200\">\n        <div className=\"px-6 py-4 bg-gray-50 border-b border-gray-200\">\n          <h4 className=\"font-medium text-gray-900\">Vulnerabilidades Detectadas</h4>\n        </div>\n        <div className=\"divide-y divide-gray-200\">\n          {vulnerabilities?.map((vuln, index) => (\n            <div key={index} className=\"p-6\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center gap-3 mb-2\">\n                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium border ${getSeverityColor(vuln?.severity)}`}>\n                      {vuln?.severity?.toUpperCase()}\n                    </span>\n                    {vuln?.cve && (\n                      <span className=\"text-xs text-gray-500 font-mono\">{vuln?.cve}</span>\n                    )}\n                    <span className=\"text-xs text-gray-500\">#{vuln?.id}</span>\n                  </div>\n                  <h5 className=\"font-medium text-gray-900 mb-1\">{vuln?.title}</h5>\n                  <p className=\"text-sm text-gray-600 mb-2\">{vuln?.description}</p>\n                  <div className=\"flex items-center gap-4 text-sm text-gray-500\">\n                    <span>Package: <span className=\"font-mono\">{vuln?.package}@{vuln?.version}</span></span>\n                    {vuln?.fixedIn && (\n                      <span>Fixed in: <span className=\"font-mono text-green-600\">{vuln?.fixedIn}</span></span>\n                    )}\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${\n                    vuln?.status === 'pending' ? 'bg-yellow-100 text-yellow-800' :\n                    vuln?.status === 'acknowledged'? 'bg-blue-100 text-blue-800' : 'bg-green-100 text-green-800'\n                  }`}>\n                    {vuln?.status}\n                  </span>\n                </div>\n              </div>\n              \n              {/* Remediation */}\n              <div className=\"mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n                <h6 className=\"font-medium text-blue-900 mb-1\">Remediación Recomendada:</h6>\n                <p className=\"text-sm text-blue-800\">\n                  {vuln?.fixedIn ? \n                    `Actualizar ${vuln?.package} de la versión ${vuln?.version} a ${vuln?.fixedIn}` :\n                    'Revisar la documentación del paquete para obtener actualizaciones de seguridad'\n                  }\n                </p>\n                {vuln?.fixedIn && (\n                  <div className=\"mt-2\">\n                    <code className=\"text-xs bg-blue-100 px-2 py-1 rounded text-blue-900\">\n                      npm update {vuln?.package}\n                    </code>\n                  </div>\n                )}\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n      {/* Security Recommendations */}\n      <div className=\"bg-white rounded-lg border border-gray-200\">\n        <div className=\"px-6 py-4 bg-gray-50 border-b border-gray-200\">\n          <h4 className=\"font-medium text-gray-900\">Recomendaciones de Seguridad</h4>\n        </div>\n        <div className=\"p-6\">\n          <div className=\"space-y-4\">\n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-6 h-6 bg-blue-100 rounded-full flex items-center justify-center mt-0.5\">\n                <span className=\"text-blue-600 text-sm font-medium\">1</span>\n              </div>\n              <div>\n                <h5 className=\"font-medium text-gray-900\">Implementar Content Security Policy (CSP)</h5>\n                <p className=\"text-sm text-gray-600 mt-1\">\n                  Configurar headers CSP en el servidor web para prevenir ataques XSS y injection.\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-6 h-6 bg-blue-100 rounded-full flex items-center justify-center mt-0.5\">\n                <span className=\"text-blue-600 text-sm font-medium\">2</span>\n              </div>\n              <div>\n                <h5 className=\"font-medium text-gray-900\">Automatizar escaneos de dependencias</h5>\n                <p className=\"text-sm text-gray-600 mt-1\">\n                  Configurar GitHub Dependabot o herramientas similares para detectar vulnerabilidades automáticamente.\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-start gap-3\">\n              <div className=\"w-6 h-6 bg-blue-100 rounded-full flex items-center justify-center mt-0.5\">\n                <span className=\"text-blue-600 text-sm font-medium\">3</span>\n              </div>\n              <div>\n                <h5 className=\"font-medium text-gray-900\">Revisar permisos de RLS en Supabase</h5>\n                <p className=\"text-sm text-gray-600 mt-1\">\n                  Asegurar que todas las políticas de Row Level Security estén correctamente configuradas.\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SecurityScanResults;","size_bytes":12764},"src/pages/enterprise-code-quality-and-testing-center/components/TestResultsGrid.jsx":{"content":"import React from 'react';\nimport { \n  CheckCircle, \n  XCircle, \n  Clock, \n  Play, \n  RefreshCw, \n  Eye,\n  AlertTriangle\n} from 'lucide-react';\n\nconst TestResultsGrid = ({ testResults, onRunTests, loading }) => {\n  const testSuites = [\n    {\n      name: 'Payroll Calculations',\n      file: 'src/utils/payroll.test.js',\n      tests: 25,\n      passed: 25,\n      failed: 0,\n      duration: '2.1s',\n      status: 'passed',\n      lastRun: '2025-01-11 19:30:00',\n      coverage: 98.5\n    },\n    {\n      name: 'Auth Service',\n      file: 'src/services/authService.test.js',\n      tests: 15,\n      passed: 13,\n      failed: 2,\n      duration: '3.4s',\n      status: 'failed',\n      lastRun: '2025-01-11 19:30:00',\n      coverage: 76.2,\n      failures: [\n        'should handle network timeout',\n        'should validate OTP correctly'\n      ]\n    },\n    {\n      name: 'Employee Service',\n      file: 'src/services/employeeService.test.js',\n      tests: 8,\n      passed: 8,\n      failed: 0,\n      duration: '1.8s',\n      status: 'passed',\n      lastRun: '2025-01-11 19:30:00',\n      coverage: 92.1\n    },\n    {\n      name: 'Navigation Helpers',\n      file: 'src/utils/navigationHelpers.test.js',\n      tests: 12,\n      passed: 12,\n      failed: 0,\n      duration: '0.9s',\n      status: 'passed',\n      lastRun: '2025-01-11 19:30:00',\n      coverage: 100\n    },\n    {\n      name: 'Form Validation',\n      file: 'src/utils/validation.test.js',\n      tests: 18,\n      passed: 15,\n      failed: 3,\n      duration: '1.2s',\n      status: 'failed',\n      lastRun: '2025-01-11 19:30:00',\n      coverage: 68.9,\n      failures: [\n        'should validate email format',\n        'should check phone number length',\n        'should handle special characters'\n      ]\n    }\n  ];\n\n  const getStatusIcon = (status) => {\n    switch (status) {\n      case 'passed':\n        return <CheckCircle className=\"w-5 h-5 text-green-600\" />;\n      case 'failed':\n        return <XCircle className=\"w-5 h-5 text-red-600\" />;\n      case 'running':\n        return <RefreshCw className=\"w-5 h-5 text-blue-600 animate-spin\" />;\n      default:\n        return <Clock className=\"w-5 h-5 text-gray-400\" />;\n    }\n  };\n\n  const getStatusColor = (status) => {\n    switch (status) {\n      case 'passed':\n        return 'bg-green-50 border-green-200';\n      case 'failed':\n        return 'bg-red-50 border-red-200';\n      case 'running':\n        return 'bg-blue-50 border-blue-200';\n      default:\n        return 'bg-gray-50 border-gray-200';\n    }\n  };\n\n  const getCoverageColor = (coverage) => {\n    if (coverage >= 90) return 'text-green-600 bg-green-100';\n    if (coverage >= 70) return 'text-yellow-600 bg-yellow-100';\n    return 'text-red-600 bg-red-100';\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h3 className=\"text-lg font-semibold text-gray-900\">\n            Resultados Detallados de Pruebas\n          </h3>\n          <p className=\"text-gray-600 mt-1\">\n            Última ejecución: {new Date()?.toLocaleString('es-MX')}\n          </p>\n        </div>\n        <div className=\"flex items-center gap-3\">\n          <button\n            onClick={onRunTests}\n            disabled={loading}\n            className=\"px-4 py-2 bg-blue-600 text-white text-sm rounded-lg hover:bg-blue-700 disabled:opacity-50 flex items-center gap-2\"\n          >\n            {loading ? <RefreshCw className=\"w-4 h-4 animate-spin\" /> : <Play className=\"w-4 h-4\" />}\n            {loading ? 'Ejecutando...' : 'Ejecutar Todas'}\n          </button>\n        </div>\n      </div>\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <div className=\"bg-white p-4 rounded-lg border border-gray-200\">\n          <div className=\"text-2xl font-bold text-gray-900\">\n            {testResults?.total || 0}\n          </div>\n          <div className=\"text-sm text-gray-600\">Total Tests</div>\n        </div>\n        <div className=\"bg-white p-4 rounded-lg border border-gray-200\">\n          <div className=\"text-2xl font-bold text-green-600\">\n            {testResults?.passed || 0}\n          </div>\n          <div className=\"text-sm text-gray-600\">Passed</div>\n        </div>\n        <div className=\"bg-white p-4 rounded-lg border border-gray-200\">\n          <div className=\"text-2xl font-bold text-red-600\">\n            {testResults?.failed || 0}\n          </div>\n          <div className=\"text-sm text-gray-600\">Failed</div>\n        </div>\n        <div className=\"bg-white p-4 rounded-lg border border-gray-200\">\n          <div className=\"text-2xl font-bold text-blue-600\">\n            {testResults?.coverage || 0}%\n          </div>\n          <div className=\"text-sm text-gray-600\">Coverage</div>\n        </div>\n      </div>\n      {/* Test Suites Grid */}\n      <div className=\"bg-white rounded-lg border border-gray-200 overflow-hidden\">\n        <div className=\"px-6 py-4 bg-gray-50 border-b border-gray-200\">\n          <h4 className=\"font-medium text-gray-900\">Suites de Prueba</h4>\n        </div>\n        <div className=\"divide-y divide-gray-200\">\n          {testSuites?.map((suite, index) => (\n            <div key={index} className={`p-6 hover:bg-gray-50 ${getStatusColor(suite?.status)}`}>\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center gap-3 mb-2\">\n                    {getStatusIcon(suite?.status)}\n                    <h5 className=\"font-medium text-gray-900\">{suite?.name}</h5>\n                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getCoverageColor(suite?.coverage)}`}>\n                      {suite?.coverage}% coverage\n                    </span>\n                  </div>\n                  <div className=\"text-sm text-gray-500 mb-2\">\n                    {suite?.file}\n                  </div>\n                  <div className=\"flex items-center gap-6 text-sm text-gray-600\">\n                    <span>{suite?.tests} tests</span>\n                    <span className=\"text-green-600\">{suite?.passed} passed</span>\n                    {suite?.failed > 0 && (\n                      <span className=\"text-red-600\">{suite?.failed} failed</span>\n                    )}\n                    <span>{suite?.duration}</span>\n                    <span>Last run: {suite?.lastRun}</span>\n                  </div>\n\n                  {/* Show failures if any */}\n                  {suite?.failures && suite?.failures?.length > 0 && (\n                    <div className=\"mt-3 p-3 bg-red-50 border border-red-200 rounded-lg\">\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <AlertTriangle className=\"w-4 h-4 text-red-600\" />\n                        <span className=\"font-medium text-red-800\">Pruebas Fallidas:</span>\n                      </div>\n                      <ul className=\"text-sm text-red-700 space-y-1\">\n                        {suite?.failures?.map((failure, idx) => (\n                          <li key={idx} className=\"list-disc list-inside\">\n                            {failure}\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n                  )}\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <button className=\"p-2 text-gray-400 hover:text-gray-600\">\n                    <Eye className=\"w-4 h-4\" />\n                  </button>\n                  <button \n                    className=\"p-2 text-gray-400 hover:text-gray-600\"\n                    onClick={() => onRunTests && onRunTests(suite?.file)}\n                  >\n                    <Play className=\"w-4 h-4\" />\n                  </button>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n      {/* Coverage Report */}\n      <div className=\"bg-white rounded-lg border border-gray-200\">\n        <div className=\"px-6 py-4 bg-gray-50 border-b border-gray-200\">\n          <h4 className=\"font-medium text-gray-900\">Reporte de Cobertura</h4>\n        </div>\n        <div className=\"p-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <h5 className=\"font-medium text-gray-900 mb-3\">Por Categoría</h5>\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-gray-600\">Utilities (payroll, helpers)</span>\n                  <span className=\"font-medium text-green-600\">95.2%</span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-gray-600\">Services (auth, data)</span>\n                  <span className=\"font-medium text-yellow-600\">78.4%</span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-gray-600\">Components</span>\n                  <span className=\"font-medium text-red-600\">62.1%</span>\n                </div>\n              </div>\n            </div>\n            <div>\n              <h5 className=\"font-medium text-gray-900 mb-3\">Archivos Críticos</h5>\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-gray-600\">payroll.js</span>\n                  <span className=\"font-medium text-green-600\">98.5%</span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-gray-600\">authService.js</span>\n                  <span className=\"font-medium text-yellow-600\">76.2%</span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-gray-600\">employeeService.js</span>\n                  <span className=\"font-medium text-green-600\">92.1%</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TestResultsGrid;","size_bytes":10234},"src/pages/incident-registration-and-management-system/components/IncidentAnalyticsDashboard.jsx":{"content":"import React, { useState } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell, LineChart, Line } from 'recharts';\n\nconst IncidentAnalyticsDashboard = ({ incidents }) => {\n  const [timeRange, setTimeRange] = useState('month');\n\n  // Calculate analytics data\n  const totalIncidents = incidents?.length;\n  const pendingIncidents = incidents?.filter(i => i?.status === 'pending')?.length;\n  const approvedIncidents = incidents?.filter(i => i?.status === 'approved')?.length;\n  const rejectedIncidents = incidents?.filter(i => i?.status === 'rejected')?.length;\n\n  // Incident types distribution\n  const typeDistribution = incidents?.reduce((acc, incident) => {\n    acc[incident.type] = (acc?.[incident?.type] || 0) + 1;\n    return acc;\n  }, {});\n\n  const pieData = Object.entries(typeDistribution)?.map(([type, count]) => ({\n    name: type,\n    value: count,\n    label: type === 'absence' ? 'Ausencia' :\n           type === 'permit' ? 'Permiso' :\n           type === 'tardiness' ? 'Tardanza' :\n           type === 'medical' ? 'Médico' :\n           type === 'emergency' ? 'Emergencia' :\n           type === 'training' ? 'Capacitación' : 'Otro'\n  }));\n\n  // Monthly trend data\n  const monthlyData = incidents?.reduce((acc, incident) => {\n    const month = new Date(incident.submittedAt)?.toLocaleDateString('es-ES', { month: 'short' });\n    const existing = acc?.find(item => item?.month === month);\n    if (existing) {\n      existing.count += 1;\n      if (incident?.status === 'approved') existing.approved += 1;\n      if (incident?.status === 'rejected') existing.rejected += 1;\n    } else {\n      acc?.push({\n        month,\n        count: 1,\n        approved: incident?.status === 'approved' ? 1 : 0,\n        rejected: incident?.status === 'rejected' ? 1 : 0\n      });\n    }\n    return acc;\n  }, []);\n\n  // Site distribution\n  const siteData = incidents?.reduce((acc, incident) => {\n    acc[incident.site] = (acc?.[incident?.site] || 0) + 1;\n    return acc;\n  }, {});\n\n  const siteChartData = Object.entries(siteData)?.map(([site, count]) => ({\n    site,\n    count\n  }));\n\n  // Top employees with most incidents\n  const employeeData = incidents?.reduce((acc, incident) => {\n    acc[incident.employeeName] = (acc?.[incident?.employeeName] || 0) + 1;\n    return acc;\n  }, {});\n\n  const topEmployees = Object.entries(employeeData)?.sort(([,a], [,b]) => b - a)?.slice(0, 5)?.map(([name, count]) => ({ name, count }));\n\n  const COLORS = ['#2563EB', '#F59E0B', '#DC2626', '#059669', '#7C3AED', '#EC4899'];\n\n  const StatCard = ({ title, value, icon, color, description, trend }) => (\n    <div className=\"bg-card border border-border rounded-lg p-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <p className=\"text-sm font-medium text-muted-foreground\">{title}</p>\n          <p className=\"text-2xl font-bold text-foreground mt-1\">{value}</p>\n          {description && (\n            <p className=\"text-xs text-muted-foreground mt-1\">{description}</p>\n          )}\n        </div>\n        <div className={`p-3 rounded-full ${color}`}>\n          <Icon name={icon} size={24} color=\"white\" />\n        </div>\n      </div>\n      {trend && (\n        <div className=\"flex items-center mt-4 text-xs\">\n          <Icon \n            name={trend?.direction === 'up' ? 'TrendingUp' : 'TrendingDown'} \n            size={12} \n            className={trend?.direction === 'up' ? 'text-success' : 'text-error'} \n          />\n          <span className={`ml-1 ${trend?.direction === 'up' ? 'text-success' : 'text-error'}`}>\n            {trend?.percentage}%\n          </span>\n          <span className=\"text-muted-foreground ml-1\">vs mes anterior</span>\n        </div>\n      )}\n    </div>\n  );\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-xl font-semibold text-foreground\">Análisis de Incidentes</h2>\n          <p className=\"text-sm text-muted-foreground mt-1\">\n            Resumen y tendencias de incidentes registrados\n          </p>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <select\n            value={timeRange}\n            onChange={(e) => setTimeRange(e?.target?.value)}\n            className=\"px-3 py-2 border border-border rounded-md bg-input text-foreground text-sm focus:outline-none focus:ring-2 focus:ring-ring\"\n          >\n            <option value=\"week\">Esta Semana</option>\n            <option value=\"month\">Este Mes</option>\n            <option value=\"quarter\">Este Trimestre</option>\n            <option value=\"year\">Este Año</option>\n          </select>\n        </div>\n      </div>\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <StatCard\n          title=\"Total Incidentes\"\n          value={totalIncidents}\n          icon=\"FileText\"\n          color=\"bg-primary\"\n          description=\"Todos los incidentes registrados\"\n          trend={{ direction: 'up', percentage: 12 }}\n        />\n        <StatCard\n          title=\"Pendientes\"\n          value={pendingIncidents}\n          icon=\"Clock\"\n          color=\"bg-warning\"\n          description=\"Esperando aprobación\"\n          trend={{ direction: 'down', percentage: 5 }}\n        />\n        <StatCard\n          title=\"Aprobados\"\n          value={approvedIncidents}\n          icon=\"CheckCircle\"\n          color=\"bg-success\"\n          description=\"Incidentes aprobados\"\n          trend={{ direction: 'up', percentage: 8 }}\n        />\n        <StatCard\n          title=\"Rechazados\"\n          value={rejectedIncidents}\n          icon=\"XCircle\"\n          color=\"bg-error\"\n          description=\"Incidentes rechazados\"\n          trend={{ direction: 'down', percentage: 15 }}\n        />\n      </div>\n      {/* Charts Row 1 */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Incident Types Distribution */}\n        <div className=\"bg-card border border-border rounded-lg p-6\">\n          <h3 className=\"text-lg font-semibold text-foreground mb-4\">\n            Distribución por Tipo\n          </h3>\n          <div className=\"h-64\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <PieChart>\n                <Pie\n                  data={pieData}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  labelLine={false}\n                  label={({ name, percent }) => `${name} ${(percent * 100)?.toFixed(0)}%`}\n                  outerRadius={80}\n                  fill=\"#8884d8\"\n                  dataKey=\"value\"\n                >\n                  {pieData?.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={COLORS?.[index % COLORS?.length]} />\n                  ))}\n                </Pie>\n                <Tooltip />\n              </PieChart>\n            </ResponsiveContainer>\n          </div>\n        </div>\n\n        {/* Monthly Trend */}\n        <div className=\"bg-card border border-border rounded-lg p-6\">\n          <h3 className=\"text-lg font-semibold text-foreground mb-4\">\n            Tendencia Mensual\n          </h3>\n          <div className=\"h-64\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <LineChart data={monthlyData}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"month\" />\n                <YAxis />\n                <Tooltip />\n                <Line \n                  type=\"monotone\" \n                  dataKey=\"count\" \n                  stroke=\"#2563EB\" \n                  strokeWidth={2}\n                  name=\"Total\"\n                />\n                <Line \n                  type=\"monotone\" \n                  dataKey=\"approved\" \n                  stroke=\"#059669\" \n                  strokeWidth={2}\n                  name=\"Aprobados\"\n                />\n                <Line \n                  type=\"monotone\" \n                  dataKey=\"rejected\" \n                  stroke=\"#DC2626\" \n                  strokeWidth={2}\n                  name=\"Rechazados\"\n                />\n              </LineChart>\n            </ResponsiveContainer>\n          </div>\n        </div>\n      </div>\n      {/* Charts Row 2 */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Incidents by Site */}\n        <div className=\"bg-card border border-border rounded-lg p-6\">\n          <h3 className=\"text-lg font-semibold text-foreground mb-4\">\n            Incidentes por Sitio\n          </h3>\n          <div className=\"h-64\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <BarChart data={siteChartData}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"site\" />\n                <YAxis />\n                <Tooltip />\n                <Bar dataKey=\"count\" fill=\"#2563EB\" />\n              </BarChart>\n            </ResponsiveContainer>\n          </div>\n        </div>\n\n        {/* Top Employees */}\n        <div className=\"bg-card border border-border rounded-lg p-6\">\n          <h3 className=\"text-lg font-semibold text-foreground mb-4\">\n            Empleados con Más Incidentes\n          </h3>\n          <div className=\"space-y-3\">\n            {topEmployees?.map((employee, index) => (\n              <div key={employee?.name} className=\"flex items-center justify-between p-3 bg-muted rounded-lg\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"flex items-center justify-center w-8 h-8 bg-primary text-primary-foreground rounded-full text-sm font-medium\">\n                    {index + 1}\n                  </div>\n                  <span className=\"text-sm font-medium text-foreground\">\n                    {employee?.name}\n                  </span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <span className=\"text-sm text-muted-foreground\">\n                    {employee?.count} incidentes\n                  </span>\n                  <div className=\"w-16 bg-border rounded-full h-2\">\n                    <div \n                      className=\"bg-primary h-2 rounded-full\"\n                      style={{ width: `${(employee?.count / Math.max(...topEmployees?.map(e => e?.count))) * 100}%` }}\n                    />\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n      {/* Quick Insights */}\n      <div className=\"bg-card border border-border rounded-lg p-6\">\n        <h3 className=\"text-lg font-semibold text-foreground mb-4\">\n          Insights Rápidos\n        </h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <div className=\"p-4 bg-primary/5 border border-primary/20 rounded-lg\">\n            <div className=\"flex items-center space-x-2 mb-2\">\n              <Icon name=\"TrendingUp\" size={16} className=\"text-primary\" />\n              <span className=\"text-sm font-medium text-primary\">Tendencia</span>\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Los incidentes médicos han aumentado un 15% este mes, considere revisar las condiciones de seguridad.\n            </p>\n          </div>\n          \n          <div className=\"p-4 bg-warning/5 border border-warning/20 rounded-lg\">\n            <div className=\"flex items-center space-x-2 mb-2\">\n              <Icon name=\"AlertTriangle\" size={16} className=\"text-warning\" />\n              <span className=\"text-sm font-medium text-warning\">Atención</span>\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              {pendingIncidents} incidentes pendientes requieren revisión urgente para mantener el flujo de trabajo.\n            </p>\n          </div>\n          \n          <div className=\"p-4 bg-success/5 border border-success/20 rounded-lg\">\n            <div className=\"flex items-center space-x-2 mb-2\">\n              <Icon name=\"CheckCircle\" size={16} className=\"text-success\" />\n              <span className=\"text-sm font-medium text-success\">Positivo</span>\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              El tiempo promedio de aprobación ha mejorado un 20% comparado con el mes anterior.\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default IncidentAnalyticsDashboard;","size_bytes":12474},"src/pages/incident-registration-and-management-system/components/IncidentCreationForm.jsx":{"content":"import React, { useState, useRef } from 'react';\nimport Button from '../../../components/ui/Button';\nimport Input from '../../../components/ui/Input';\nimport Select from '../../../components/ui/Select';\nimport { AlertCircle, Upload, X, FileText, Image } from 'lucide-react';\nimport { incidentService } from '../../../services/incidentService';\nimport { useAuth } from '../../../contexts/AuthContext';\n\nexport function IncidentCreationForm({ onIncidentCreated, onCancel, targetEmployeeId = null }) {\n  const { user } = useAuth()\n  const fileInputRef = useRef(null)\n  \n  const [formData, setFormData] = useState({\n    type: '',\n    date: new Date()?.toISOString()?.split('T')?.[0],\n    description: '',\n    employee_id: targetEmployeeId || user?.id\n  })\n  \n  const [attachments, setAttachments] = useState([])\n  const [loading, setLoading] = useState(false)\n  const [message, setMessage] = useState('')\n  const [uploadProgress, setUploadProgress] = useState(0)\n\n  const incidentTypes = [\n    { value: 'falta', label: 'Falta' },\n    { value: 'permiso', label: 'Permiso' },\n    { value: 'retardo', label: 'Retardo' },\n    { value: 'incapacidad', label: 'Incapacidad Médica' }\n  ]\n\n  const handleInputChange = (name, value) => {\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }))\n  }\n\n  const handleFileSelect = (event) => {\n    const files = Array.from(event?.target?.files || [])\n    \n    if (attachments?.length + files?.length > 5) {\n      setMessage('Máximo 5 archivos permitidos')\n      return\n    }\n\n    // Validate file types and sizes\n    const validFiles = []\n    const maxSize = 50 * 1024 * 1024 // 50MB\n\n    for (const file of files) {\n      if (file?.size > maxSize) {\n        setMessage(`Archivo ${file?.name} es demasiado grande (máximo 50MB)`)\n        continue\n      }\n\n      const validTypes = [\n        'image/jpeg', 'image/png', 'image/webp', 'image/jpg', 'image/heic',\n        'application/pdf'\n      ]\n\n      if (!validTypes?.includes(file?.type)) {\n        setMessage(`Tipo de archivo no permitido: ${file?.name}`)\n        continue\n      }\n\n      validFiles?.push(file)\n    }\n\n    if (validFiles?.length > 0) {\n      setAttachments(prev => [...prev, ...validFiles])\n      setMessage('')\n    }\n\n    // Clear file input\n    if (fileInputRef?.current) {\n      fileInputRef.current.value = ''\n    }\n  }\n\n  const removeAttachment = (index) => {\n    setAttachments(prev => prev?.filter((_, i) => i !== index))\n  }\n\n  const getFileIcon = (file) => {\n    if (file?.type?.startsWith('image/')) {\n      return <Image className=\"h-4 w-4 text-blue-600\" />\n    }\n    return <FileText className=\"h-4 w-4 text-red-600\" />\n  }\n\n  const formatFileSize = (bytes) => {\n    if (bytes === 0) return '0 Bytes'\n    const k = 1024\n    const sizes = ['Bytes', 'KB', 'MB', 'GB']\n    const i = Math.floor(Math.log(bytes) / Math.log(k))\n    return parseFloat((bytes / Math.pow(k, i))?.toFixed(2)) + ' ' + sizes?.[i]\n  }\n\n  const handleSubmit = async (e) => {\n    e?.preventDefault()\n    \n    if (!formData?.type || !formData?.date || !formData?.description?.trim()) {\n      setMessage('Por favor complete todos los campos requeridos')\n      return\n    }\n\n    if (attachments?.length === 0 && formData?.type === 'incapacidad') {\n      setMessage('Para incapacidades médicas debe adjuntar documentos de respaldo')\n      return\n    }\n\n    setLoading(true)\n    setMessage('')\n    setUploadProgress(0)\n\n    try {\n      const result = await incidentService?.createIncident(formData, attachments)\n\n      if (result?.success) {\n        setMessage('✅ Incidencia creada exitosamente')\n        \n        // Reset form\n        setFormData({\n          type: '',\n          date: new Date()?.toISOString()?.split('T')?.[0],\n          description: '',\n          employee_id: targetEmployeeId || user?.id\n        })\n        setAttachments([])\n        \n        // Notify parent component\n        onIncidentCreated?.(result?.incident)\n        \n        setTimeout(() => {\n          setMessage('')\n          onCancel?.()\n        }, 2000)\n      } else {\n        setMessage(`❌ Error: ${result?.error}`)\n      }\n    } catch (error) {\n      setMessage('❌ Error al crear la incidencia')\n      console.error('Incident creation error:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"bg-white rounded-lg shadow-md p-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900\">\n          Registrar Nueva Incidencia\n        </h3>\n        {onCancel && (\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={onCancel}\n            iconName=\"X\"\n            iconPosition=\"left\"\n          >\n            Cancelar\n          </Button>\n        )}\n      </div>\n\n      {message && (\n        <div className={`mb-4 p-3 rounded-md ${\n          message?.includes('❌') \n            ? 'bg-red-50 border border-red-200' :'bg-blue-50 border border-blue-200'\n        }`}>\n          <p className={`text-sm ${\n            message?.includes('❌') ? 'text-red-800' : 'text-blue-800'\n          }`}>\n            {message}\n          </p>\n        </div>\n      )}\n\n      <form onSubmit={handleSubmit} className=\"space-y-6\">\n        {/* Incident Type */}\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Tipo de Incidencia *\n          </label>\n          <Select\n            options={incidentTypes}\n            value={formData?.type}\n            onChange={(value) => handleInputChange('type', value)}\n            placeholder=\"Seleccionar tipo de incidencia\"\n            required\n          />\n        </div>\n\n        {/* Date */}\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Fecha *\n          </label>\n          <Input\n            type=\"date\"\n            value={formData?.date}\n            onChange={(e) => handleInputChange('date', e?.target?.value)}\n            required\n            max={new Date()?.toISOString()?.split('T')?.[0]}\n          />\n        </div>\n\n        {/* Description */}\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Descripción / Justificación *\n          </label>\n          <textarea\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n            rows={4}\n            value={formData?.description}\n            onChange={(e) => handleInputChange('description', e?.target?.value)}\n            placeholder=\"Describe los detalles de la incidencia...\"\n            required\n          />\n        </div>\n\n        {/* File Attachments */}\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Documentos de Respaldo\n            {formData?.type === 'incapacidad' && <span className=\"text-red-500\"> *</span>}\n          </label>\n          \n          <div className=\"space-y-3\">\n            {/* Upload Button */}\n            <div \n              className=\"border-2 border-dashed border-gray-300 rounded-lg p-6 text-center hover:border-blue-400 transition-colors cursor-pointer\"\n              onClick={() => fileInputRef?.current?.click()}\n            >\n              <Upload className=\"h-8 w-8 text-gray-400 mx-auto mb-2\" />\n              <p className=\"text-sm text-gray-600 mb-1\">\n                Haz clic para subir archivos o arrastra aquí\n              </p>\n              <p className=\"text-xs text-gray-500\">\n                Imágenes (JPG, PNG, HEIC) y PDFs hasta 50MB cada uno\n              </p>\n              <p className=\"text-xs text-gray-500\">\n                Máximo 5 archivos por incidencia\n              </p>\n            </div>\n\n            <input\n              ref={fileInputRef}\n              type=\"file\"\n              multiple\n              accept=\"image/*,.pdf\"\n              onChange={handleFileSelect}\n              className=\"hidden\"\n            />\n\n            {/* Selected Files */}\n            {attachments?.length > 0 && (\n              <div className=\"space-y-2\">\n                <p className=\"text-sm font-medium text-gray-700\">\n                  Archivos seleccionados ({attachments?.length}/5):\n                </p>\n                \n                {attachments?.map((file, index) => (\n                  <div \n                    key={index} \n                    className=\"flex items-center justify-between p-3 bg-gray-50 rounded-md\"\n                  >\n                    <div className=\"flex items-center space-x-3\">\n                      {getFileIcon(file)}\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-900 truncate max-w-xs\">\n                          {file?.name}\n                        </p>\n                        <p className=\"text-xs text-gray-500\">\n                          {formatFileSize(file?.size)}\n                        </p>\n                      </div>\n                    </div>\n                    \n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => removeAttachment(index)}\n                      className=\"text-red-600 hover:text-red-800\"\n                    >\n                      <X className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n\n          {/* File requirements by type */}\n          {formData?.type && (\n            <div className=\"mt-3 p-3 bg-yellow-50 border border-yellow-200 rounded-md\">\n              <div className=\"flex items-start space-x-2\">\n                <AlertCircle className=\"h-4 w-4 text-yellow-600 mt-0.5\" />\n                <div className=\"text-sm text-yellow-800\">\n                  {formData?.type === 'incapacidad' && (\n                    <p>\n                      <strong>Incapacidad médica:</strong> Debe adjuntar receta médica, \n                      certificado de incapacidad o documento oficial del médico.\n                    </p>\n                  )}\n                  {formData?.type === 'permiso' && (\n                    <p>\n                      <strong>Permiso:</strong> Se recomienda adjuntar documentos de respaldo \n                      si el permiso es por motivos médicos o legales.\n                    </p>\n                  )}\n                  {formData?.type === 'retardo' && (\n                    <p>\n                      <strong>Retardo:</strong> Puede adjuntar documentos que justifiquen \n                      el motivo del retardo (médicos, tráfico, etc.).\n                    </p>\n                  )}\n                  {formData?.type === 'falta' && (\n                    <p>\n                      <strong>Falta:</strong> Se recomienda adjuntar documentos que \n                      justifiquen la ausencia.\n                    </p>\n                  )}\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Submit Button */}\n        <div className=\"flex justify-end space-x-4\">\n          {onCancel && (\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={onCancel}\n              disabled={loading}\n            >\n              Cancelar\n            </Button>\n          )}\n          \n          <Button\n            type=\"submit\"\n            disabled={loading || !formData?.type || !formData?.description?.trim()}\n            className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n          >\n            {loading ? (\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n                <span>Creando incidencia...</span>\n              </div>\n            ) : (\n              <div className=\"flex items-center space-x-2\">\n                <AlertCircle className=\"h-4 w-4\" />\n                <span>Registrar Incidencia</span>\n              </div>\n            )}\n          </Button>\n        </div>\n      </form>\n\n      {/* Help Text */}\n      <div className=\"mt-6 p-4 bg-blue-50 border border-blue-200 rounded-md\">\n        <div className=\"flex items-start space-x-2\">\n          <AlertCircle className=\"h-4 w-4 text-blue-600 mt-0.5\" />\n          <div className=\"text-sm text-blue-800\">\n            <p className=\"font-medium mb-2\">Información importante:</p>\n            <ul className=\"space-y-1 text-blue-700\">\n              <li>• Solo supervisores y administradores pueden registrar incidencias</li>\n              <li>• Las incapacidades médicas requieren documentos de respaldo obligatorios</li>\n              <li>• Los archivos se almacenan de forma segura y solo son visibles para el equipo autorizado</li>\n              <li>• Una vez creada la incidencia, será revisada por el administrador</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default IncidentCreationForm;","size_bytes":13044},"src/pages/incident-registration-and-management-system/components/IncidentHistoryGrid.jsx":{"content":"import React, { useState } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport Input from '../../../components/ui/Input';\nimport Select from '../../../components/ui/Select';\n\nconst IncidentHistoryGrid = ({ incidents, currentUser }) => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterType, setFilterType] = useState('all');\n  const [filterStatus, setFilterStatus] = useState('all');\n  const [dateRange, setDateRange] = useState({ start: '', end: '' });\n  const [currentPage, setCurrentPage] = useState(1);\n  const [selectedIncident, setSelectedIncident] = useState(null);\n\n  const itemsPerPage = 20;\n\n  const typeOptions = [\n    { value: 'all', label: 'Todos los Tipos' },\n    { value: 'absence', label: 'Ausencia' },\n    { value: 'permit', label: 'Permiso' },\n    { value: 'tardiness', label: 'Tardanza' },\n    { value: 'medical', label: 'Incapacidad Médica' },\n    { value: 'emergency', label: 'Emergencia Familiar' },\n    { value: 'training', label: 'Capacitación' },\n    { value: 'other', label: 'Otro' }\n  ];\n\n  const statusOptions = [\n    { value: 'all', label: 'Todos los Estados' },\n    { value: 'pending', label: 'Pendientes' },\n    { value: 'approved', label: 'Aprobados' },\n    { value: 'rejected', label: 'Rechazados' },\n    { value: 'under_review', label: 'En Revisión' }\n  ];\n\n  const getStatusColor = (status) => {\n    const colors = {\n      pending: 'bg-warning/10 text-warning border-warning/20',\n      approved: 'bg-success/10 text-success border-success/20',\n      rejected: 'bg-error/10 text-error border-error/20',\n      under_review: 'bg-primary/10 text-primary border-primary/20'\n    };\n    return colors?.[status] || colors?.pending;\n  };\n\n  const getTypeIcon = (type) => {\n    const icons = {\n      absence: 'UserX',\n      permit: 'FileText',\n      tardiness: 'Clock',\n      medical: 'Heart',\n      emergency: 'AlertTriangle',\n      training: 'GraduationCap',\n      other: 'HelpCircle'\n    };\n    return icons?.[type] || icons?.other;\n  };\n\n  const filteredIncidents = incidents?.filter(incident => {\n      const matchesSearch = incident?.employeeName?.toLowerCase()?.includes(searchTerm?.toLowerCase()) ||\n                           incident?.description?.toLowerCase()?.includes(searchTerm?.toLowerCase());\n      const matchesType = filterType === 'all' || incident?.type === filterType;\n      const matchesStatus = filterStatus === 'all' || incident?.status === filterStatus;\n      \n      let matchesDateRange = true;\n      if (dateRange?.start) {\n        matchesDateRange = new Date(incident.startDate) >= new Date(dateRange.start);\n      }\n      if (dateRange?.end && matchesDateRange) {\n        matchesDateRange = new Date(incident.startDate) <= new Date(dateRange.end);\n      }\n\n      return matchesSearch && matchesType && matchesStatus && matchesDateRange;\n    })?.sort((a, b) => new Date(b.submittedAt) - new Date(a.submittedAt));\n\n  const totalPages = Math.ceil(filteredIncidents?.length / itemsPerPage);\n  const startIndex = (currentPage - 1) * itemsPerPage;\n  const paginatedIncidents = filteredIncidents?.slice(startIndex, startIndex + itemsPerPage);\n\n  const formatDate = (date) => {\n    return new Date(date)?.toLocaleDateString('es-ES', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric'\n    });\n  };\n\n  const formatDateTime = (date) => {\n    return new Date(date)?.toLocaleDateString('es-ES', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const calculateDuration = (startDate, endDate) => {\n    if (!endDate) return '1 día';\n    const start = new Date(startDate);\n    const end = new Date(endDate);\n    const diffTime = Math.abs(end - start);\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)) + 1;\n    return `${diffDays} día${diffDays > 1 ? 's' : ''}`;\n  };\n\n  const clearFilters = () => {\n    setSearchTerm('');\n    setFilterType('all');\n    setFilterStatus('all');\n    setDateRange({ start: '', end: '' });\n    setCurrentPage(1);\n  };\n\n  return (\n    <div className=\"bg-card border border-border rounded-lg\">\n      {/* Header */}\n      <div className=\"p-6 border-b border-border\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div>\n            <h2 className=\"text-xl font-semibold text-foreground\">Historial de Incidentes</h2>\n            <p className=\"text-sm text-muted-foreground mt-1\">\n              {filteredIncidents?.length} incidentes encontrados\n            </p>\n          </div>\n          <Button\n            variant=\"outline\"\n            onClick={clearFilters}\n            iconName=\"RotateCcw\"\n            iconSize={16}\n          >\n            Limpiar Filtros\n          </Button>\n        </div>\n\n        {/* Filters */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4\">\n          <Input\n            placeholder=\"Buscar empleado o descripción...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e?.target?.value)}\n            className=\"lg:col-span-2\"\n          />\n          <Select\n            options={typeOptions}\n            value={filterType}\n            onChange={setFilterType}\n            placeholder=\"Tipo...\"\n          />\n          <Select\n            options={statusOptions}\n            value={filterStatus}\n            onChange={setFilterStatus}\n            placeholder=\"Estado...\"\n          />\n          <div className=\"flex space-x-2\">\n            <Input\n              type=\"date\"\n              value={dateRange?.start}\n              onChange={(e) => setDateRange(prev => ({ ...prev, start: e?.target?.value }))}\n              placeholder=\"Desde\"\n            />\n            <Input\n              type=\"date\"\n              value={dateRange?.end}\n              onChange={(e) => setDateRange(prev => ({ ...prev, end: e?.target?.value }))}\n              placeholder=\"Hasta\"\n            />\n          </div>\n        </div>\n      </div>\n      {/* Table */}\n      <div className=\"overflow-x-auto\">\n        <table className=\"w-full\">\n          <thead className=\"bg-muted/30\">\n            <tr>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                Empleado\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                Tipo\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                Fechas\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                Duración\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                Estado\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                Enviado\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                Acciones\n              </th>\n            </tr>\n          </thead>\n          <tbody className=\"divide-y divide-border\">\n            {paginatedIncidents?.length === 0 ? (\n              <tr>\n                <td colSpan=\"7\" className=\"px-6 py-12 text-center\">\n                  <Icon name=\"Search\" size={48} className=\"mx-auto text-muted-foreground mb-4\" />\n                  <h3 className=\"text-lg font-medium text-foreground mb-2\">\n                    No se encontraron incidentes\n                  </h3>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Intenta ajustar los filtros de búsqueda\n                  </p>\n                </td>\n              </tr>\n            ) : (\n              paginatedIncidents?.map((incident) => (\n                <tr key={incident?.id} className=\"hover:bg-muted/50 transition-colors duration-150\">\n                  <td className=\"px-6 py-4\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"flex-shrink-0 w-8 h-8 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-sm font-medium\">\n                        {incident?.employeeName?.split(' ')?.map(n => n?.[0])?.join('')?.toUpperCase()?.slice(0, 2)}\n                      </div>\n                      <div>\n                        <div className=\"text-sm font-medium text-foreground\">\n                          {incident?.employeeName}\n                        </div>\n                        <div className=\"text-xs text-muted-foreground\">\n                          {incident?.site}\n                        </div>\n                      </div>\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Icon \n                        name={getTypeIcon(incident?.type)} \n                        size={16} \n                        className=\"text-muted-foreground\" \n                      />\n                      <span className=\"text-sm text-foreground capitalize\">\n                        {incident?.type}\n                      </span>\n                      {incident?.priority === 'high' && (\n                        <Icon name=\"AlertTriangle\" size={14} className=\"text-error\" />\n                      )}\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4\">\n                    <div className=\"text-sm text-foreground\">\n                      {formatDate(incident?.startDate)}\n                      {incident?.endDate && (\n                        <>\n                          <br />\n                          <span className=\"text-muted-foreground\">\n                            hasta {formatDate(incident?.endDate)}\n                          </span>\n                        </>\n                      )}\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4\">\n                    <span className=\"text-sm text-foreground\">\n                      {calculateDuration(incident?.startDate, incident?.endDate)}\n                    </span>\n                  </td>\n                  <td className=\"px-6 py-4\">\n                    <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium border ${getStatusColor(incident?.status)}`}>\n                      {incident?.status === 'pending' && 'Pendiente'}\n                      {incident?.status === 'approved' && 'Aprobado'}\n                      {incident?.status === 'rejected' && 'Rechazado'}\n                      {incident?.status === 'under_review' && 'En Revisión'}\n                    </span>\n                  </td>\n                  <td className=\"px-6 py-4\">\n                    <span className=\"text-xs text-muted-foreground\">\n                      {formatDateTime(incident?.submittedAt)}\n                    </span>\n                  </td>\n                  <td className=\"px-6 py-4\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => setSelectedIncident(incident)}\n                      iconName=\"Eye\"\n                      iconSize={16}\n                    >\n                      Ver\n                    </Button>\n                  </td>\n                </tr>\n              ))\n            )}\n          </tbody>\n        </table>\n      </div>\n      {/* Pagination */}\n      {totalPages > 1 && (\n        <div className=\"px-6 py-4 border-t border-border\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"text-sm text-muted-foreground\">\n              Mostrando {startIndex + 1} a {Math.min(startIndex + itemsPerPage, filteredIncidents?.length)} de {filteredIncidents?.length} incidentes\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n                disabled={currentPage === 1}\n                iconName=\"ChevronLeft\"\n                iconSize={16}\n              >\n                Anterior\n              </Button>\n              <span className=\"text-sm text-foreground\">\n                Página {currentPage} de {totalPages}\n              </span>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}\n                disabled={currentPage === totalPages}\n                iconName=\"ChevronRight\"\n                iconSize={16}\n              >\n                Siguiente\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n      {/* Incident Detail Modal */}\n      {selectedIncident && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n          <div className=\"bg-card border border-border rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto\">\n            <div className=\"p-6 border-b border-border\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-lg font-semibold text-foreground\">\n                  Detalle del Incidente\n                </h3>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setSelectedIncident(null)}\n                  iconName=\"X\"\n                  iconSize={16}\n                />\n              </div>\n            </div>\n            \n            <div className=\"p-6 space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground\">Empleado</label>\n                  <p className=\"text-sm text-foreground\">{selectedIncident?.employeeName}</p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground\">Sitio</label>\n                  <p className=\"text-sm text-foreground\">{selectedIncident?.site}</p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground\">Tipo</label>\n                  <p className=\"text-sm text-foreground capitalize\">{selectedIncident?.type}</p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground\">Estado</label>\n                  <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium border ${getStatusColor(selectedIncident?.status)}`}>\n                    {selectedIncident?.status === 'pending' && 'Pendiente'}\n                    {selectedIncident?.status === 'approved' && 'Aprobado'}\n                    {selectedIncident?.status === 'rejected' && 'Rechazado'}\n                    {selectedIncident?.status === 'under_review' && 'En Revisión'}\n                  </span>\n                </div>\n              </div>\n              \n              <div>\n                <label className=\"text-sm font-medium text-muted-foreground\">Descripción</label>\n                <p className=\"text-sm text-foreground mt-1\">{selectedIncident?.description}</p>\n              </div>\n              \n              {selectedIncident?.attachments && selectedIncident?.attachments?.length > 0 && (\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground\">Documentos Adjuntos</label>\n                  <div className=\"mt-2 space-y-2\">\n                    {selectedIncident?.attachments?.map((attachment, index) => (\n                      <div key={index} className=\"flex items-center space-x-2 p-2 bg-muted rounded\">\n                        <Icon name=\"Paperclip\" size={16} />\n                        <span className=\"text-sm text-foreground\">{attachment?.name}</span>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default IncidentHistoryGrid;","size_bytes":16411},"src/pages/incident-registration-and-management-system/components/PendingApprovalsQueue.jsx":{"content":"import React, { useState } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport Select from '../../../components/ui/Select';\n\nconst PendingApprovalsQueue = ({ incidents, onApprove, onReject, currentUser }) => {\n  const [selectedIncidents, setSelectedIncidents] = useState([]);\n  const [filterStatus, setFilterStatus] = useState('pending');\n  const [sortBy, setSortBy] = useState('priority');\n  const [expandedIncident, setExpandedIncident] = useState(null);\n\n  const statusOptions = [\n    { value: 'all', label: 'Todos los Estados' },\n    { value: 'pending', label: 'Pendientes' },\n    { value: 'approved', label: 'Aprobados' },\n    { value: 'rejected', label: 'Rechazados' },\n    { value: 'under_review', label: 'En Revisión' }\n  ];\n\n  const sortOptions = [\n    { value: 'priority', label: 'Por Prioridad' },\n    { value: 'date', label: 'Por Fecha' },\n    { value: 'employee', label: 'Por Empleado' },\n    { value: 'type', label: 'Por Tipo' }\n  ];\n\n  const getStatusColor = (status) => {\n    const colors = {\n      pending: 'bg-warning/10 text-warning border-warning/20',\n      approved: 'bg-success/10 text-success border-success/20',\n      rejected: 'bg-error/10 text-error border-error/20',\n      under_review: 'bg-primary/10 text-primary border-primary/20'\n    };\n    return colors?.[status] || colors?.pending;\n  };\n\n  const getPriorityIcon = (priority) => {\n    return priority === 'high' ? 'AlertTriangle' : 'Clock';\n  };\n\n  const getPriorityColor = (priority) => {\n    return priority === 'high' ? 'text-error' : 'text-muted-foreground';\n  };\n\n  const getTypeIcon = (type) => {\n    const icons = {\n      absence: 'UserX',\n      permit: 'FileText',\n      tardiness: 'Clock',\n      medical: 'Heart',\n      emergency: 'AlertTriangle',\n      training: 'GraduationCap',\n      other: 'HelpCircle'\n    };\n    return icons?.[type] || icons?.other;\n  };\n\n  const filteredIncidents = incidents?.filter(incident => filterStatus === 'all' || incident?.status === filterStatus)?.sort((a, b) => {\n      switch (sortBy) {\n        case 'priority':\n          if (a?.priority === 'high' && b?.priority !== 'high') return -1;\n          if (a?.priority !== 'high' && b?.priority === 'high') return 1;\n          return new Date(b.submittedAt) - new Date(a.submittedAt);\n        case 'date':\n          return new Date(b.submittedAt) - new Date(a.submittedAt);\n        case 'employee':\n          return a?.employeeName?.localeCompare(b?.employeeName);\n        case 'type':\n          return a?.type?.localeCompare(b?.type);\n        default:\n          return 0;\n      }\n    });\n\n  const handleSelectIncident = (incidentId) => {\n    setSelectedIncidents(prev => \n      prev?.includes(incidentId)\n        ? prev?.filter(id => id !== incidentId)\n        : [...prev, incidentId]\n    );\n  };\n\n  const handleSelectAll = () => {\n    const pendingIds = filteredIncidents?.filter(incident => incident?.status === 'pending')?.map(incident => incident?.id);\n    \n    setSelectedIncidents(prev => \n      prev?.length === pendingIds?.length ? [] : pendingIds\n    );\n  };\n\n  const handleBulkAction = async (action) => {\n    const selectedPendingIncidents = filteredIncidents?.filter(\n      incident => selectedIncidents?.includes(incident?.id) && incident?.status === 'pending'\n    );\n\n    for (const incident of selectedPendingIncidents) {\n      if (action === 'approve') {\n        await onApprove(incident?.id, 'Aprobación masiva');\n      } else if (action === 'reject') {\n        await onReject(incident?.id, 'Rechazo masivo');\n      }\n    }\n\n    setSelectedIncidents([]);\n  };\n\n  const formatDate = (date) => {\n    return new Date(date)?.toLocaleDateString('es-ES', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const formatDateRange = (startDate, endDate) => {\n    const start = new Date(startDate)?.toLocaleDateString('es-ES', {\n      day: '2-digit',\n      month: '2-digit'\n    });\n    \n    if (!endDate) return start;\n    \n    const end = new Date(endDate)?.toLocaleDateString('es-ES', {\n      day: '2-digit',\n      month: '2-digit'\n    });\n    \n    return `${start} - ${end}`;\n  };\n\n  const pendingCount = incidents?.filter(i => i?.status === 'pending')?.length;\n  const selectedPendingCount = selectedIncidents?.filter(id => \n    incidents?.find(i => i?.id === id)?.status === 'pending'\n  )?.length;\n\n  return (\n    <div className=\"bg-card border border-border rounded-lg\">\n      {/* Header */}\n      <div className=\"p-6 border-b border-border\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div>\n            <h2 className=\"text-xl font-semibold text-foreground\">Cola de Aprobaciones</h2>\n            <p className=\"text-sm text-muted-foreground mt-1\">\n              {pendingCount} incidentes pendientes de revisión\n            </p>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Icon name=\"Clock\" size={20} className=\"text-warning\" />\n            <span className=\"text-sm font-medium text-warning\">\n              {pendingCount} Pendientes\n            </span>\n          </div>\n        </div>\n\n        {/* Filters and Actions */}\n        <div className=\"flex flex-col sm:flex-row gap-4\">\n          <div className=\"flex-1 grid grid-cols-1 sm:grid-cols-2 gap-3\">\n            <Select\n              options={statusOptions}\n              value={filterStatus}\n              onChange={setFilterStatus}\n              placeholder=\"Filtrar por estado...\"\n            />\n            <Select\n              options={sortOptions}\n              value={sortBy}\n              onChange={setSortBy}\n              placeholder=\"Ordenar por...\"\n            />\n          </div>\n          \n          {selectedPendingCount > 0 && (\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"text-sm text-muted-foreground\">\n                {selectedPendingCount} seleccionados\n              </span>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => handleBulkAction('approve')}\n                iconName=\"Check\"\n                iconSize={16}\n              >\n                Aprobar\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => handleBulkAction('reject')}\n                iconName=\"X\"\n                iconSize={16}\n              >\n                Rechazar\n              </Button>\n            </div>\n          )}\n        </div>\n      </div>\n      {/* Incidents List */}\n      <div className=\"max-h-96 overflow-y-auto\">\n        {filteredIncidents?.length === 0 ? (\n          <div className=\"p-8 text-center\">\n            <Icon name=\"Inbox\" size={48} className=\"mx-auto text-muted-foreground mb-4\" />\n            <h3 className=\"text-lg font-medium text-foreground mb-2\">\n              No hay incidentes\n            </h3>\n            <p className=\"text-sm text-muted-foreground\">\n              {filterStatus === 'pending' ?'No hay incidentes pendientes de aprobación' :'No se encontraron incidentes con los filtros aplicados'\n              }\n            </p>\n          </div>\n        ) : (\n          <div className=\"divide-y divide-border\">\n            {/* Select All Header */}\n            {filteredIncidents?.some(i => i?.status === 'pending') && (\n              <div className=\"p-4 bg-muted/30\">\n                <label className=\"flex items-center space-x-3 cursor-pointer\">\n                  <input\n                    type=\"checkbox\"\n                    checked={selectedIncidents?.length === filteredIncidents?.filter(i => i?.status === 'pending')?.length}\n                    onChange={handleSelectAll}\n                    className=\"w-4 h-4 text-primary border-border rounded focus:ring-ring\"\n                  />\n                  <span className=\"text-sm font-medium text-foreground\">\n                    Seleccionar todos los pendientes\n                  </span>\n                </label>\n              </div>\n            )}\n\n            {filteredIncidents?.map((incident) => (\n              <div key={incident?.id} className=\"p-4 hover:bg-muted/50 transition-colors duration-150\">\n                <div className=\"flex items-start space-x-4\">\n                  {/* Checkbox */}\n                  {incident?.status === 'pending' && (\n                    <input\n                      type=\"checkbox\"\n                      checked={selectedIncidents?.includes(incident?.id)}\n                      onChange={() => handleSelectIncident(incident?.id)}\n                      className=\"w-4 h-4 text-primary border-border rounded focus:ring-ring mt-1\"\n                    />\n                  )}\n\n                  {/* Incident Info */}\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <div className=\"flex items-center space-x-3\">\n                        <Icon \n                          name={getTypeIcon(incident?.type)} \n                          size={16} \n                          className=\"text-muted-foreground\" \n                        />\n                        <span className=\"text-sm font-medium text-foreground\">\n                          {incident?.employeeName}\n                        </span>\n                        <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium border ${getStatusColor(incident?.status)}`}>\n                          {incident?.status === 'pending' && 'Pendiente'}\n                          {incident?.status === 'approved' && 'Aprobado'}\n                          {incident?.status === 'rejected' && 'Rechazado'}\n                          {incident?.status === 'under_review' && 'En Revisión'}\n                        </span>\n                        {incident?.priority === 'high' && (\n                          <Icon \n                            name=\"AlertTriangle\" \n                            size={14} \n                            className=\"text-error\" \n                          />\n                        )}\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"text-xs text-muted-foreground\">\n                          {formatDate(incident?.submittedAt)}\n                        </span>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => setExpandedIncident(\n                            expandedIncident === incident?.id ? null : incident?.id\n                          )}\n                          iconName={expandedIncident === incident?.id ? 'ChevronUp' : 'ChevronDown'}\n                          iconSize={16}\n                        >\n                          {expandedIncident === incident?.id ? 'Menos' : 'Más'}\n                        </Button>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center space-x-4 text-sm text-muted-foreground mb-2\">\n                      <span className=\"capitalize\">{incident?.type}</span>\n                      <span>•</span>\n                      <span>{formatDateRange(incident?.startDate, incident?.endDate)}</span>\n                      <span>•</span>\n                      <span>{incident?.site}</span>\n                    </div>\n\n                    <p className=\"text-sm text-foreground line-clamp-2\">\n                      {incident?.description}\n                    </p>\n\n                    {/* Expanded Details */}\n                    {expandedIncident === incident?.id && (\n                      <div className=\"mt-4 p-4 bg-muted rounded-lg space-y-3\">\n                        <div>\n                          <h4 className=\"text-sm font-medium text-foreground mb-1\">Motivo:</h4>\n                          <p className=\"text-sm text-muted-foreground capitalize\">{incident?.reason}</p>\n                        </div>\n                        \n                        {incident?.attachments && incident?.attachments?.length > 0 && (\n                          <div>\n                            <h4 className=\"text-sm font-medium text-foreground mb-2\">Documentos:</h4>\n                            <div className=\"flex flex-wrap gap-2\">\n                              {incident?.attachments?.map((attachment, index) => (\n                                <div key={index} className=\"flex items-center space-x-2 bg-background px-2 py-1 rounded text-xs\">\n                                  <Icon name=\"Paperclip\" size={12} />\n                                  <span>{attachment?.name}</span>\n                                </div>\n                              ))}\n                            </div>\n                          </div>\n                        )}\n\n                        {incident?.status === 'pending' && (\n                          <div className=\"flex items-center space-x-2 pt-2\">\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => onApprove(incident?.id, 'Aprobado por supervisor')}\n                              iconName=\"Check\"\n                              iconSize={16}\n                            >\n                              Aprobar\n                            </Button>\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => onReject(incident?.id, 'Rechazado por supervisor')}\n                              iconName=\"X\"\n                              iconSize={16}\n                            >\n                              Rechazar\n                            </Button>\n                          </div>\n                        )}\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default PendingApprovalsQueue;","size_bytes":14162},"src/pages/obras-financial-control-management/components/ExportModal.jsx":{"content":"import React, { useState } from 'react';\nimport { X, Download, FileSpreadsheet, FileText, Filter } from 'lucide-react';\n\nconst ExportModal = ({ obras, onClose }) => {\n  const [exportFormat, setExportFormat] = useState('xlsx');\n  const [exportType, setExportType] = useState('summary');\n  const [includeFilters, setIncludeFilters] = useState({\n    status: 'all',\n    dateRange: { start: '', end: '' },\n    includeKPIs: true,\n    includeDetails: false\n  });\n  const [loading, setLoading] = useState(false);\n\n  // Format currency for export\n  const formatCurrency = (amount) => {\n    if (!amount && amount !== 0) return 0;\n    return amount;\n  };\n\n  // Format percentage for export\n  const formatPercentage = (value) => {\n    if (!value && value !== 0) return 0;\n    return parseFloat(value?.toFixed(2));\n  };\n\n  // Prepare data for export\n  const prepareExportData = () => {\n    let filteredObras = obras;\n\n    // Apply status filter\n    if (includeFilters?.status !== 'all') {\n      filteredObras = filteredObras?.filter(obra => obra?.estatus === includeFilters?.status);\n    }\n\n    // Apply date range filter\n    if (includeFilters?.dateRange?.start && includeFilters?.dateRange?.end) {\n      filteredObras = filteredObras?.filter(obra => {\n        const obraDate = new Date(obra?.fecha_inicio);\n        const startDate = new Date(includeFilters?.dateRange?.start);\n        const endDate = new Date(includeFilters?.dateRange?.end);\n        return obraDate >= startDate && obraDate <= endDate;\n      });\n    }\n\n    if (exportType === 'summary') {\n      return filteredObras?.map(obra => ({\n        'Clave': obra?.clave || '',\n        'Nombre': obra?.nombre || '',\n        'Estado': obra?.estatus || '',\n        'Empresa': obra?.empresa_nombre || '',\n        'Dependencia': obra?.dependencia_nombre || 'N/A',\n        'Presupuesto Total': formatCurrency(obra?.presupuesto_total),\n        'Órdenes de Cambio': formatCurrency(obra?.presupuesto_total - obra?.presupuesto_inicial),\n        'Facturado Total': formatCurrency(obra?.facturado_total),\n        'Pagado Total': formatCurrency(obra?.pagado_total),\n        'Por Cobrar': formatCurrency(obra?.por_cobrar),\n        'Gastos Total': formatCurrency(obra?.gastos_total),\n        'Costo Directo': formatCurrency(obra?.costo_directo),\n        'Utilidad Bruta': formatCurrency(obra?.utilidad_bruta),\n        'Utilidad vs Presupuesto': formatCurrency(obra?.utilidad_vs_presupuesto),\n        '% Utilidad Real': formatPercentage(obra?.utilidad_pct_real),\n        '% Avance Financiero': formatPercentage(obra?.avance_financiero_pct),\n        '% Margen Presupuestado': formatPercentage(obra?.margen_presupuestado_pct),\n        'Fecha Inicio': obra?.fecha_inicio || '',\n        'Fecha Compromiso': obra?.fecha_fin_compromiso || ''\n      }));\n    }\n\n    // For detailed report, return comprehensive data\n    return filteredObras;\n  };\n\n  // Generate CSV content\n  const generateCSV = (data) => {\n    if (!data?.length) return '';\n\n    const headers = Object.keys(data?.[0]);\n    const csvContent = [\n      headers?.join(','),\n      ...data?.map(row => \n        headers?.map(header => {\n          const value = row?.[header];\n          // Escape commas and quotes in values\n          if (typeof value === 'string' && (value?.includes(',') || value?.includes('\"'))) {\n            return `\"${value?.replace(/\"/g, '\"\"')}\"`;\n          }\n          return value ?? '';\n        })?.join(',')\n      )\n    ]?.join('\\n');\n\n    return csvContent;\n  };\n\n  // Generate Excel-compatible content (CSV with BOM for proper encoding)\n  const generateExcel = (data) => {\n    const csv = generateCSV(data);\n    return '\\uFEFF' + csv; // Add BOM for proper UTF-8 encoding in Excel\n  };\n\n  // Generate PDF content (simplified - in a real app, you'd use a PDF library)\n  const generatePDFContent = (data) => {\n    // This is a simplified version. In production, you'd use jsPDF or similar\n    return `\nREPORTE FINANCIERO DE OBRAS\nGenerado: ${new Date()?.toLocaleString('es-MX')}\nTotal de obras: ${data?.length}\n\n${data?.map(obra => `\nOBRA: ${obra?.['Clave']} - ${obra?.['Nombre']}\nEstado: ${obra?.['Estado']}\nEmpresa: ${obra?.['Empresa']}\nPresupuesto Total: $${obra?.['Presupuesto Total']?.toLocaleString('es-MX')}\nFacturado: $${obra?.['Facturado Total']?.toLocaleString('es-MX')}\nPor Cobrar: $${obra?.['Por Cobrar']?.toLocaleString('es-MX')}\n% Utilidad Real: ${obra?.['% Utilidad Real']}%\n% Avance: ${obra?.['% Avance Financiero']}%\n----------------------------------------\n`)?.join('')}\n    `;\n  };\n\n  // Handle export\n  const handleExport = async () => {\n    try {\n      setLoading(true);\n\n      const data = prepareExportData();\n      \n      if (!data?.length) {\n        alert('No hay datos para exportar con los filtros seleccionados');\n        return;\n      }\n\n      let content;\n      let mimeType;\n      let fileName;\n\n      switch (exportFormat) {\n        case 'xlsx':\n          content = generateExcel(data);\n          mimeType = 'text/csv';\n          fileName = `obras-financiero-${exportType}-${new Date()?.toISOString()?.split('T')?.[0]}.csv`;\n          break;\n        case 'csv':\n          content = generateCSV(data);\n          mimeType = 'text/csv';\n          fileName = `obras-financiero-${exportType}-${new Date()?.toISOString()?.split('T')?.[0]}.csv`;\n          break;\n        case 'pdf':\n          content = generatePDFContent(data);\n          mimeType = 'text/plain';\n          fileName = `obras-financiero-${exportType}-${new Date()?.toISOString()?.split('T')?.[0]}.txt`;\n          break;\n        default:\n          throw new Error('Formato no soportado');\n      }\n\n      // Create and download file\n      const blob = new Blob([content], { type: mimeType });\n      const url = window.URL?.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = fileName;\n      document.body?.appendChild(link);\n      link?.click();\n      document.body?.removeChild(link);\n      window.URL?.revokeObjectURL(url);\n\n      onClose();\n    } catch (error) {\n      console.error('Error exporting data:', error);\n      alert('Error al exportar los datos. Por favor intente nuevamente.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n      <div className=\"bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-6 border-b border-gray-200\">\n          <div className=\"flex items-center space-x-3\">\n            <Download className=\"h-6 w-6 text-blue-600\" />\n            <h2 className=\"text-xl font-semibold text-gray-900\">Exportar Reportes</h2>\n          </div>\n          <button\n            onClick={onClose}\n            className=\"text-gray-400 hover:text-gray-600 transition-colors\"\n          >\n            <X className=\"h-6 w-6\" />\n          </button>\n        </div>\n\n        <div className=\"p-6 space-y-6\">\n          {/* Export Type Selection */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-3\">\n              Tipo de Reporte\n            </label>\n            <div className=\"space-y-2\">\n              <label className=\"flex items-center\">\n                <input\n                  type=\"radio\"\n                  name=\"exportType\"\n                  value=\"summary\"\n                  checked={exportType === 'summary'}\n                  onChange={(e) => setExportType(e?.target?.value)}\n                  className=\"form-radio h-4 w-4 text-blue-600 border-gray-300 focus:ring-blue-500\"\n                />\n                <span className=\"ml-2 text-sm text-gray-700\">\n                  Resumen Ejecutivo (KPIs principales por obra)\n                </span>\n              </label>\n              <label className=\"flex items-center\">\n                <input\n                  type=\"radio\"\n                  name=\"exportType\"\n                  value=\"detailed\"\n                  checked={exportType === 'detailed'}\n                  onChange={(e) => setExportType(e?.target?.value)}\n                  className=\"form-radio h-4 w-4 text-blue-600 border-gray-300 focus:ring-blue-500\"\n                />\n                <span className=\"ml-2 text-sm text-gray-700\">\n                  Reporte Detallado (incluye transacciones)\n                </span>\n              </label>\n            </div>\n          </div>\n\n          {/* Format Selection */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-3\">\n              Formato de Exportación\n            </label>\n            <div className=\"grid grid-cols-3 gap-3\">\n              <button\n                type=\"button\"\n                onClick={() => setExportFormat('xlsx')}\n                className={`p-4 border-2 rounded-lg flex flex-col items-center space-y-2 transition-colors ${\n                  exportFormat === 'xlsx' ?'border-blue-500 bg-blue-50 text-blue-700' :'border-gray-300 hover:border-gray-400'\n                }`}\n              >\n                <FileSpreadsheet className=\"h-8 w-8\" />\n                <span className=\"text-sm font-medium\">Excel (.xlsx)</span>\n              </button>\n              <button\n                type=\"button\"\n                onClick={() => setExportFormat('csv')}\n                className={`p-4 border-2 rounded-lg flex flex-col items-center space-y-2 transition-colors ${\n                  exportFormat === 'csv' ?'border-blue-500 bg-blue-50 text-blue-700' :'border-gray-300 hover:border-gray-400'\n                }`}\n              >\n                <FileText className=\"h-8 w-8\" />\n                <span className=\"text-sm font-medium\">CSV</span>\n              </button>\n              <button\n                type=\"button\"\n                onClick={() => setExportFormat('pdf')}\n                className={`p-4 border-2 rounded-lg flex flex-col items-center space-y-2 transition-colors ${\n                  exportFormat === 'pdf' ?'border-blue-500 bg-blue-50 text-blue-700' :'border-gray-300 hover:border-gray-400'\n                }`}\n              >\n                <FileText className=\"h-8 w-8\" />\n                <span className=\"text-sm font-medium\">PDF</span>\n              </button>\n            </div>\n          </div>\n\n          {/* Filters */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-3\">\n              Filtros de Exportación\n            </label>\n            <div className=\"space-y-4\">\n              {/* Status Filter */}\n              <div>\n                <label className=\"block text-sm text-gray-600 mb-1\">Estado de Obra</label>\n                <select\n                  value={includeFilters?.status}\n                  onChange={(e) => setIncludeFilters(prev => ({ ...prev, status: e?.target?.value }))}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500\"\n                >\n                  <option value=\"all\">Todas las obras</option>\n                  <option value=\"Planeación\">En Planeación</option>\n                  <option value=\"En ejecución\">En Ejecución</option>\n                  <option value=\"En pausa\">En Pausa</option>\n                  <option value=\"Concluida\">Concluidas</option>\n                  <option value=\"Cancelada\">Canceladas</option>\n                </select>\n              </div>\n\n              {/* Date Range Filter */}\n              <div className=\"grid grid-cols-2 gap-3\">\n                <div>\n                  <label className=\"block text-sm text-gray-600 mb-1\">Fecha Inicio Desde</label>\n                  <input\n                    type=\"date\"\n                    value={includeFilters?.dateRange?.start}\n                    onChange={(e) => setIncludeFilters(prev => ({ \n                      ...prev, \n                      dateRange: { ...prev?.dateRange, start: e?.target?.value }\n                    }))}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500\"\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm text-gray-600 mb-1\">Fecha Inicio Hasta</label>\n                  <input\n                    type=\"date\"\n                    value={includeFilters?.dateRange?.end}\n                    onChange={(e) => setIncludeFilters(prev => ({ \n                      ...prev, \n                      dateRange: { ...prev?.dateRange, end: e?.target?.value }\n                    }))}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500\"\n                  />\n                </div>\n              </div>\n\n              {/* Include Options */}\n              <div className=\"space-y-2\">\n                <label className=\"flex items-center\">\n                  <input\n                    type=\"checkbox\"\n                    checked={includeFilters?.includeKPIs}\n                    onChange={(e) => setIncludeFilters(prev => ({ ...prev, includeKPIs: e?.target?.checked }))}\n                    className=\"form-checkbox h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500\"\n                  />\n                  <span className=\"ml-2 text-sm text-gray-700\">Incluir KPIs financieros</span>\n                </label>\n                <label className=\"flex items-center\">\n                  <input\n                    type=\"checkbox\"\n                    checked={includeFilters?.includeDetails}\n                    onChange={(e) => setIncludeFilters(prev => ({ ...prev, includeDetails: e?.target?.checked }))}\n                    className=\"form-checkbox h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500\"\n                  />\n                  <span className=\"ml-2 text-sm text-gray-700\">Incluir detalles de transacciones</span>\n                </label>\n              </div>\n            </div>\n          </div>\n\n          {/* Summary */}\n          <div className=\"bg-gray-50 rounded-lg p-4\">\n            <h3 className=\"text-sm font-medium text-gray-900 mb-2\">Resumen de Exportación</h3>\n            <div className=\"text-sm text-gray-600 space-y-1\">\n              <p>• Formato: {exportFormat?.toUpperCase()}</p>\n              <p>• Tipo: {exportType === 'summary' ? 'Resumen Ejecutivo' : 'Reporte Detallado'}</p>\n              <p>• Total de obras disponibles: {obras?.length || 0}</p>\n              <p>• Obras filtradas: {prepareExportData()?.length || 0}</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Actions */}\n        <div className=\"flex justify-end space-x-4 p-6 border-t border-gray-200\">\n          <button\n            type=\"button\"\n            onClick={onClose}\n            className=\"px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\n          >\n            Cancelar\n          </button>\n          <button\n            type=\"button\"\n            onClick={handleExport}\n            disabled={loading}\n            className=\"px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed\"\n          >\n            {loading ? (\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n                <span>Exportando...</span>\n              </div>\n            ) : (\n              <div className=\"flex items-center space-x-2\">\n                <Download className=\"h-4 w-4\" />\n                <span>Exportar</span>\n              </div>\n            )}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ExportModal;","size_bytes":15962},"src/pages/obras-financial-control-management/components/FiltersModal.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { X, Filter, Calendar, Building } from 'lucide-react';\nimport { companiesService } from '../../../services/obrasFinancialService';\n\nconst FiltersModal = ({ onClose, onApplyFilters, currentFilters }) => {\n  const [filters, setFilters] = useState({\n    status: currentFilters?.status || 'all',\n    company: currentFilters?.company || 'all',\n    dateRange: currentFilters?.dateRange || { start: '', end: '' }\n  });\n  \n  const [companies, setCompanies] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  // Load companies for filter options\n  useEffect(() => {\n    loadCompanies();\n  }, []);\n\n  const loadCompanies = async () => {\n    try {\n      setLoading(true);\n      const { data, error } = await companiesService?.getAll();\n      \n      if (!error && data) {\n        setCompanies(data?.filter(c => c?.activo));\n      }\n    } catch (err) {\n      console.error('Error loading companies:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handle filter changes\n  const handleFilterChange = (filterType, value) => {\n    setFilters(prev => ({\n      ...prev,\n      [filterType]: value\n    }));\n  };\n\n  // Handle date range changes\n  const handleDateRangeChange = (dateType, value) => {\n    setFilters(prev => ({\n      ...prev,\n      dateRange: {\n        ...prev?.dateRange,\n        [dateType]: value\n      }\n    }));\n  };\n\n  // Reset all filters\n  const handleResetFilters = () => {\n    setFilters({\n      status: 'all',\n      company: 'all',\n      dateRange: { start: '', end: '' }\n    });\n  };\n\n  // Apply filters\n  const handleApplyFilters = () => {\n    onApplyFilters(filters);\n  };\n\n  // Check if filters have been applied\n  const hasActiveFilters = () => {\n    return (\n      filters?.status !== 'all' ||\n      filters?.company !== 'all' ||\n      filters?.dateRange?.start ||\n      filters?.dateRange?.end\n    );\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n      <div className=\"bg-white rounded-lg shadow-xl max-w-lg w-full max-h-[90vh] overflow-y-auto\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-6 border-b border-gray-200\">\n          <div className=\"flex items-center space-x-3\">\n            <Filter className=\"h-6 w-6 text-blue-600\" />\n            <h2 className=\"text-xl font-semibold text-gray-900\">Filtros</h2>\n          </div>\n          <button\n            onClick={onClose}\n            className=\"text-gray-400 hover:text-gray-600 transition-colors\"\n          >\n            <X className=\"h-6 w-6\" />\n          </button>\n        </div>\n\n        <div className=\"p-6 space-y-6\">\n          {/* Status Filter */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Estado de la Obra\n            </label>\n            <select\n              value={filters?.status}\n              onChange={(e) => handleFilterChange('status', e?.target?.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500\"\n            >\n              <option value=\"all\">Todos los estados</option>\n              <option value=\"Planeación\">En Planeación</option>\n              <option value=\"En ejecución\">En Ejecución</option>\n              <option value=\"En pausa\">En Pausa</option>\n              <option value=\"Concluida\">Concluidas</option>\n              <option value=\"Cancelada\">Canceladas</option>\n            </select>\n          </div>\n\n          {/* Company Filter */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Empresa/Cliente\n            </label>\n            {loading ? (\n              <div className=\"w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-50 text-gray-500\">\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600\"></div>\n                  <span>Cargando empresas...</span>\n                </div>\n              </div>\n            ) : (\n              <select\n                value={filters?.company}\n                onChange={(e) => handleFilterChange('company', e?.target?.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500\"\n              >\n                <option value=\"all\">Todas las empresas</option>\n                {companies?.map((company) => (\n                  <option key={company?.id} value={company?.id}>\n                    {company?.nombre} ({company?.tipo})\n                  </option>\n                ))}\n              </select>\n            )}\n          </div>\n\n          {/* Date Range Filter */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2 flex items-center space-x-2\">\n              <Calendar className=\"h-4 w-4\" />\n              <span>Rango de Fechas de Inicio</span>\n            </label>\n            <div className=\"grid grid-cols-2 gap-3\">\n              <div>\n                <label className=\"block text-xs text-gray-500 mb-1\">Desde</label>\n                <input\n                  type=\"date\"\n                  value={filters?.dateRange?.start}\n                  onChange={(e) => handleDateRangeChange('start', e?.target?.value)}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500\"\n                />\n              </div>\n              <div>\n                <label className=\"block text-xs text-gray-500 mb-1\">Hasta</label>\n                <input\n                  type=\"date\"\n                  value={filters?.dateRange?.end}\n                  onChange={(e) => handleDateRangeChange('end', e?.target?.value)}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500\"\n                />\n              </div>\n            </div>\n            {filters?.dateRange?.start && filters?.dateRange?.end && (\n              <p className=\"mt-2 text-xs text-gray-600\">\n                Filtrando obras que iniciaron entre {new Date(filters?.dateRange?.start)?.toLocaleDateString('es-MX')} y {new Date(filters?.dateRange?.end)?.toLocaleDateString('es-MX')}\n              </p>\n            )}\n          </div>\n\n          {/* Active Filters Summary */}\n          {hasActiveFilters() && (\n            <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n              <h3 className=\"text-sm font-medium text-blue-900 mb-2\">Filtros Activos</h3>\n              <div className=\"space-y-1 text-sm text-blue-800\">\n                {filters?.status !== 'all' && (\n                  <div className=\"flex items-center space-x-2\">\n                    <span className=\"w-2 h-2 bg-blue-500 rounded-full\"></span>\n                    <span>Estado: {filters?.status}</span>\n                  </div>\n                )}\n                {filters?.company !== 'all' && (\n                  <div className=\"flex items-center space-x-2\">\n                    <span className=\"w-2 h-2 bg-blue-500 rounded-full\"></span>\n                    <span>Empresa: {companies?.find(c => c?.id === filters?.company)?.nombre}</span>\n                  </div>\n                )}\n                {(filters?.dateRange?.start || filters?.dateRange?.end) && (\n                  <div className=\"flex items-center space-x-2\">\n                    <span className=\"w-2 h-2 bg-blue-500 rounded-full\"></span>\n                    <span>\n                      Fecha: {filters?.dateRange?.start ? new Date(filters?.dateRange?.start)?.toLocaleDateString('es-MX') : 'Sin inicio'} - {filters?.dateRange?.end ? new Date(filters?.dateRange?.end)?.toLocaleDateString('es-MX') : 'Sin fin'}\n                    </span>\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n\n          {/* No Active Filters Message */}\n          {!hasActiveFilters() && (\n            <div className=\"bg-gray-50 border border-gray-200 rounded-lg p-4 text-center\">\n              <Building className=\"h-8 w-8 text-gray-300 mx-auto mb-2\" />\n              <p className=\"text-sm text-gray-600\">Sin filtros activos</p>\n              <p className=\"text-xs text-gray-500 mt-1\">Se mostrarán todas las obras disponibles</p>\n            </div>\n          )}\n        </div>\n\n        {/* Actions */}\n        <div className=\"flex justify-between p-6 border-t border-gray-200\">\n          <button\n            type=\"button\"\n            onClick={handleResetFilters}\n            className=\"px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\n          >\n            Limpiar Filtros\n          </button>\n          <div className=\"flex space-x-3\">\n            <button\n              type=\"button\"\n              onClick={onClose}\n              className=\"px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\n            >\n              Cancelar\n            </button>\n            <button\n              type=\"button\"\n              onClick={handleApplyFilters}\n              className=\"px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\n            >\n              Aplicar Filtros\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FiltersModal;","size_bytes":9819},"src/pages/obras-financial-control-management/components/ObraCreationModal.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { X, Building, DollarSign, AlertTriangle } from 'lucide-react';\nimport { obrasService, companiesService, dependenciesService } from '../../../services/obrasFinancialService';\n\nconst ObraCreationModal = ({ onClose, onSuccess }) => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [companies, setCompanies] = useState([]);\n  const [dependencies, setDependencies] = useState([]);\n  const [loadingOptions, setLoadingOptions] = useState(true);\n\n  const [formData, setFormData] = useState({\n    clave: '',\n    nombre: '',\n    estatus: 'Planeación',\n    empresa_id: '',\n    dependencia_id: '',\n    con_iva: true,\n    presupuesto_inicial: '',\n    anticipo: '',\n    fecha_inicio: '',\n    fecha_fin_compromiso: '',\n    notas: ''\n  });\n\n  const [errors, setErrors] = useState({});\n\n  // Load companies and dependencies\n  useEffect(() => {\n    loadOptions();\n  }, []);\n\n  const loadOptions = async () => {\n    try {\n      setLoadingOptions(true);\n      \n      const [companiesResult, dependenciesResult] = await Promise.all([\n        companiesService?.getAll(),\n        dependenciesService?.getAll()\n      ]);\n\n      if (companiesResult?.data) {\n        setCompanies(companiesResult?.data?.filter(c => c?.activo));\n      }\n\n      if (dependenciesResult?.data) {\n        setDependencies(dependenciesResult?.data?.filter(d => d?.activo));\n      }\n    } catch (err) {\n      console.error('Error loading options:', err);\n      setError('Error al cargar opciones');\n    } finally {\n      setLoadingOptions(false);\n    }\n  };\n\n  // Handle form input changes\n  const handleInputChange = (e) => {\n    const { name, value, type, checked } = e?.target;\n    \n    setFormData(prev => ({\n      ...prev,\n      [name]: type === 'checkbox' ? checked : value\n    }));\n\n    // Clear field error when user starts typing\n    if (errors?.[name]) {\n      setErrors(prev => ({\n        ...prev,\n        [name]: ''\n      }));\n    }\n  };\n\n  // Validate form\n  const validateForm = () => {\n    const newErrors = {};\n\n    if (!formData?.clave?.trim()) {\n      newErrors.clave = 'La clave es requerida';\n    }\n\n    if (!formData?.nombre?.trim()) {\n      newErrors.nombre = 'El nombre es requerido';\n    }\n\n    if (!formData?.empresa_id) {\n      newErrors.empresa_id = 'La empresa es requerida';\n    }\n\n    if (!formData?.presupuesto_inicial || parseFloat(formData?.presupuesto_inicial) < 0) {\n      newErrors.presupuesto_inicial = 'El presupuesto inicial debe ser mayor a 0';\n    }\n\n    if (formData?.anticipo && parseFloat(formData?.anticipo) < 0) {\n      newErrors.anticipo = 'El anticipo no puede ser negativo';\n    }\n\n    if (formData?.fecha_inicio && formData?.fecha_fin_compromiso) {\n      const inicio = new Date(formData?.fecha_inicio);\n      const fin = new Date(formData?.fecha_fin_compromiso);\n      if (inicio > fin) {\n        newErrors.fecha_fin_compromiso = 'La fecha de fin debe ser posterior a la fecha de inicio';\n      }\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors)?.length === 0;\n  };\n\n  // Handle form submission\n  const handleSubmit = async (e) => {\n    e?.preventDefault();\n\n    if (!validateForm()) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      setError('');\n\n      // Prepare data for submission\n      const submitData = {\n        ...formData,\n        presupuesto_inicial: parseFloat(formData?.presupuesto_inicial) || 0,\n        anticipo: parseFloat(formData?.anticipo) || 0,\n        dependencia_id: formData?.dependencia_id || null,\n        fecha_inicio: formData?.fecha_inicio || null,\n        fecha_fin_compromiso: formData?.fecha_fin_compromiso || null,\n        notas: formData?.notas?.trim() || null\n      };\n\n      const { data, error: createError } = await obrasService?.create(submitData);\n\n      if (createError) {\n        setError(createError);\n        return;\n      }\n\n      onSuccess?.(data);\n    } catch (err) {\n      setError('Error al crear la obra');\n      console.error('Error creating obra:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Format currency input\n  const formatCurrencyInput = (value) => {\n    if (!value) return '';\n    return parseFloat(value)?.toLocaleString('es-MX', {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2\n    });\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n      <div className=\"bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-6 border-b border-gray-200\">\n          <div className=\"flex items-center space-x-3\">\n            <Building className=\"h-6 w-6 text-blue-600\" />\n            <h2 className=\"text-xl font-semibold text-gray-900\">Nueva Obra</h2>\n          </div>\n          <button\n            onClick={onClose}\n            className=\"text-gray-400 hover:text-gray-600 transition-colors\"\n          >\n            <X className=\"h-6 w-6\" />\n          </button>\n        </div>\n\n        {/* Form */}\n        <form onSubmit={handleSubmit} className=\"p-6\">\n          {/* Error Message */}\n          {error && (\n            <div className=\"mb-6 p-4 bg-red-50 border border-red-200 rounded-md\">\n              <div className=\"flex items-center\">\n                <AlertTriangle className=\"h-5 w-5 text-red-500 mr-2\" />\n                <span className=\"text-red-700\">{error}</span>\n              </div>\n            </div>\n          )}\n\n          {loadingOptions && (\n            <div className=\"mb-6 p-4 bg-blue-50 border border-blue-200 rounded-md\">\n              <div className=\"flex items-center\">\n                <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600 mr-2\"></div>\n                <span className=\"text-blue-700\">Cargando opciones...</span>\n              </div>\n            </div>\n          )}\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {/* Basic Information */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-medium text-gray-900\">Información Básica</h3>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Clave de Obra *\n                </label>\n                <input\n                  type=\"text\"\n                  name=\"clave\"\n                  value={formData?.clave}\n                  onChange={handleInputChange}\n                  placeholder=\"Ej: OBR-2025-001\"\n                  className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 ${\n                    errors?.clave ? 'border-red-500' : 'border-gray-300'\n                  }`}\n                />\n                {errors?.clave && (\n                  <p className=\"mt-1 text-sm text-red-600\">{errors?.clave}</p>\n                )}\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Nombre de la Obra *\n                </label>\n                <input\n                  type=\"text\"\n                  name=\"nombre\"\n                  value={formData?.nombre}\n                  onChange={handleInputChange}\n                  placeholder=\"Ej: Construcción de Edificio\"\n                  className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 ${\n                    errors?.nombre ? 'border-red-500' : 'border-gray-300'\n                  }`}\n                />\n                {errors?.nombre && (\n                  <p className=\"mt-1 text-sm text-red-600\">{errors?.nombre}</p>\n                )}\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Estado\n                </label>\n                <select\n                  name=\"estatus\"\n                  value={formData?.estatus}\n                  onChange={handleInputChange}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500\"\n                >\n                  <option value=\"Planeación\">Planeación</option>\n                  <option value=\"En ejecución\">En ejecución</option>\n                  <option value=\"En pausa\">En pausa</option>\n                  <option value=\"Concluida\">Concluida</option>\n                  <option value=\"Cancelada\">Cancelada</option>\n                </select>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Empresa/Cliente *\n                </label>\n                <select\n                  name=\"empresa_id\"\n                  value={formData?.empresa_id}\n                  onChange={handleInputChange}\n                  className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 ${\n                    errors?.empresa_id ? 'border-red-500' : 'border-gray-300'\n                  }`}\n                >\n                  <option value=\"\">Seleccionar empresa...</option>\n                  {companies?.map((company) => (\n                    <option key={company?.id} value={company?.id}>\n                      {company?.nombre} ({company?.tipo})\n                    </option>\n                  ))}\n                </select>\n                {errors?.empresa_id && (\n                  <p className=\"mt-1 text-sm text-red-600\">{errors?.empresa_id}</p>\n                )}\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Dependencia (Opcional)\n                </label>\n                <select\n                  name=\"dependencia_id\"\n                  value={formData?.dependencia_id}\n                  onChange={handleInputChange}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500\"\n                >\n                  <option value=\"\">Sin dependencia...</option>\n                  {dependencies?.map((dependency) => (\n                    <option key={dependency?.id} value={dependency?.id}>\n                      {dependency?.nombre} ({dependency?.siglas})\n                    </option>\n                  ))}\n                </select>\n              </div>\n            </div>\n\n            {/* Financial Information */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-medium text-gray-900 flex items-center space-x-2\">\n                <DollarSign className=\"h-5 w-5 text-green-600\" />\n                <span>Información Financiera</span>\n              </h3>\n\n              <div>\n                <label className=\"flex items-center space-x-2\">\n                  <input\n                    type=\"checkbox\"\n                    name=\"con_iva\"\n                    checked={formData?.con_iva}\n                    onChange={handleInputChange}\n                    className=\"rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n                  />\n                  <span className=\"text-sm font-medium text-gray-700\">\n                    Incluir IVA en cálculos\n                  </span>\n                </label>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Presupuesto Inicial *\n                </label>\n                <div className=\"relative\">\n                  <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                    <span className=\"text-gray-500 sm:text-sm\">$</span>\n                  </div>\n                  <input\n                    type=\"number\"\n                    name=\"presupuesto_inicial\"\n                    value={formData?.presupuesto_inicial}\n                    onChange={handleInputChange}\n                    step=\"0.01\"\n                    min=\"0\"\n                    placeholder=\"0.00\"\n                    className={`w-full pl-8 pr-3 py-2 border rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 ${\n                      errors?.presupuesto_inicial ? 'border-red-500' : 'border-gray-300'\n                    }`}\n                  />\n                </div>\n                {errors?.presupuesto_inicial && (\n                  <p className=\"mt-1 text-sm text-red-600\">{errors?.presupuesto_inicial}</p>\n                )}\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Anticipo\n                </label>\n                <div className=\"relative\">\n                  <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                    <span className=\"text-gray-500 sm:text-sm\">$</span>\n                  </div>\n                  <input\n                    type=\"number\"\n                    name=\"anticipo\"\n                    value={formData?.anticipo}\n                    onChange={handleInputChange}\n                    step=\"0.01\"\n                    min=\"0\"\n                    placeholder=\"0.00\"\n                    className={`w-full pl-8 pr-3 py-2 border rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 ${\n                      errors?.anticipo ? 'border-red-500' : 'border-gray-300'\n                    }`}\n                  />\n                </div>\n                {errors?.anticipo && (\n                  <p className=\"mt-1 text-sm text-red-600\">{errors?.anticipo}</p>\n                )}\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Fecha de Inicio\n                </label>\n                <input\n                  type=\"date\"\n                  name=\"fecha_inicio\"\n                  value={formData?.fecha_inicio}\n                  onChange={handleInputChange}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Fecha de Compromiso\n                </label>\n                <input\n                  type=\"date\"\n                  name=\"fecha_fin_compromiso\"\n                  value={formData?.fecha_fin_compromiso}\n                  onChange={handleInputChange}\n                  className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 ${\n                    errors?.fecha_fin_compromiso ? 'border-red-500' : 'border-gray-300'\n                  }`}\n                />\n                {errors?.fecha_fin_compromiso && (\n                  <p className=\"mt-1 text-sm text-red-600\">{errors?.fecha_fin_compromiso}</p>\n                )}\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Notas\n                </label>\n                <textarea\n                  name=\"notas\"\n                  value={formData?.notas}\n                  onChange={handleInputChange}\n                  rows=\"3\"\n                  placeholder=\"Notas adicionales sobre la obra...\"\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500\"\n                />\n              </div>\n            </div>\n          </div>\n\n          {/* Form Actions */}\n          <div className=\"mt-8 flex justify-end space-x-4 pt-4 border-t border-gray-200\">\n            <button\n              type=\"button\"\n              onClick={onClose}\n              className=\"px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\n            >\n              Cancelar\n            </button>\n            <button\n              type=\"submit\"\n              disabled={loading || loadingOptions}\n              className=\"px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              {loading ? (\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n                  <span>Creando...</span>\n                </div>\n              ) : (\n                'Crear Obra'\n              )}\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default ObraCreationModal;","size_bytes":16849},"src/pages/obras-financial-control-management/components/ObraDetailModal.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { X, Building, DollarSign, FileText, CreditCard, Receipt, TrendingUp, TrendingDown, Plus, Edit, AlertTriangle } from 'lucide-react';\nimport {\n  changeOrdersService,\n  invoicesService,\n  paymentsService,\n  expensesService,\n  budgetService,\n  financialAnalyticsService\n} from '../../../services/obrasFinancialService';\n\nconst ObraDetailModal = ({ obra, onClose, onSuccess }) => {\n  const [activeTab, setActiveTab] = useState('resumen');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  \n  // Data states\n  const [financialSummary, setFinancialSummary] = useState(null);\n  const [changeOrders, setChangeOrders] = useState([]);\n  const [invoices, setInvoices] = useState([]);\n  const [payments, setPayments] = useState([]);\n  const [expenses, setExpenses] = useState([]);\n  const [budgetItems, setBudgetItems] = useState([]);\n\n  // Form states\n  const [showAddForm, setShowAddForm] = useState(false);\n  const [formType, setFormType] = useState('');\n\n  useEffect(() => {\n    if (obra?.obra_id) {\n      loadFinancialData();\n    }\n  }, [obra]);\n\n  // Load all financial data for the obra\n  const loadFinancialData = async () => {\n    try {\n      setLoading(true);\n      setError('');\n\n      const [\n        summaryResult,\n        changeOrdersResult,\n        invoicesResult,\n        paymentsResult,\n        expensesResult,\n        budgetResult\n      ] = await Promise.all([\n        financialAnalyticsService?.getObraFinancialSummary(obra?.obra_id),\n        changeOrdersService?.getByObraId(obra?.obra_id),\n        invoicesService?.getByObraId(obra?.obra_id),\n        paymentsService?.getByObraId(obra?.obra_id),\n        expensesService?.getByObraId(obra?.obra_id),\n        budgetService?.getByObraId(obra?.obra_id)\n      ]);\n\n      if (summaryResult?.data) setFinancialSummary(summaryResult?.data);\n      if (changeOrdersResult?.data) setChangeOrders(changeOrdersResult?.data);\n      if (invoicesResult?.data) setInvoices(invoicesResult?.data);\n      if (paymentsResult?.data) setPayments(paymentsResult?.data);\n      if (expensesResult?.data) setExpenses(expensesResult?.data);\n      if (budgetResult?.data) setBudgetItems(budgetResult?.data);\n\n      // Handle any errors\n      const errors = [\n        summaryResult?.error,\n        changeOrdersResult?.error,\n        invoicesResult?.error,\n        paymentsResult?.error,\n        expensesResult?.error,\n        budgetResult?.error\n      ]?.filter(Boolean);\n\n      if (errors?.length > 0) {\n        setError(`Algunos datos no se pudieron cargar: ${errors?.[0]}`);\n      }\n    } catch (err) {\n      setError('Error al cargar los datos financieros');\n      console.error('Error loading financial data:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Format currency\n  const formatCurrency = (amount) => {\n    if (!amount && amount !== 0) return '$0.00';\n    return new Intl.NumberFormat('es-MX', {\n      style: 'currency',\n      currency: 'MXN',\n      minimumFractionDigits: 2\n    })?.format(amount);\n  };\n\n  // Format percentage\n  const formatPercentage = (value) => {\n    if (!value && value !== 0) return '0%';\n    return `${value?.toFixed(1)}%`;\n  };\n\n  // Format date\n  const formatDate = (dateString) => {\n    if (!dateString) return 'Sin fecha';\n    return new Date(dateString)?.toLocaleDateString('es-MX');\n  };\n\n  // Handle add new item\n  const handleAddNewItem = (type) => {\n    setFormType(type);\n    setShowAddForm(true);\n  };\n\n  // Get status color class for invoices\n  const getInvoiceStatusColor = (status) => {\n    switch (status) {\n      case 'Pagada':\n        return 'bg-green-100 text-green-800';\n      case 'Parcialmente pagada':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'Pendiente':\n        return 'bg-red-100 text-red-800';\n      case 'Cancelada':\n        return 'bg-gray-100 text-gray-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  // Render KPI card\n  const KPICard = ({ icon, title, value, subtitle, color = 'blue' }) => (\n    <div className=\"bg-white rounded-lg shadow p-6\">\n      <div className=\"flex items-center\">\n        <div className={`flex-shrink-0 p-3 rounded-full bg-${color}-100`}>\n          {React.cloneElement(icon, { className: `h-6 w-6 text-${color}-600` })}\n        </div>\n        <div className=\"ml-4 flex-1\">\n          <p className=\"text-sm font-medium text-gray-500\">{title}</p>\n          <p className=\"text-2xl font-semibold text-gray-900\">{value}</p>\n          {subtitle && <p className=\"text-sm text-gray-600\">{subtitle}</p>}\n        </div>\n      </div>\n    </div>\n  );\n\n  // Tab content components\n  const renderResumenTab = () => (\n    <div className=\"space-y-6\">\n      {/* Financial KPIs */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        <KPICard\n          icon={<DollarSign />}\n          title=\"Presupuesto Total\"\n          value={formatCurrency(financialSummary?.presupuesto_total)}\n          subtitle={`Inicial: ${formatCurrency(obra?.presupuesto_inicial)}`}\n          color=\"blue\"\n        />\n        <KPICard\n          icon={<TrendingUp />}\n          title=\"Total Facturado\"\n          value={formatCurrency(financialSummary?.facturado_total)}\n          subtitle=\"\"\n          color=\"green\"\n        />\n        <KPICard\n          icon={<Receipt />}\n          title=\"Total Pagado\"\n          value={formatCurrency(financialSummary?.pagado_total)}\n          subtitle=\"\"\n          color=\"emerald\"\n        />\n        <KPICard\n          icon={<AlertTriangle />}\n          title=\"Por Cobrar\"\n          value={formatCurrency(financialSummary?.por_cobrar)}\n          subtitle=\"\"\n          color=\"orange\"\n        />\n        <KPICard\n          icon={<TrendingDown />}\n          title=\"Total Gastos\"\n          value={formatCurrency(financialSummary?.gastos_total)}\n          subtitle=\"\"\n          color=\"red\"\n        />\n        <KPICard\n          icon={<TrendingUp />}\n          title=\"Utilidad Real\"\n          value={formatPercentage(financialSummary?.utilidad_pct_real)}\n          subtitle={formatCurrency(financialSummary?.utilidad_bruta)}\n          color=\"green\"\n        />\n      </div>\n\n      {/* Progress indicators */}\n      <div className=\"bg-white rounded-lg shadow p-6\">\n        <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Avance Financiero</h3>\n        <div className=\"space-y-4\">\n          <div>\n            <div className=\"flex justify-between text-sm font-medium text-gray-600 mb-1\">\n              <span>Avance de Pagos</span>\n              <span>{formatPercentage(financialSummary?.avance_financiero_pct)}</span>\n            </div>\n            <div className=\"w-full bg-gray-200 rounded-full h-3\">\n              <div \n                className=\"bg-blue-600 h-3 rounded-full transition-all duration-300\" \n                style={{ width: `${Math.min(financialSummary?.avance_financiero_pct || 0, 100)}%` }}\n              ></div>\n            </div>\n          </div>\n          <div>\n            <div className=\"flex justify-between text-sm font-medium text-gray-600 mb-1\">\n              <span>Margen Presupuestado</span>\n              <span>{formatPercentage(financialSummary?.margen_presupuestado_pct)}</span>\n            </div>\n            <div className=\"w-full bg-gray-200 rounded-full h-3\">\n              <div \n                className={`h-3 rounded-full transition-all duration-300 ${\n                  (financialSummary?.margen_presupuestado_pct || 0) >= 0 ? 'bg-green-600' : 'bg-red-600'\n                }`}\n                style={{ width: `${Math.min(Math.abs(financialSummary?.margen_presupuestado_pct || 0), 100)}%` }}\n              ></div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderOrdenesCambioTab = () => (\n    <div className=\"space-y-4\">\n      <div className=\"flex justify-between items-center\">\n        <h3 className=\"text-lg font-medium text-gray-900\">Órdenes de Cambio</h3>\n        <button\n          onClick={() => handleAddNewItem('changeOrder')}\n          className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md flex items-center space-x-2\"\n        >\n          <Plus className=\"h-4 w-4\" />\n          <span>Nueva Orden</span>\n        </button>\n      </div>\n\n      <div className=\"bg-white rounded-lg shadow overflow-hidden\">\n        {changeOrders?.length > 0 ? (\n          <table className=\"min-w-full divide-y divide-gray-200\">\n            <thead className=\"bg-gray-50\">\n              <tr>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Folio</th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Descripción</th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Monto</th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Fecha</th>\n              </tr>\n            </thead>\n            <tbody className=\"divide-y divide-gray-200\">\n              {changeOrders?.map((order) => (\n                <tr key={order?.id}>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n                    {order?.folio}\n                  </td>\n                  <td className=\"px-6 py-4 text-sm text-gray-900\">\n                    {order?.descripcion}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    {formatCurrency(order?.monto)}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    {formatDate(order?.fecha)}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        ) : (\n          <div className=\"text-center py-12\">\n            <FileText className=\"h-12 w-12 text-gray-300 mx-auto mb-4\" />\n            <p className=\"text-gray-500\">No hay órdenes de cambio registradas</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n\n  const renderFacturasTab = () => (\n    <div className=\"space-y-4\">\n      <div className=\"flex justify-between items-center\">\n        <h3 className=\"text-lg font-medium text-gray-900\">Facturas y Requisiciones</h3>\n        <button\n          onClick={() => handleAddNewItem('invoice')}\n          className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md flex items-center space-x-2\"\n        >\n          <Plus className=\"h-4 w-4\" />\n          <span>Nueva Factura</span>\n        </button>\n      </div>\n\n      <div className=\"bg-white rounded-lg shadow overflow-hidden\">\n        {invoices?.length > 0 ? (\n          <table className=\"min-w-full divide-y divide-gray-200\">\n            <thead className=\"bg-gray-50\">\n              <tr>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Folio</th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Tipo</th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Total</th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Estado</th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Emisión</th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Vencimiento</th>\n              </tr>\n            </thead>\n            <tbody className=\"divide-y divide-gray-200\">\n              {invoices?.map((invoice) => (\n                <tr key={invoice?.id}>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n                    {invoice?.folio}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${\n                      invoice?.tipo === 'Factura' ? 'bg-blue-100 text-blue-800' : 'bg-purple-100 text-purple-800'\n                    }`}>\n                      {invoice?.tipo}\n                    </span>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    {formatCurrency(invoice?.total)}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getInvoiceStatusColor(invoice?.estatus)}`}>\n                      {invoice?.estatus}\n                    </span>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    {formatDate(invoice?.fecha_emision)}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    {formatDate(invoice?.fecha_vencimiento)}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        ) : (\n          <div className=\"text-center py-12\">\n            <FileText className=\"h-12 w-12 text-gray-300 mx-auto mb-4\" />\n            <p className=\"text-gray-500\">No hay facturas registradas</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n\n  const renderPagosTab = () => (\n    <div className=\"space-y-4\">\n      <div className=\"flex justify-between items-center\">\n        <h3 className=\"text-lg font-medium text-gray-900\">Pagos Recibidos</h3>\n        <button\n          onClick={() => handleAddNewItem('payment')}\n          className=\"bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-md flex items-center space-x-2\"\n        >\n          <Plus className=\"h-4 w-4\" />\n          <span>Registrar Pago</span>\n        </button>\n      </div>\n\n      <div className=\"bg-white rounded-lg shadow overflow-hidden\">\n        {payments?.length > 0 ? (\n          <table className=\"min-w-full divide-y divide-gray-200\">\n            <thead className=\"bg-gray-50\">\n              <tr>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Fecha</th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Monto</th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Método</th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Referencia</th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Factura</th>\n              </tr>\n            </thead>\n            <tbody className=\"divide-y divide-gray-200\">\n              {payments?.map((payment) => (\n                <tr key={payment?.id}>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    {formatDate(payment?.fecha)}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-green-600\">\n                    {formatCurrency(payment?.monto)}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    {payment?.metodo || 'No especificado'}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    {payment?.referencia || '-'}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    {payment?.factura?.folio || 'Sin asociar'}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        ) : (\n          <div className=\"text-center py-12\">\n            <CreditCard className=\"h-12 w-12 text-gray-300 mx-auto mb-4\" />\n            <p className=\"text-gray-500\">No hay pagos registrados</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n\n  const renderGastosTab = () => (\n    <div className=\"space-y-4\">\n      <div className=\"flex justify-between items-center\">\n        <h3 className=\"text-lg font-medium text-gray-900\">Gastos</h3>\n        <button\n          onClick={() => handleAddNewItem('expense')}\n          className=\"bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-md flex items-center space-x-2\"\n        >\n          <Plus className=\"h-4 w-4\" />\n          <span>Registrar Gasto</span>\n        </button>\n      </div>\n\n      <div className=\"bg-white rounded-lg shadow overflow-hidden\">\n        {expenses?.length > 0 ? (\n          <table className=\"min-w-full divide-y divide-gray-200\">\n            <thead className=\"bg-gray-50\">\n              <tr>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Fecha</th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Categoría</th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Proveedor</th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Total</th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Folio</th>\n              </tr>\n            </thead>\n            <tbody className=\"divide-y divide-gray-200\">\n              {expenses?.map((expense) => (\n                <tr key={expense?.id}>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    {formatDate(expense?.fecha)}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <span className=\"inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-gray-100 text-gray-800\">\n                      {expense?.categoria}\n                    </span>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    {expense?.proveedor?.nombre || 'Sin especificar'}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-red-600\">\n                    {formatCurrency(expense?.total)}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    {expense?.folio || '-'}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        ) : (\n          <div className=\"text-center py-12\">\n            <Receipt className=\"h-12 w-12 text-gray-300 mx-auto mb-4\" />\n            <p className=\"text-gray-500\">No hay gastos registrados</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n      <div className=\"bg-white rounded-lg shadow-xl max-w-7xl w-full max-h-[95vh] overflow-hidden flex flex-col\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-6 border-b border-gray-200\">\n          <div className=\"flex items-center space-x-3\">\n            <Building className=\"h-6 w-6 text-blue-600\" />\n            <div>\n              <h2 className=\"text-xl font-semibold text-gray-900\">{obra?.nombre}</h2>\n              <p className=\"text-sm text-gray-500\">{obra?.clave} • {obra?.empresa_nombre}</p>\n            </div>\n          </div>\n          <button\n            onClick={onClose}\n            className=\"text-gray-400 hover:text-gray-600 transition-colors\"\n          >\n            <X className=\"h-6 w-6\" />\n          </button>\n        </div>\n\n        {/* Error Message */}\n        {error && (\n          <div className=\"mx-6 mt-4 p-4 bg-red-50 border border-red-200 rounded-md\">\n            <div className=\"flex items-center\">\n              <AlertTriangle className=\"h-5 w-5 text-red-500 mr-2\" />\n              <span className=\"text-red-700\">{error}</span>\n            </div>\n          </div>\n        )}\n\n        {/* Tabs */}\n        <div className=\"border-b border-gray-200\">\n          <nav className=\"flex space-x-8 px-6\">\n            {[\n              { key: 'resumen', label: 'Resumen', icon: <TrendingUp className=\"h-4 w-4\" /> },\n              { key: 'ordenes', label: 'Órdenes de Cambio', icon: <Edit className=\"h-4 w-4\" /> },\n              { key: 'facturas', label: 'Facturas', icon: <FileText className=\"h-4 w-4\" /> },\n              { key: 'pagos', label: 'Pagos', icon: <CreditCard className=\"h-4 w-4\" /> },\n              { key: 'gastos', label: 'Gastos', icon: <Receipt className=\"h-4 w-4\" /> }\n            ]?.map((tab) => (\n              <button\n                key={tab?.key}\n                onClick={() => setActiveTab(tab?.key)}\n                className={`py-4 px-1 border-b-2 font-medium text-sm flex items-center space-x-2 ${\n                  activeTab === tab?.key\n                    ? 'border-blue-500 text-blue-600' : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                }`}\n              >\n                {tab?.icon}\n                <span>{tab?.label}</span>\n              </button>\n            ))}\n          </nav>\n        </div>\n\n        {/* Content */}\n        <div className=\"flex-1 overflow-y-auto p-6\">\n          {loading ? (\n            <div className=\"flex items-center justify-center py-12\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mr-4\"></div>\n              <span className=\"text-gray-600\">Cargando datos...</span>\n            </div>\n          ) : (\n            <>\n              {activeTab === 'resumen' && renderResumenTab()}\n              {activeTab === 'ordenes' && renderOrdenesCambioTab()}\n              {activeTab === 'facturas' && renderFacturasTab()}\n              {activeTab === 'pagos' && renderPagosTab()}\n              {activeTab === 'gastos' && renderGastosTab()}\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ObraDetailModal;","size_bytes":21963},"src/pages/payroll-calculation-and-management-interface/components/BulkProcessingTools.jsx":{"content":"import React, { useState } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport Select from '../../../components/ui/Select';\n\nconst BulkProcessingTools = ({ \n  selectedEmployees = [], \n  onBulkProcess,\n  onExport,\n  processingStatus = null\n}) => {\n  const [bulkAction, setBulkAction] = useState('calculate');\n  const [exportFormat, setExportFormat] = useState('excel');\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const bulkActions = [\n    { value: 'calculate', label: 'Calcular Nómina', icon: 'Calculator' },\n    { value: 'approve', label: 'Aprobar Nómina', icon: 'CheckCircle' },\n    { value: 'generate_receipts', label: 'Generar Recibos', icon: 'FileText' },\n    { value: 'mark_paid', label: 'Marcar como Pagado', icon: 'CreditCard' }\n  ];\n\n  const exportFormats = [\n    { value: 'excel', label: 'Excel (.xlsx)', icon: 'FileSpreadsheet' },\n    { value: 'csv', label: 'CSV (.csv)', icon: 'FileText' },\n    { value: 'pdf', label: 'PDF (.pdf)', icon: 'FileImage' }\n  ];\n\n  const handleBulkProcess = async () => {\n    if (selectedEmployees?.length === 0) return;\n    \n    setIsProcessing(true);\n    try {\n      await onBulkProcess(bulkAction, selectedEmployees);\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleExport = () => {\n    onExport && onExport(exportFormat, selectedEmployees);\n  };\n\n  const getActionIcon = (action) => {\n    const actionObj = bulkActions?.find(a => a?.value === action);\n    return actionObj ? actionObj?.icon : 'Settings';\n  };\n\n  const getActionLabel = (action) => {\n    const actionObj = bulkActions?.find(a => a?.value === action);\n    return actionObj ? actionObj?.label : action;\n  };\n\n  return (\n    <div className=\"bg-card border border-border rounded-lg\">\n      {/* Header */}\n      <div className=\"p-6 border-b border-border\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h3 className=\"text-lg font-semibold text-foreground\">\n              Procesamiento Masivo\n            </h3>\n            <p className=\"text-sm text-muted-foreground\">\n              {selectedEmployees?.length} empleados seleccionados\n            </p>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Icon name=\"Users\" size={20} className=\"text-muted-foreground\" />\n            <span className=\"text-sm font-medium text-foreground\">\n              {selectedEmployees?.length}\n            </span>\n          </div>\n        </div>\n      </div>\n      {/* Bulk Actions */}\n      <div className=\"p-6 border-b border-border\">\n        <h4 className=\"text-md font-semibold text-foreground mb-4\">\n          Acciones Masivas\n        </h4>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n          <Select\n            label=\"Seleccionar Acción\"\n            options={bulkActions}\n            value={bulkAction}\n            onChange={setBulkAction}\n          />\n          <div className=\"flex items-end\">\n            <Button\n              variant=\"default\"\n              iconName={getActionIcon(bulkAction)}\n              onClick={handleBulkProcess}\n              disabled={selectedEmployees?.length === 0 || isProcessing}\n              loading={isProcessing}\n              fullWidth\n            >\n              {getActionLabel(bulkAction)}\n            </Button>\n          </div>\n        </div>\n\n        {/* Quick Action Buttons */}\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-2\">\n          {bulkActions?.map((action) => (\n            <Button\n              key={action?.value}\n              variant=\"outline\"\n              size=\"sm\"\n              iconName={action?.icon}\n              onClick={() => {\n                setBulkAction(action?.value);\n                handleBulkProcess();\n              }}\n              disabled={selectedEmployees?.length === 0 || isProcessing}\n            >\n              {action?.label}\n            </Button>\n          ))}\n        </div>\n      </div>\n      {/* Export Tools */}\n      <div className=\"p-6 border-b border-border\">\n        <h4 className=\"text-md font-semibold text-foreground mb-4\">\n          Herramientas de Exportación\n        </h4>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n          <Select\n            label=\"Formato de Exportación\"\n            options={exportFormats}\n            value={exportFormat}\n            onChange={setExportFormat}\n          />\n          <div className=\"flex items-end\">\n            <Button\n              variant=\"outline\"\n              iconName=\"Download\"\n              onClick={handleExport}\n              disabled={selectedEmployees?.length === 0}\n              fullWidth\n            >\n              Exportar Datos\n            </Button>\n          </div>\n        </div>\n\n        {/* Export Templates */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-2\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            iconName=\"FileSpreadsheet\"\n            onClick={() => {\n              setExportFormat('excel');\n              handleExport();\n            }}\n          >\n            Reporte Completo\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            iconName=\"FileText\"\n            onClick={() => {\n              setExportFormat('pdf');\n              handleExport();\n            }}\n          >\n            Recibos de Pago\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            iconName=\"FileImage\"\n            onClick={() => {\n              setExportFormat('csv');\n              handleExport();\n            }}\n          >\n            Datos para Contabilidad\n          </Button>\n        </div>\n      </div>\n      {/* Processing Status */}\n      {processingStatus && (\n        <div className=\"p-6 border-b border-border\">\n          <h4 className=\"text-md font-semibold text-foreground mb-4\">\n            Estado del Procesamiento\n          </h4>\n          \n          <div className=\"space-y-3\">\n            <div className=\"flex items-center justify-between p-3 bg-muted rounded-lg\">\n              <div className=\"flex items-center space-x-3\">\n                <div className={`w-3 h-3 rounded-full ${\n                  processingStatus?.status === 'completed' ? 'bg-success' :\n                  processingStatus?.status === 'processing' ? 'bg-warning animate-pulse' :\n                  processingStatus?.status === 'error' ? 'bg-error' : 'bg-muted-foreground'\n                }`}></div>\n                <span className=\"text-sm font-medium text-foreground\">\n                  {processingStatus?.action}\n                </span>\n              </div>\n              <span className=\"text-sm text-muted-foreground\">\n                {processingStatus?.processed}/{processingStatus?.total}\n              </span>\n            </div>\n            \n            {/* Progress Bar */}\n            <div className=\"w-full bg-muted rounded-full h-2\">\n              <div \n                className={`h-2 rounded-full transition-all duration-300 ${\n                  processingStatus?.status === 'completed' ? 'bg-success' :\n                  processingStatus?.status === 'error' ? 'bg-error' : 'bg-primary'\n                }`}\n                style={{ \n                  width: `${(processingStatus?.processed / processingStatus?.total) * 100}%` \n                }}\n              ></div>\n            </div>\n            \n            {processingStatus?.message && (\n              <p className=\"text-sm text-muted-foreground\">\n                {processingStatus?.message}\n              </p>\n            )}\n          </div>\n        </div>\n      )}\n      {/* Statistics */}\n      <div className=\"p-6\">\n        <h4 className=\"text-md font-semibold text-foreground mb-4\">\n          Estadísticas de Selección\n        </h4>\n        \n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n          <div className=\"text-center p-3 bg-muted rounded-lg\">\n            <div className=\"text-2xl font-bold text-primary mb-1\">\n              {selectedEmployees?.length}\n            </div>\n            <div className=\"text-xs text-muted-foreground\">\n              Empleados\n            </div>\n          </div>\n          \n          <div className=\"text-center p-3 bg-muted rounded-lg\">\n            <div className=\"text-2xl font-bold text-success mb-1\">\n              ${(selectedEmployees?.length * 5200)?.toLocaleString()}\n            </div>\n            <div className=\"text-xs text-muted-foreground\">\n              Nómina Estimada\n            </div>\n          </div>\n          \n          <div className=\"text-center p-3 bg-muted rounded-lg\">\n            <div className=\"text-2xl font-bold text-warning mb-1\">\n              {Math.floor(selectedEmployees?.length * 0.3)}\n            </div>\n            <div className=\"text-xs text-muted-foreground\">\n              Pendientes\n            </div>\n          </div>\n          \n          <div className=\"text-center p-3 bg-muted rounded-lg\">\n            <div className=\"text-2xl font-bold text-accent mb-1\">\n              {Math.floor(selectedEmployees?.length * 0.7)}\n            </div>\n            <div className=\"text-xs text-muted-foreground\">\n              Calculados\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default BulkProcessingTools;","size_bytes":9373},"src/pages/payroll-calculation-and-management-interface/components/EmployeePayrollGrid.jsx":{"content":"import React, { useState, useMemo } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport Input from '../../../components/ui/Input';\nimport Select from '../../../components/ui/Select';\n\nconst EmployeePayrollGrid = ({ \n  employees = [], \n  onEmployeeSelect, \n  selectedEmployeeId,\n  onBulkAction,\n  payrollData = {}\n}) => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [sortField, setSortField] = useState('name');\n  const [sortDirection, setSortDirection] = useState('asc');\n  const [filterSite, setFilterSite] = useState('all');\n  const [selectedEmployees, setSelectedEmployees] = useState([]);\n  const [expandedRows, setExpandedRows] = useState([]);\n\n  // Mock payroll data for employees\n  const mockPayrollData = {\n    1: { workedDays: 22, overtimeHours: 8, grossPay: 6200, deductions: 620, netPay: 5580, status: 'calculated' },\n    2: { workedDays: 20, overtimeHours: 4, grossPay: 5100, deductions: 510, netPay: 4590, status: 'pending' },\n    3: { workedDays: 23, overtimeHours: 12, grossPay: 6950, deductions: 695, netPay: 6255, status: 'approved' },\n    4: { workedDays: 21, overtimeHours: 6, grossPay: 5775, deductions: 577, netPay: 5198, status: 'calculated' },\n    5: { workedDays: 19, overtimeHours: 2, grossPay: 4850, deductions: 485, netPay: 4365, status: 'pending' }\n  };\n\n  const sites = [\n    { value: 'all', label: 'Todos los Sitios' },\n    { value: 'obra_central', label: 'Obra Central' },\n    { value: 'proyecto_norte', label: 'Proyecto Norte' },\n    { value: 'edificio_sur', label: 'Edificio Sur' }\n  ];\n\n  const statusColors = {\n    pending: 'bg-warning/10 text-warning',\n    calculated: 'bg-primary/10 text-primary',\n    approved: 'bg-success/10 text-success',\n    paid: 'bg-muted text-muted-foreground'\n  };\n\n  const statusLabels = {\n    pending: 'Pendiente',\n    calculated: 'Calculado',\n    approved: 'Aprobado',\n    paid: 'Pagado'\n  };\n\n  const filteredAndSortedEmployees = useMemo(() => {\n    let filtered = employees?.filter(employee => {\n      const matchesSearch = employee?.name?.toLowerCase()?.includes(searchTerm?.toLowerCase()) ||\n                           employee?.employeeId?.toLowerCase()?.includes(searchTerm?.toLowerCase());\n      const matchesSite = filterSite === 'all' || employee?.site === filterSite;\n      return matchesSearch && matchesSite;\n    });\n\n    return filtered?.sort((a, b) => {\n      let aValue = a?.[sortField];\n      let bValue = b?.[sortField];\n      \n      if (sortField === 'netPay') {\n        aValue = mockPayrollData?.[a?.id]?.netPay || 0;\n        bValue = mockPayrollData?.[b?.id]?.netPay || 0;\n      }\n      \n      if (typeof aValue === 'string') {\n        aValue = aValue?.toLowerCase();\n        bValue = bValue?.toLowerCase();\n      }\n      \n      if (sortDirection === 'asc') {\n        return aValue > bValue ? 1 : -1;\n      } else {\n        return aValue < bValue ? 1 : -1;\n      }\n    });\n  }, [employees, searchTerm, sortField, sortDirection, filterSite]);\n\n  const handleSort = (field) => {\n    if (sortField === field) {\n      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortField(field);\n      setSortDirection('asc');\n    }\n  };\n\n  const handleSelectEmployee = (employeeId) => {\n    if (selectedEmployees?.includes(employeeId)) {\n      setSelectedEmployees(selectedEmployees?.filter(id => id !== employeeId));\n    } else {\n      setSelectedEmployees([...selectedEmployees, employeeId]);\n    }\n  };\n\n  const handleSelectAll = () => {\n    if (selectedEmployees?.length === filteredAndSortedEmployees?.length) {\n      setSelectedEmployees([]);\n    } else {\n      setSelectedEmployees(filteredAndSortedEmployees?.map(emp => emp?.id));\n    }\n  };\n\n  const toggleRowExpansion = (employeeId) => {\n    if (expandedRows?.includes(employeeId)) {\n      setExpandedRows(expandedRows?.filter(id => id !== employeeId));\n    } else {\n      setExpandedRows([...expandedRows, employeeId]);\n    }\n  };\n\n  const handleBulkAction = (action) => {\n    onBulkAction && onBulkAction(action, selectedEmployees);\n  };\n\n  const SortableHeader = ({ field, children }) => (\n    <th \n      className=\"px-4 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider cursor-pointer hover:bg-muted transition-colors duration-150\"\n      onClick={() => handleSort(field)}\n    >\n      <div className=\"flex items-center space-x-1\">\n        <span>{children}</span>\n        {sortField === field && (\n          <Icon \n            name={sortDirection === 'asc' ? 'ChevronUp' : 'ChevronDown'} \n            size={14} \n          />\n        )}\n      </div>\n    </th>\n  );\n\n  return (\n    <div className=\"bg-card border border-border rounded-lg\">\n      {/* Header */}\n      <div className=\"p-6 border-b border-border\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-semibold text-foreground\">\n            Nómina de Empleados\n          </h3>\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              variant=\"outline\"\n              iconName=\"Download\"\n              onClick={() => handleBulkAction('export')}\n              disabled={selectedEmployees?.length === 0}\n            >\n              Exportar\n            </Button>\n            <Button\n              variant=\"default\"\n              iconName=\"Calculator\"\n              onClick={() => handleBulkAction('calculate')}\n              disabled={selectedEmployees?.length === 0}\n            >\n              Calcular Seleccionados\n            </Button>\n          </div>\n        </div>\n\n        {/* Filters */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <Input\n            placeholder=\"Buscar empleado...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e?.target?.value)}\n            iconName=\"Search\"\n          />\n          <Select\n            options={sites}\n            value={filterSite}\n            onChange={setFilterSite}\n            placeholder=\"Filtrar por sitio\"\n          />\n          <div className=\"flex items-center space-x-2\">\n            <span className=\"text-sm text-muted-foreground\">\n              {selectedEmployees?.length} de {filteredAndSortedEmployees?.length} seleccionados\n            </span>\n          </div>\n        </div>\n      </div>\n      {/* Table */}\n      <div className=\"overflow-x-auto\">\n        <table className=\"w-full\">\n          <thead className=\"bg-muted\">\n            <tr>\n              <th className=\"px-4 py-3 text-left\">\n                <input\n                  type=\"checkbox\"\n                  checked={selectedEmployees?.length === filteredAndSortedEmployees?.length && filteredAndSortedEmployees?.length > 0}\n                  onChange={handleSelectAll}\n                  className=\"rounded border-border\"\n                />\n              </th>\n              <SortableHeader field=\"name\">Empleado</SortableHeader>\n              <SortableHeader field=\"position\">Posición</SortableHeader>\n              <SortableHeader field=\"site\">Sitio</SortableHeader>\n              <th className=\"px-4 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                Días Trabajados\n              </th>\n              <th className=\"px-4 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                Horas Extra\n              </th>\n              <SortableHeader field=\"netPay\">Pago Neto</SortableHeader>\n              <th className=\"px-4 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                Estado\n              </th>\n              <th className=\"px-4 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                Acciones\n              </th>\n            </tr>\n          </thead>\n          <tbody className=\"bg-background divide-y divide-border\">\n            {filteredAndSortedEmployees?.map((employee) => {\n              const payroll = mockPayrollData?.[employee?.id] || {};\n              const isExpanded = expandedRows?.includes(employee?.id);\n              const isSelected = selectedEmployees?.includes(employee?.id);\n              \n              return (\n                <React.Fragment key={employee?.id}>\n                  <tr \n                    className={`hover:bg-muted transition-colors duration-150 ${\n                      selectedEmployeeId === employee?.id ? 'bg-primary/5 border-l-4 border-l-primary' : ''\n                    }`}\n                  >\n                    <td className=\"px-4 py-4\">\n                      <input\n                        type=\"checkbox\"\n                        checked={isSelected}\n                        onChange={() => handleSelectEmployee(employee?.id)}\n                        className=\"rounded border-border\"\n                      />\n                    </td>\n                    <td className=\"px-4 py-4\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-8 h-8 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-sm font-medium\">\n                          {employee?.name?.split(' ')?.map(n => n?.[0])?.join('')?.toUpperCase()}\n                        </div>\n                        <div>\n                          <div className=\"text-sm font-medium text-foreground\">\n                            {employee?.name}\n                          </div>\n                          <div className=\"text-xs text-muted-foreground\">\n                            ID: {employee?.employeeId}\n                          </div>\n                        </div>\n                      </div>\n                    </td>\n                    <td className=\"px-4 py-4 text-sm text-foreground\">\n                      {employee?.position}\n                    </td>\n                    <td className=\"px-4 py-4 text-sm text-foreground\">\n                      {employee?.site}\n                    </td>\n                    <td className=\"px-4 py-4 text-sm text-foreground\">\n                      {payroll?.workedDays || 0} días\n                    </td>\n                    <td className=\"px-4 py-4 text-sm text-foreground\">\n                      {payroll?.overtimeHours || 0}h\n                    </td>\n                    <td className=\"px-4 py-4 text-sm font-semibold text-foreground\">\n                      ${(payroll?.netPay || 0)?.toLocaleString()}\n                    </td>\n                    <td className=\"px-4 py-4\">\n                      <span className={`px-2 py-1 text-xs font-medium rounded-full ${\n                        statusColors?.[payroll?.status] || statusColors?.pending\n                      }`}>\n                        {statusLabels?.[payroll?.status] || 'Pendiente'}\n                      </span>\n                    </td>\n                    <td className=\"px-4 py-4\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          iconName=\"Calculator\"\n                          onClick={() => onEmployeeSelect(employee)}\n                        />\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          iconName={isExpanded ? 'ChevronUp' : 'ChevronDown'}\n                          onClick={() => toggleRowExpansion(employee?.id)}\n                        />\n                      </div>\n                    </td>\n                  </tr>\n                  {/* Expanded Row Details */}\n                  {isExpanded && (\n                    <tr>\n                      <td colSpan=\"9\" className=\"px-4 py-4 bg-muted/50\">\n                        <div className=\"grid grid-cols-4 gap-4 text-sm\">\n                          <div>\n                            <span className=\"font-medium text-foreground\">Salario Base:</span>\n                            <p className=\"text-muted-foreground\">${employee?.dailyWage * (payroll?.workedDays || 0)}</p>\n                          </div>\n                          <div>\n                            <span className=\"font-medium text-foreground\">Pago Horas Extra:</span>\n                            <p className=\"text-muted-foreground\">${((employee?.dailyWage / 8) * 1.5 * (payroll?.overtimeHours || 0))?.toLocaleString()}</p>\n                          </div>\n                          <div>\n                            <span className=\"font-medium text-foreground\">Pago Bruto:</span>\n                            <p className=\"text-muted-foreground\">${(payroll?.grossPay || 0)?.toLocaleString()}</p>\n                          </div>\n                          <div>\n                            <span className=\"font-medium text-foreground\">Deducciones:</span>\n                            <p className=\"text-muted-foreground\">-${(payroll?.deductions || 0)?.toLocaleString()}</p>\n                          </div>\n                        </div>\n                      </td>\n                    </tr>\n                  )}\n                </React.Fragment>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n      {/* Footer */}\n      <div className=\"p-4 border-t border-border bg-muted/50\">\n        <div className=\"flex items-center justify-between text-sm text-muted-foreground\">\n          <span>\n            Mostrando {filteredAndSortedEmployees?.length} empleados\n          </span>\n          <div className=\"flex items-center space-x-4\">\n            <span>\n              Total Nómina: ${filteredAndSortedEmployees?.reduce((sum, emp) => \n                sum + (mockPayrollData?.[emp?.id]?.netPay || 0), 0\n              )?.toLocaleString()}\n            </span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default EmployeePayrollGrid;","size_bytes":13854},"src/pages/payroll-calculation-and-management-interface/components/IntegrationStatusPanel.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\n\nconst IntegrationStatusPanel = ({ \n  onRefreshStatus,\n  onTestConnection,\n  onSyncData \n}) => {\n  const [integrations, setIntegrations] = useState([]);\n  const [lastSync, setLastSync] = useState(new Date());\n\n  // Mock integration status data\n  const mockIntegrations = [\n    {\n      id: 'accounting_system',\n      name: 'Sistema Contable',\n      description: 'Integración con software de contabilidad principal',\n      status: 'connected',\n      lastSync: new Date(Date.now() - 15 * 60 * 1000), // 15 minutes ago\n      syncFrequency: 'Cada 30 minutos',\n      recordsSync: 1250,\n      errors: 0,\n      icon: 'Calculator'\n    },\n    {\n      id: 'bank_transfer',\n      name: 'Transferencias Bancarias',\n      description: 'Sistema de pagos y transferencias automáticas',\n      status: 'connected',\n      lastSync: new Date(Date.now() - 2 * 60 * 60 * 1000), // 2 hours ago\n      syncFrequency: 'Diario a las 18:00',\n      recordsSync: 85,\n      errors: 0,\n      icon: 'CreditCard'\n    },\n    {\n      id: 'hr_system',\n      name: 'Sistema de RRHH',\n      description: 'Integración con base de datos de empleados',\n      status: 'warning',\n      lastSync: new Date(Date.now() - 6 * 60 * 60 * 1000), // 6 hours ago\n      syncFrequency: 'Cada 4 horas',\n      recordsSync: 320,\n      errors: 2,\n      icon: 'Users',\n      lastError: 'Timeout en conexión - reintentando automáticamente'\n    },\n    {\n      id: 'tax_system',\n      name: 'Sistema Tributario',\n      description: 'Reportes automáticos a entidades fiscales',\n      status: 'error',\n      lastSync: new Date(Date.now() - 24 * 60 * 60 * 1000), // 24 hours ago\n      syncFrequency: 'Semanal',\n      recordsSync: 0,\n      errors: 5,\n      icon: 'FileText',\n      lastError: 'Error de autenticación - requiere intervención manual'\n    },\n    {\n      id: 'time_tracking',\n      name: 'Control de Tiempo',\n      description: 'Sincronización con sistema de asistencia',\n      status: 'connected',\n      lastSync: new Date(Date.now() - 5 * 60 * 1000), // 5 minutes ago\n      syncFrequency: 'Tiempo real',\n      recordsSync: 2840,\n      errors: 0,\n      icon: 'Clock'\n    }\n  ];\n\n  useEffect(() => {\n    setIntegrations(mockIntegrations);\n  }, []);\n\n  const statusConfig = {\n    connected: {\n      color: 'text-success',\n      bgColor: 'bg-success/10',\n      label: 'Conectado',\n      icon: 'CheckCircle'\n    },\n    warning: {\n      color: 'text-warning',\n      bgColor: 'bg-warning/10',\n      label: 'Advertencia',\n      icon: 'AlertTriangle'\n    },\n    error: {\n      color: 'text-error',\n      bgColor: 'bg-error/10',\n      label: 'Error',\n      icon: 'XCircle'\n    },\n    disconnected: {\n      color: 'text-muted-foreground',\n      bgColor: 'bg-muted',\n      label: 'Desconectado',\n      icon: 'Circle'\n    }\n  };\n\n  const formatTimestamp = (timestamp) => {\n    const now = new Date();\n    const diff = now - timestamp;\n    const minutes = Math.floor(diff / (1000 * 60));\n    const hours = Math.floor(diff / (1000 * 60 * 60));\n    const days = Math.floor(diff / (1000 * 60 * 60 * 24));\n\n    if (minutes < 60) return `hace ${minutes}m`;\n    if (hours < 24) return `hace ${hours}h`;\n    return `hace ${days}d`;\n  };\n\n  const handleRefreshAll = () => {\n    setLastSync(new Date());\n    onRefreshStatus && onRefreshStatus();\n  };\n\n  const handleTestConnection = (integrationId) => {\n    onTestConnection && onTestConnection(integrationId);\n  };\n\n  const handleSyncData = (integrationId) => {\n    onSyncData && onSyncData(integrationId);\n  };\n\n  const connectedCount = integrations?.filter(i => i?.status === 'connected')?.length;\n  const errorCount = integrations?.filter(i => i?.status === 'error')?.length;\n  const warningCount = integrations?.filter(i => i?.status === 'warning')?.length;\n\n  return (\n    <div className=\"bg-card border border-border rounded-lg\">\n      {/* Header */}\n      <div className=\"p-6 border-b border-border\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div>\n            <h3 className=\"text-lg font-semibold text-foreground\">\n              Estado de Integraciones\n            </h3>\n            <p className=\"text-sm text-muted-foreground\">\n              Monitoreo de conexiones con sistemas externos\n            </p>\n          </div>\n          <Button\n            variant=\"outline\"\n            iconName=\"RefreshCw\"\n            onClick={handleRefreshAll}\n          >\n            Actualizar Todo\n          </Button>\n        </div>\n\n        {/* Status Summary */}\n        <div className=\"grid grid-cols-3 gap-4\">\n          <div className=\"text-center p-3 bg-success/10 rounded-lg\">\n            <div className=\"text-2xl font-bold text-success mb-1\">\n              {connectedCount}\n            </div>\n            <div className=\"text-xs text-success\">\n              Conectados\n            </div>\n          </div>\n          \n          <div className=\"text-center p-3 bg-warning/10 rounded-lg\">\n            <div className=\"text-2xl font-bold text-warning mb-1\">\n              {warningCount}\n            </div>\n            <div className=\"text-xs text-warning\">\n              Advertencias\n            </div>\n          </div>\n          \n          <div className=\"text-center p-3 bg-error/10 rounded-lg\">\n            <div className=\"text-2xl font-bold text-error mb-1\">\n              {errorCount}\n            </div>\n            <div className=\"text-xs text-error\">\n              Errores\n            </div>\n          </div>\n        </div>\n      </div>\n      {/* Integration List */}\n      <div className=\"divide-y divide-border\">\n        {integrations?.map((integration) => {\n          const config = statusConfig?.[integration?.status];\n          \n          return (\n            <div key={integration?.id} className=\"p-6\">\n              <div className=\"flex items-start justify-between mb-4\">\n                <div className=\"flex items-start space-x-4\">\n                  <div className={`w-10 h-10 rounded-lg ${config?.bgColor} flex items-center justify-center`}>\n                    <Icon name={integration?.icon} size={20} className={config?.color} />\n                  </div>\n                  \n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-2 mb-1\">\n                      <h4 className=\"text-md font-semibold text-foreground\">\n                        {integration?.name}\n                      </h4>\n                      <span className={`px-2 py-1 text-xs font-medium rounded-full ${config?.bgColor} ${config?.color}`}>\n                        <Icon name={config?.icon} size={12} className=\"inline mr-1\" />\n                        {config?.label}\n                      </span>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground mb-2\">\n                      {integration?.description}\n                    </p>\n                    \n                    {integration?.lastError && (\n                      <div className=\"p-2 bg-error/10 border border-error/20 rounded text-xs text-error\">\n                        <Icon name=\"AlertCircle\" size={12} className=\"inline mr-1\" />\n                        {integration?.lastError}\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                <div className=\"flex items-center space-x-2\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    iconName=\"TestTube\"\n                    onClick={() => handleTestConnection(integration?.id)}\n                  >\n                    Probar\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    iconName=\"RefreshCw\"\n                    onClick={() => handleSyncData(integration?.id)}\n                    disabled={integration?.status === 'error'}\n                  >\n                    Sincronizar\n                  </Button>\n                </div>\n              </div>\n              {/* Integration Stats */}\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                <div>\n                  <span className=\"text-muted-foreground\">Última Sincronización:</span>\n                  <p className=\"font-medium text-foreground\">\n                    {formatTimestamp(integration?.lastSync)}\n                  </p>\n                </div>\n                \n                <div>\n                  <span className=\"text-muted-foreground\">Frecuencia:</span>\n                  <p className=\"font-medium text-foreground\">\n                    {integration?.syncFrequency}\n                  </p>\n                </div>\n                \n                <div>\n                  <span className=\"text-muted-foreground\">Registros Sincronizados:</span>\n                  <p className=\"font-medium text-foreground\">\n                    {integration?.recordsSync?.toLocaleString()}\n                  </p>\n                </div>\n                \n                <div>\n                  <span className=\"text-muted-foreground\">Errores:</span>\n                  <p className={`font-medium ${integration?.errors > 0 ? 'text-error' : 'text-success'}`}>\n                    {integration?.errors}\n                  </p>\n                </div>\n              </div>\n              {/* Sync Progress (for active syncs) */}\n              {integration?.status === 'connected' && integration?.id === 'time_tracking' && (\n                <div className=\"mt-4 p-3 bg-muted rounded-lg\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"text-sm font-medium text-foreground\">\n                      Sincronización en tiempo real activa\n                    </span>\n                    <div className=\"flex items-center space-x-1\">\n                      <div className=\"w-2 h-2 bg-success rounded-full animate-pulse\"></div>\n                      <span className=\"text-xs text-success\">En línea</span>\n                    </div>\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\">\n                    Última actualización: {formatTimestamp(new Date(Date.now() - 30000))}\n                  </div>\n                </div>\n              )}\n            </div>\n          );\n        })}\n      </div>\n      {/* Footer */}\n      <div className=\"p-4 border-t border-border bg-muted/50\">\n        <div className=\"flex items-center justify-between text-sm text-muted-foreground\">\n          <span>\n            Última verificación: {formatTimestamp(lastSync)}\n          </span>\n          <div className=\"flex items-center space-x-4\">\n            <span>\n              {connectedCount}/{integrations?.length} sistemas conectados\n            </span>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              iconName=\"Settings\"\n            >\n              Configurar\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default IntegrationStatusPanel;","size_bytes":11147},"src/pages/payroll-calculation-and-management-interface/components/PayrollAuditTrail.jsx":{"content":"import React, { useState } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport Input from '../../../components/ui/Input';\nimport Select from '../../../components/ui/Select';\n\nconst PayrollAuditTrail = ({ auditLogs = [] }) => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterAction, setFilterAction] = useState('all');\n  const [filterUser, setFilterUser] = useState('all');\n\n  // Mock audit trail data\n  const mockAuditLogs = [\n    {\n      id: 1,\n      timestamp: new Date('2025-01-04T14:30:00'),\n      user: 'Ana Martínez',\n      action: 'manual_adjustment',\n      description: 'Agregó bono de rendimiento de $500 a Juan Pérez',\n      employeeId: 'EMP001',\n      employeeName: 'Juan Pérez',\n      details: {\n        type: 'bonus',\n        amount: 500,\n        category: 'performance',\n        justification: 'Excelente desempeño en proyecto urgente'\n      }\n    },\n    {\n      id: 2,\n      timestamp: new Date('2025-01-04T13:15:00'),\n      user: 'Carlos Rodríguez',\n      action: 'payroll_calculation',\n      description: 'Calculó nómina semanal para 25 empleados',\n      employeeId: 'BULK',\n      employeeName: 'Múltiples empleados',\n      details: {\n        employeeCount: 25,\n        totalAmount: 125000,\n        period: 'Semana 1, Enero 2025'\n      }\n    },\n    {\n      id: 3,\n      timestamp: new Date('2025-01-04T12:45:00'),\n      user: 'Ana Martínez',\n      action: 'deduction_added',\n      description: 'Agregó deducción por anticipo de $300 a María González',\n      employeeId: 'EMP002',\n      employeeName: 'María González',\n      details: {\n        type: 'deduction',\n        amount: 300,\n        category: 'advance',\n        justification: 'Anticipo solicitado por empleado'\n      }\n    },\n    {\n      id: 4,\n      timestamp: new Date('2025-01-04T11:20:00'),\n      user: 'Sistema',\n      action: 'overtime_calculation',\n      description: 'Calculó automáticamente 12 horas extra para Pedro Sánchez',\n      employeeId: 'EMP003',\n      employeeName: 'Pedro Sánchez',\n      details: {\n        overtimeHours: 12,\n        rate: 46.875,\n        totalAmount: 562.5\n      }\n    },\n    {\n      id: 5,\n      timestamp: new Date('2025-01-04T10:00:00'),\n      user: 'Carlos Rodríguez',\n      action: 'payroll_approval',\n      description: 'Aprobó nómina de Luis Fernández',\n      employeeId: 'EMP004',\n      employeeName: 'Luis Fernández',\n      details: {\n        grossPay: 5775,\n        netPay: 5198,\n        status: 'approved'\n      }\n    }\n  ];\n\n  const actionTypes = [\n    { value: 'all', label: 'Todas las Acciones' },\n    { value: 'manual_adjustment', label: 'Ajuste Manual' },\n    { value: 'payroll_calculation', label: 'Cálculo de Nómina' },\n    { value: 'deduction_added', label: 'Deducción Agregada' },\n    { value: 'overtime_calculation', label: 'Cálculo Horas Extra' },\n    { value: 'payroll_approval', label: 'Aprobación de Nómina' }\n  ];\n\n  const users = [\n    { value: 'all', label: 'Todos los Usuarios' },\n    { value: 'Ana Martínez', label: 'Ana Martínez' },\n    { value: 'Carlos Rodríguez', label: 'Carlos Rodríguez' },\n    { value: 'Sistema', label: 'Sistema' }\n  ];\n\n  const actionIcons = {\n    manual_adjustment: 'Edit',\n    payroll_calculation: 'Calculator',\n    deduction_added: 'Minus',\n    overtime_calculation: 'Clock',\n    payroll_approval: 'CheckCircle',\n    default: 'Activity'\n  };\n\n  const actionColors = {\n    manual_adjustment: 'text-warning',\n    payroll_calculation: 'text-primary',\n    deduction_added: 'text-error',\n    overtime_calculation: 'text-accent',\n    payroll_approval: 'text-success',\n    default: 'text-muted-foreground'\n  };\n\n  const activeLogs = auditLogs?.length > 0 ? auditLogs : mockAuditLogs;\n\n  const filteredLogs = activeLogs?.filter(log => {\n    const matchesSearch = log?.description?.toLowerCase()?.includes(searchTerm?.toLowerCase()) ||\n                         log?.employeeName?.toLowerCase()?.includes(searchTerm?.toLowerCase()) ||\n                         log?.user?.toLowerCase()?.includes(searchTerm?.toLowerCase());\n    const matchesAction = filterAction === 'all' || log?.action === filterAction;\n    const matchesUser = filterUser === 'all' || log?.user === filterUser;\n    \n    return matchesSearch && matchesAction && matchesUser;\n  });\n\n  const formatTimestamp = (timestamp) => {\n    return new Intl.DateTimeFormat('es-ES', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    })?.format(timestamp);\n  };\n\n  const getActionLabel = (action) => {\n    const actionType = actionTypes?.find(type => type?.value === action);\n    return actionType ? actionType?.label : action;\n  };\n\n  return (\n    <div className=\"bg-card border border-border rounded-lg\">\n      {/* Header */}\n      <div className=\"p-6 border-b border-border\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div>\n            <h3 className=\"text-lg font-semibold text-foreground\">\n              Registro de Auditoría\n            </h3>\n            <p className=\"text-sm text-muted-foreground\">\n              Historial de todas las modificaciones de nómina\n            </p>\n          </div>\n          <Button\n            variant=\"outline\"\n            iconName=\"Download\"\n          >\n            Exportar Registro\n          </Button>\n        </div>\n\n        {/* Filters */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <Input\n            placeholder=\"Buscar en registro...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e?.target?.value)}\n            iconName=\"Search\"\n          />\n          <Select\n            options={actionTypes}\n            value={filterAction}\n            onChange={setFilterAction}\n            placeholder=\"Filtrar por acción\"\n          />\n          <Select\n            options={users}\n            value={filterUser}\n            onChange={setFilterUser}\n            placeholder=\"Filtrar por usuario\"\n          />\n        </div>\n      </div>\n      {/* Audit Log List */}\n      <div className=\"max-h-96 overflow-y-auto\">\n        {filteredLogs?.length === 0 ? (\n          <div className=\"p-8 text-center\">\n            <Icon name=\"FileText\" size={48} className=\"mx-auto text-muted-foreground mb-4\" />\n            <h4 className=\"text-lg font-semibold text-foreground mb-2\">\n              No hay registros\n            </h4>\n            <p className=\"text-muted-foreground\">\n              No se encontraron registros de auditoría con los filtros aplicados\n            </p>\n          </div>\n        ) : (\n          <div className=\"divide-y divide-border\">\n            {filteredLogs?.map((log) => (\n              <div key={log?.id} className=\"p-4 hover:bg-muted/50 transition-colors duration-150\">\n                <div className=\"flex items-start space-x-4\">\n                  {/* Action Icon */}\n                  <div className={`flex-shrink-0 w-8 h-8 rounded-full bg-muted flex items-center justify-center ${\n                    actionColors?.[log?.action] || actionColors?.default\n                  }`}>\n                    <Icon \n                      name={actionIcons?.[log?.action] || actionIcons?.default} \n                      size={16} \n                    />\n                  </div>\n\n                  {/* Log Details */}\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-center justify-between mb-1\">\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"text-sm font-medium text-foreground\">\n                          {getActionLabel(log?.action)}\n                        </span>\n                        <span className=\"px-2 py-0.5 text-xs font-medium bg-primary/10 text-primary rounded-full\">\n                          {log?.employeeId}\n                        </span>\n                      </div>\n                      <span className=\"text-xs text-muted-foreground\">\n                        {formatTimestamp(log?.timestamp)}\n                      </span>\n                    </div>\n\n                    <p className=\"text-sm text-foreground mb-2\">\n                      {log?.description}\n                    </p>\n\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-4 text-xs text-muted-foreground\">\n                        <span>\n                          <Icon name=\"User\" size={12} className=\"inline mr-1\" />\n                          {log?.user}\n                        </span>\n                        <span>\n                          <Icon name=\"UserCheck\" size={12} className=\"inline mr-1\" />\n                          {log?.employeeName}\n                        </span>\n                      </div>\n\n                      {/* Additional Details */}\n                      {log?.details && (\n                        <div className=\"text-xs text-muted-foreground\">\n                          {log?.details?.amount && (\n                            <span className={`font-medium ${\n                              log?.details?.type === 'bonus' ? 'text-success' : \n                              log?.details?.type === 'deduction'? 'text-error' : 'text-foreground'\n                            }`}>\n                              {log?.details?.type === 'bonus' ? '+' : \n                               log?.details?.type === 'deduction' ? '-' : ''}\n                              ${log?.details?.amount?.toLocaleString()}\n                            </span>\n                          )}\n                          {log?.details?.employeeCount && (\n                            <span className=\"font-medium text-foreground\">\n                              {log?.details?.employeeCount} empleados\n                            </span>\n                          )}\n                          {log?.details?.overtimeHours && (\n                            <span className=\"font-medium text-foreground\">\n                              {log?.details?.overtimeHours}h extra\n                            </span>\n                          )}\n                        </div>\n                      )}\n                    </div>\n\n                    {/* Justification */}\n                    {log?.details?.justification && (\n                      <div className=\"mt-2 p-2 bg-muted rounded text-xs text-muted-foreground\">\n                        <Icon name=\"MessageSquare\" size={12} className=\"inline mr-1\" />\n                        {log?.details?.justification}\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n      {/* Footer */}\n      <div className=\"p-4 border-t border-border bg-muted/50\">\n        <div className=\"flex items-center justify-between text-sm text-muted-foreground\">\n          <span>\n            Mostrando {filteredLogs?.length} de {activeLogs?.length} registros\n          </span>\n          <span>\n            Última actualización: {formatTimestamp(new Date())}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PayrollAuditTrail;","size_bytes":11221},"src/pages/payroll-calculation-and-management-interface/components/PayrollCalculationEngine.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport Input from '../../../components/ui/Input';\nimport Select from '../../../components/ui/Select';\n\nconst PayrollCalculationEngine = ({ \n  selectedEmployee, \n  onCalculationUpdate,\n  attendanceData = {},\n  onSaveAdjustments \n}) => {\n  const [calculations, setCalculations] = useState({\n    regularHours: 0,\n    overtimeHours: 0,\n    regularPay: 0,\n    overtimePay: 0,\n    bonuses: 0,\n    deductions: 0,\n    grossPay: 0,\n    netPay: 0\n  });\n\n  const [adjustments, setAdjustments] = useState([]);\n  const [newAdjustment, setNewAdjustment] = useState({\n    type: 'bonus',\n    amount: '',\n    description: '',\n    category: 'performance'\n  });\n\n  const adjustmentTypes = [\n    { value: 'bonus', label: 'Bono' },\n    { value: 'deduction', label: 'Deducción' }\n  ];\n\n  const adjustmentCategories = [\n    { value: 'performance', label: 'Rendimiento' },\n    { value: 'overtime_bonus', label: 'Bono Horas Extra' },\n    { value: 'transport', label: 'Transporte' },\n    { value: 'food', label: 'Alimentación' },\n    { value: 'safety_equipment', label: 'Equipo de Seguridad' },\n    { value: 'advance', label: 'Anticipo' },\n    { value: 'loan', label: 'Préstamo' },\n    { value: 'insurance', label: 'Seguro' },\n    { value: 'other', label: 'Otro' }\n  ];\n\n  useEffect(() => {\n    if (selectedEmployee && attendanceData) {\n      calculatePayroll();\n    }\n  }, [selectedEmployee, attendanceData, adjustments]);\n\n  const calculatePayroll = () => {\n    if (!selectedEmployee) return;\n\n    const dailyWage = selectedEmployee?.dailyWage || 250;\n    const workedDays = attendanceData?.workedDays || 0;\n    const overtimeHours = attendanceData?.overtimeHours || 0;\n    const overtimeRate = dailyWage / 8 * 1.5; // 1.5x rate for overtime\n\n    const regularPay = dailyWage * workedDays;\n    const overtimePay = overtimeHours * overtimeRate;\n\n    const totalBonuses = adjustments?.filter(adj => adj?.type === 'bonus')?.reduce((sum, adj) => sum + parseFloat(adj?.amount || 0), 0);\n\n    const totalDeductions = adjustments?.filter(adj => adj?.type === 'deduction')?.reduce((sum, adj) => sum + parseFloat(adj?.amount || 0), 0);\n\n    const grossPay = regularPay + overtimePay + totalBonuses;\n    const netPay = grossPay - totalDeductions;\n\n    const newCalculations = {\n      regularHours: workedDays * 8,\n      overtimeHours,\n      regularPay,\n      overtimePay,\n      bonuses: totalBonuses,\n      deductions: totalDeductions,\n      grossPay,\n      netPay\n    };\n\n    setCalculations(newCalculations);\n    onCalculationUpdate && onCalculationUpdate(newCalculations);\n  };\n\n  const handleAddAdjustment = () => {\n    if (!newAdjustment?.amount || !newAdjustment?.description) return;\n\n    const adjustment = {\n      id: Date.now(),\n      ...newAdjustment,\n      amount: parseFloat(newAdjustment?.amount),\n      timestamp: new Date(),\n      user: 'Admin Usuario'\n    };\n\n    setAdjustments([...adjustments, adjustment]);\n    setNewAdjustment({\n      type: 'bonus',\n      amount: '',\n      description: '',\n      category: 'performance'\n    });\n  };\n\n  const handleRemoveAdjustment = (id) => {\n    setAdjustments(adjustments?.filter(adj => adj?.id !== id));\n  };\n\n  const handleSaveAll = () => {\n    onSaveAdjustments && onSaveAdjustments({\n      employeeId: selectedEmployee?.id,\n      calculations,\n      adjustments\n    });\n  };\n\n  if (!selectedEmployee) {\n    return (\n      <div className=\"bg-card border border-border rounded-lg p-8 text-center\">\n        <Icon name=\"Calculator\" size={48} className=\"mx-auto text-muted-foreground mb-4\" />\n        <h3 className=\"text-lg font-semibold text-foreground mb-2\">\n          Motor de Cálculo de Nómina\n        </h3>\n        <p className=\"text-muted-foreground\">\n          Selecciona un empleado para comenzar los cálculos de nómina\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-card border border-border rounded-lg\">\n      {/* Header */}\n      <div className=\"p-6 border-b border-border\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h3 className=\"text-lg font-semibold text-foreground\">\n              Cálculo de Nómina\n            </h3>\n            <p className=\"text-sm text-muted-foreground\">\n              {selectedEmployee?.name} - {selectedEmployee?.position}\n            </p>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              variant=\"outline\"\n              iconName=\"RefreshCw\"\n              onClick={calculatePayroll}\n            >\n              Recalcular\n            </Button>\n            <Button\n              variant=\"default\"\n              iconName=\"Save\"\n              onClick={handleSaveAll}\n            >\n              Guardar\n            </Button>\n          </div>\n        </div>\n      </div>\n      {/* Calculation Summary */}\n      <div className=\"p-6 border-b border-border\">\n        <h4 className=\"text-md font-semibold text-foreground mb-4\">\n          Resumen de Cálculos\n        </h4>\n        \n        <div className=\"grid grid-cols-2 gap-4 mb-6\">\n          <div className=\"space-y-3\">\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm text-muted-foreground\">Horas Regulares:</span>\n              <span className=\"font-medium\">{calculations?.regularHours}h</span>\n            </div>\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm text-muted-foreground\">Horas Extra:</span>\n              <span className=\"font-medium\">{calculations?.overtimeHours}h</span>\n            </div>\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm text-muted-foreground\">Pago Regular:</span>\n              <span className=\"font-medium\">${calculations?.regularPay?.toLocaleString()}</span>\n            </div>\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm text-muted-foreground\">Pago Horas Extra:</span>\n              <span className=\"font-medium\">${calculations?.overtimePay?.toLocaleString()}</span>\n            </div>\n          </div>\n          \n          <div className=\"space-y-3\">\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm text-muted-foreground\">Bonos:</span>\n              <span className=\"font-medium text-success\">+${calculations?.bonuses?.toLocaleString()}</span>\n            </div>\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm text-muted-foreground\">Deducciones:</span>\n              <span className=\"font-medium text-error\">-${calculations?.deductions?.toLocaleString()}</span>\n            </div>\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm text-muted-foreground\">Pago Bruto:</span>\n              <span className=\"font-medium\">${calculations?.grossPay?.toLocaleString()}</span>\n            </div>\n            <div className=\"flex justify-between items-center border-t border-border pt-2\">\n              <span className=\"text-md font-semibold text-foreground\">Pago Neto:</span>\n              <span className=\"text-lg font-bold text-primary\">${calculations?.netPay?.toLocaleString()}</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Calculation Formula */}\n        <div className=\"bg-muted rounded-lg p-4\">\n          <h5 className=\"text-sm font-semibold text-foreground mb-2\">Fórmula de Cálculo:</h5>\n          <p className=\"text-xs text-muted-foreground\">\n            Pago Neto = (Días Trabajados × Salario Diario) + (Horas Extra × Tarifa Extra) + Bonos - Deducciones\n          </p>\n          <p className=\"text-xs text-muted-foreground mt-1\">\n            Tarifa Extra = (Salario Diario ÷ 8) × 1.5\n          </p>\n        </div>\n      </div>\n      {/* Manual Adjustments */}\n      <div className=\"p-6\">\n        <h4 className=\"text-md font-semibold text-foreground mb-4\">\n          Ajustes Manuales\n        </h4>\n\n        {/* Add New Adjustment */}\n        <div className=\"bg-muted rounded-lg p-4 mb-4\">\n          <div className=\"grid grid-cols-2 gap-4 mb-4\">\n            <Select\n              label=\"Tipo\"\n              options={adjustmentTypes}\n              value={newAdjustment?.type}\n              onChange={(value) => setNewAdjustment({...newAdjustment, type: value})}\n            />\n            <Select\n              label=\"Categoría\"\n              options={adjustmentCategories}\n              value={newAdjustment?.category}\n              onChange={(value) => setNewAdjustment({...newAdjustment, category: value})}\n            />\n          </div>\n          \n          <div className=\"grid grid-cols-2 gap-4 mb-4\">\n            <Input\n              label=\"Monto\"\n              type=\"number\"\n              placeholder=\"0.00\"\n              value={newAdjustment?.amount}\n              onChange={(e) => setNewAdjustment({...newAdjustment, amount: e?.target?.value})}\n            />\n            <Input\n              label=\"Descripción\"\n              placeholder=\"Motivo del ajuste\"\n              value={newAdjustment?.description}\n              onChange={(e) => setNewAdjustment({...newAdjustment, description: e?.target?.value})}\n            />\n          </div>\n\n          <Button\n            variant=\"outline\"\n            iconName=\"Plus\"\n            onClick={handleAddAdjustment}\n            disabled={!newAdjustment?.amount || !newAdjustment?.description}\n          >\n            Agregar Ajuste\n          </Button>\n        </div>\n\n        {/* Adjustments List */}\n        {adjustments?.length > 0 && (\n          <div className=\"space-y-2\">\n            {adjustments?.map((adjustment) => (\n              <div key={adjustment?.id} className=\"flex items-center justify-between p-3 bg-background border border-border rounded-lg\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center space-x-2\">\n                    <span className={`px-2 py-1 text-xs font-medium rounded-full ${\n                      adjustment?.type === 'bonus' ?'bg-success/10 text-success' :'bg-error/10 text-error'\n                    }`}>\n                      {adjustment?.type === 'bonus' ? 'Bono' : 'Deducción'}\n                    </span>\n                    <span className=\"text-sm font-medium\">\n                      {adjustmentCategories?.find(cat => cat?.value === adjustment?.category)?.label}\n                    </span>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground mt-1\">\n                    {adjustment?.description}\n                  </p>\n                </div>\n                \n                <div className=\"flex items-center space-x-3\">\n                  <span className={`text-lg font-semibold ${\n                    adjustment?.type === 'bonus' ? 'text-success' : 'text-error'\n                  }`}>\n                    {adjustment?.type === 'bonus' ? '+' : '-'}${adjustment?.amount?.toLocaleString()}\n                  </span>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    iconName=\"Trash2\"\n                    onClick={() => handleRemoveAdjustment(adjustment?.id)}\n                  />\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default PayrollCalculationEngine;","size_bytes":11531},"src/pages/performance-optimization-and-production-deployment-center/components/DeploymentPipelineControls.jsx":{"content":"import React, { useState, useCallback } from 'react';\nimport { Play, CheckCircle, XCircle, Clock, RefreshCw, ArrowRight, GitCommit, Upload, Target } from 'lucide-react';\n\nconst DeploymentPipelineControls = ({ deploymentStats, onAction, onRefresh }) => {\n  const [pipelineStages] = useState([\n    { \n      id: 'build', \n      name: 'Build', \n      status: 'completed', \n      duration: '2m 15s',\n      description: 'Compile and bundle application'\n    },\n    { \n      id: 'test', \n      name: 'Test', \n      status: 'completed', \n      duration: '1m 45s',\n      description: 'Run unit and integration tests'\n    },\n    { \n      id: 'security', \n      name: 'Security Scan', \n      status: 'completed', \n      duration: '45s',\n      description: 'Vulnerability and dependency scanning'\n    },\n    { \n      id: 'deploy', \n      name: 'Deploy to Staging', \n      status: deploymentStats?.buildStatus === 'building' ? 'running' : 'completed', \n      duration: '1m 30s',\n      description: 'Deploy to staging environment'\n    },\n    { \n      id: 'validate', \n      name: 'Validation', \n      status: 'pending', \n      duration: '30s',\n      description: 'Health checks and smoke tests'\n    },\n    { \n      id: 'production', \n      name: 'Production Deploy', \n      status: 'pending', \n      duration: '2m 00s',\n      description: 'Zero-downtime production deployment'\n    }\n  ]);\n\n  const [deploymentHistory] = useState([\n    {\n      id: 1,\n      version: 'v2.4.1',\n      environment: 'production',\n      status: 'success',\n      timestamp: new Date(Date.now() - 7200000)?.toISOString(),\n      duration: '5m 12s',\n      commit: 'a1b2c3d'\n    },\n    {\n      id: 2,\n      version: 'v2.4.0',\n      environment: 'staging',\n      status: 'success',\n      timestamp: deploymentStats?.lastDeploy,\n      duration: '4m 45s',\n      commit: 'x7y8z9a'\n    },\n    {\n      id: 3,\n      version: 'v2.3.9',\n      environment: 'staging',\n      status: 'failed',\n      timestamp: new Date(Date.now() - 14400000)?.toISOString(),\n      duration: '2m 18s',\n      commit: 'm4n5o6p'\n    }\n  ]);\n\n  const getStatusIcon = (status) => {\n    switch (status) {\n      case 'completed':\n        return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n      case 'running':\n        return <RefreshCw className=\"h-5 w-5 text-blue-500 animate-spin\" />;\n      case 'failed':\n        return <XCircle className=\"h-5 w-5 text-red-500\" />;\n      case 'pending':\n        return <Clock className=\"h-5 w-5 text-gray-400\" />;\n      default:\n        return <Clock className=\"h-5 w-5 text-gray-400\" />;\n    }\n  };\n\n  const getStatusColor = (status) => {\n    switch (status) {\n      case 'completed':\n      case 'success':\n        return 'text-green-600 bg-green-50';\n      case 'running':\n        return 'text-blue-600 bg-blue-50';\n      case 'failed':\n        return 'text-red-600 bg-red-50';\n      case 'pending':\n        return 'text-gray-600 bg-gray-50';\n      default:\n        return 'text-gray-600 bg-gray-50';\n    }\n  };\n\n  const handlePipelineAction = useCallback((action, stage) => {\n    if (onAction) {\n      onAction(action, { stage });\n    }\n  }, [onAction]);\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Pipeline Overview */}\n      <div className=\"bg-gray-50 rounded-lg p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-semibold text-gray-900\">Deployment Pipeline</h3>\n          <div className=\"flex items-center space-x-2\">\n            <button\n              onClick={() => handlePipelineAction('trigger-pipeline')}\n              className=\"bg-green-600 text-white px-3 py-2 rounded-md text-sm font-medium hover:bg-green-700 transition-colors flex items-center space-x-2\"\n            >\n              <Play className=\"h-4 w-4\" />\n              <span>Trigger Deploy</span>\n            </button>\n            <button\n              onClick={onRefresh}\n              className=\"bg-gray-600 text-white px-3 py-2 rounded-md text-sm font-medium hover:bg-gray-700 transition-colors\"\n            >\n              <RefreshCw className=\"h-4 w-4\" />\n            </button>\n          </div>\n        </div>\n\n        {/* Pipeline Stages */}\n        <div className=\"space-y-4\">\n          {pipelineStages?.map((stage, index) => (\n            <div key={stage?.id} className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-3 flex-1\">\n                {getStatusIcon(stage?.status)}\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center justify-between\">\n                    <h4 className=\"font-medium text-gray-900\">{stage?.name}</h4>\n                    <span className={`px-2 py-1 rounded text-xs font-medium ${getStatusColor(stage?.status)}`}>\n                      {stage?.status}\n                    </span>\n                  </div>\n                  <p className=\"text-sm text-gray-600\">{stage?.description}</p>\n                  {stage?.duration && (\n                    <p className=\"text-xs text-gray-500 mt-1\">Duration: {stage?.duration}</p>\n                  )}\n                </div>\n              </div>\n              {index < pipelineStages?.length - 1 && (\n                <ArrowRight className=\"h-4 w-4 text-gray-400\" />\n              )}\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Deployment Controls */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        {/* Quick Actions */}\n        <div className=\"bg-white border rounded-lg p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Quick Actions</h3>\n          <div className=\"space-y-3\">\n            <button\n              onClick={() => handlePipelineAction('deploy-staging')}\n              className=\"w-full bg-blue-600 text-white px-4 py-2 rounded-md text-sm font-medium hover:bg-blue-700 transition-colors flex items-center justify-center space-x-2\"\n            >\n              <Upload className=\"h-4 w-4\" />\n              <span>Deploy to Staging</span>\n            </button>\n            <button\n              onClick={() => handlePipelineAction('promote-production')}\n              className=\"w-full bg-green-600 text-white px-4 py-2 rounded-md text-sm font-medium hover:bg-green-700 transition-colors flex items-center justify-center space-x-2\"\n            >\n              <Target className=\"h-4 w-4\" />\n              <span>Promote to Production</span>\n            </button>\n            <button\n              onClick={() => handlePipelineAction('rollback')}\n              className=\"w-full bg-red-600 text-white px-4 py-2 rounded-md text-sm font-medium hover:bg-red-700 transition-colors flex items-center justify-center space-x-2\"\n            >\n              <RefreshCw className=\"h-4 w-4\" />\n              <span>Emergency Rollback</span>\n            </button>\n          </div>\n        </div>\n\n        {/* Environment Status */}\n        <div className=\"bg-white border rounded-lg p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Environment Status</h3>\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between py-2 border-b border-gray-200\">\n              <div>\n                <p className=\"font-medium text-gray-900\">Staging</p>\n                <p className=\"text-sm text-gray-600\">Last deployed: {\n                  deploymentStats?.lastDeploy \n                    ? new Date(deploymentStats?.lastDeploy)?.toLocaleString()\n                    : 'Never'\n                }</p>\n              </div>\n              <span className={`px-2 py-1 rounded text-xs font-medium ${\n                deploymentStats?.buildStatus === 'success' ? 'text-green-600 bg-green-50' :\n                deploymentStats?.buildStatus === 'building' ? 'text-blue-600 bg-blue-50' : 'text-gray-600 bg-gray-50'\n              }`}>\n                {deploymentStats?.buildStatus || 'idle'}\n              </span>\n            </div>\n            <div className=\"flex items-center justify-between py-2 border-b border-gray-200\">\n              <div>\n                <p className=\"font-medium text-gray-900\">Production</p>\n                <p className=\"text-sm text-gray-600\">Version: v2.4.1 (stable)</p>\n              </div>\n              <span className=\"px-2 py-1 rounded text-xs font-medium text-green-600 bg-green-50\">\n                healthy\n              </span>\n            </div>\n            <div className=\"flex items-center justify-between py-2\">\n              <div>\n                <p className=\"font-medium text-gray-900\">Development</p>\n                <p className=\"text-sm text-gray-600\">Active branches: 3</p>\n              </div>\n              <span className=\"px-2 py-1 rounded text-xs font-medium text-blue-600 bg-blue-50\">\n                active\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Recent Deployments */}\n      <div className=\"bg-white border rounded-lg p-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Recent Deployments</h3>\n        <div className=\"overflow-x-auto\">\n          <table className=\"min-w-full divide-y divide-gray-200\">\n            <thead className=\"bg-gray-50\">\n              <tr>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Version\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Environment\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Status\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Deployed\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Duration\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Actions\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {deploymentHistory?.map((deployment) => (\n                <tr key={deployment?.id} className=\"hover:bg-gray-50\">\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div className=\"flex items-center\">\n                      <GitCommit className=\"h-4 w-4 text-gray-400 mr-2\" />\n                      <div>\n                        <div className=\"text-sm font-medium text-gray-900\">\n                          {deployment?.version}\n                        </div>\n                        <div className=\"text-xs text-gray-500\">\n                          {deployment?.commit}\n                        </div>\n                      </div>\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <span className=\"text-sm text-gray-900 capitalize\">\n                      {deployment?.environment}\n                    </span>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <span className={`px-2 py-1 rounded text-xs font-medium ${getStatusColor(deployment?.status)}`}>\n                      {deployment?.status}\n                    </span>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                    {deployment?.timestamp ? new Date(deployment?.timestamp)?.toLocaleString() : 'N/A'}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                    {deployment?.duration}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n                    <button \n                      className=\"text-blue-600 hover:text-blue-900 mr-3\"\n                      onClick={() => handlePipelineAction('view-logs', deployment)}\n                    >\n                      View Logs\n                    </button>\n                    {deployment?.status === 'success' && deployment?.environment !== 'production' && (\n                      <button \n                        className=\"text-green-600 hover:text-green-900\"\n                        onClick={() => handlePipelineAction('promote', deployment)}\n                      >\n                        Promote\n                      </button>\n                    )}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DeploymentPipelineControls;","size_bytes":12780},"src/pages/performance-optimization-and-production-deployment-center/components/DockerContainerStatus.jsx":{"content":"import React, { useEffect } from 'react';\n\nconst DockerContainerStatus = () => {\n  React.useEffect(() => {\n    // eslint-disable-next-line no-console\n    console.warn('Placeholder: DockerContainerStatus is not implemented yet.');\n  }, []);\n  return (\n    <>\n  { /*DockerContainerStatus */} \n </>\n  );\n};\n\nexport default DockerContainerStatus;\n","size_bytes":343},"src/pages/performance-optimization-and-production-deployment-center/components/FeatureFlagManagement.jsx":{"content":"import React, { useEffect } from 'react';\n\nconst FeatureFlagManagement = () => {\n  React.useEffect(() => {\n    // eslint-disable-next-line no-console\n    console.warn('Placeholder: FeatureFlagManagement is not implemented yet.');\n  }, []);\n  return (\n    <>\n  { /*FeatureFlagManagement */} \n </>\n  );\n};\n\nexport default FeatureFlagManagement;\n","size_bytes":343},"src/pages/performance-optimization-and-production-deployment-center/components/NginxConfigurationStatus.jsx":{"content":"import React, { useEffect } from 'react';\n\nconst NginxConfigurationStatus = () => {\n  React.useEffect(() => {\n    // eslint-disable-next-line no-console\n    console.warn('Placeholder: NginxConfigurationStatus is not implemented yet.');\n  }, []);\n  return (\n    <>\n  { /*NginxConfigurationStatus */} \n </>\n  );\n};\n\nexport default NginxConfigurationStatus;\n","size_bytes":355},"src/pages/performance-optimization-and-production-deployment-center/components/PerformanceMetricsDashboard.jsx":{"content":"import React, { useMemo } from 'react';\nimport { TrendingUp, Zap, Globe, Activity, AlertTriangle, CheckCircle, Monitor, Cpu } from 'lucide-react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, BarChart, Bar } from 'recharts';\nimport Icon from '@/components/AppIcon';\n\n\nconst PerformanceMetricsDashboard = ({ performanceData, loading, onRefresh }) => {\n  // Mock historical performance data\n  const historicalData = useMemo(() => [\n    { time: '00:00', performance: 88, accessibility: 85, seo: 90, bundleSize: 1.2 },\n    { time: '04:00', performance: 91, accessibility: 87, seo: 92, bundleSize: 1.15 },\n    { time: '08:00', performance: 89, accessibility: 86, seo: 91, bundleSize: 1.18 },\n    { time: '12:00', performance: 92, accessibility: 88, seo: 89, bundleSize: 1.12 },\n    { time: '16:00', performance: 90, accessibility: 89, seo: 93, bundleSize: 1.14 },\n    { time: '20:00', performance: 94, accessibility: 90, seo: 94, bundleSize: 1.10 }\n  ], []);\n\n  const coreWebVitals = useMemo(() => [\n    { name: 'LCP', value: 1.2, unit: 's', threshold: 2.5, status: 'good' },\n    { name: 'FID', value: 45, unit: 'ms', threshold: 100, status: 'good' },\n    { name: 'CLS', value: 0.05, unit: '', threshold: 0.1, status: 'good' },\n    { name: 'FCP', value: 0.9, unit: 's', threshold: 1.8, status: 'good' },\n    { name: 'INP', value: 125, unit: 'ms', threshold: 200, status: 'needs-improvement' },\n    { name: 'TTFB', value: 0.3, unit: 's', threshold: 0.8, status: 'good' }\n  ], []);\n\n  const bundleAnalysis = useMemo(() => {\n    if (!performanceData?.performance?.bundleAnalysis) {\n      return [\n        { name: 'Main Bundle', size: 845, color: '#3B82F6' },\n        { name: 'Vendor Bundle', size: 1200, color: '#EF4444' },\n        { name: 'Async Chunks', size: 340, color: '#10B981' },\n        { name: 'CSS', size: 120, color: '#F59E0B' }\n      ];\n    }\n    \n    const analysis = performanceData?.performance?.bundleAnalysis;\n    return [\n      { name: 'Main Bundle', size: parseInt(analysis?.mainBundle) || 845, color: '#3B82F6' },\n      { name: 'Vendor Bundle', size: parseInt(analysis?.vendorBundle) || 1200, color: '#EF4444' },\n      { name: 'Duplicates', size: parseInt(analysis?.duplicates) || 45, color: '#F59E0B' }\n    ];\n  }, [performanceData?.performance?.bundleAnalysis]);\n\n  const getVitalStatus = (vital) => {\n    switch (vital?.status) {\n      case 'good':\n        return { color: 'text-green-600 bg-green-50', icon: CheckCircle };\n      case 'needs-improvement':\n        return { color: 'text-yellow-600 bg-yellow-50', icon: AlertTriangle };\n      case 'poor':\n        return { color: 'text-red-600 bg-red-50', icon: AlertTriangle };\n      default:\n        return { color: 'text-gray-600 bg-gray-50', icon: Activity };\n    }\n  };\n\n  const getScoreColor = (score) => {\n    if (score >= 90) return 'text-green-600';\n    if (score >= 70) return 'text-yellow-600';\n    return 'text-red-600';\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <Activity className=\"h-8 w-8 animate-spin text-blue-600 mx-auto mb-2\" />\n          <p className=\"text-gray-600\">Loading Performance Metrics...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Lighthouse Scores */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        {[\n          { \n            name: 'Performance', \n            score: performanceData?.performance?.lighthouse?.performance || 92,\n            icon: Zap,\n            description: 'Loading speed and runtime performance'\n          },\n          { \n            name: 'Accessibility', \n            score: performanceData?.performance?.lighthouse?.accessibility || 88,\n            icon: Globe,\n            description: 'Accessibility standards compliance'\n          },\n          { \n            name: 'Best Practices', \n            score: performanceData?.performance?.lighthouse?.bestPractices || 95,\n            icon: CheckCircle,\n            description: 'Security and modern web standards'\n          },\n          { \n            name: 'SEO', \n            score: performanceData?.performance?.lighthouse?.seo || 87,\n            icon: TrendingUp,\n            description: 'Search engine optimization'\n          }\n        ]?.map((metric) => {\n          const Icon = metric?.icon;\n          return (\n            <div key={metric?.name} className=\"bg-white border rounded-lg p-6\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <Icon className=\"h-6 w-6 text-blue-600\" />\n                <span className={`text-2xl font-bold ${getScoreColor(metric?.score)}`}>\n                  {metric?.score}\n                </span>\n              </div>\n              <h3 className=\"font-medium text-gray-900 mb-1\">{metric?.name}</h3>\n              <p className=\"text-xs text-gray-600\">{metric?.description}</p>\n            </div>\n          );\n        })}\n      </div>\n\n      {/* Core Web Vitals */}\n      <div className=\"bg-white border rounded-lg p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-semibold text-gray-900\">Core Web Vitals</h3>\n          <button\n            onClick={onRefresh}\n            className=\"text-blue-600 hover:text-blue-700 text-sm font-medium\"\n          >\n            Refresh Metrics\n          </button>\n        </div>\n        <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4\">\n          {coreWebVitals?.map((vital) => {\n            const statusConfig = getVitalStatus(vital);\n            const StatusIcon = statusConfig?.icon;\n            \n            return (\n              <div key={vital?.name} className=\"text-center\">\n                <div className={`inline-flex items-center px-3 py-2 rounded-full ${statusConfig?.color} mb-2`}>\n                  <StatusIcon className=\"h-4 w-4 mr-1\" />\n                  <span className=\"text-sm font-medium\">{vital?.name}</span>\n                </div>\n                <p className=\"text-2xl font-bold text-gray-900\">\n                  {vital?.value}{vital?.unit}\n                </p>\n                <p className=\"text-xs text-gray-600\">\n                  Threshold: {vital?.threshold}{vital?.unit}\n                </p>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n\n      {/* Performance Trends */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <div className=\"bg-white border rounded-lg p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Performance Trends (24h)</h3>\n          <ResponsiveContainer width=\"100%\" height={250}>\n            <LineChart data={historicalData}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"time\" />\n              <YAxis domain={[0, 100]} />\n              <Tooltip />\n              <Line \n                type=\"monotone\" \n                dataKey=\"performance\" \n                stroke=\"#3B82F6\" \n                strokeWidth={2} \n                name=\"Performance\"\n              />\n              <Line \n                type=\"monotone\" \n                dataKey=\"accessibility\" \n                stroke=\"#10B981\" \n                strokeWidth={2} \n                name=\"Accessibility\"\n              />\n              <Line \n                type=\"monotone\" \n                dataKey=\"seo\" \n                stroke=\"#F59E0B\" \n                strokeWidth={2} \n                name=\"SEO\"\n              />\n            </LineChart>\n          </ResponsiveContainer>\n        </div>\n\n        <div className=\"bg-white border rounded-lg p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Bundle Size Analysis</h3>\n          <ResponsiveContainer width=\"100%\" height={250}>\n            <BarChart data={bundleAnalysis}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"name\" />\n              <YAxis />\n              <Tooltip formatter={(value) => [`${value}KB`, 'Size']} />\n              <Bar dataKey=\"size\" fill=\"#3B82F6\" />\n            </BarChart>\n          </ResponsiveContainer>\n          <div className=\"mt-4 text-center\">\n            <p className=\"text-sm text-gray-600\">\n              Total Bundle Size: <span className=\"font-medium\">\n                {bundleAnalysis?.reduce((sum, item) => sum + item?.size, 0)}KB\n              </span>\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Resource Optimization */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        <div className=\"bg-white border rounded-lg p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"font-semibold text-gray-900\">JavaScript Optimization</h3>\n            <Cpu className=\"h-5 w-5 text-blue-600\" />\n          </div>\n          <div className=\"space-y-3\">\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm text-gray-600\">Code Splitting</span>\n              <span className=\"text-sm font-medium text-green-600\">Enabled</span>\n            </div>\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm text-gray-600\">Tree Shaking</span>\n              <span className=\"text-sm font-medium text-green-600\">Active</span>\n            </div>\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm text-gray-600\">Minification</span>\n              <span className=\"text-sm font-medium text-green-600\">Enabled</span>\n            </div>\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm text-gray-600\">Unused Code</span>\n              <span className=\"text-sm font-medium text-yellow-600\">12KB</span>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white border rounded-lg p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"font-semibold text-gray-900\">Asset Optimization</h3>\n            <Monitor className=\"h-5 w-5 text-blue-600\" />\n          </div>\n          <div className=\"space-y-3\">\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm text-gray-600\">Image Compression</span>\n              <span className=\"text-sm font-medium text-green-600\">WebP</span>\n            </div>\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm text-gray-600\">Lazy Loading</span>\n              <span className=\"text-sm font-medium text-green-600\">Active</span>\n            </div>\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm text-gray-600\">CDN Cache Hit</span>\n              <span className=\"text-sm font-medium text-green-600\">94%</span>\n            </div>\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm text-gray-600\">Compression</span>\n              <span className=\"text-sm font-medium text-green-600\">Brotli</span>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white border rounded-lg p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"font-semibold text-gray-900\">Network Performance</h3>\n            <Activity className=\"h-5 w-5 text-blue-600\" />\n          </div>\n          <div className=\"space-y-3\">\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm text-gray-600\">HTTP/2</span>\n              <span className=\"text-sm font-medium text-green-600\">Enabled</span>\n            </div>\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm text-gray-600\">Keep-Alive</span>\n              <span className=\"text-sm font-medium text-green-600\">Active</span>\n            </div>\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm text-gray-600\">Avg Response</span>\n              <span className=\"text-sm font-medium text-green-600\">145ms</span>\n            </div>\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm text-gray-600\">DNS Lookup</span>\n              <span className=\"text-sm font-medium text-green-600\">12ms</span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Performance Recommendations */}\n      <div className=\"bg-white border rounded-lg p-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Performance Recommendations</h3>\n        <div className=\"space-y-4\">\n          {[\n            {\n              type: 'optimization',\n              priority: 'high',\n              title: 'Reduce JavaScript Bundle Size',\n              description: 'Remove unused dependencies and implement better code splitting',\n              impact: '+5 performance score',\n              effort: 'Medium'\n            },\n            {\n              type: 'optimization',\n              priority: 'medium',\n              title: 'Optimize Image Loading',\n              description: 'Implement progressive JPEG and next-gen formats',\n              impact: '+2 performance score',\n              effort: 'Low'\n            },\n            {\n              type: 'accessibility',\n              priority: 'medium',\n              title: 'Improve Color Contrast',\n              description: 'Ensure all text meets WCAG AA standards',\n              impact: '+3 accessibility score',\n              effort: 'Low'\n            },\n            {\n              type: 'seo',\n              priority: 'low',\n              title: 'Add Structured Data',\n              description: 'Implement JSON-LD for better search engine understanding',\n              impact: '+4 SEO score',\n              effort: 'Medium'\n            }\n          ]?.map((rec, index) => (\n            <div key={index} className=\"flex items-start space-x-4 p-4 border border-gray-200 rounded-lg\">\n              <div className={`w-2 h-2 rounded-full mt-2 ${\n                rec?.priority === 'high' ? 'bg-red-500' :\n                rec?.priority === 'medium' ? 'bg-yellow-500' : 'bg-green-500'\n              }`} />\n              <div className=\"flex-1\">\n                <div className=\"flex items-center justify-between mb-1\">\n                  <h4 className=\"font-medium text-gray-900\">{rec?.title}</h4>\n                  <div className=\"flex items-center space-x-2\">\n                    <span className=\"text-xs text-green-600 bg-green-50 px-2 py-1 rounded\">\n                      {rec?.impact}\n                    </span>\n                    <span className=\"text-xs text-blue-600 bg-blue-50 px-2 py-1 rounded\">\n                      {rec?.effort} effort\n                    </span>\n                  </div>\n                </div>\n                <p className=\"text-sm text-gray-600\">{rec?.description}</p>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PerformanceMetricsDashboard;","size_bytes":15128},"src/pages/performance-optimization-and-production-deployment-center/components/RealtimeStabilityMonitor.jsx":{"content":"import React, { useEffect } from 'react';\n\nconst RealtimeStabilityMonitor = () => {\n  React.useEffect(() => {\n    // eslint-disable-next-line no-console\n    console.warn('Placeholder: RealtimeStabilityMonitor is not implemented yet.');\n  }, []);\n  return (\n    <>\n  { /*RealtimeStabilityMonitor */} \n </>\n  );\n};\n\nexport default RealtimeStabilityMonitor;\n","size_bytes":355},"src/pages/performance-optimization-and-production-deployment-center/components/SecurityHeadersValidation.jsx":{"content":"import React, { useEffect } from 'react';\n\nconst SecurityHeadersValidation = () => {\n  React.useEffect(() => {\n    // eslint-disable-next-line no-console\n    console.warn('Placeholder: SecurityHeadersValidation is not implemented yet.');\n  }, []);\n  return (\n    <>\n  { /*SecurityHeadersValidation */} \n </>\n  );\n};\n\nexport default SecurityHeadersValidation;\n","size_bytes":359},"src/pages/performance-optimization-and-production-deployment-center/components/StagingEnvironmentControls.jsx":{"content":"import React, { useEffect } from 'react';\n\nconst StagingEnvironmentControls = () => {\n  React.useEffect(() => {\n    // eslint-disable-next-line no-console\n    console.warn('Placeholder: StagingEnvironmentControls is not implemented yet.');\n  }, []);\n  return (\n    <>\n  { /*StagingEnvironmentControls */} \n </>\n  );\n};\n\nexport default StagingEnvironmentControls;\n","size_bytes":363},"src/pages/performance-optimization-and-production-deployment-center/components/VirtualizationControls.jsx":{"content":"import React, { useState, useCallback, useMemo } from 'react';\nimport { Monitor, Activity, Settings, Play, Zap, BarChart3, AlertTriangle, CheckCircle, List, Clock, TrendingUp } from 'lucide-react';\n\nconst VirtualizationControls = ({ performanceData, onRefresh }) => {\n  const [virtualizationSettings, setVirtualizationSettings] = useState({\n    enabled: true,\n    itemHeight: 50,\n    overscan: 5,\n    threshold: 200,\n    strategy: 'fixed'\n  });\n\n  const [testData] = useState({\n    totalItems: 10000,\n    visibleItems: 20,\n    renderTime: '2.3ms',\n    memoryUsage: '45MB',\n    scrollPerformance: 98\n  });\n\n  const virtualizationStrategies = useMemo(() => [\n    {\n      id: 'fixed',\n      name: 'Fixed Height',\n      description: 'All items have the same height - fastest performance',\n      performance: 'Excellent',\n      useCase: 'Simple lists with uniform items'\n    },\n    {\n      id: 'variable',\n      name: 'Variable Height',\n      description: 'Items can have different heights - measured dynamically',\n      performance: 'Good',\n      useCase: 'Complex cards or variable content'\n    },\n    {\n      id: 'dynamic',\n      name: 'Dynamic Height',\n      description: 'Heights calculated on-the-fly - most flexible',\n      performance: 'Fair',\n      useCase: 'Extremely variable content'\n    }\n  ], []);\n\n  const performanceMetrics = useMemo(() => [\n    {\n      name: 'Render Time',\n      value: testData?.renderTime,\n      status: 'excellent',\n      target: '< 5ms',\n      description: 'Time to render visible items'\n    },\n    {\n      name: 'Memory Usage',\n      value: testData?.memoryUsage,\n      status: 'good',\n      target: '< 100MB',\n      description: 'DOM nodes and JS heap usage'\n    },\n    {\n      name: 'Scroll FPS',\n      value: `${testData?.scrollPerformance}`,\n      status: 'excellent',\n      target: '> 90',\n      description: 'Frames per second during scrolling'\n    },\n    {\n      name: 'Visible Items',\n      value: `${testData?.visibleItems}/${testData?.totalItems}`,\n      status: 'optimal',\n      target: '< 50',\n      description: 'Rendered vs total items ratio'\n    }\n  ], [testData]);\n\n  const handleSettingsChange = useCallback((key, value) => {\n    setVirtualizationSettings(prev => ({\n      ...prev,\n      [key]: value\n    }));\n  }, []);\n\n  const runPerformanceTest = useCallback(async () => {\n    console.log('Running virtualization performance test...');\n    // Simulate performance test\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    onRefresh?.();\n  }, [onRefresh]);\n\n  const getStatusColor = (status) => {\n    switch (status) {\n      case 'excellent':\n        return 'text-green-600 bg-green-50';\n      case 'good':\n        return 'text-blue-600 bg-blue-50';\n      case 'optimal':\n        return 'text-purple-600 bg-purple-50';\n      case 'warning':\n        return 'text-yellow-600 bg-yellow-50';\n      case 'poor':\n        return 'text-red-600 bg-red-50';\n      default:\n        return 'text-gray-600 bg-gray-50';\n    }\n  };\n\n  const getStatusIcon = (status) => {\n    switch (status) {\n      case 'excellent': case'good': case'optimal':\n        return <CheckCircle className=\"h-4 w-4\" />;\n      case 'warning':\n        return <AlertTriangle className=\"h-4 w-4\" />;\n      case 'poor':\n        return <AlertTriangle className=\"h-4 w-4\" />;\n      default:\n        return <Activity className=\"h-4 w-4\" />;\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Virtualization Overview */}\n      <div className=\"bg-gray-50 rounded-lg p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div>\n            <h3 className=\"text-lg font-semibold text-gray-900\">List Virtualization Control</h3>\n            <p className=\"text-sm text-gray-600 mt-1\">\n              Optimize large dataset rendering with virtual scrolling and pagination controls\n            </p>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <div className={`px-3 py-1 rounded-full text-xs font-medium ${\n              virtualizationSettings?.enabled \n                ? 'text-green-600 bg-green-50' :'text-gray-600 bg-gray-50'\n            }`}>\n              {virtualizationSettings?.enabled ? 'Enabled' : 'Disabled'}\n            </div>\n            <button\n              onClick={() => handleSettingsChange('enabled', !virtualizationSettings?.enabled)}\n              className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${\n                virtualizationSettings?.enabled \n                  ? 'bg-red-600 text-white hover:bg-red-700' :'bg-green-600 text-white hover:bg-green-700'\n              }`}\n            >\n              {virtualizationSettings?.enabled ? 'Disable' : 'Enable'}\n            </button>\n          </div>\n        </div>\n\n        {/* Performance Metrics */}\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n          {performanceMetrics?.map((metric) => (\n            <div key={metric?.name} className=\"bg-white border rounded-lg p-4\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <div className={`inline-flex items-center space-x-1 px-2 py-1 rounded text-xs font-medium ${getStatusColor(metric?.status)}`}>\n                  {getStatusIcon(metric?.status)}\n                  <span>{metric?.status}</span>\n                </div>\n              </div>\n              <div className=\"text-2xl font-bold text-gray-900 mb-1\">\n                {metric?.value}\n              </div>\n              <div className=\"text-xs text-gray-600 mb-2\">\n                Target: {metric?.target}\n              </div>\n              <div className=\"text-xs text-gray-500\">\n                {metric?.description}\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n      {/* Virtualization Settings */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <div className=\"bg-white border rounded-lg p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">Configuration</h3>\n            <Settings className=\"h-5 w-5 text-gray-400\" />\n          </div>\n          \n          <div className=\"space-y-6\">\n            {/* Strategy Selection */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-3\">\n                Virtualization Strategy\n              </label>\n              <div className=\"space-y-2\">\n                {virtualizationStrategies?.map((strategy) => (\n                  <div key={strategy?.id} className=\"relative\">\n                    <label className=\"flex items-start space-x-3 cursor-pointer p-3 border border-gray-200 rounded-lg hover:bg-gray-50\">\n                      <input\n                        type=\"radio\"\n                        name=\"strategy\"\n                        value={strategy?.id}\n                        checked={virtualizationSettings?.strategy === strategy?.id}\n                        onChange={(e) => handleSettingsChange('strategy', e?.target?.value)}\n                        className=\"mt-1\"\n                      />\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"font-medium text-gray-900\">{strategy?.name}</span>\n                          <span className={`text-xs px-2 py-1 rounded ${\n                            strategy?.performance === 'Excellent' ? 'text-green-600 bg-green-50' :\n                            strategy?.performance === 'Good'? 'text-blue-600 bg-blue-50' : 'text-yellow-600 bg-yellow-50'\n                          }`}>\n                            {strategy?.performance}\n                          </span>\n                        </div>\n                        <p className=\"text-sm text-gray-600 mt-1\">{strategy?.description}</p>\n                        <p className=\"text-xs text-gray-500 mt-1\">Use for: {strategy?.useCase}</p>\n                      </div>\n                    </label>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Item Height */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Item Height (px)\n              </label>\n              <input\n                type=\"number\"\n                min=\"20\"\n                max=\"200\"\n                value={virtualizationSettings?.itemHeight}\n                onChange={(e) => handleSettingsChange('itemHeight', parseInt(e?.target?.value))}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              />\n              <p className=\"text-xs text-gray-500 mt-1\">\n                Average height for fixed strategy, initial estimate for variable\n              </p>\n            </div>\n\n            {/* Overscan */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Overscan Items\n              </label>\n              <input\n                type=\"number\"\n                min=\"0\"\n                max=\"20\"\n                value={virtualizationSettings?.overscan}\n                onChange={(e) => handleSettingsChange('overscan', parseInt(e?.target?.value))}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              />\n              <p className=\"text-xs text-gray-500 mt-1\">\n                Extra items to render outside viewport for smoother scrolling\n              </p>\n            </div>\n\n            {/* Threshold */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Virtualization Threshold\n              </label>\n              <input\n                type=\"number\"\n                min=\"50\"\n                max=\"1000\"\n                step=\"50\"\n                value={virtualizationSettings?.threshold}\n                onChange={(e) => handleSettingsChange('threshold', parseInt(e?.target?.value))}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              />\n              <p className=\"text-xs text-gray-500 mt-1\">\n                Minimum number of items before virtualization is enabled\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Performance Testing */}\n        <div className=\"bg-white border rounded-lg p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">Performance Testing</h3>\n            <BarChart3 className=\"h-5 w-5 text-gray-400\" />\n          </div>\n\n          <div className=\"space-y-4\">\n            <div className=\"bg-gray-50 rounded-lg p-4\">\n              <h4 className=\"font-medium text-gray-900 mb-2\">Current Configuration</h4>\n              <div className=\"space-y-1 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Strategy:</span>\n                  <span className=\"font-medium capitalize\">{virtualizationSettings?.strategy}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Item Height:</span>\n                  <span className=\"font-medium\">{virtualizationSettings?.itemHeight}px</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Overscan:</span>\n                  <span className=\"font-medium\">{virtualizationSettings?.overscan} items</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Threshold:</span>\n                  <span className=\"font-medium\">{virtualizationSettings?.threshold} items</span>\n                </div>\n              </div>\n            </div>\n\n            <button\n              onClick={runPerformanceTest}\n              className=\"w-full bg-blue-600 text-white px-4 py-2 rounded-md text-sm font-medium hover:bg-blue-700 transition-colors flex items-center justify-center space-x-2\"\n            >\n              <Play className=\"h-4 w-4\" />\n              <span>Run Performance Test</span>\n            </button>\n\n            <div className=\"space-y-3\">\n              <h4 className=\"font-medium text-gray-900\">Test Scenarios</h4>\n              \n              {[\n                { name: 'Small Dataset', items: '< 100 items', recommendation: 'Virtualization not needed' },\n                { name: 'Medium Dataset', items: '100-1000 items', recommendation: 'Fixed height virtualization' },\n                { name: 'Large Dataset', items: '1000-10000 items', recommendation: 'Variable height with optimization' },\n                { name: 'Huge Dataset', items: '> 10000 items', recommendation: 'Server-side pagination + virtualization' }\n              ]?.map((scenario, index) => (\n                <div key={index} className=\"flex items-start space-x-3 p-3 bg-gray-50 rounded\">\n                  <div className={`w-2 h-2 rounded-full mt-2 ${\n                    index === 2 ? 'bg-blue-500' : 'bg-gray-400'\n                  }`} />\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"font-medium text-gray-900\">{scenario?.name}</span>\n                      <span className=\"text-xs text-gray-500\">{scenario?.items}</span>\n                    </div>\n                    <p className=\"text-xs text-gray-600 mt-1\">{scenario?.recommendation}</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n      {/* Implementation Examples */}\n      <div className=\"bg-white border rounded-lg p-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Implementation Guidelines</h3>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <div>\n            <h4 className=\"font-medium text-gray-900 mb-3\">When to Use Virtualization</h4>\n            <div className=\"space-y-2 text-sm\">\n              <div className=\"flex items-center space-x-2\">\n                <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                <span>Lists with 200+ items</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                <span>Tables with large datasets</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                <span>Chat conversations</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                <span>Social media feeds</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <AlertTriangle className=\"h-4 w-4 text-yellow-500\" />\n                <span>Avoid for small, static lists</span>\n              </div>\n            </div>\n          </div>\n\n          <div>\n            <h4 className=\"font-medium text-gray-900 mb-3\">Best Practices</h4>\n            <div className=\"space-y-2 text-sm\">\n              <div className=\"flex items-center space-x-2\">\n                <Zap className=\"h-4 w-4 text-blue-500\" />\n                <span>Use fixed heights when possible</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Monitor className=\"h-4 w-4 text-blue-500\" />\n                <span>Implement pagination for huge datasets</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Clock className=\"h-4 w-4 text-blue-500\" />\n                <span>Debounce scroll events</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <TrendingUp className=\"h-4 w-4 text-blue-500\" />\n                <span>Monitor performance metrics</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Activity className=\"h-4 w-4 text-blue-500\" />\n                <span>Use React.memo for list items</span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"mt-6 p-4 bg-blue-50 rounded-lg\">\n          <div className=\"flex items-start space-x-3\">\n            <Activity className=\"h-5 w-5 text-blue-600 mt-0.5\" />\n            <div>\n              <h4 className=\"font-medium text-blue-900 mb-1\">Performance Impact</h4>\n              <p className=\"text-sm text-blue-700\">\n                Proper virtualization can improve performance by 10-100x for large lists, \n                reducing memory usage from GB to MB and maintaining smooth 60fps scrolling.\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default VirtualizationControls;","size_bytes":17134},"src/pages/personalized-worker-dashboard-with-site-integration-and-team-collaboration/components/AttendanceActionButtons.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Clock, LogIn, LogOut, Coffee, Square, MapPin } from 'lucide-react';\n\nexport default function AttendanceActionButtons({ todayAttendance, onAction }) {\n  const [currentTime, setCurrentTime] = useState(new Date());\n  const [location, setLocation] = useState('');\n  const [notes, setNotes] = useState('');\n  const [showLocationModal, setShowLocationModal] = useState(false);\n  const [pendingAction, setPendingAction] = useState(null);\n  const [gettingLocation, setGettingLocation] = useState(false);\n\n  // Update current time every second\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setCurrentTime(new Date());\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, []);\n\n  // Get current location\n  const getCurrentLocation = () => {\n    setGettingLocation(true);\n    if (navigator.geolocation) {\n      navigator.geolocation?.getCurrentPosition(\n        (position) => {\n          const { latitude, longitude } = position?.coords;\n          setLocation(`${latitude?.toFixed(6)}, ${longitude?.toFixed(6)}`);\n          setGettingLocation(false);\n        },\n        (error) => {\n          setLocation('Ubicación no disponible');\n          setGettingLocation(false);\n        }\n      );\n    } else {\n      setLocation('Geolocalización no soportada');\n      setGettingLocation(false);\n    }\n  };\n\n  const handleActionClick = (action) => {\n    if (action === 'clock_in' || action === 'clock_out') {\n      setPendingAction(action);\n      setShowLocationModal(true);\n      setLocation('');\n      setNotes('');\n    } else {\n      onAction(action);\n    }\n  };\n\n  const handleConfirmAction = () => {\n    if (pendingAction) {\n      onAction(pendingAction, location, notes);\n      setShowLocationModal(false);\n      setPendingAction(null);\n      setLocation('');\n      setNotes('');\n    }\n  };\n\n  const isClockInDisabled = todayAttendance?.clock_in && !todayAttendance?.clock_out;\n  const isClockOutDisabled = !todayAttendance?.clock_in || todayAttendance?.clock_out;\n  const isLunchStartDisabled = !todayAttendance?.clock_in || todayAttendance?.lunch_start;\n  const isLunchEndDisabled = !todayAttendance?.lunch_start || todayAttendance?.lunch_end;\n\n  // Calculate hours worked today\n  const calculateHoursWorked = () => {\n    if (!todayAttendance?.clock_in) return '0:00';\n    \n    const clockIn = new Date(todayAttendance?.clock_in);\n    const clockOut = todayAttendance?.clock_out ? new Date(todayAttendance?.clock_out) : new Date();\n    \n    let totalMinutes = (clockOut - clockIn) / (1000 * 60);\n    \n    // Subtract lunch break if exists\n    if (todayAttendance?.lunch_start && todayAttendance?.lunch_end) {\n      const lunchStart = new Date(todayAttendance?.lunch_start);\n      const lunchEnd = new Date(todayAttendance?.lunch_end);\n      const lunchMinutes = (lunchEnd - lunchStart) / (1000 * 60);\n      totalMinutes -= lunchMinutes;\n    }\n    \n    const hours = Math.floor(totalMinutes / 60);\n    const minutes = Math.floor(totalMinutes % 60);\n    return `${hours}:${minutes?.toString()?.padStart(2, '0')}`;\n  };\n\n  return (\n    <>\n      <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <h3 className=\"text-lg font-semibold text-gray-900\">\n              Control de Asistencia\n            </h3>\n            <p className=\"text-sm text-gray-600\">\n              {currentTime.toLocaleTimeString('es-ES')} - {currentTime.toLocaleDateString('es-ES')}\n            </p>\n          </div>\n          \n          {/* Hours worked today */}\n          <div className=\"text-right\">\n            <div className=\"text-2xl font-bold text-blue-600\">\n              {calculateHoursWorked()}\n            </div>\n            <p className=\"text-sm text-gray-600\">Horas trabajadas hoy</p>\n          </div>\n        </div>\n\n        {/* Current Status */}\n        <div className=\"bg-gray-50 rounded-lg p-4 mb-6\">\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-center\">\n            <div>\n              <div className=\"text-xs text-gray-600 mb-1\">Entrada</div>\n              <div className={`text-sm font-medium ${\n                todayAttendance?.clock_in ? 'text-green-600' : 'text-gray-400'\n              }`}>\n                {todayAttendance?.clock_in ? \n                  new Date(todayAttendance?.clock_in)?.toLocaleTimeString('es-ES', { \n                    hour: '2-digit', \n                    minute: '2-digit' \n                  }) : \n                  '--:--'\n                }\n              </div>\n            </div>\n            \n            <div>\n              <div className=\"text-xs text-gray-600 mb-1\">Comida</div>\n              <div className={`text-sm font-medium ${\n                todayAttendance?.lunch_start ? 'text-orange-600' : 'text-gray-400'\n              }`}>\n                {todayAttendance?.lunch_start && todayAttendance?.lunch_end ? 'Terminada' : todayAttendance?.lunch_start ?'En comida' : '--:--'\n                }\n              </div>\n            </div>\n            \n            <div>\n              <div className=\"text-xs text-gray-600 mb-1\">Salida</div>\n              <div className={`text-sm font-medium ${\n                todayAttendance?.clock_out ? 'text-red-600' : 'text-gray-400'\n              }`}>\n                {todayAttendance?.clock_out ? \n                  new Date(todayAttendance?.clock_out)?.toLocaleTimeString('es-ES', { \n                    hour: '2-digit', \n                    minute: '2-digit' \n                  }) : \n                  '--:--'\n                }\n              </div>\n            </div>\n            \n            <div>\n              <div className=\"text-xs text-gray-600 mb-1\">Estado</div>\n              <span className={`inline-flex px-2 py-1 text-xs font-medium rounded-full ${\n                todayAttendance?.clock_out ? 'bg-gray-100 text-gray-800' : todayAttendance?.lunch_start && !todayAttendance?.lunch_end ?'bg-orange-100 text-orange-800': todayAttendance?.clock_in ?'bg-green-100 text-green-800': 'bg-red-100 text-red-800'\n              }`}>\n                {todayAttendance?.clock_out ? 'Finalizado' :\n                 todayAttendance?.lunch_start && !todayAttendance?.lunch_end ? 'En comida': todayAttendance?.clock_in ?'Trabajando': 'Sin entrada'\n                }\n              </span>\n            </div>\n          </div>\n        </div>\n\n        {/* Action Buttons */}\n        <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-4\">\n          {/* Clock In */}\n          <button\n            onClick={() => handleActionClick('clock_in')}\n            disabled={isClockInDisabled}\n            className={`flex flex-col items-center justify-center p-4 rounded-lg border-2 transition-all ${\n              isClockInDisabled\n                ? 'border-gray-200 bg-gray-50 text-gray-400 cursor-not-allowed' :'border-green-200 bg-green-50 text-green-700 hover:bg-green-100 hover:border-green-300'\n            }`}\n          >\n            <LogIn className=\"h-8 w-8 mb-2\" />\n            <span className=\"text-sm font-medium\">Entrada</span>\n            <span className=\"text-xs opacity-75 mt-1\">\n              {isClockInDisabled ? 'Ya registrada' : 'Marcar llegada'}\n            </span>\n          </button>\n\n          {/* Clock Out */}\n          <button\n            onClick={() => handleActionClick('clock_out')}\n            disabled={isClockOutDisabled}\n            className={`flex flex-col items-center justify-center p-4 rounded-lg border-2 transition-all ${\n              isClockOutDisabled\n                ? 'border-gray-200 bg-gray-50 text-gray-400 cursor-not-allowed' :'border-red-200 bg-red-50 text-red-700 hover:bg-red-100 hover:border-red-300'\n            }`}\n          >\n            <LogOut className=\"h-8 w-8 mb-2\" />\n            <span className=\"text-sm font-medium\">Salida</span>\n            <span className=\"text-xs opacity-75 mt-1\">\n              {isClockOutDisabled ? 'No disponible' : 'Marcar salida'}\n            </span>\n          </button>\n\n          {/* Lunch Start */}\n          <button\n            onClick={() => handleActionClick('lunch_start')}\n            disabled={isLunchStartDisabled}\n            className={`flex flex-col items-center justify-center p-4 rounded-lg border-2 transition-all ${\n              isLunchStartDisabled\n                ? 'border-gray-200 bg-gray-50 text-gray-400 cursor-not-allowed' :'border-orange-200 bg-orange-50 text-orange-700 hover:bg-orange-100 hover:border-orange-300'\n            }`}\n          >\n            <Coffee className=\"h-8 w-8 mb-2\" />\n            <span className=\"text-sm font-medium\">Iniciar Comida</span>\n            <span className=\"text-xs opacity-75 mt-1\">\n              {isLunchStartDisabled ? 'No disponible' : 'Marcar inicio'}\n            </span>\n          </button>\n\n          {/* Lunch End */}\n          <button\n            onClick={() => handleActionClick('lunch_end')}\n            disabled={isLunchEndDisabled}\n            className={`flex flex-col items-center justify-center p-4 rounded-lg border-2 transition-all ${\n              isLunchEndDisabled\n                ? 'border-gray-200 bg-gray-50 text-gray-400 cursor-not-allowed' :'border-blue-200 bg-blue-50 text-blue-700 hover:bg-blue-100 hover:border-blue-300'\n            }`}\n          >\n            <Square className=\"h-8 w-8 mb-2\" />\n            <span className=\"text-sm font-medium\">Terminar Comida</span>\n            <span className=\"text-xs opacity-75 mt-1\">\n              {isLunchEndDisabled ? 'No disponible' : 'Regresar trabajo'}\n            </span>\n          </button>\n        </div>\n\n        {/* GPS Notice */}\n        <div className=\"mt-4 bg-blue-50 border border-blue-200 rounded-lg p-3\">\n          <div className=\"flex items-start space-x-2\">\n            <MapPin className=\"h-4 w-4 text-blue-600 mt-0.5\" />\n            <div>\n              <p className=\"text-sm text-blue-800\">\n                <strong>Verificación de Ubicación:</strong> Las marcas de entrada y salida \n                incluyen verificación de ubicación GPS para mayor precisión.\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n      {/* Location Modal */}\n      {showLocationModal && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n          <div className=\"bg-white rounded-lg shadow-xl max-w-md w-full p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n              {pendingAction === 'clock_in' ? 'Confirmar Entrada' : 'Confirmar Salida'}\n            </h3>\n            \n            <div className=\"space-y-4\">\n              {/* Location */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Ubicación\n                </label>\n                <div className=\"flex space-x-2\">\n                  <input\n                    type=\"text\"\n                    value={location}\n                    onChange={(e) => setLocation(e?.target?.value)}\n                    placeholder=\"Ubicación automática o manual\"\n                    className=\"flex-1 px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  />\n                  <button\n                    onClick={getCurrentLocation}\n                    disabled={gettingLocation}\n                    className=\"px-3 py-2 bg-blue-600 text-white rounded-lg text-sm hover:bg-blue-700 disabled:bg-gray-400\"\n                  >\n                    {gettingLocation ? '...' : 'GPS'}\n                  </button>\n                </div>\n              </div>\n\n              {/* Notes */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Notas (opcional)\n                </label>\n                <textarea\n                  value={notes}\n                  onChange={(e) => setNotes(e?.target?.value)}\n                  placeholder=\"Observaciones adicionales...\"\n                  rows={3}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                />\n              </div>\n            </div>\n\n            {/* Actions */}\n            <div className=\"flex space-x-3 mt-6\">\n              <button\n                onClick={() => {\n                  setShowLocationModal(false);\n                  setPendingAction(null);\n                }}\n                className=\"flex-1 px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50\"\n              >\n                Cancelar\n              </button>\n              <button\n                onClick={handleConfirmAction}\n                className={`flex-1 px-4 py-2 text-white rounded-lg ${\n                  pendingAction === 'clock_in' ?'bg-green-600 hover:bg-green-700' :'bg-red-600 hover:bg-red-700'\n                }`}\n              >\n                {pendingAction === 'clock_in' ? 'Marcar Entrada' : 'Marcar Salida'}\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n}","size_bytes":13143},"src/pages/personalized-worker-dashboard-with-site-integration-and-team-collaboration/components/CoworkersList.jsx":{"content":"import React, { useState } from 'react';\nimport { Users, Phone, User, ChevronDown, ChevronUp } from 'lucide-react';\n\nexport default function CoworkersList({ coworkers, siteInfo }) {\n  const [expanded, setExpanded] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('');\n\n  if (!coworkers || coworkers?.length === 0) {\n    return (\n      <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-semibold text-gray-900\">\n            Compañeros de Trabajo\n          </h3>\n          <Users className=\"h-5 w-5 text-gray-400\" />\n        </div>\n        \n        <div className=\"text-center py-8\">\n          <Users className=\"h-12 w-12 text-gray-300 mx-auto mb-3\" />\n          <p className=\"text-gray-500\">\n            No hay compañeros en este sitio\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  const filteredCoworkers = coworkers?.filter(coworker =>\n    coworker?.full_name?.toLowerCase()?.includes(searchTerm?.toLowerCase()) ||\n    coworker?.position?.toLowerCase()?.includes(searchTerm?.toLowerCase())\n  ) || [];\n\n  const displayedCoworkers = expanded ? filteredCoworkers : filteredCoworkers?.slice(0, 4);\n\n  const getStatusColor = (lastSignIn) => {\n    if (!lastSignIn) return 'bg-gray-100 text-gray-600';\n    \n    const now = new Date();\n    const signInDate = new Date(lastSignIn);\n    const diffHours = (now - signInDate) / (1000 * 60 * 60);\n    \n    if (diffHours <= 8) return 'bg-green-100 text-green-700';\n    if (diffHours <= 24) return 'bg-yellow-100 text-yellow-700';\n    return 'bg-gray-100 text-gray-600';\n  };\n\n  const getStatusText = (lastSignIn) => {\n    if (!lastSignIn) return 'Sin actividad';\n    \n    const now = new Date();\n    const signInDate = new Date(lastSignIn);\n    const diffHours = (now - signInDate) / (1000 * 60 * 60);\n    \n    if (diffHours <= 1) return 'En línea';\n    if (diffHours <= 8) return 'Activo hoy';\n    if (diffHours <= 24) return 'Activo ayer';\n    return 'Inactivo';\n  };\n\n  return (\n    <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-4\">\n        <div>\n          <h3 className=\"text-lg font-semibold text-gray-900\">\n            Compañeros de Trabajo\n          </h3>\n          {siteInfo?.name && (\n            <p className=\"text-sm text-gray-600\">\n              en {siteInfo?.name}\n            </p>\n          )}\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <span className=\"text-sm text-gray-500\">\n            {coworkers?.length} personas\n          </span>\n          <Users className=\"h-5 w-5 text-gray-400\" />\n        </div>\n      </div>\n      {/* Search */}\n      {coworkers?.length > 4 && (\n        <div className=\"mb-4\">\n          <input\n            type=\"text\"\n            placeholder=\"Buscar compañeros...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e?.target?.value)}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n          />\n        </div>\n      )}\n      {/* Coworkers List */}\n      <div className=\"space-y-3\">\n        {displayedCoworkers?.map((coworker) => (\n          <div \n            key={coworker?.id}\n            className=\"flex items-center space-x-3 p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors\"\n          >\n            {/* Avatar */}\n            <div className=\"flex-shrink-0\">\n              <div className=\"h-10 w-10 rounded-full bg-blue-100 flex items-center justify-center\">\n                <User className=\"h-5 w-5 text-blue-600\" />\n              </div>\n            </div>\n\n            {/* Info */}\n            <div className=\"flex-1 min-w-0\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h4 className=\"text-sm font-medium text-gray-900 truncate\">\n                    {coworker?.full_name}\n                  </h4>\n                  <p className=\"text-xs text-gray-600 capitalize\">\n                    {coworker?.position || 'Sin posición'}\n                  </p>\n                </div>\n                \n                {/* Status indicator */}\n                <div className=\"text-right\">\n                  <span className={`inline-flex px-2 py-1 text-xs font-medium rounded-full ${\n                    getStatusColor(coworker?.user_profiles?.last_sign_in_at)\n                  }`}>\n                    {getStatusText(coworker?.user_profiles?.last_sign_in_at)}\n                  </span>\n                </div>\n              </div>\n\n              {/* Contact Info */}\n              <div className=\"mt-2 flex items-center space-x-4\">\n                {coworker?.phone && (\n                  <button\n                    onClick={() => window.open(`tel:${coworker?.phone}`)}\n                    className=\"flex items-center space-x-1 text-xs text-blue-600 hover:text-blue-700\"\n                  >\n                    <Phone className=\"h-3 w-3\" />\n                    <span>Llamar</span>\n                  </button>\n                )}\n                \n                {coworker?.user_profiles?.email && (\n                  <button\n                    onClick={() => window.open(`mailto:${coworker?.user_profiles?.email}`)}\n                    className=\"text-xs text-green-600 hover:text-green-700\"\n                  >\n                    Email\n                  </button>\n                )}\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n      {/* Show More/Less Button */}\n      {filteredCoworkers?.length > 4 && (\n        <div className=\"mt-4 text-center\">\n          <button\n            onClick={() => setExpanded(!expanded)}\n            className=\"inline-flex items-center space-x-1 text-sm text-blue-600 hover:text-blue-700\"\n          >\n            {expanded ? (\n              <>\n                <ChevronUp className=\"h-4 w-4\" />\n                <span>Ver menos</span>\n              </>\n            ) : (\n              <>\n                <ChevronDown className=\"h-4 w-4\" />\n                <span>Ver todos ({filteredCoworkers?.length})</span>\n              </>\n            )}\n          </button>\n        </div>\n      )}\n      {/* No Results */}\n      {searchTerm && filteredCoworkers?.length === 0 && (\n        <div className=\"text-center py-4\">\n          <p className=\"text-sm text-gray-500\">\n            No se encontraron compañeros con \"{searchTerm}\"\n          </p>\n        </div>\n      )}\n      {/* Team Collaboration Features */}\n      <div className=\"border-t border-gray-100 pt-4 mt-4\">\n        <h5 className=\"text-sm font-medium text-gray-700 mb-2\">\n          Colaboración Rápida\n        </h5>\n        <div className=\"grid grid-cols-2 gap-3\">\n          <button\n            onClick={() => {\n              const phones = coworkers\n                ?.filter(c => c?.phone)\n                ?.map(c => c?.phone)\n                ?.join(',');\n              if (phones) window.open(`sms:${phones}`);\n            }}\n            className=\"flex items-center justify-center px-3 py-2 text-sm bg-blue-50 text-blue-700 rounded-lg hover:bg-blue-100 transition-colors\"\n          >\n            <Phone className=\"h-4 w-4 mr-1\" />\n            Mensaje Grupal\n          </button>\n          \n          <button\n            onClick={() => {\n              const message = encodeURIComponent(`Hola equipo de ${siteInfo?.name || 'trabajo'}, necesito coordinar algo importante.`);\n              const phones = coworkers\n                ?.filter(c => c?.phone)\n                ?.map(c => c?.phone)\n                ?.join(',');\n              if (phones) window.open(`https://wa.me/?phone=${phones?.split(',')?.[0]}&text=${message}`);\n            }}\n            className=\"flex items-center justify-center px-3 py-2 text-sm bg-green-50 text-green-700 rounded-lg hover:bg-green-100 transition-colors\"\n          >\n            <Users className=\"h-4 w-4 mr-1\" />\n            WhatsApp\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":8140},"src/pages/personalized-worker-dashboard-with-site-integration-and-team-collaboration/components/PayrollSummaryCard.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { DollarSign, TrendingUp, Calculator, Calendar } from 'lucide-react';\n\nexport default function PayrollSummaryCard({ payrollEstimation, weeklyTimecard, workerProfile }) {\n  const [estimatedPayroll, setEstimatedPayroll] = useState(null);\n\n  useEffect(() => {\n    if (weeklyTimecard && workerProfile) {\n      calculateEstimatedPayroll();\n    }\n  }, [weeklyTimecard, workerProfile]);\n\n  const calculateEstimatedPayroll = () => {\n    const regularHours = parseFloat(weeklyTimecard?.totalRegularHours || 0);\n    const overtimeHours = parseFloat(weeklyTimecard?.totalOvertimeHours || 0);\n    \n    let baseRate = 0;\n    if (workerProfile?.salary_type === 'hourly') {\n      baseRate = parseFloat(workerProfile?.hourly_rate || 0);\n    } else {\n      // Convert daily salary to hourly (8 hours per day)\n      baseRate = parseFloat(workerProfile?.daily_salary || 0) / 8;\n    }\n\n    const basePay = baseRate * regularHours;\n    const overtimePay = baseRate * overtimeHours * 1.5; // 1.5x for overtime\n    const grossTotal = basePay + overtimePay;\n    const netTotal = grossTotal * 0.85; // Simplified deductions (15%)\n\n    setEstimatedPayroll({\n      regularHours,\n      overtimeHours,\n      basePay,\n      overtimePay,\n      grossTotal,\n      netTotal,\n      baseRate\n    });\n  };\n\n  const formatCurrency = (amount) => {\n    return new Intl.NumberFormat('es-MX', {\n      style: 'currency',\n      currency: 'MXN'\n    })?.format(amount || 0);\n  };\n\n  return (\n    <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900 flex items-center\">\n          <DollarSign className=\"h-5 w-5 mr-2\" />\n          Resumen de Nómina\n        </h3>\n        <div className=\"text-sm text-gray-600\">\n          Semana actual\n        </div>\n      </div>\n      {/* Current Week Estimation */}\n      {estimatedPayroll ? (\n        <div className=\"space-y-4\">\n          {/* Main amount display */}\n          <div className=\"text-center bg-gradient-to-r from-green-50 to-blue-50 rounded-lg p-4 border border-green-200\">\n            <div className=\"text-3xl font-bold text-green-600 mb-1\">\n              {formatCurrency(estimatedPayroll?.netTotal)}\n            </div>\n            <div className=\"text-sm text-gray-600\">\n              Estimación Neta Semanal\n            </div>\n            <div className=\"text-xs text-gray-500 mt-1\">\n              (Después de deducciones estimadas)\n            </div>\n          </div>\n\n          {/* Breakdown */}\n          <div className=\"space-y-3\">\n            <div className=\"flex justify-between items-center py-2 border-b border-gray-100\">\n              <span className=\"text-sm text-gray-600\">\n                Horas regulares ({estimatedPayroll?.regularHours?.toFixed(1)}h × {formatCurrency(estimatedPayroll?.baseRate)})\n              </span>\n              <span className=\"text-sm font-medium text-gray-900\">\n                {formatCurrency(estimatedPayroll?.basePay)}\n              </span>\n            </div>\n\n            {estimatedPayroll?.overtimeHours > 0 && (\n              <div className=\"flex justify-between items-center py-2 border-b border-gray-100\">\n                <span className=\"text-sm text-gray-600\">\n                  Horas extra ({estimatedPayroll?.overtimeHours?.toFixed(1)}h × {formatCurrency(estimatedPayroll?.baseRate * 1.5)})\n                </span>\n                <span className=\"text-sm font-medium text-orange-600\">\n                  {formatCurrency(estimatedPayroll?.overtimePay)}\n                </span>\n              </div>\n            )}\n\n            <div className=\"flex justify-between items-center py-2 border-b border-gray-100\">\n              <span className=\"text-sm font-semibold text-gray-700\">\n                Total Bruto\n              </span>\n              <span className=\"text-sm font-semibold text-blue-600\">\n                {formatCurrency(estimatedPayroll?.grossTotal)}\n              </span>\n            </div>\n\n            <div className=\"flex justify-between items-center py-2\">\n              <span className=\"text-sm text-gray-600\">\n                Deducciones estimadas (15%)\n              </span>\n              <span className=\"text-sm text-red-600\">\n                -{formatCurrency(estimatedPayroll?.grossTotal * 0.15)}\n              </span>\n            </div>\n          </div>\n\n          {/* Rate information */}\n          <div className=\"bg-blue-50 rounded-lg p-3 border border-blue-200\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-blue-800\">\n                {workerProfile?.salary_type === 'hourly' ? 'Tarifa por Hora' : 'Salario Diario'}\n              </span>\n              <span className=\"text-sm font-medium text-blue-900\">\n                {workerProfile?.salary_type === 'hourly' \n                  ? formatCurrency(workerProfile?.hourly_rate)\n                  : formatCurrency(workerProfile?.daily_salary)\n                }\n              </span>\n            </div>\n            {workerProfile?.salary_type !== 'hourly' && (\n              <div className=\"text-xs text-blue-700 mt-1\">\n                Equivale a {formatCurrency(estimatedPayroll?.baseRate)}/hora\n              </div>\n            )}\n          </div>\n        </div>\n      ) : (\n        <div className=\"text-center py-8\">\n          <Calculator className=\"h-12 w-12 text-gray-300 mx-auto mb-3\" />\n          <p className=\"text-gray-500 text-sm\">\n            No hay datos suficientes para calcular nómina\n          </p>\n          <p className=\"text-gray-400 text-xs mt-1\">\n            Complete las horas de trabajo para ver la estimación\n          </p>\n        </div>\n      )}\n      {/* Last official payroll (if available) */}\n      {payrollEstimation && (\n        <div className=\"border-t border-gray-100 pt-4 mt-4\">\n          <h5 className=\"text-sm font-medium text-gray-700 mb-3 flex items-center\">\n            <Calendar className=\"h-4 w-4 mr-1\" />\n            Último Pago Oficial\n          </h5>\n          \n          <div className=\"space-y-2 text-sm\">\n            <div className=\"flex justify-between\">\n              <span className=\"text-gray-600\">Semana:</span>\n              <span className=\"text-gray-900\">\n                {new Date(payrollEstimation?.week_start)?.toLocaleDateString('es-ES')} - {' '}\n                {new Date(payrollEstimation?.week_end)?.toLocaleDateString('es-ES')}\n              </span>\n            </div>\n            \n            <div className=\"flex justify-between\">\n              <span className=\"text-gray-600\">Horas trabajadas:</span>\n              <span className=\"text-gray-900\">\n                {parseFloat(payrollEstimation?.regular_hours || 0)?.toFixed(1)}h regular, {' '}\n                {parseFloat(payrollEstimation?.overtime_hours || 0)?.toFixed(1)}h extra\n              </span>\n            </div>\n            \n            <div className=\"flex justify-between\">\n              <span className=\"text-gray-600\">Monto neto:</span>\n              <span className=\"font-medium text-green-600\">\n                {formatCurrency(payrollEstimation?.net_total)}\n              </span>\n            </div>\n          </div>\n        </div>\n      )}\n      {/* Performance indicators */}\n      {estimatedPayroll && (\n        <div className=\"border-t border-gray-100 pt-4 mt-4\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"text-center\">\n              <div className=\"flex items-center justify-center space-x-1\">\n                <TrendingUp className=\"h-4 w-4 text-green-500\" />\n                <span className=\"text-sm font-medium text-gray-700\">\n                  Promedio/Día\n                </span>\n              </div>\n              <div className=\"text-lg font-bold text-green-600\">\n                {weeklyTimecard?.dailyRecords?.filter(r => r?.total_hours > 0)?.length > 0 \n                  ? formatCurrency(estimatedPayroll?.netTotal / weeklyTimecard?.dailyRecords?.filter(r => r?.total_hours > 0)?.length)\n                  : formatCurrency(0)\n                }\n              </div>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"flex items-center justify-center space-x-1\">\n                <DollarSign className=\"h-4 w-4 text-blue-500\" />\n                <span className=\"text-sm font-medium text-gray-700\">\n                  Extra/Mes*\n                </span>\n              </div>\n              <div className=\"text-lg font-bold text-blue-600\">\n                {formatCurrency((estimatedPayroll?.overtimePay || 0) * 4)}\n              </div>\n              <div className=\"text-xs text-gray-500\">*Estimado</div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":8833},"src/pages/personalized-worker-dashboard-with-site-integration-and-team-collaboration/components/PersonalInfoCard.jsx":{"content":"import React from 'react';\nimport { User, Phone, Mail, Calendar, Badge, MapPin } from 'lucide-react';\n\nexport default function PersonalInfoCard({ workerProfile, userProfile }) {\n  if (!workerProfile) {\n    return (\n      <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-4 bg-gray-200 rounded w-1/2 mb-4\"></div>\n          <div className=\"h-20 bg-gray-200 rounded mb-4\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <h3 className=\"text-lg font-semibold text-gray-900\">\n          Información Personal\n        </h3>\n        <User className=\"h-5 w-5 text-gray-400\" />\n      </div>\n      <div className=\"space-y-4\">\n        {/* Profile Photo and Name */}\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"flex-shrink-0\">\n            {workerProfile?.profile_picture_url ? (\n              <img\n                className=\"h-16 w-16 rounded-full object-cover border-2 border-gray-200\"\n                src={workerProfile?.profile_picture_url}\n                alt={workerProfile?.full_name}\n              />\n            ) : (\n              <div className=\"h-16 w-16 rounded-full bg-blue-100 flex items-center justify-center border-2 border-gray-200\">\n                <User className=\"h-8 w-8 text-blue-600\" />\n              </div>\n            )}\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <h4 className=\"text-xl font-semibold text-gray-900 truncate\">\n              {workerProfile?.full_name}\n            </h4>\n            <p className=\"text-sm text-gray-600\">\n              ID: {workerProfile?.employee_id}\n            </p>\n          </div>\n        </div>\n\n        {/* Contact Information */}\n        <div className=\"space-y-3\">\n          {userProfile?.email && (\n            <div className=\"flex items-center space-x-3\">\n              <Mail className=\"h-4 w-4 text-gray-400\" />\n              <span className=\"text-sm text-gray-600\">{userProfile?.email}</span>\n            </div>\n          )}\n          \n          {workerProfile?.phone && (\n            <div className=\"flex items-center space-x-3\">\n              <Phone className=\"h-4 w-4 text-gray-400\" />\n              <span className=\"text-sm text-gray-600\">{workerProfile?.phone}</span>\n            </div>\n          )}\n\n          {/* Position */}\n          <div className=\"flex items-center space-x-3\">\n            <Badge className=\"h-4 w-4 text-gray-400\" />\n            <span className=\"text-sm text-gray-600 capitalize\">\n              {workerProfile?.position || 'No asignado'}\n            </span>\n          </div>\n\n          {/* Hire Date */}\n          {workerProfile?.hire_date && (\n            <div className=\"flex items-center space-x-3\">\n              <Calendar className=\"h-4 w-4 text-gray-400\" />\n              <span className=\"text-sm text-gray-600\">\n                Inicio: {new Date(workerProfile?.hire_date)?.toLocaleDateString('es-ES')}\n              </span>\n            </div>\n          )}\n\n          {/* Address */}\n          {workerProfile?.address && (\n            <div className=\"flex items-start space-x-3\">\n              <MapPin className=\"h-4 w-4 text-gray-400 mt-0.5\" />\n              <span className=\"text-sm text-gray-600\">\n                {workerProfile?.address}\n              </span>\n            </div>\n          )}\n        </div>\n\n        {/* Emergency Contact */}\n        {workerProfile?.emergency_contact && (\n          <div className=\"border-t border-gray-100 pt-4\">\n            <h5 className=\"text-sm font-medium text-gray-700 mb-2\">\n              Contacto de Emergencia\n            </h5>\n            <p className=\"text-sm text-gray-600\">\n              {workerProfile?.emergency_contact}\n            </p>\n          </div>\n        )}\n\n        {/* Employment Status */}\n        <div className=\"border-t border-gray-100 pt-4\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm font-medium text-gray-700\">Estado</span>\n            <span className={`inline-flex px-2 py-1 text-xs font-medium rounded-full ${\n              workerProfile?.status === 'active' ?'bg-green-100 text-green-800' :'bg-red-100 text-red-800'\n            }`}>\n              {workerProfile?.status === 'active' ? 'Activo' : 'Inactivo'}\n            </span>\n          </div>\n\n          {/* Salary Information */}\n          <div className=\"mt-3 space-y-2\">\n            {workerProfile?.salary_type === 'hourly' ? (\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"text-gray-600\">Tarifa por Hora</span>\n                <span className=\"font-medium text-gray-900\">\n                  ${parseFloat(workerProfile?.hourly_rate || 0)?.toFixed(2)}\n                </span>\n              </div>\n            ) : (\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"text-gray-600\">Salario Diario</span>\n                <span className=\"font-medium text-gray-900\">\n                  ${parseFloat(workerProfile?.daily_salary || 0)?.toFixed(2)}\n                </span>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":5368},"src/pages/personalized-worker-dashboard-with-site-integration-and-team-collaboration/components/RecentIncidents.jsx":{"content":"import React, { useState } from 'react';\nimport { AlertTriangle, Plus, CheckCircle, XCircle, Clock } from 'lucide-react';\nimport { enhancedAttendanceService } from '../../../services/enhancedAttendanceService';\n\nexport default function RecentIncidents({ incidents, employeeId, onIncidentSubmitted }) {\n  const [showCreateModal, setShowCreateModal] = useState(false);\n  const [newIncident, setNewIncident] = useState({\n    type: 'falta',\n    date: new Date()?.toISOString()?.split('T')?.[0],\n    description: ''\n  });\n  const [submitting, setSubmitting] = useState(false);\n  const [error, setError] = useState('');\n\n  const handleSubmitIncident = async () => {\n    if (!newIncident?.description?.trim()) {\n      setError('La descripción es requerida');\n      return;\n    }\n\n    try {\n      setSubmitting(true);\n      setError('');\n      \n      const result = await enhancedAttendanceService?.submitIncident(employeeId, newIncident);\n      \n      if (result?.success) {\n        setShowCreateModal(false);\n        setNewIncident({\n          type: 'falta',\n          date: new Date()?.toISOString()?.split('T')?.[0],\n          description: ''\n        });\n        onIncidentSubmitted?.();\n      } else {\n        setError(result?.error || 'Error al enviar la incidencia');\n      }\n    } catch (error) {\n      setError(`Error: ${error?.message}`);\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  const getIncidentTypeLabel = (type) => {\n    const types = {\n      falta: 'Falta',\n      permiso: 'Permiso',\n      retardo: 'Retardo',\n      incapacidad: 'Incapacidad',\n      accidente: 'Accidente'\n    };\n    return types?.[type] || type;\n  };\n\n  const getIncidentTypeColor = (type) => {\n    const colors = {\n      falta: 'bg-red-100 text-red-800',\n      permiso: 'bg-blue-100 text-blue-800',\n      retardo: 'bg-yellow-100 text-yellow-800',\n      incapacidad: 'bg-purple-100 text-purple-800',\n      accidente: 'bg-red-100 text-red-800'\n    };\n    return colors?.[type] || 'bg-gray-100 text-gray-800';\n  };\n\n  const getStatusIcon = (status) => {\n    switch (status) {\n      case 'aprobado':\n        return <CheckCircle className=\"h-4 w-4 text-green-600\" />;\n      case 'rechazado':\n        return <XCircle className=\"h-4 w-4 text-red-600\" />;\n      default:\n        return <Clock className=\"h-4 w-4 text-yellow-600\" />;\n    }\n  };\n\n  const getStatusColor = (status) => {\n    switch (status) {\n      case 'aprobado':\n        return 'bg-green-100 text-green-800';\n      case 'rechazado':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-yellow-100 text-yellow-800';\n    }\n  };\n\n  const getStatusLabel = (status) => {\n    const labels = {\n      pendiente: 'Pendiente',\n      aprobado: 'Aprobado',\n      rechazado: 'Rechazado'\n    };\n    return labels?.[status] || status;\n  };\n\n  return (\n    <>\n      <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 flex items-center\">\n            <AlertTriangle className=\"h-5 w-5 mr-2\" />\n            Incidencias Recientes\n          </h3>\n          <button\n            onClick={() => setShowCreateModal(true)}\n            className=\"flex items-center space-x-2 px-3 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n          >\n            <Plus className=\"h-4 w-4\" />\n            <span className=\"text-sm\">Nueva</span>\n          </button>\n        </div>\n\n        {/* Incidents List */}\n        {incidents && incidents?.length > 0 ? (\n          <div className=\"space-y-3\">\n            {incidents?.map((incident) => (\n              <div \n                key={incident?.id}\n                className=\"border border-gray-200 rounded-lg p-4 hover:bg-gray-50 transition-colors\"\n              >\n                <div className=\"flex items-start justify-between mb-2\">\n                  <div className=\"flex items-center space-x-2\">\n                    <span className={`inline-flex px-2 py-1 text-xs font-medium rounded-full ${getIncidentTypeColor(incident?.type)}`}>\n                      {getIncidentTypeLabel(incident?.type)}\n                    </span>\n                    <span className=\"text-sm text-gray-600\">\n                      {new Date(incident?.date)?.toLocaleDateString('es-ES')}\n                    </span>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-2\">\n                    {getStatusIcon(incident?.status)}\n                    <span className={`inline-flex px-2 py-1 text-xs font-medium rounded-full ${getStatusColor(incident?.status)}`}>\n                      {getStatusLabel(incident?.status)}\n                    </span>\n                  </div>\n                </div>\n\n                <p className=\"text-sm text-gray-700 mb-2\">\n                  {incident?.description}\n                </p>\n\n                <div className=\"flex items-center justify-between text-xs text-gray-500\">\n                  <span>\n                    Creada: {new Date(incident?.created_at)?.toLocaleDateString('es-ES')}\n                  </span>\n                  \n                  {incident?.approved_at && incident?.approved_by_user?.full_name && (\n                    <span>\n                      {incident?.status === 'aprobado' ? 'Aprobada' : 'Rechazada'} por: {incident?.approved_by_user?.full_name}\n                    </span>\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <div className=\"text-center py-8\">\n            <AlertTriangle className=\"h-12 w-12 text-gray-300 mx-auto mb-3\" />\n            <p className=\"text-gray-500 text-sm\">\n              No hay incidencias registradas\n            </p>\n            <p className=\"text-gray-400 text-xs mt-1\">\n              Las incidencias incluyen faltas, permisos, retardos e incapacidades\n            </p>\n          </div>\n        )}\n\n        {/* Summary Stats */}\n        {incidents && incidents?.length > 0 && (\n          <div className=\"border-t border-gray-100 pt-4 mt-4\">\n            <div className=\"grid grid-cols-3 gap-4 text-center\">\n              <div>\n                <div className=\"text-sm font-medium text-yellow-600\">\n                  {incidents?.filter(i => i?.status === 'pendiente')?.length}\n                </div>\n                <div className=\"text-xs text-gray-600\">Pendientes</div>\n              </div>\n              <div>\n                <div className=\"text-sm font-medium text-green-600\">\n                  {incidents?.filter(i => i?.status === 'aprobado')?.length}\n                </div>\n                <div className=\"text-xs text-gray-600\">Aprobadas</div>\n              </div>\n              <div>\n                <div className=\"text-sm font-medium text-red-600\">\n                  {incidents?.filter(i => i?.status === 'rechazado')?.length}\n                </div>\n                <div className=\"text-xs text-gray-600\">Rechazadas</div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n      {/* Create Incident Modal */}\n      {showCreateModal && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n          <div className=\"bg-white rounded-lg shadow-xl max-w-md w-full p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n              Nueva Incidencia\n            </h3>\n            \n            {error && (\n              <div className=\"mb-4 bg-red-50 border border-red-200 rounded-lg p-3\">\n                <p className=\"text-sm text-red-700\">{error}</p>\n              </div>\n            )}\n\n            <div className=\"space-y-4\">\n              {/* Incident Type */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Tipo de Incidencia\n                </label>\n                <select\n                  value={newIncident?.type}\n                  onChange={(e) => setNewIncident({ ...newIncident, type: e?.target?.value })}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                >\n                  <option value=\"falta\">Falta</option>\n                  <option value=\"permiso\">Permiso</option>\n                  <option value=\"retardo\">Retardo</option>\n                  <option value=\"incapacidad\">Incapacidad</option>\n                  <option value=\"accidente\">Accidente</option>\n                </select>\n              </div>\n\n              {/* Date */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Fecha\n                </label>\n                <input\n                  type=\"date\"\n                  value={newIncident?.date}\n                  onChange={(e) => setNewIncident({ ...newIncident, date: e?.target?.value })}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                />\n              </div>\n\n              {/* Description */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Descripción *\n                </label>\n                <textarea\n                  value={newIncident?.description}\n                  onChange={(e) => setNewIncident({ ...newIncident, description: e?.target?.value })}\n                  placeholder=\"Describe la incidencia y el motivo...\"\n                  rows={4}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                />\n              </div>\n            </div>\n\n            {/* Actions */}\n            <div className=\"flex space-x-3 mt-6\">\n              <button\n                onClick={() => {\n                  setShowCreateModal(false);\n                  setError('');\n                }}\n                className=\"flex-1 px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50\"\n                disabled={submitting}\n              >\n                Cancelar\n              </button>\n              <button\n                onClick={handleSubmitIncident}\n                disabled={submitting || !newIncident?.description?.trim()}\n                className=\"flex-1 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-400\"\n              >\n                {submitting ? 'Enviando...' : 'Enviar'}\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n}","size_bytes":10688},"src/pages/personalized-worker-dashboard-with-site-integration-and-team-collaboration/components/SiteInfoCard.jsx":{"content":"import React from 'react';\nimport { MapPin, Building, User, Phone, AlertTriangle } from 'lucide-react';\n\nexport default function SiteInfoCard({ siteInfo, supervisor }) {\n  if (!siteInfo) {\n    return (\n      <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-semibold text-gray-900\">\n            Sitio de Trabajo\n          </h3>\n          <Building className=\"h-5 w-5 text-gray-400\" />\n        </div>\n        \n        <div className=\"text-center py-8\">\n          <Building className=\"h-12 w-12 text-gray-300 mx-auto mb-3\" />\n          <p className=\"text-gray-500\">\n            No hay sitio asignado\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <h3 className=\"text-lg font-semibold text-gray-900\">\n          Sitio de Trabajo\n        </h3>\n        <Building className=\"h-5 w-5 text-gray-400\" />\n      </div>\n\n      <div className=\"space-y-4\">\n        {/* Site Information */}\n        <div className=\"space-y-3\">\n          <div>\n            <h4 className=\"text-xl font-semibold text-gray-900 mb-1\">\n              {siteInfo?.name}\n            </h4>\n            {siteInfo?.description && (\n              <p className=\"text-sm text-gray-600\">\n                {siteInfo?.description}\n              </p>\n            )}\n          </div>\n\n          {/* Location */}\n          {siteInfo?.location && (\n            <div className=\"flex items-start space-x-3\">\n              <MapPin className=\"h-4 w-4 text-gray-400 mt-0.5\" />\n              <span className=\"text-sm text-gray-600\">\n                {siteInfo?.location}\n              </span>\n            </div>\n          )}\n\n          {/* Site Status */}\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm font-medium text-gray-700\">Estado del Sitio</span>\n            <span className={`inline-flex px-2 py-1 text-xs font-medium rounded-full ${\n              siteInfo?.is_active \n                ? 'bg-green-100 text-green-800' :'bg-red-100 text-red-800'\n            }`}>\n              {siteInfo?.is_active ? 'Activo' : 'Inactivo'}\n            </span>\n          </div>\n        </div>\n\n        {/* Supervisor Information */}\n        {supervisor ? (\n          <div className=\"border-t border-gray-100 pt-4\">\n            <h5 className=\"text-sm font-medium text-gray-700 mb-3 flex items-center\">\n              <User className=\"h-4 w-4 mr-2\" />\n              Supervisor Asignado\n            </h5>\n            \n            <div className=\"space-y-2\">\n              <p className=\"text-sm font-medium text-gray-900\">\n                {supervisor?.full_name}\n              </p>\n              \n              {supervisor?.email && (\n                <p className=\"text-sm text-gray-600\">\n                  {supervisor?.email}\n                </p>\n              )}\n              \n              {supervisor?.phone && (\n                <div className=\"flex items-center space-x-2\">\n                  <Phone className=\"h-3 w-3 text-gray-400\" />\n                  <span className=\"text-sm text-gray-600\">\n                    {supervisor?.phone}\n                  </span>\n                </div>\n              )}\n            </div>\n          </div>\n        ) : (\n          <div className=\"border-t border-gray-100 pt-4\">\n            <div className=\"flex items-center space-x-2 text-amber-600\">\n              <AlertTriangle className=\"h-4 w-4\" />\n              <span className=\"text-sm\">\n                Sin supervisor asignado\n              </span>\n            </div>\n          </div>\n        )}\n\n        {/* Quick Actions */}\n        <div className=\"border-t border-gray-100 pt-4\">\n          <div className=\"grid grid-cols-2 gap-3\">\n            {supervisor?.phone && (\n              <button\n                onClick={() => window.open(`tel:${supervisor?.phone}`)}\n                className=\"flex items-center justify-center px-3 py-2 text-sm bg-blue-50 text-blue-700 rounded-lg hover:bg-blue-100 transition-colors\"\n              >\n                <Phone className=\"h-4 w-4 mr-1\" />\n                Llamar\n              </button>\n            )}\n            \n            {siteInfo?.location && (\n              <button\n                onClick={() => {\n                  const encodedLocation = encodeURIComponent(siteInfo?.location);\n                  window.open(`https://maps.google.com?q=${encodedLocation}`, '_blank');\n                }}\n                className=\"flex items-center justify-center px-3 py-2 text-sm bg-green-50 text-green-700 rounded-lg hover:bg-green-100 transition-colors\"\n              >\n                <MapPin className=\"h-4 w-4 mr-1\" />\n                Ubicación\n              </button>\n            )}\n          </div>\n        </div>\n\n        {/* Site Status Warning */}\n        {!siteInfo?.is_active && (\n          <div className=\"border-t border-gray-100 pt-4\">\n            <div className=\"bg-red-50 border border-red-200 rounded-lg p-3\">\n              <div className=\"flex items-start space-x-2\">\n                <AlertTriangle className=\"h-5 w-5 text-red-500 mt-0.5\" />\n                <div>\n                  <h6 className=\"text-sm font-medium text-red-800 mb-1\">\n                    Sitio Inactivo\n                  </h6>\n                  <p className=\"text-xs text-red-700\">\n                    Este sitio de trabajo está marcado como inactivo. \n                    Contacta a tu supervisor para más información.\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":5755},"src/pages/personalized-worker-dashboard-with-site-integration-and-team-collaboration/components/WeeklyTimecardSummary.jsx":{"content":"import React, { useState } from 'react';\nimport { Calendar, Clock, TrendingUp, ChevronLeft, ChevronRight } from 'lucide-react';\n\nexport default function WeeklyTimecardSummary({ weeklyTimecard, todayAttendance }) {\n  const [selectedWeekOffset, setSelectedWeekOffset] = useState(0);\n\n  if (!weeklyTimecard) {\n    return (\n      <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-4 bg-gray-200 rounded w-1/2 mb-4\"></div>\n          <div className=\"space-y-3\">\n            <div className=\"h-20 bg-gray-200 rounded\"></div>\n            <div className=\"h-16 bg-gray-200 rounded\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const getDayName = (dateString) => {\n    const date = new Date(dateString);\n    return date?.toLocaleDateString('es-ES', { weekday: 'short' });\n  };\n\n  const formatDate = (dateString) => {\n    const date = new Date(dateString);\n    return date?.toLocaleDateString('es-ES', { day: '2-digit', month: '2-digit' });\n  };\n\n  const getStatusColor = (record) => {\n    if (record?.clock_out) return 'bg-green-100 border-green-200 text-green-800';\n    if (record?.clock_in) return 'bg-blue-100 border-blue-200 text-blue-800';\n    return 'bg-gray-100 border-gray-200 text-gray-600';\n  };\n\n  const getStatusText = (record) => {\n    if (record?.clock_out) return 'Completo';\n    if (record?.clock_in) return 'En curso';\n    return 'Sin registro';\n  };\n\n  // Calculate progress towards 40-hour work week\n  const regularHours = parseFloat(weeklyTimecard?.totalRegularHours || 0);\n  const overtimeHours = parseFloat(weeklyTimecard?.totalOvertimeHours || 0);\n  const totalHours = regularHours + overtimeHours;\n  const weekProgress = Math.min((totalHours / 40) * 100, 100);\n\n  return (\n    <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h3 className=\"text-lg font-semibold text-gray-900 flex items-center\">\n            <Calendar className=\"h-5 w-5 mr-2\" />\n            Registro Semanal\n          </h3>\n          <p className=\"text-sm text-gray-600\">\n            {new Date(weeklyTimecard?.weekStart)?.toLocaleDateString('es-ES')} - {' '}\n            {new Date(weeklyTimecard?.weekEnd)?.toLocaleDateString('es-ES')}\n          </p>\n        </div>\n        \n        {/* Week Navigation */}\n        <div className=\"flex items-center space-x-2\">\n          <button\n            onClick={() => setSelectedWeekOffset(selectedWeekOffset - 1)}\n            className=\"p-2 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-lg\"\n          >\n            <ChevronLeft className=\"h-4 w-4\" />\n          </button>\n          <span className=\"text-sm text-gray-600 min-w-[80px] text-center\">\n            {selectedWeekOffset === 0 ? 'Esta semana' : \n             selectedWeekOffset === -1 ? 'Sem. pasada' : \n             `${Math.abs(selectedWeekOffset)} sem. atrás`}\n          </span>\n          <button\n            onClick={() => setSelectedWeekOffset(selectedWeekOffset + 1)}\n            disabled={selectedWeekOffset >= 0}\n            className=\"p-2 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-lg disabled:opacity-50 disabled:cursor-not-allowed\"\n          >\n            <ChevronRight className=\"h-4 w-4\" />\n          </button>\n        </div>\n      </div>\n      {/* Weekly Summary Cards */}\n      <div className=\"grid grid-cols-3 gap-4 mb-6\">\n        <div className=\"bg-blue-50 rounded-lg p-4 text-center\">\n          <div className=\"text-2xl font-bold text-blue-600\">\n            {regularHours?.toFixed(1)}\n          </div>\n          <div className=\"text-sm text-blue-600\">Horas Regulares</div>\n        </div>\n        \n        <div className=\"bg-orange-50 rounded-lg p-4 text-center\">\n          <div className=\"text-2xl font-bold text-orange-600\">\n            {overtimeHours?.toFixed(1)}\n          </div>\n          <div className=\"text-sm text-orange-600\">Horas Extra</div>\n        </div>\n        \n        <div className=\"bg-green-50 rounded-lg p-4 text-center\">\n          <div className=\"text-2xl font-bold text-green-600\">\n            {totalHours?.toFixed(1)}\n          </div>\n          <div className=\"text-sm text-green-600\">Total Horas</div>\n        </div>\n      </div>\n      {/* Week Progress Bar */}\n      <div className=\"mb-6\">\n        <div className=\"flex items-center justify-between mb-2\">\n          <span className=\"text-sm font-medium text-gray-700\">\n            Progreso Semanal (40 horas)\n          </span>\n          <span className=\"text-sm text-gray-600\">\n            {weekProgress?.toFixed(0)}%\n          </span>\n        </div>\n        <div className=\"w-full bg-gray-200 rounded-full h-2\">\n          <div \n            className=\"bg-blue-600 h-2 rounded-full transition-all duration-300\"\n            style={{ width: `${weekProgress}%` }}\n          ></div>\n        </div>\n      </div>\n      {/* Daily Records */}\n      <div className=\"space-y-3\">\n        <h4 className=\"text-sm font-semibold text-gray-700 mb-3\">\n          Registro Diario\n        </h4>\n        \n        {weeklyTimecard?.dailyRecords?.length > 0 ? (\n          <div className=\"space-y-2\">\n            {weeklyTimecard?.dailyRecords?.map((record, index) => (\n              <div \n                key={record?.id || index}\n                className={`flex items-center justify-between p-3 rounded-lg border ${getStatusColor(record)}`}\n              >\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"text-sm font-medium\">\n                    {getDayName(record?.date)} {formatDate(record?.date)}\n                  </div>\n                  <span className=\"text-xs px-2 py-1 bg-white rounded-full\">\n                    {getStatusText(record)}\n                  </span>\n                </div>\n                \n                <div className=\"flex items-center space-x-4 text-sm\">\n                  {record?.clock_in && (\n                    <div className=\"text-center\">\n                      <div className=\"font-medium\">\n                        {new Date(record?.clock_in)?.toLocaleTimeString('es-ES', { \n                          hour: '2-digit', \n                          minute: '2-digit' \n                        })}\n                      </div>\n                      <div className=\"text-xs opacity-75\">Entrada</div>\n                    </div>\n                  )}\n                  \n                  {record?.clock_out && (\n                    <div className=\"text-center\">\n                      <div className=\"font-medium\">\n                        {new Date(record?.clock_out)?.toLocaleTimeString('es-ES', { \n                          hour: '2-digit', \n                          minute: '2-digit' \n                        })}\n                      </div>\n                      <div className=\"text-xs opacity-75\">Salida</div>\n                    </div>\n                  )}\n                  \n                  <div className=\"text-center\">\n                    <div className=\"font-bold\">\n                      {parseFloat(record?.total_hours || 0)?.toFixed(1)}h\n                    </div>\n                    <div className=\"text-xs opacity-75\">Total</div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <div className=\"text-center py-8\">\n            <Clock className=\"h-12 w-12 text-gray-300 mx-auto mb-3\" />\n            <p className=\"text-gray-500 text-sm\">\n              No hay registros para esta semana\n            </p>\n          </div>\n        )}\n      </div>\n      {/* Performance Indicators */}\n      {totalHours > 0 && (\n        <div className=\"border-t border-gray-100 pt-4 mt-4\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"text-center\">\n              <div className=\"flex items-center justify-center space-x-1\">\n                <TrendingUp className=\"h-4 w-4 text-green-500\" />\n                <span className=\"text-sm font-medium text-gray-700\">\n                  Puntualidad\n                </span>\n              </div>\n              <div className=\"text-lg font-bold text-green-600\">\n                {weeklyTimecard?.dailyRecords?.filter(r => r?.clock_in)?.length || 0}\n                /{weeklyTimecard?.dailyRecords?.length || 0} días\n              </div>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"flex items-center justify-center space-x-1\">\n                <Clock className=\"h-4 w-4 text-blue-500\" />\n                <span className=\"text-sm font-medium text-gray-700\">\n                  Promedio Diario\n                </span>\n              </div>\n              <div className=\"text-lg font-bold text-blue-600\">\n                {weeklyTimecard?.dailyRecords?.length > 0 ? \n                  (totalHours / weeklyTimecard?.dailyRecords?.filter(r => r?.total_hours > 0)?.length)?.toFixed(1) : \n                  '0.0'\n                }h\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":9114},"src/pages/production-deployment-and-infrastructure-management/components/BackupDisasterRecovery.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { HardDrive, RefreshCw, Download, Upload, CheckCircle, XCircle, Clock, AlertTriangle, Database, FileText, Calendar, Archive, Shield, Activity, Play } from 'lucide-react';\n\nconst BackupDisasterRecovery = () => {\n  const [backupStatus, setBackupStatus] = useState({});\n  const [backupHistory, setBackupHistory] = useState([]);\n  const [schedules, setSchedules] = useState([]);\n  const [recoveryTests, setRecoveryTests] = useState([]);\n  const [retentionPolicies, setRetentionPolicies] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [runningBackup, setRunningBackup] = useState(null);\n  const [restoreModal, setRestoreModal] = useState(null);\n\n  // Load backup and recovery data\n  useEffect(() => {\n    loadBackupData();\n  }, []);\n\n  const loadBackupData = async () => {\n    setLoading(true);\n    try {\n      // Simulate API calls for backup data\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // Mock backup status\n      setBackupStatus({\n        lastBackup: new Date(Date.now() - 3600000)?.toISOString(),\n        nextScheduled: new Date(Date.now() + 82800000)?.toISOString(),\n        totalBackups: 247,\n        totalSize: '45.2 GB',\n        successRate: 99.6,\n        activeJobs: 0,\n        failedJobs: 1\n      });\n\n      // Mock backup history\n      setBackupHistory([\n        {\n          id: 'backup-001',\n          type: 'full',\n          status: 'completed',\n          size: '2.3 GB',\n          duration: '00:12:34',\n          startTime: new Date(Date.now() - 3600000)?.toISOString(),\n          endTime: new Date(Date.now() - 3540000)?.toISOString(),\n          location: 's3://nova-hr-backups/full/',\n          retention: '30 days'\n        },\n        {\n          id: 'backup-002',\n          type: 'incremental',\n          status: 'completed',\n          size: '847 MB',\n          duration: '00:04:21',\n          startTime: new Date(Date.now() - 86400000)?.toISOString(),\n          endTime: new Date(Date.now() - 86400000 + 261000)?.toISOString(),\n          location: 's3://nova-hr-backups/incremental/',\n          retention: '7 days'\n        },\n        {\n          id: 'backup-003',\n          type: 'full',\n          status: 'failed',\n          size: '0 B',\n          duration: '00:02:15',\n          startTime: new Date(Date.now() - 172800000)?.toISOString(),\n          endTime: new Date(Date.now() - 172800000 + 135000)?.toISOString(),\n          location: 's3://nova-hr-backups/full/',\n          retention: '30 days',\n          error: 'Connection timeout to storage backend'\n        },\n        {\n          id: 'backup-004',\n          type: 'differential',\n          status: 'completed',\n          size: '1.1 GB',\n          duration: '00:07:42',\n          startTime: new Date(Date.now() - 259200000)?.toISOString(),\n          endTime: new Date(Date.now() - 259200000 + 462000)?.toISOString(),\n          location: 's3://nova-hr-backups/differential/',\n          retention: '14 days'\n        }\n      ]);\n\n      // Mock backup schedules\n      setSchedules([\n        {\n          id: 'daily-incremental',\n          name: 'Daily Incremental Backup',\n          type: 'incremental',\n          frequency: 'daily',\n          time: '02:00',\n          timezone: 'America/Monterrey',\n          enabled: true,\n          retention: '7 days',\n          nextRun: new Date(Date.now() + 82800000)?.toISOString()\n        },\n        {\n          id: 'weekly-full',\n          name: 'Weekly Full Backup',\n          type: 'full',\n          frequency: 'weekly',\n          time: '01:00',\n          timezone: 'America/Monterrey',\n          enabled: true,\n          retention: '30 days',\n          nextRun: new Date(Date.now() + 518400000)?.toISOString()\n        },\n        {\n          id: 'monthly-archive',\n          name: 'Monthly Archive',\n          type: 'archive',\n          frequency: 'monthly',\n          time: '00:00',\n          timezone: 'America/Monterrey',\n          enabled: true,\n          retention: '1 year',\n          nextRun: new Date(Date.now() + 2592000000)?.toISOString()\n        }\n      ]);\n\n      // Mock recovery tests\n      setRecoveryTests([\n        {\n          id: 'test-001',\n          name: 'Database Recovery Test',\n          type: 'database',\n          status: 'passed',\n          lastRun: new Date(Date.now() - 604800000)?.toISOString(),\n          duration: '00:23:15',\n          success: true,\n          nextScheduled: new Date(Date.now() + 2592000000)?.toISOString()\n        },\n        {\n          id: 'test-002',\n          name: 'Application Files Recovery',\n          type: 'files',\n          status: 'passed',\n          lastRun: new Date(Date.now() - 1209600000)?.toISOString(),\n          duration: '00:15:42',\n          success: true,\n          nextScheduled: new Date(Date.now() + 2592000000)?.toISOString()\n        },\n        {\n          id: 'test-003',\n          name: 'Full System Recovery',\n          type: 'system',\n          status: 'failed',\n          lastRun: new Date(Date.now() - 1814400000)?.toISOString(),\n          duration: '01:12:33',\n          success: false,\n          nextScheduled: new Date(Date.now() + 86400000)?.toISOString(),\n          error: 'Network connectivity issues during restore'\n        }\n      ]);\n\n      // Mock retention policies\n      setRetentionPolicies({\n        daily: '7 days',\n        weekly: '4 weeks',\n        monthly: '12 months',\n        yearly: '7 years',\n        autoDelete: true,\n        compressionEnabled: true,\n        encryptionEnabled: true\n      });\n\n    } catch (error) {\n      console.error('Failed to load backup data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleBackupAction = async (action, backupId = null) => {\n    try {\n      setRunningBackup(action);\n      console.log(`Executing backup action: ${action}${backupId ? ` for ${backupId}` : ''}`);\n      \n      switch (action) {\n        case 'full': console.log('Starting full backup...');\n          break;\n        case 'incremental': console.log('Starting incremental backup...');\n          break;\n        case 'restore':\n          console.log(`Initiating restore from backup ${backupId}`);\n          break;\n        case 'test-restore': console.log('Starting test restore...');\n          break;\n        default:\n          console.log(`Unknown action: ${action}`);\n      }\n\n      // Simulate backup/restore process\n      await new Promise(resolve => setTimeout(resolve, 3000));\n      \n      // Refresh data after action\n      await loadBackupData();\n      \n    } catch (error) {\n      console.error(`Failed to execute ${action}:`, error);\n    } finally {\n      setRunningBackup(null);\n      setRestoreModal(null);\n    }\n  };\n\n  const getStatusIcon = (status) => {\n    switch (status) {\n      case 'completed':\n      case 'passed':\n        return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\n      case 'failed':\n        return <XCircle className=\"h-4 w-4 text-red-500\" />;\n      case 'running':\n        return <RefreshCw className=\"h-4 w-4 text-blue-500 animate-spin\" />;\n      case 'pending':\n      default:\n        return <Clock className=\"h-4 w-4 text-gray-500\" />;\n    }\n  };\n\n  const getBackupTypeIcon = (type) => {\n    switch (type) {\n      case 'full':\n        return <HardDrive className=\"h-4 w-4 text-blue-500\" />;\n      case 'incremental':\n        return <Upload className=\"h-4 w-4 text-green-500\" />;\n      case 'differential':\n        return <Activity className=\"h-4 w-4 text-purple-500\" />;\n      case 'archive':\n        return <Archive className=\"h-4 w-4 text-orange-500\" />;\n      default:\n        return <FileText className=\"h-4 w-4 text-gray-500\" />;\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <HardDrive className=\"h-8 w-8 animate-pulse text-blue-600\" />\n        <span className=\"ml-2 text-gray-600\">Loading backup and recovery data...</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Backup Status Overview */}\n      <div className=\"bg-white rounded-lg border p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <h3 className=\"text-lg font-semibold text-gray-900\">Backup Status</h3>\n            <p className=\"text-sm text-gray-600\">Current backup and recovery system status</p>\n          </div>\n          <div className=\"flex space-x-2\">\n            <button\n              onClick={() => handleBackupAction('incremental')}\n              disabled={runningBackup}\n              className=\"bg-green-600 text-white px-4 py-2 rounded-md text-sm font-medium hover:bg-green-700 transition-colors flex items-center space-x-2 disabled:opacity-50\"\n            >\n              {runningBackup === 'incremental' ? (\n                <RefreshCw className=\"h-4 w-4 animate-spin\" />\n              ) : (\n                <Upload className=\"h-4 w-4\" />\n              )}\n              <span>Run Incremental</span>\n            </button>\n            <button\n              onClick={() => handleBackupAction('full')}\n              disabled={runningBackup}\n              className=\"bg-blue-600 text-white px-4 py-2 rounded-md text-sm font-medium hover:bg-blue-700 transition-colors flex items-center space-x-2 disabled:opacity-50\"\n            >\n              {runningBackup === 'full' ? (\n                <RefreshCw className=\"h-4 w-4 animate-spin\" />\n              ) : (\n                <HardDrive className=\"h-4 w-4\" />\n              )}\n              <span>Run Full Backup</span>\n            </button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n            <div className=\"text-2xl font-bold text-blue-900\">{backupStatus?.totalBackups}</div>\n            <div className=\"text-sm text-blue-700\">Total Backups</div>\n            <div className=\"text-xs text-blue-600 mt-1\">{backupStatus?.totalSize}</div>\n          </div>\n          \n          <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n            <div className=\"text-2xl font-bold text-green-900\">{backupStatus?.successRate}%</div>\n            <div className=\"text-sm text-green-700\">Success Rate</div>\n            <div className=\"text-xs text-green-600 mt-1\">Last 30 days</div>\n          </div>\n          \n          <div className=\"text-center p-4 bg-gray-50 rounded-lg\">\n            <div className=\"text-2xl font-bold text-gray-900\">{backupStatus?.activeJobs}</div>\n            <div className=\"text-sm text-gray-700\">Active Jobs</div>\n            <div className=\"text-xs text-gray-600 mt-1\">Currently running</div>\n          </div>\n          \n          <div className=\"text-center p-4 bg-red-50 rounded-lg\">\n            <div className=\"text-2xl font-bold text-red-900\">{backupStatus?.failedJobs}</div>\n            <div className=\"text-sm text-red-700\">Failed Jobs</div>\n            <div className=\"text-xs text-red-600 mt-1\">Needs attention</div>\n          </div>\n        </div>\n\n        <div className=\"mt-6 grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n          <div>\n            <span className=\"text-gray-600\">Last Backup: </span>\n            <span className=\"font-medium\">{new Date(backupStatus?.lastBackup)?.toLocaleString()}</span>\n          </div>\n          <div>\n            <span className=\"text-gray-600\">Next Scheduled: </span>\n            <span className=\"font-medium\">{new Date(backupStatus?.nextScheduled)?.toLocaleString()}</span>\n          </div>\n        </div>\n      </div>\n      {/* Backup History */}\n      <div className=\"bg-white rounded-lg border overflow-hidden\">\n        <div className=\"bg-gray-50 px-6 py-4 border-b\">\n          <h3 className=\"text-lg font-semibold text-gray-900\">Backup History</h3>\n          <p className=\"text-sm text-gray-600 mt-1\">Recent backup operations and results</p>\n        </div>\n\n        <div className=\"overflow-x-auto\">\n          <table className=\"min-w-full divide-y divide-gray-200\">\n            <thead className=\"bg-gray-50\">\n              <tr>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Backup\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Type\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Status\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Size\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Duration\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Date\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Actions\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {backupHistory?.map((backup) => (\n                <tr key={backup?.id} className=\"hover:bg-gray-50\">\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div className=\"flex items-center\">\n                      <div className=\"mr-3\">\n                        {getBackupTypeIcon(backup?.type)}\n                      </div>\n                      <div>\n                        <div className=\"text-sm font-medium text-gray-900\">\n                          {backup?.id}\n                        </div>\n                        <div className=\"text-sm text-gray-500\">\n                          {backup?.location}\n                        </div>\n                      </div>\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${\n                      backup?.type === 'full' ? 'bg-blue-100 text-blue-800' :\n                      backup?.type === 'incremental' ? 'bg-green-100 text-green-800' :\n                      backup?.type === 'differential'? 'bg-purple-100 text-purple-800' : 'bg-orange-100 text-orange-800'\n                    }`}>\n                      {backup?.type}\n                    </span>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div className=\"flex items-center\">\n                      {getStatusIcon(backup?.status)}\n                      <span className={`ml-2 text-sm ${\n                        backup?.status === 'completed' ? 'text-green-700' : 'text-red-700'\n                      }`}>\n                        {backup?.status}\n                      </span>\n                    </div>\n                    {backup?.error && (\n                      <div className=\"text-xs text-red-600 mt-1\">\n                        {backup?.error}\n                      </div>\n                    )}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    {backup?.size}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    {backup?.duration}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    {new Date(backup?.startTime)?.toLocaleDateString()}\n                    <div className=\"text-xs text-gray-500\">\n                      {new Date(backup?.startTime)?.toLocaleTimeString()}\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                    {backup?.status === 'completed' && (\n                      <div className=\"flex items-center space-x-2\">\n                        <button\n                          onClick={() => setRestoreModal(backup?.id)}\n                          className=\"text-blue-600 hover:text-blue-900\"\n                          title=\"Restore\"\n                        >\n                          <Download className=\"h-4 w-4\" />\n                        </button>\n                        <button\n                          onClick={() => handleBackupAction('test-restore', backup?.id)}\n                          className=\"text-green-600 hover:text-green-900\"\n                          title=\"Test Restore\"\n                        >\n                          <Play className=\"h-4 w-4\" />\n                        </button>\n                      </div>\n                    )}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n      {/* Schedules and Recovery Tests */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Backup Schedules */}\n        <div className=\"bg-white rounded-lg border overflow-hidden\">\n          <div className=\"bg-gray-50 px-6 py-4 border-b\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">Backup Schedules</h3>\n          </div>\n          <div className=\"p-6\">\n            <div className=\"space-y-4\">\n              {schedules?.map((schedule) => (\n                <div key={schedule?.id} className=\"border rounded-lg p-4\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Calendar className=\"h-4 w-4 text-blue-500\" />\n                      <span className=\"font-medium text-gray-900\">{schedule?.name}</span>\n                    </div>\n                    <div className={`w-3 h-3 rounded-full ${\n                      schedule?.enabled ? 'bg-green-500' : 'bg-gray-400'\n                    }`} />\n                  </div>\n                  \n                  <div className=\"text-sm space-y-1 text-gray-600\">\n                    <div>Frequency: {schedule?.frequency} at {schedule?.time}</div>\n                    <div>Retention: {schedule?.retention}</div>\n                    <div>Next run: {new Date(schedule?.nextRun)?.toLocaleString()}</div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        {/* Recovery Tests */}\n        <div className=\"bg-white rounded-lg border overflow-hidden\">\n          <div className=\"bg-gray-50 px-6 py-4 border-b\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">Recovery Tests</h3>\n          </div>\n          <div className=\"p-6\">\n            <div className=\"space-y-4\">\n              {recoveryTests?.map((test) => (\n                <div key={test?.id} className=\"border rounded-lg p-4\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Shield className=\"h-4 w-4 text-purple-500\" />\n                      <span className=\"font-medium text-gray-900\">{test?.name}</span>\n                    </div>\n                    {getStatusIcon(test?.status)}\n                  </div>\n                  \n                  <div className=\"text-sm space-y-1 text-gray-600\">\n                    <div>Last run: {new Date(test?.lastRun)?.toLocaleDateString()}</div>\n                    <div>Duration: {test?.duration}</div>\n                    <div>Next test: {new Date(test?.nextScheduled)?.toLocaleDateString()}</div>\n                    {test?.error && (\n                      <div className=\"text-red-600 text-xs mt-2\">{test?.error}</div>\n                    )}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n      {/* Restore Confirmation Modal */}\n      {restoreModal && (\n        <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50\">\n          <div className=\"relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white\">\n            <div className=\"flex items-center mb-4\">\n              <AlertTriangle className=\"h-6 w-6 text-yellow-500 mr-2\" />\n              <h3 className=\"text-lg font-semibold text-gray-900\">Confirm Restore</h3>\n            </div>\n            \n            <p className=\"text-sm text-gray-600 mb-6\">\n              Are you sure you want to restore from backup <strong>{restoreModal}</strong>? \n              This action will overwrite current data and cannot be undone.\n            </p>\n            \n            <div className=\"flex justify-end space-x-2\">\n              <button\n                onClick={() => setRestoreModal(null)}\n                className=\"bg-gray-600 text-white px-4 py-2 rounded-md text-sm font-medium hover:bg-gray-700 transition-colors\"\n              >\n                Cancel\n              </button>\n              <button\n                onClick={() => handleBackupAction('restore', restoreModal)}\n                className=\"bg-red-600 text-white px-4 py-2 rounded-md text-sm font-medium hover:bg-red-700 transition-colors\"\n              >\n                Confirm Restore\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default BackupDisasterRecovery;","size_bytes":21428},"src/pages/production-deployment-and-infrastructure-management/components/DeploymentPipelineVisualization.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { GitBranch, CheckCircle, Clock, XCircle, RotateCcw, GitCommit, TestTube, Upload, Globe, Activity } from 'lucide-react';\nimport Icon from '../../../components/AppIcon';\n\n\nconst DeploymentPipelineVisualization = () => {\n  const [pipelineStages, setPipelineStages] = useState([]);\n  const [deploymentHistory, setDeploymentHistory] = useState([]);\n  const [currentDeployment, setCurrentDeployment] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Pipeline stages configuration\n  const stages = [\n    { id: 'commit', name: 'Code Commit', icon: GitCommit, color: 'blue' },\n    { id: 'test', name: 'Automated Testing', icon: TestTube, color: 'yellow' },\n    { id: 'staging', name: 'Staging Deploy', icon: Upload, color: 'purple' },\n    { id: 'approval', name: 'Production Approval', icon: CheckCircle, color: 'orange' },\n    { id: 'production', name: 'Live Deployment', icon: Globe, color: 'green' }\n  ];\n\n  // Load pipeline data\n  useEffect(() => {\n    const loadPipelineData = async () => {\n      setLoading(true);\n      try {\n        // Simulate API call\n        await new Promise(resolve => setTimeout(resolve, 1000));\n\n        // Mock pipeline data\n        setPipelineStages([\n          { \n            id: 'commit', \n            status: 'completed', \n            duration: '00:02:15',\n            timestamp: new Date(Date.now() - 3600000)?.toISOString(),\n            details: 'Latest commit: feat/user-management-improvements'\n          },\n          { \n            id: 'test', \n            status: 'completed', \n            duration: '00:12:45',\n            timestamp: new Date(Date.now() - 3000000)?.toISOString(),\n            details: '247 tests passed, 0 failed'\n          },\n          { \n            id: 'staging', \n            status: 'running', \n            duration: '00:05:32',\n            timestamp: new Date(Date.now() - 300000)?.toISOString(),\n            details: 'Deploying to staging environment...'\n          },\n          { \n            id: 'approval', \n            status: 'pending', \n            duration: null,\n            timestamp: null,\n            details: 'Awaiting manual approval for production'\n          },\n          { \n            id: 'production', \n            status: 'pending', \n            duration: null,\n            timestamp: null,\n            details: 'Ready for production deployment'\n          }\n        ]);\n\n        setDeploymentHistory([\n          {\n            id: 1,\n            version: 'v2.4.1',\n            branch: 'main',\n            status: 'success',\n            environment: 'production',\n            timestamp: new Date(Date.now() - 86400000)?.toISOString(),\n            duration: '00:08:32',\n            deployedBy: 'DevOps Team'\n          },\n          {\n            id: 2,\n            version: 'v2.4.0',\n            branch: 'main',\n            status: 'success',\n            environment: 'production',\n            timestamp: new Date(Date.now() - 172800000)?.toISOString(),\n            duration: '00:07:18',\n            deployedBy: 'DevOps Team'\n          },\n          {\n            id: 3,\n            version: 'v2.3.9',\n            branch: 'main',\n            status: 'failed',\n            environment: 'production',\n            timestamp: new Date(Date.now() - 259200000)?.toISOString(),\n            duration: '00:12:45',\n            deployedBy: 'DevOps Team'\n          }\n        ]);\n\n        setCurrentDeployment({\n          version: 'v2.4.2',\n          branch: 'feature/infrastructure-management',\n          startedAt: new Date(Date.now() - 900000)?.toISOString(),\n          currentStage: 'staging'\n        });\n\n      } catch (error) {\n        console.error('Failed to load pipeline data:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadPipelineData();\n  }, []);\n\n  const getStageStatus = (stageId) => {\n    const stage = pipelineStages?.find(s => s?.id === stageId);\n    return stage?.status || 'pending';\n  };\n\n  const getStatusIcon = (status) => {\n    switch (status) {\n      case 'completed':\n        return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n      case 'running':\n        return <Clock className=\"h-5 w-5 text-blue-500 animate-pulse\" />;\n      case 'failed':\n        return <XCircle className=\"h-5 w-5 text-red-500\" />;\n      case 'pending':\n      default:\n        return <Clock className=\"h-5 w-5 text-gray-400\" />;\n    }\n  };\n\n  const handleStageAction = async (stageId, action) => {\n    try {\n      console.log(`Executing ${action} on stage ${stageId}`);\n      // Simulate API call for stage actions\n      switch (action) {\n        case 'approve':\n          // Update stage status to approved\n          setPipelineStages(prev => prev?.map(stage => \n            stage?.id === stageId \n              ? { ...stage, status: 'completed', timestamp: new Date()?.toISOString() }\n              : stage\n          ));\n          break;\n        case 'rollback': console.log('Initiating rollback...');\n          break;\n        case 'retry': console.log('Retrying stage...');\n          break;\n        default:\n          console.log(`Unknown action: ${action}`);\n      }\n    } catch (error) {\n      console.error(`Failed to execute ${action}:`, error);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <Activity className=\"h-8 w-8 animate-spin text-blue-600\" />\n        <span className=\"ml-2 text-gray-600\">Loading deployment pipeline...</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Current Deployment Status */}\n      {currentDeployment && (\n        <div className=\"bg-blue-50 rounded-lg p-6 border-l-4 border-blue-500\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"text-lg font-semibold text-blue-900\">\n              Current Deployment: {currentDeployment?.version}\n            </h3>\n            <div className=\"flex items-center space-x-2 text-blue-700\">\n              <Activity className=\"h-4 w-4 animate-pulse\" />\n              <span className=\"text-sm\">\n                Running for {Math.floor((Date.now() - new Date(currentDeployment?.startedAt)?.getTime()) / 60000)} minutes\n              </span>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-4 text-sm text-blue-800\">\n            <div className=\"flex items-center space-x-2\">\n              <GitBranch className=\"h-4 w-4\" />\n              <span>{currentDeployment?.branch}</span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <span>Current Stage:</span>\n              <span className=\"font-semibold capitalize\">{currentDeployment?.currentStage}</span>\n            </div>\n          </div>\n        </div>\n      )}\n      {/* Pipeline Visualization */}\n      <div className=\"bg-white rounded-lg border overflow-hidden\">\n        <div className=\"bg-gray-50 px-6 py-4 border-b\">\n          <h3 className=\"text-lg font-semibold text-gray-900\">Deployment Pipeline</h3>\n          <p className=\"text-sm text-gray-600 mt-1\">Automated CI/CD pipeline for Nova HR</p>\n        </div>\n\n        <div className=\"p-6\">\n          <div className=\"relative\">\n            {/* Pipeline Flow */}\n            <div className=\"flex items-center justify-between\">\n              {stages?.map((stage, index) => {\n                const stageData = pipelineStages?.find(s => s?.id === stage?.id);\n                const status = stageData?.status || 'pending';\n                const Icon = stage?.icon;\n\n                return (\n                  <div key={stage?.id} className=\"flex flex-col items-center flex-1\">\n                    {/* Stage Icon and Status */}\n                    <div className={`relative p-4 rounded-full border-2 ${\n                      status === 'completed' ? 'bg-green-50 border-green-200' :\n                      status === 'running' ? 'bg-blue-50 border-blue-200' :\n                      status === 'failed'? 'bg-red-50 border-red-200' : 'bg-gray-50 border-gray-200'\n                    }`}>\n                      <Icon className={`h-6 w-6 ${\n                        status === 'completed' ? 'text-green-600' :\n                        status === 'running' ? 'text-blue-600' :\n                        status === 'failed'? 'text-red-600' : 'text-gray-400'\n                      }`} />\n                      \n                      {/* Status indicator */}\n                      <div className=\"absolute -top-1 -right-1\">\n                        {getStatusIcon(status)}\n                      </div>\n                    </div>\n                    {/* Stage Info */}\n                    <div className=\"mt-4 text-center\">\n                      <h4 className=\"font-medium text-gray-900\">{stage?.name}</h4>\n                      {stageData && (\n                        <div className=\"mt-2 space-y-1\">\n                          {stageData?.duration && (\n                            <p className=\"text-xs text-gray-500\">Duration: {stageData?.duration}</p>\n                          )}\n                          {stageData?.timestamp && (\n                            <p className=\"text-xs text-gray-500\">\n                              {new Date(stageData?.timestamp)?.toLocaleTimeString()}\n                            </p>\n                          )}\n                          <p className=\"text-xs text-gray-600\">{stageData?.details}</p>\n                        </div>\n                      )}\n                    </div>\n                    {/* Stage Actions */}\n                    {status === 'pending' && stage?.id === 'approval' && (\n                      <div className=\"mt-3 flex space-x-2\">\n                        <button\n                          onClick={() => handleStageAction(stage?.id, 'approve')}\n                          className=\"bg-green-600 text-white px-3 py-1 rounded text-xs font-medium hover:bg-green-700 transition-colors\"\n                        >\n                          Approve\n                        </button>\n                      </div>\n                    )}\n                    {status === 'failed' && (\n                      <div className=\"mt-3 flex space-x-2\">\n                        <button\n                          onClick={() => handleStageAction(stage?.id, 'retry')}\n                          className=\"bg-blue-600 text-white px-3 py-1 rounded text-xs font-medium hover:bg-blue-700 transition-colors\"\n                        >\n                          Retry\n                        </button>\n                      </div>\n                    )}\n                    {/* Connection Line */}\n                    {index < stages?.length - 1 && (\n                      <div className={`absolute top-8 w-full h-0.5 ${\n                        status === 'completed' ? 'bg-green-300' : 'bg-gray-300'\n                      }`} \n                      style={{ \n                        left: '50%', \n                        right: '-50%', \n                        transform: 'translateY(-50%)' \n                      }} />\n                    )}\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      </div>\n      {/* Deployment History */}\n      <div className=\"bg-white rounded-lg border overflow-hidden\">\n        <div className=\"bg-gray-50 px-6 py-4 border-b\">\n          <h3 className=\"text-lg font-semibold text-gray-900\">Deployment History</h3>\n          <p className=\"text-sm text-gray-600 mt-1\">Recent deployment activities</p>\n        </div>\n\n        <div className=\"overflow-x-auto\">\n          <table className=\"min-w-full divide-y divide-gray-200\">\n            <thead className=\"bg-gray-50\">\n              <tr>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Version\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Environment\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Status\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Duration\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Deployed By\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Date\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Actions\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {deploymentHistory?.map((deployment) => (\n                <tr key={deployment?.id} className=\"hover:bg-gray-50\">\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div className=\"flex items-center\">\n                      <GitBranch className=\"h-4 w-4 text-gray-400 mr-2\" />\n                      <div>\n                        <div className=\"text-sm font-medium text-gray-900\">\n                          {deployment?.version}\n                        </div>\n                        <div className=\"text-sm text-gray-500\">\n                          {deployment?.branch}\n                        </div>\n                      </div>\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${\n                      deployment?.environment === 'production' ?'bg-green-100 text-green-800' :'bg-yellow-100 text-yellow-800'\n                    }`}>\n                      {deployment?.environment}\n                    </span>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div className=\"flex items-center\">\n                      {deployment?.status === 'success' ? (\n                        <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                      ) : (\n                        <XCircle className=\"h-4 w-4 text-red-500\" />\n                      )}\n                      <span className={`ml-2 text-sm ${\n                        deployment?.status === 'success' ? 'text-green-700' : 'text-red-700'\n                      }`}>\n                        {deployment?.status}\n                      </span>\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    {deployment?.duration}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    {deployment?.deployedBy}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    {new Date(deployment?.timestamp)?.toLocaleDateString()}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                    <button\n                      onClick={() => handleStageAction('production', 'rollback')}\n                      className=\"text-red-600 hover:text-red-900 flex items-center space-x-1\"\n                    >\n                      <RotateCcw className=\"h-4 w-4\" />\n                      <span>Rollback</span>\n                    </button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DeploymentPipelineVisualization;","size_bytes":15872},"src/pages/production-deployment-and-infrastructure-management/components/DockerContainerManagement.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Container, Play, Square, RefreshCw, Monitor, HardDrive, Cpu, Activity, CheckCircle, XCircle, Clock, Eye } from 'lucide-react';\n\nconst DockerContainerManagement = () => {\n  const [containers, setContainers] = useState([]);\n  const [images, setImages] = useState([]);\n  const [networks, setNetworks] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedContainer, setSelectedContainer] = useState(null);\n  const [showLogs, setShowLogs] = useState(false);\n  const [containerLogs, setContainerLogs] = useState('');\n\n  // Load Docker data\n  useEffect(() => {\n    loadDockerData();\n  }, []);\n\n  const loadDockerData = async () => {\n    setLoading(true);\n    try {\n      // Simulate Docker API calls\n      await new Promise(resolve => setTimeout(resolve, 1500));\n\n      // Mock container data\n      setContainers([\n        {\n          id: 'nova-hr-web-1',\n          name: 'nova-hr-web',\n          image: 'nova-hr:latest',\n          status: 'running',\n          state: 'Up 2 hours',\n          ports: ['3000:3000', '443:443'],\n          cpu: 15.2,\n          memory: 256,\n          memoryLimit: 512,\n          network: 'nova-hr-network',\n          created: new Date(Date.now() - 7200000)?.toISOString(),\n          restartPolicy: 'always',\n          healthcheck: 'healthy'\n        },\n        {\n          id: 'nova-hr-nginx-1',\n          name: 'nova-hr-nginx',\n          image: 'nginx:alpine',\n          status: 'running',\n          state: 'Up 2 hours',\n          ports: ['80:80', '443:443'],\n          cpu: 2.1,\n          memory: 32,\n          memoryLimit: 128,\n          network: 'nova-hr-network',\n          created: new Date(Date.now() - 7200000)?.toISOString(),\n          restartPolicy: 'always',\n          healthcheck: 'healthy'\n        },\n        {\n          id: 'nova-hr-redis-1',\n          name: 'nova-hr-redis',\n          image: 'redis:alpine',\n          status: 'running',\n          state: 'Up 2 hours',\n          ports: ['6379:6379'],\n          cpu: 0.8,\n          memory: 64,\n          memoryLimit: 256,\n          network: 'nova-hr-network',\n          created: new Date(Date.now() - 7200000)?.toISOString(),\n          restartPolicy: 'always',\n          healthcheck: 'healthy'\n        },\n        {\n          id: 'nova-hr-worker-1',\n          name: 'nova-hr-worker',\n          image: 'nova-hr:latest',\n          status: 'stopped',\n          state: 'Exited (0) 30 minutes ago',\n          ports: [],\n          cpu: 0,\n          memory: 0,\n          memoryLimit: 512,\n          network: 'nova-hr-network',\n          created: new Date(Date.now() - 10800000)?.toISOString(),\n          restartPolicy: 'on-failure',\n          healthcheck: 'none'\n        }\n      ]);\n\n      // Mock images data\n      setImages([\n        {\n          id: 'nova-hr:latest',\n          repository: 'nova-hr',\n          tag: 'latest',\n          size: '245 MB',\n          created: new Date(Date.now() - 86400000)?.toISOString()\n        },\n        {\n          id: 'nginx:alpine',\n          repository: 'nginx',\n          tag: 'alpine',\n          size: '23 MB',\n          created: new Date(Date.now() - 172800000)?.toISOString()\n        },\n        {\n          id: 'redis:alpine',\n          repository: 'redis',\n          tag: 'alpine',\n          size: '32 MB',\n          created: new Date(Date.now() - 259200000)?.toISOString()\n        }\n      ]);\n\n      // Mock networks data\n      setNetworks([\n        {\n          id: 'nova-hr-network',\n          name: 'nova-hr-network',\n          driver: 'bridge',\n          scope: 'local',\n          containers: 4,\n          created: new Date(Date.now() - 259200000)?.toISOString()\n        }\n      ]);\n\n    } catch (error) {\n      console.error('Failed to load Docker data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleContainerAction = async (containerId, action) => {\n    try {\n      console.log(`Executing ${action} on container ${containerId}`);\n      \n      // Update container status optimistically\n      setContainers(prev => prev?.map(container => \n        container?.id === containerId \n          ? { \n              ...container, \n              status: action === 'start' ? 'running' : \n                     action === 'stop' ? 'stopped' : \n                     action === 'restart' ? 'restarting' : container?.status \n            }\n          : container\n      ));\n\n      // Simulate API call delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      // Refresh data after action\n      await loadDockerData();\n      \n    } catch (error) {\n      console.error(`Failed to ${action} container:`, error);\n    }\n  };\n\n  const handleViewLogs = async (containerId) => {\n    setSelectedContainer(containerId);\n    setShowLogs(true);\n    \n    // Mock container logs\n    setContainerLogs(`\n[2025-01-11 19:55:23] INFO: Nova HR application starting...\n[2025-01-11 19:55:24] INFO: Database connection established\n[2025-01-11 19:55:24] INFO: Redis connection established\n[2025-01-11 19:55:25] INFO: Server listening on port 3000\n[2025-01-11 19:56:12] INFO: User authentication successful - user@example.com\n[2025-01-11 19:57:45] INFO: Processing payroll calculation for employee ID: EMP-001\n[2025-01-11 19:58:20] INFO: Background job completed - attendance sync\n[2025-01-11 19:59:01] INFO: Health check passed\n[2025-01-11 20:00:00] INFO: Automated backup initiated\n[2025-01-11 20:00:15] INFO: Backup completed successfully\n    `);\n  };\n\n  const getStatusIcon = (status) => {\n    switch (status) {\n      case 'running':\n        return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\n      case 'stopped':\n        return <XCircle className=\"h-4 w-4 text-red-500\" />;\n      case 'restarting':\n        return <RefreshCw className=\"h-4 w-4 text-blue-500 animate-spin\" />;\n      default:\n        return <Clock className=\"h-4 w-4 text-gray-500\" />;\n    }\n  };\n\n  const getStatusColor = (status) => {\n    switch (status) {\n      case 'running':\n        return 'text-green-700 bg-green-50 border-green-200';\n      case 'stopped':\n        return 'text-red-700 bg-red-50 border-red-200';\n      case 'restarting':\n        return 'text-blue-700 bg-blue-50 border-blue-200';\n      default:\n        return 'text-gray-700 bg-gray-50 border-gray-200';\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <Container className=\"h-8 w-8 animate-pulse text-blue-600\" />\n        <span className=\"ml-2 text-gray-600\">Loading Docker containers...</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Container Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <div className=\"bg-white border rounded-lg p-4\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <h3 className=\"text-sm font-medium text-gray-700\">Total Containers</h3>\n            <Container className=\"h-4 w-4 text-blue-500\" />\n          </div>\n          <div className=\"text-2xl font-bold text-gray-900\">{containers?.length}</div>\n          <div className=\"text-sm text-blue-600\">\n            {containers?.filter(c => c?.status === 'running')?.length} running\n          </div>\n        </div>\n\n        <div className=\"bg-white border rounded-lg p-4\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <h3 className=\"text-sm font-medium text-gray-700\">Images</h3>\n            <HardDrive className=\"h-4 w-4 text-purple-500\" />\n          </div>\n          <div className=\"text-2xl font-bold text-gray-900\">{images?.length}</div>\n          <div className=\"text-sm text-purple-600\">Total size: 300 MB</div>\n        </div>\n\n        <div className=\"bg-white border rounded-lg p-4\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <h3 className=\"text-sm font-medium text-gray-700\">Networks</h3>\n            <Activity className=\"h-4 w-4 text-green-500\" />\n          </div>\n          <div className=\"text-2xl font-bold text-gray-900\">{networks?.length}</div>\n          <div className=\"text-sm text-green-600\">All networks healthy</div>\n        </div>\n      </div>\n      {/* Container Management */}\n      <div className=\"bg-white rounded-lg border overflow-hidden\">\n        <div className=\"bg-gray-50 px-6 py-4 border-b flex items-center justify-between\">\n          <div>\n            <h3 className=\"text-lg font-semibold text-gray-900\">Container Management</h3>\n            <p className=\"text-sm text-gray-600 mt-1\">Manage Docker containers for Nova HR</p>\n          </div>\n          <button\n            onClick={loadDockerData}\n            className=\"bg-blue-600 text-white px-4 py-2 rounded-md text-sm font-medium hover:bg-blue-700 transition-colors flex items-center space-x-2\"\n          >\n            <RefreshCw className=\"h-4 w-4\" />\n            <span>Refresh</span>\n          </button>\n        </div>\n\n        <div className=\"overflow-x-auto\">\n          <table className=\"min-w-full divide-y divide-gray-200\">\n            <thead className=\"bg-gray-50\">\n              <tr>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Container\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Status\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Resource Usage\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Ports\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Health\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Actions\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {containers?.map((container) => (\n                <tr key={container?.id} className=\"hover:bg-gray-50\">\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div className=\"flex items-center\">\n                      <Container className=\"h-5 w-5 text-blue-500 mr-3\" />\n                      <div>\n                        <div className=\"text-sm font-medium text-gray-900\">\n                          {container?.name}\n                        </div>\n                        <div className=\"text-sm text-gray-500\">\n                          {container?.image}\n                        </div>\n                      </div>\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div className=\"flex items-center space-x-2\">\n                      {getStatusIcon(container?.status)}\n                      <div>\n                        <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${\n                          container?.status === 'running' ? 'bg-green-100 text-green-800' :\n                          container?.status === 'stopped' ? 'bg-red-100 text-red-800' : 'bg-blue-100 text-blue-800'\n                        }`}>\n                          {container?.status}\n                        </span>\n                        <div className=\"text-xs text-gray-500 mt-1\">\n                          {container?.state}\n                        </div>\n                      </div>\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div className=\"text-sm space-y-1\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Cpu className=\"h-3 w-3 text-blue-500\" />\n                        <span>CPU: {container?.cpu}%</span>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Monitor className=\"h-3 w-3 text-purple-500\" />\n                        <span>RAM: {container?.memory}/{container?.memoryLimit}MB</span>\n                      </div>\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div className=\"text-sm text-gray-900\">\n                      {container?.ports?.length > 0 ? (\n                        container?.ports?.map((port, index) => (\n                          <div key={index} className=\"text-xs text-gray-600\">\n                            {port}\n                          </div>\n                        ))\n                      ) : (\n                        <span className=\"text-gray-400\">No ports exposed</span>\n                      )}\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    {container?.healthcheck === 'healthy' ? (\n                      <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                    ) : container?.healthcheck === 'unhealthy' ? (\n                      <XCircle className=\"h-4 w-4 text-red-500\" />\n                    ) : (\n                      <span className=\"text-xs text-gray-500\">No health check</span>\n                    )}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                    <div className=\"flex items-center space-x-2\">\n                      {container?.status === 'running' ? (\n                        <>\n                          <button\n                            onClick={() => handleContainerAction(container?.id, 'restart')}\n                            className=\"text-blue-600 hover:text-blue-900\"\n                            title=\"Restart\"\n                          >\n                            <RefreshCw className=\"h-4 w-4\" />\n                          </button>\n                          <button\n                            onClick={() => handleContainerAction(container?.id, 'stop')}\n                            className=\"text-red-600 hover:text-red-900\"\n                            title=\"Stop\"\n                          >\n                            <Square className=\"h-4 w-4\" />\n                          </button>\n                        </>\n                      ) : (\n                        <button\n                          onClick={() => handleContainerAction(container?.id, 'start')}\n                          className=\"text-green-600 hover:text-green-900\"\n                          title=\"Start\"\n                        >\n                          <Play className=\"h-4 w-4\" />\n                        </button>\n                      )}\n                      <button\n                        onClick={() => handleViewLogs(container?.id)}\n                        className=\"text-gray-600 hover:text-gray-900\"\n                        title=\"View Logs\"\n                      >\n                        <Eye className=\"h-4 w-4\" />\n                      </button>\n                    </div>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n      {/* Images and Networks */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Docker Images */}\n        <div className=\"bg-white rounded-lg border overflow-hidden\">\n          <div className=\"bg-gray-50 px-6 py-4 border-b\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">Docker Images</h3>\n          </div>\n          <div className=\"p-6\">\n            <div className=\"space-y-4\">\n              {images?.map((image) => (\n                <div key={image?.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                  <div className=\"flex items-center space-x-3\">\n                    <HardDrive className=\"h-5 w-5 text-purple-500\" />\n                    <div>\n                      <div className=\"font-medium text-gray-900\">\n                        {image?.repository}:{image?.tag}\n                      </div>\n                      <div className=\"text-sm text-gray-500\">\n                        Size: {image?.size}\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"text-sm text-gray-500\">\n                    {new Date(image?.created)?.toLocaleDateString()}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        {/* Networks */}\n        <div className=\"bg-white rounded-lg border overflow-hidden\">\n          <div className=\"bg-gray-50 px-6 py-4 border-b\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">Docker Networks</h3>\n          </div>\n          <div className=\"p-6\">\n            <div className=\"space-y-4\">\n              {networks?.map((network) => (\n                <div key={network?.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                  <div className=\"flex items-center space-x-3\">\n                    <Activity className=\"h-5 w-5 text-green-500\" />\n                    <div>\n                      <div className=\"font-medium text-gray-900\">\n                        {network?.name}\n                      </div>\n                      <div className=\"text-sm text-gray-500\">\n                        Driver: {network?.driver} • {network?.containers} containers\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"text-sm text-gray-500\">\n                    {network?.scope}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n      {/* Container Logs Modal */}\n      {showLogs && (\n        <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50\">\n          <div className=\"relative top-20 mx-auto p-5 border w-11/12 max-w-4xl shadow-lg rounded-md bg-white\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-lg font-semibold text-gray-900\">\n                Container Logs: {selectedContainer}\n              </h3>\n              <button\n                onClick={() => setShowLogs(false)}\n                className=\"text-gray-400 hover:text-gray-600\"\n              >\n                <XCircle className=\"h-6 w-6\" />\n              </button>\n            </div>\n            \n            <div className=\"bg-black text-green-400 p-4 rounded-lg font-mono text-sm max-h-96 overflow-y-auto\">\n              <pre>{containerLogs}</pre>\n            </div>\n            \n            <div className=\"mt-4 flex justify-end\">\n              <button\n                onClick={() => setShowLogs(false)}\n                className=\"bg-gray-600 text-white px-4 py-2 rounded-md text-sm font-medium hover:bg-gray-700 transition-colors\"\n              >\n                Close\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default DockerContainerManagement;","size_bytes":19227},"src/pages/production-deployment-and-infrastructure-management/components/EnvironmentPromotionControls.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { ArrowRight, CheckCircle, XCircle, Clock, RefreshCw, AlertTriangle, Settings, GitBranch, Database, Globe, Activity, Eye, RotateCcw, Zap } from 'lucide-react';\n\nconst EnvironmentPromotionControls = () => {\n  const [environments, setEnvironments] = useState([]);\n  const [promotionQueue, setPromotionQueue] = useState([]);\n  const [validationRules, setValidationRules] = useState([]);\n  const [approvalWorkflow, setApprovalWorkflow] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [promotingId, setPromotingId] = useState(null);\n  const [showApprovalModal, setShowApprovalModal] = useState(null);\n\n  // Load environment promotion data\n  useEffect(() => {\n    loadEnvironmentData();\n  }, []);\n\n  const loadEnvironmentData = async () => {\n    setLoading(true);\n    try {\n      // Simulate API calls for environment data\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // Mock environments\n      setEnvironments([\n        {\n          id: 'development',\n          name: 'Development',\n          type: 'development',\n          status: 'healthy',\n          currentVersion: 'v2.4.3-dev',\n          lastDeployment: new Date(Date.now() - 3600000)?.toISOString(),\n          branch: 'feature/infrastructure-management',\n          url: 'https://dev.nova-hr.company.com',\n          healthChecks: 8,\n          healthStatus: 'passing',\n          resources: {\n            cpu: 15,\n            memory: 45,\n            storage: 23\n          }\n        },\n        {\n          id: 'staging',\n          name: 'Staging',\n          type: 'staging',\n          status: 'healthy',\n          currentVersion: 'v2.4.2',\n          lastDeployment: new Date(Date.now() - 86400000)?.toISOString(),\n          branch: 'main',\n          url: 'https://staging.nova-hr.company.com',\n          healthChecks: 12,\n          healthStatus: 'passing',\n          resources: {\n            cpu: 28,\n            memory: 67,\n            storage: 41\n          }\n        },\n        {\n          id: 'production',\n          name: 'Production',\n          type: 'production',\n          status: 'healthy',\n          currentVersion: 'v2.4.1',\n          lastDeployment: new Date(Date.now() - 172800000)?.toISOString(),\n          branch: 'main',\n          url: 'https://nova-hr.company.com',\n          healthChecks: 15,\n          healthStatus: 'passing',\n          resources: {\n            cpu: 42,\n            memory: 78,\n            storage: 65\n          }\n        }\n      ]);\n\n      // Mock promotion queue\n      setPromotionQueue([\n        {\n          id: 'promo-001',\n          fromEnvironment: 'development',\n          toEnvironment: 'staging',\n          version: 'v2.4.3-dev',\n          status: 'pending_validation',\n          createdAt: new Date(Date.now() - 1800000)?.toISOString(),\n          createdBy: 'jane.developer',\n          validationsPassed: 6,\n          validationsTotal: 8,\n          approvals: []\n        },\n        {\n          id: 'promo-002',\n          fromEnvironment: 'staging',\n          toEnvironment: 'production',\n          version: 'v2.4.2',\n          status: 'pending_approval',\n          createdAt: new Date(Date.now() - 7200000)?.toISOString(),\n          createdBy: 'mike.devops',\n          validationsPassed: 12,\n          validationsTotal: 12,\n          approvals: [\n            { user: 'tech.lead', status: 'approved', timestamp: new Date(Date.now() - 3600000)?.toISOString() }\n          ]\n        }\n      ]);\n\n      // Mock validation rules\n      setValidationRules([\n        {\n          id: 'rule-001',\n          name: 'Unit Tests Pass',\n          type: 'automated',\n          required: true,\n          status: 'enabled',\n          lastRun: new Date(Date.now() - 900000)?.toISOString(),\n          success: true\n        },\n        {\n          id: 'rule-002',\n          name: 'Integration Tests Pass',\n          type: 'automated',\n          required: true,\n          status: 'enabled',\n          lastRun: new Date(Date.now() - 1200000)?.toISOString(),\n          success: true\n        },\n        {\n          id: 'rule-003',\n          name: 'Security Scan Clean',\n          type: 'automated',\n          required: true,\n          status: 'enabled',\n          lastRun: new Date(Date.now() - 1800000)?.toISOString(),\n          success: false,\n          error: 'High severity vulnerability found'\n        },\n        {\n          id: 'rule-004',\n          name: 'Performance Benchmark',\n          type: 'automated',\n          required: false,\n          status: 'enabled',\n          lastRun: new Date(Date.now() - 2400000)?.toISOString(),\n          success: true\n        },\n        {\n          id: 'rule-005',\n          name: 'Database Migration Check',\n          type: 'automated',\n          required: true,\n          status: 'enabled',\n          lastRun: new Date(Date.now() - 600000)?.toISOString(),\n          success: true\n        },\n        {\n          id: 'rule-006',\n          name: 'Tech Lead Approval',\n          type: 'manual',\n          required: true,\n          status: 'enabled',\n          environments: ['production']\n        },\n        {\n          id: 'rule-007',\n          name: 'Product Owner Approval',\n          type: 'manual',\n          required: false,\n          status: 'enabled',\n          environments: ['production']\n        }\n      ]);\n\n      // Mock approval workflow\n      setApprovalWorkflow({\n        staging: {\n          required: false,\n          approvers: []\n        },\n        production: {\n          required: true,\n          approvers: [\n            { role: 'tech_lead', required: true, name: 'Technical Lead' },\n            { role: 'product_owner', required: false, name: 'Product Owner' },\n            { role: 'devops_manager', required: true, name: 'DevOps Manager' }\n          ]\n        }\n      });\n\n    } catch (error) {\n      console.error('Failed to load environment data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handlePromotion = async (fromEnv, toEnv) => {\n    try {\n      setPromotingId(`${fromEnv}-${toEnv}`);\n      console.log(`Starting promotion from ${fromEnv} to ${toEnv}`);\n      \n      // Simulate promotion process\n      await new Promise(resolve => setTimeout(resolve, 3000));\n      \n      // Create new promotion queue item\n      const newPromotion = {\n        id: `promo-${Date.now()}`,\n        fromEnvironment: fromEnv,\n        toEnvironment: toEnv,\n        version: environments?.find(e => e?.id === fromEnv)?.currentVersion || 'unknown',\n        status: 'validation_running',\n        createdAt: new Date()?.toISOString(),\n        createdBy: 'current.user',\n        validationsPassed: 0,\n        validationsTotal: validationRules?.filter(r => r?.required)?.length || 0,\n        approvals: []\n      };\n\n      setPromotionQueue(prev => [newPromotion, ...prev]);\n      \n      // Start validation process simulation\n      setTimeout(() => {\n        setPromotionQueue(prev => prev?.map(p => \n          p?.id === newPromotion?.id \n            ? { ...p, status: 'pending_approval', validationsPassed: p?.validationsTotal }\n            : p\n        ));\n      }, 2000);\n      \n    } catch (error) {\n      console.error('Failed to promote environment:', error);\n    } finally {\n      setPromotingId(null);\n    }\n  };\n\n  const handleApproval = async (promotionId, action) => {\n    try {\n      console.log(`${action} promotion ${promotionId}`);\n      \n      // Update promotion status\n      setPromotionQueue(prev => prev?.map(p => \n        p?.id === promotionId \n          ? { \n              ...p, \n              status: action === 'approve' ? 'approved' : 'rejected',\n              approvals: [...(p?.approvals || []), {\n                user: 'current.user',\n                status: action === 'approve' ? 'approved' : 'rejected',\n                timestamp: new Date()?.toISOString()\n              }]\n            }\n          : p\n      ));\n      \n      if (action === 'approve') {\n        // Simulate deployment\n        setTimeout(() => {\n          setPromotionQueue(prev => prev?.map(p => \n            p?.id === promotionId \n              ? { ...p, status: 'deploying' }\n              : p\n          ));\n        }, 1000);\n        \n        setTimeout(() => {\n          setPromotionQueue(prev => prev?.map(p => \n            p?.id === promotionId \n              ? { ...p, status: 'completed' }\n              : p\n          ));\n        }, 3000);\n      }\n      \n    } catch (error) {\n      console.error(`Failed to ${action} promotion:`, error);\n    } finally {\n      setShowApprovalModal(null);\n    }\n  };\n\n  const getEnvironmentIcon = (type) => {\n    switch (type) {\n      case 'development':\n        return <Settings className=\"h-5 w-5 text-blue-500\" />;\n      case 'staging':\n        return <Eye className=\"h-5 w-5 text-yellow-500\" />;\n      case 'production':\n        return <Globe className=\"h-5 w-5 text-green-500\" />;\n      default:\n        return <Database className=\"h-5 w-5 text-gray-500\" />;\n    }\n  };\n\n  const getStatusIcon = (status) => {\n    switch (status) {\n      case 'completed':\n        return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\n      case 'failed': case'rejected':\n        return <XCircle className=\"h-4 w-4 text-red-500\" />;\n      case 'deploying': case'validation_running':\n        return <RefreshCw className=\"h-4 w-4 text-blue-500 animate-spin\" />;\n      case 'pending_approval':\n        return <Clock className=\"h-4 w-4 text-yellow-500\" />;\n      default:\n        return <Clock className=\"h-4 w-4 text-gray-500\" />;\n    }\n  };\n\n  const getStatusColor = (status) => {\n    switch (status) {\n      case 'completed':\n        return 'text-green-700 bg-green-50 border-green-200';\n      case 'failed': case'rejected':\n        return 'text-red-700 bg-red-50 border-red-200';\n      case 'deploying': case'validation_running':\n        return 'text-blue-700 bg-blue-50 border-blue-200';\n      case 'pending_approval':\n        return 'text-yellow-700 bg-yellow-50 border-yellow-200';\n      default:\n        return 'text-gray-700 bg-gray-50 border-gray-200';\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <Activity className=\"h-8 w-8 animate-spin text-blue-600\" />\n        <span className=\"ml-2 text-gray-600\">Loading environment data...</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Environment Overview */}\n      <div className=\"bg-white rounded-lg border overflow-hidden\">\n        <div className=\"bg-gray-50 px-6 py-4 border-b\">\n          <h3 className=\"text-lg font-semibold text-gray-900\">Environment Status</h3>\n          <p className=\"text-sm text-gray-600 mt-1\">Current status of all deployment environments</p>\n        </div>\n\n        <div className=\"p-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            {environments?.map((env) => (\n              <div key={env?.id} className=\"border rounded-lg p-4 hover:shadow-md transition-shadow\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className=\"flex items-center space-x-3\">\n                    {getEnvironmentIcon(env?.type)}\n                    <div>\n                      <h4 className=\"font-semibold text-gray-900\">{env?.name}</h4>\n                      <div className=\"text-sm text-gray-500\">{env?.url}</div>\n                    </div>\n                  </div>\n                  <div className={`w-3 h-3 rounded-full ${\n                    env?.status === 'healthy' ? 'bg-green-500' : 'bg-red-500'\n                  }`} />\n                </div>\n\n                <div className=\"space-y-3\">\n                  <div>\n                    <div className=\"text-sm text-gray-600\">Current Version</div>\n                    <div className=\"font-mono text-sm text-gray-900\">{env?.currentVersion}</div>\n                  </div>\n                  \n                  <div>\n                    <div className=\"text-sm text-gray-600\">Branch</div>\n                    <div className=\"flex items-center space-x-1\">\n                      <GitBranch className=\"h-3 w-3 text-gray-500\" />\n                      <span className=\"font-mono text-sm text-gray-900\">{env?.branch}</span>\n                    </div>\n                  </div>\n\n                  <div>\n                    <div className=\"text-sm text-gray-600\">Health Checks</div>\n                    <div className=\"flex items-center space-x-2\">\n                      <span className=\"text-sm font-medium\">{env?.healthChecks} passing</span>\n                      <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                    </div>\n                  </div>\n\n                  <div>\n                    <div className=\"text-sm text-gray-600 mb-2\">Resource Usage</div>\n                    <div className=\"space-y-1\">\n                      <div className=\"flex justify-between text-xs\">\n                        <span>CPU: {env?.resources?.cpu}%</span>\n                        <span>Memory: {env?.resources?.memory}%</span>\n                        <span>Storage: {env?.resources?.storage}%</span>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"text-xs text-gray-500\">\n                    Last deployed: {new Date(env?.lastDeployment)?.toLocaleDateString()}\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n\n          {/* Promotion Controls */}\n          <div className=\"mt-8 flex justify-center\">\n            <div className=\"flex items-center space-x-8\">\n              {/* Dev to Staging */}\n              <button\n                onClick={() => handlePromotion('development', 'staging')}\n                disabled={promotingId === 'development-staging'}\n                className=\"bg-blue-600 text-white px-4 py-2 rounded-md text-sm font-medium hover:bg-blue-700 transition-colors flex items-center space-x-2 disabled:opacity-50\"\n              >\n                {promotingId === 'development-staging' ? (\n                  <RefreshCw className=\"h-4 w-4 animate-spin\" />\n                ) : (\n                  <ArrowRight className=\"h-4 w-4\" />\n                )}\n                <span>Promote to Staging</span>\n              </button>\n\n              {/* Staging to Production */}\n              <button\n                onClick={() => handlePromotion('staging', 'production')}\n                disabled={promotingId === 'staging-production'}\n                className=\"bg-green-600 text-white px-4 py-2 rounded-md text-sm font-medium hover:bg-green-700 transition-colors flex items-center space-x-2 disabled:opacity-50\"\n              >\n                {promotingId === 'staging-production' ? (\n                  <RefreshCw className=\"h-4 w-4 animate-spin\" />\n                ) : (\n                  <ArrowRight className=\"h-4 w-4\" />\n                )}\n                <span>Promote to Production</span>\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n      {/* Promotion Queue */}\n      <div className=\"bg-white rounded-lg border overflow-hidden\">\n        <div className=\"bg-gray-50 px-6 py-4 border-b\">\n          <h3 className=\"text-lg font-semibold text-gray-900\">Promotion Queue</h3>\n          <p className=\"text-sm text-gray-600 mt-1\">Active and pending environment promotions</p>\n        </div>\n\n        <div className=\"p-6\">\n          {promotionQueue?.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <Activity className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n              <h4 className=\"text-lg font-medium text-gray-900 mb-2\">No Active Promotions</h4>\n              <p className=\"text-gray-600\">All environments are up to date</p>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {promotionQueue?.map((promotion) => (\n                <div key={promotion?.id} className={`border rounded-lg p-4 ${getStatusColor(promotion?.status)}`}>\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <div className=\"flex items-center space-x-3\">\n                      {getStatusIcon(promotion?.status)}\n                      <div>\n                        <h4 className=\"font-semibold text-gray-900\">\n                          {promotion?.fromEnvironment} → {promotion?.toEnvironment}\n                        </h4>\n                        <div className=\"text-sm text-gray-600\">\n                          Version: {promotion?.version} • By: {promotion?.createdBy}\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getStatusColor(promotion?.status)}`}>\n                        {promotion?.status?.replace('_', ' ')}\n                      </div>\n                      <div className=\"text-xs text-gray-500 mt-1\">\n                        {new Date(promotion?.createdAt)?.toLocaleString()}\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Validation Progress */}\n                  <div className=\"mb-3\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className=\"text-sm text-gray-600\">Validations</span>\n                      <span className=\"text-sm font-medium\">\n                        {promotion?.validationsPassed}/{promotion?.validationsTotal} passed\n                      </span>\n                    </div>\n                    <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                      <div \n                        className={`h-2 rounded-full ${\n                          promotion?.validationsPassed === promotion?.validationsTotal ? 'bg-green-500' : 'bg-blue-500'\n                        }`}\n                        style={{ width: `${(promotion?.validationsPassed / promotion?.validationsTotal) * 100}%` }}\n                      />\n                    </div>\n                  </div>\n\n                  {/* Approval Status */}\n                  {promotion?.toEnvironment === 'production' && (\n                    <div className=\"mb-3\">\n                      <div className=\"text-sm text-gray-600 mb-2\">Approvals</div>\n                      <div className=\"flex items-center space-x-2\">\n                        {promotion?.approvals?.map((approval, index) => (\n                          <div key={index} className=\"flex items-center space-x-1\">\n                            {approval?.status === 'approved' ? (\n                              <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                            ) : (\n                              <XCircle className=\"h-4 w-4 text-red-500\" />\n                            )}\n                            <span className=\"text-xs text-gray-600\">{approval?.user}</span>\n                          </div>\n                        ))}\n                        {promotion?.status === 'pending_approval' && promotion?.approvals?.length === 0 && (\n                          <button\n                            onClick={() => setShowApprovalModal(promotion?.id)}\n                            className=\"bg-yellow-100 text-yellow-800 px-2 py-1 rounded text-xs font-medium hover:bg-yellow-200 transition-colors\"\n                          >\n                            Pending Approval\n                          </button>\n                        )}\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Actions */}\n                  <div className=\"flex items-center justify-end space-x-2\">\n                    {promotion?.status === 'pending_approval' && (\n                      <button\n                        onClick={() => setShowApprovalModal(promotion?.id)}\n                        className=\"text-blue-600 hover:text-blue-800 text-sm font-medium\"\n                      >\n                        Review & Approve\n                      </button>\n                    )}\n                    {(promotion?.status === 'failed' || promotion?.status === 'rejected') && (\n                      <button\n                        onClick={() => handlePromotion(promotion?.fromEnvironment, promotion?.toEnvironment)}\n                        className=\"text-green-600 hover:text-green-800 text-sm font-medium flex items-center space-x-1\"\n                      >\n                        <RotateCcw className=\"h-3 w-3\" />\n                        <span>Retry</span>\n                      </button>\n                    )}\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n      {/* Validation Rules */}\n      <div className=\"bg-white rounded-lg border overflow-hidden\">\n        <div className=\"bg-gray-50 px-6 py-4 border-b\">\n          <h3 className=\"text-lg font-semibold text-gray-900\">Validation Rules</h3>\n          <p className=\"text-sm text-gray-600 mt-1\">Automated checks required for environment promotions</p>\n        </div>\n\n        <div className=\"p-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {validationRules?.map((rule) => (\n              <div key={rule?.id} className={`border rounded-lg p-3 ${\n                rule?.success === false ? 'border-red-200 bg-red-50' : 'border-gray-200'\n              }`}>\n                <div className=\"flex items-center justify-between mb-2\">\n                  <div className=\"flex items-center space-x-2\">\n                    {rule?.type === 'automated' ? (\n                      <Zap className=\"h-4 w-4 text-blue-500\" />\n                    ) : (\n                      <Eye className=\"h-4 w-4 text-purple-500\" />\n                    )}\n                    <span className=\"font-medium text-gray-900\">{rule?.name}</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    {rule?.required && (\n                      <span className=\"inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-orange-100 text-orange-800\">\n                        Required\n                      </span>\n                    )}\n                    {rule?.type === 'automated' && (\n                      rule?.success ? (\n                        <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                      ) : rule?.success === false ? (\n                        <XCircle className=\"h-4 w-4 text-red-500\" />\n                      ) : (\n                        <Clock className=\"h-4 w-4 text-gray-400\" />\n                      )\n                    )}\n                  </div>\n                </div>\n                \n                {rule?.type === 'automated' && (\n                  <div className=\"text-xs text-gray-500\">\n                    Last run: {new Date(rule?.lastRun)?.toLocaleString()}\n                    {rule?.error && (\n                      <div className=\"text-red-600 mt-1\">{rule?.error}</div>\n                    )}\n                  </div>\n                )}\n\n                {rule?.environments && (\n                  <div className=\"text-xs text-gray-500 mt-1\">\n                    Applies to: {rule?.environments?.join(', ')}\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n      {/* Approval Modal */}\n      {showApprovalModal && (\n        <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50\">\n          <div className=\"relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white\">\n            <div className=\"flex items-center mb-4\">\n              <AlertTriangle className=\"h-6 w-6 text-yellow-500 mr-2\" />\n              <h3 className=\"text-lg font-semibold text-gray-900\">Approve Promotion</h3>\n            </div>\n            \n            <div className=\"mb-6\">\n              <p className=\"text-sm text-gray-600 mb-4\">\n                Review the promotion request and provide approval for deployment to production environment.\n              </p>\n              \n              {/* Promotion Details */}\n              {promotionQueue?.find(p => p?.id === showApprovalModal) && (\n                <div className=\"bg-gray-50 rounded-lg p-3\">\n                  <div className=\"text-sm space-y-1\">\n                    <div><strong>Version:</strong> {promotionQueue?.find(p => p?.id === showApprovalModal)?.version}</div>\n                    <div><strong>From:</strong> {promotionQueue?.find(p => p?.id === showApprovalModal)?.fromEnvironment}</div>\n                    <div><strong>To:</strong> {promotionQueue?.find(p => p?.id === showApprovalModal)?.toEnvironment}</div>\n                    <div><strong>Created by:</strong> {promotionQueue?.find(p => p?.id === showApprovalModal)?.createdBy}</div>\n                  </div>\n                </div>\n              )}\n            </div>\n            \n            <div className=\"flex justify-end space-x-2\">\n              <button\n                onClick={() => setShowApprovalModal(null)}\n                className=\"bg-gray-600 text-white px-4 py-2 rounded-md text-sm font-medium hover:bg-gray-700 transition-colors\"\n              >\n                Cancel\n              </button>\n              <button\n                onClick={() => handleApproval(showApprovalModal, 'reject')}\n                className=\"bg-red-600 text-white px-4 py-2 rounded-md text-sm font-medium hover:bg-red-700 transition-colors\"\n              >\n                Reject\n              </button>\n              <button\n                onClick={() => handleApproval(showApprovalModal, 'approve')}\n                className=\"bg-green-600 text-white px-4 py-2 rounded-md text-sm font-medium hover:bg-green-700 transition-colors\"\n              >\n                Approve\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default EnvironmentPromotionControls;","size_bytes":25921},"src/pages/production-deployment-and-infrastructure-management/components/InfrastructureMonitoringPanel.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { \n  Server, \n  Database, \n  Activity, \n  Cpu, \n  HardDrive, \n  Wifi, \n  AlertTriangle, \n  CheckCircle, \n  RefreshCw,\n  Globe,\n  Cloud,\n  Monitor,\n  Zap\n} from 'lucide-react';\n\nconst InfrastructureMonitoringPanel = () => {\n  const [serverMetrics, setServerMetrics] = useState([]);\n  const [systemHealth, setSystemHealth] = useState({});\n  const [alerts, setAlerts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [refreshing, setRefreshing] = useState(false);\n\n  // Load infrastructure monitoring data\n  useEffect(() => {\n    loadMonitoringData();\n  }, []);\n\n  const loadMonitoringData = async () => {\n    setLoading(true);\n    try {\n      // Simulate API call for real monitoring data\n      await new Promise(resolve => setTimeout(resolve, 1500));\n\n      // Mock server metrics\n      setServerMetrics([\n        {\n          id: 'web-01',\n          name: 'Production Web Server 1',\n          type: 'web',\n          status: 'healthy',\n          cpu: 42,\n          memory: 78,\n          disk: 65,\n          network: 'stable',\n          uptime: '15d 4h 23m',\n          location: 'US East',\n          lastUpdate: new Date()?.toISOString()\n        },\n        {\n          id: 'web-02',\n          name: 'Production Web Server 2',\n          type: 'web',\n          status: 'warning',\n          cpu: 85,\n          memory: 92,\n          disk: 45,\n          network: 'stable',\n          uptime: '15d 4h 23m',\n          location: 'US East',\n          lastUpdate: new Date()?.toISOString()\n        },\n        {\n          id: 'db-01',\n          name: 'Primary Database Server',\n          type: 'database',\n          status: 'healthy',\n          cpu: 28,\n          memory: 55,\n          disk: 73,\n          network: 'stable',\n          uptime: '32d 12h 45m',\n          location: 'US East',\n          lastUpdate: new Date()?.toISOString()\n        },\n        {\n          id: 'lb-01',\n          name: 'Load Balancer',\n          type: 'loadbalancer',\n          status: 'healthy',\n          cpu: 15,\n          memory: 32,\n          disk: 25,\n          network: 'stable',\n          uptime: '45d 8h 12m',\n          location: 'US East',\n          lastUpdate: new Date()?.toISOString()\n        }\n      ]);\n\n      // System health overview\n      setSystemHealth({\n        overallStatus: 'healthy',\n        totalRequests: 1247892,\n        avgResponseTime: 245,\n        errorRate: 0.012,\n        bandwidth: 2.4,\n        activeConnections: 1847,\n        queuedJobs: 23,\n        cacheHitRate: 96.7\n      });\n\n      // System alerts\n      setAlerts([\n        {\n          id: 1,\n          severity: 'warning',\n          server: 'web-02',\n          message: 'High memory usage detected (92%)',\n          timestamp: new Date(Date.now() - 600000)?.toISOString(),\n          resolved: false\n        },\n        {\n          id: 2,\n          severity: 'info',\n          server: 'db-01',\n          message: 'Automatic backup completed successfully',\n          timestamp: new Date(Date.now() - 3600000)?.toISOString(),\n          resolved: true\n        },\n        {\n          id: 3,\n          severity: 'critical',\n          server: 'web-01',\n          message: 'SSL certificate expires in 7 days',\n          timestamp: new Date(Date.now() - 7200000)?.toISOString(),\n          resolved: false\n        }\n      ]);\n\n    } catch (error) {\n      console.error('Failed to load monitoring data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleRefresh = async () => {\n    setRefreshing(true);\n    await loadMonitoringData();\n    setRefreshing(false);\n  };\n\n  const getStatusColor = (status) => {\n    switch (status) {\n      case 'healthy':\n        return 'text-green-600 bg-green-50 border-green-200';\n      case 'warning':\n        return 'text-yellow-600 bg-yellow-50 border-yellow-200';\n      case 'critical':\n        return 'text-red-600 bg-red-50 border-red-200';\n      default:\n        return 'text-gray-600 bg-gray-50 border-gray-200';\n    }\n  };\n\n  const getServerIcon = (type) => {\n    switch (type) {\n      case 'web':\n        return Globe;\n      case 'database':\n        return Database;\n      case 'loadbalancer':\n        return Cloud;\n      default:\n        return Server;\n    }\n  };\n\n  const getMetricColor = (value) => {\n    if (value >= 90) return 'text-red-600';\n    if (value >= 70) return 'text-yellow-600';\n    return 'text-green-600';\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <Activity className=\"h-8 w-8 animate-spin text-blue-600\" />\n        <span className=\"ml-2 text-gray-600\">Loading infrastructure metrics...</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* System Health Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <div className=\"bg-white border rounded-lg p-4\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <h3 className=\"text-sm font-medium text-gray-700\">Total Requests</h3>\n            <Activity className=\"h-4 w-4 text-blue-500\" />\n          </div>\n          <div className=\"text-2xl font-bold text-gray-900\">\n            {systemHealth?.totalRequests?.toLocaleString()}\n          </div>\n          <div className=\"text-sm text-green-600\">+2.1% from last hour</div>\n        </div>\n\n        <div className=\"bg-white border rounded-lg p-4\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <h3 className=\"text-sm font-medium text-gray-700\">Response Time</h3>\n            <Zap className=\"h-4 w-4 text-yellow-500\" />\n          </div>\n          <div className=\"text-2xl font-bold text-gray-900\">\n            {systemHealth?.avgResponseTime}ms\n          </div>\n          <div className=\"text-sm text-green-600\">-15ms from average</div>\n        </div>\n\n        <div className=\"bg-white border rounded-lg p-4\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <h3 className=\"text-sm font-medium text-gray-700\">Error Rate</h3>\n            <AlertTriangle className=\"h-4 w-4 text-red-500\" />\n          </div>\n          <div className=\"text-2xl font-bold text-gray-900\">\n            {(systemHealth?.errorRate * 100)?.toFixed(3)}%\n          </div>\n          <div className=\"text-sm text-green-600\">Within normal range</div>\n        </div>\n\n        <div className=\"bg-white border rounded-lg p-4\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <h3 className=\"text-sm font-medium text-gray-700\">Cache Hit Rate</h3>\n            <Database className=\"h-4 w-4 text-purple-500\" />\n          </div>\n          <div className=\"text-2xl font-bold text-gray-900\">\n            {systemHealth?.cacheHitRate}%\n          </div>\n          <div className=\"text-sm text-green-600\">Excellent performance</div>\n        </div>\n      </div>\n      {/* Server Status Grid */}\n      <div className=\"bg-white rounded-lg border overflow-hidden\">\n        <div className=\"bg-gray-50 px-6 py-4 border-b flex items-center justify-between\">\n          <div>\n            <h3 className=\"text-lg font-semibold text-gray-900\">Server Status</h3>\n            <p className=\"text-sm text-gray-600 mt-1\">Real-time server monitoring and health metrics</p>\n          </div>\n          <button\n            onClick={handleRefresh}\n            disabled={refreshing}\n            className=\"bg-blue-600 text-white px-4 py-2 rounded-md text-sm font-medium hover:bg-blue-700 transition-colors flex items-center space-x-2 disabled:opacity-50\"\n          >\n            <RefreshCw className={`h-4 w-4 ${refreshing ? 'animate-spin' : ''}`} />\n            <span>Refresh</span>\n          </button>\n        </div>\n\n        <div className=\"p-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {serverMetrics?.map((server) => {\n              const ServerIcon = getServerIcon(server?.type);\n              return (\n                <div key={server?.id} className={`border-2 rounded-lg p-4 ${getStatusColor(server?.status)}`}>\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className={`p-2 rounded-lg ${\n                        server?.status === 'healthy' ? 'bg-green-100' :\n                        server?.status === 'warning'? 'bg-yellow-100' : 'bg-red-100'\n                      }`}>\n                        <ServerIcon className={`h-5 w-5 ${\n                          server?.status === 'healthy' ? 'text-green-600' :\n                          server?.status === 'warning'? 'text-yellow-600' : 'text-red-600'\n                        }`} />\n                      </div>\n                      <div>\n                        <h4 className=\"font-semibold text-gray-900\">{server?.name}</h4>\n                        <p className=\"text-sm text-gray-600\">{server?.id} • {server?.location}</p>\n                      </div>\n                    </div>\n                    {server?.status === 'healthy' ? (\n                      <CheckCircle className=\"h-5 w-5 text-green-500\" />\n                    ) : (\n                      <AlertTriangle className=\"h-5 w-5 text-yellow-500\" />\n                    )}\n                  </div>\n                  {/* Metrics */}\n                  <div className=\"grid grid-cols-2 gap-4 mb-4\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Cpu className=\"h-4 w-4 text-blue-500\" />\n                      <div>\n                        <div className=\"text-sm text-gray-600\">CPU</div>\n                        <div className={`font-semibold ${getMetricColor(server?.cpu)}`}>\n                          {server?.cpu}%\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center space-x-2\">\n                      <Monitor className=\"h-4 w-4 text-purple-500\" />\n                      <div>\n                        <div className=\"text-sm text-gray-600\">Memory</div>\n                        <div className={`font-semibold ${getMetricColor(server?.memory)}`}>\n                          {server?.memory}%\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center space-x-2\">\n                      <HardDrive className=\"h-4 w-4 text-orange-500\" />\n                      <div>\n                        <div className=\"text-sm text-gray-600\">Disk</div>\n                        <div className={`font-semibold ${getMetricColor(server?.disk)}`}>\n                          {server?.disk}%\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center space-x-2\">\n                      <Wifi className=\"h-4 w-4 text-green-500\" />\n                      <div>\n                        <div className=\"text-sm text-gray-600\">Network</div>\n                        <div className=\"font-semibold text-green-600\">\n                          {server?.network}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  {/* Additional Info */}\n                  <div className=\"flex items-center justify-between text-sm text-gray-600 pt-4 border-t\">\n                    <span>Uptime: {server?.uptime}</span>\n                    <span>Last updated: {new Date(server?.lastUpdate)?.toLocaleTimeString()}</span>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n      {/* System Alerts */}\n      <div className=\"bg-white rounded-lg border overflow-hidden\">\n        <div className=\"bg-gray-50 px-6 py-4 border-b\">\n          <h3 className=\"text-lg font-semibold text-gray-900\">System Alerts</h3>\n          <p className=\"text-sm text-gray-600 mt-1\">Recent system notifications and alerts</p>\n        </div>\n\n        <div className=\"p-6\">\n          {alerts?.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <CheckCircle className=\"h-12 w-12 text-green-500 mx-auto mb-4\" />\n              <h4 className=\"text-lg font-medium text-gray-900 mb-2\">All Systems Normal</h4>\n              <p className=\"text-gray-600\">No active alerts or issues detected</p>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {alerts?.map((alert) => (\n                <div key={alert?.id} className={`border rounded-lg p-4 ${\n                  alert?.severity === 'critical' ? 'border-red-200 bg-red-50' :\n                  alert?.severity === 'warning'? 'border-yellow-200 bg-yellow-50' : 'border-blue-200 bg-blue-50'\n                } ${alert?.resolved ? 'opacity-60' : ''}`}>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-3\">\n                      {alert?.severity === 'critical' ? (\n                        <AlertTriangle className=\"h-5 w-5 text-red-500\" />\n                      ) : alert?.severity === 'warning' ? (\n                        <AlertTriangle className=\"h-5 w-5 text-yellow-500\" />\n                      ) : (\n                        <CheckCircle className=\"h-5 w-5 text-blue-500\" />\n                      )}\n                      <div>\n                        <div className=\"flex items-center space-x-2\">\n                          <span className={`px-2 py-1 text-xs rounded-full font-medium ${\n                            alert?.severity === 'critical' ? 'bg-red-100 text-red-800' :\n                            alert?.severity === 'warning'? 'bg-yellow-100 text-yellow-800' : 'bg-blue-100 text-blue-800'\n                          }`}>\n                            {alert?.severity}\n                          </span>\n                          <span className=\"font-medium text-gray-900\">{alert?.server}</span>\n                          {alert?.resolved && (\n                            <span className=\"px-2 py-1 text-xs rounded-full font-medium bg-green-100 text-green-800\">\n                              Resolved\n                            </span>\n                          )}\n                        </div>\n                        <p className=\"text-gray-700 mt-1\">{alert?.message}</p>\n                      </div>\n                    </div>\n                    <div className=\"text-sm text-gray-500\">\n                      {new Date(alert?.timestamp)?.toLocaleString()}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default InfrastructureMonitoringPanel;","size_bytes":14710},"src/pages/production-deployment-and-infrastructure-management/components/NginxConfigurationPanel.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Server, Globe, CheckCircle, AlertTriangle, RefreshCw, Edit3, Save, Eye, Lock } from 'lucide-react';\n\nconst NginxConfigurationPanel = () => {\n  const [nginxStatus, setNginxStatus] = useState({});\n  const [configurations, setConfigurations] = useState([]);\n  const [sslCertificates, setSslCertificates] = useState([]);\n  const [loadBalancing, setLoadBalancing] = useState({});\n  const [cacheSettings, setCacheSettings] = useState({});\n  const [securityHeaders, setSecurityHeaders] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [editingConfig, setEditingConfig] = useState(null);\n  const [configContent, setConfigContent] = useState('');\n\n  // Load Nginx configuration data\n  useEffect(() => {\n    loadNginxData();\n  }, []);\n\n  const loadNginxData = async () => {\n    setLoading(true);\n    try {\n      // Simulate API calls for Nginx configuration\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // Mock Nginx status\n      setNginxStatus({\n        status: 'running',\n        version: '1.24.0',\n        uptime: '15d 4h 23m',\n        connections: 1847,\n        requests: 2847293,\n        requestsPerSecond: 127.3,\n        loadTime: 0.034\n      });\n\n      // Mock configurations\n      setConfigurations([\n        {\n          id: 'nova-hr-prod',\n          name: 'Nova HR Production',\n          domain: 'nova-hr.company.com',\n          type: 'production',\n          status: 'active',\n          ssl: true,\n          lastModified: new Date(Date.now() - 86400000)?.toISOString(),\n          upstream: 'nova-hr-backend'\n        },\n        {\n          id: 'nova-hr-staging',\n          name: 'Nova HR Staging',\n          domain: 'staging.nova-hr.company.com',\n          type: 'staging',\n          status: 'active',\n          ssl: true,\n          lastModified: new Date(Date.now() - 172800000)?.toISOString(),\n          upstream: 'nova-hr-staging-backend'\n        },\n        {\n          id: 'nova-hr-api',\n          name: 'Nova HR API Gateway',\n          domain: 'api.nova-hr.company.com',\n          type: 'api',\n          status: 'active',\n          ssl: true,\n          lastModified: new Date(Date.now() - 259200000)?.toISOString(),\n          upstream: 'nova-hr-api-backend'\n        }\n      ]);\n\n      // Mock SSL certificates\n      setSslCertificates([\n        {\n          id: 'nova-hr-ssl',\n          domain: 'nova-hr.company.com',\n          issuer: 'Let\\'s Encrypt',\n          validFrom: new Date(Date.now() - 7776000000)?.toISOString(),\n          validTo: new Date(Date.now() + 7776000000)?.toISOString(),\n          status: 'valid',\n          autoRenewal: true\n        },\n        {\n          id: 'staging-ssl',\n          domain: '*.staging.nova-hr.company.com',\n          issuer: 'Let\\'s Encrypt',\n          validFrom: new Date(Date.now() - 7776000000)?.toISOString(),\n          validTo: new Date(Date.now() + 604800000)?.toISOString(),\n          status: 'expires_soon',\n          autoRenewal: true\n        }\n      ]);\n\n      // Mock load balancing configuration\n      setLoadBalancing({\n        enabled: true,\n        algorithm: 'round_robin',\n        healthChecks: true,\n        failoverTimeout: 30,\n        backends: [\n          { id: 'backend-1', address: '10.0.1.10:3000', status: 'healthy', weight: 1 },\n          { id: 'backend-2', address: '10.0.1.11:3000', status: 'healthy', weight: 1 },\n          { id: 'backend-3', address: '10.0.1.12:3000', status: 'maintenance', weight: 0 }\n        ]\n      });\n\n      // Mock cache settings\n      setCacheSettings({\n        enabled: true,\n        staticCache: '1d',\n        apiCache: '5m',\n        gzipEnabled: true,\n        brotliEnabled: true,\n        cacheHitRate: 87.3,\n        purgedToday: 23\n      });\n\n      // Mock security headers\n      setSecurityHeaders({\n        hsts: { enabled: true, maxAge: 31536000 },\n        csp: { enabled: true, policy: 'default-src \\'self\\'; script-src \\'self\\' \\'unsafe-inline\\'' },\n        xFrameOptions: 'DENY',\n        xContentTypeOptions: 'nosniff',\n        referrerPolicy: 'strict-origin-when-cross-origin',\n        permissionsPolicy: 'geolocation=(), microphone=(), camera=()'\n      });\n\n    } catch (error) {\n      console.error('Failed to load Nginx data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleConfigEdit = (configId) => {\n    setEditingConfig(configId);\n    // Mock config content\n    setConfigContent(`\nserver {\n    listen 443 ssl http2;\n    server_name nova-hr.company.com;\n\n    ssl_certificate /etc/ssl/certs/nova-hr.crt;\n    ssl_certificate_key /etc/ssl/private/nova-hr.key;\n    \n    # Security Headers\n    add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\" always;\n    add_header X-Frame-Options DENY always;\n    add_header X-Content-Type-Options nosniff always;\n    \n    # Gzip Compression\n    gzip on;\n    gzip_vary on;\n    gzip_min_length 1024;\n    gzip_types text/plain text/css application/json application/javascript;\n    \n    # Cache static assets\n    location ~* \\\\.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2)$ {\n        expires 1y;\n        add_header Cache-Control \"public, immutable\";\n    }\n    \n    # Proxy to backend\n    location / {\n        proxy_pass http://nova-hr-backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n    `);\n  };\n\n  const handleConfigSave = async () => {\n    try {\n      // Simulate saving configuration\n      console.log('Saving Nginx configuration...');\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      // Update last modified timestamp\n      setConfigurations(prev => prev?.map(config => \n        config?.id === editingConfig \n          ? { ...config, lastModified: new Date()?.toISOString() }\n          : config\n      ));\n      \n      setEditingConfig(null);\n      setConfigContent('');\n    } catch (error) {\n      console.error('Failed to save configuration:', error);\n    }\n  };\n\n  const handleNginxAction = async (action) => {\n    try {\n      console.log(`Executing Nginx action: ${action}`);\n      switch (action) {\n        case 'reload': console.log('Reloading Nginx configuration...');\n          break;\n        case 'restart': console.log('Restarting Nginx service...');\n          break;\n        case 'test': console.log('Testing Nginx configuration...');\n          break;\n        default:\n          console.log(`Unknown action: ${action}`);\n      }\n    } catch (error) {\n      console.error(`Failed to execute ${action}:`, error);\n    }\n  };\n\n  const getCertificateStatus = (cert) => {\n    const daysUntilExpiry = Math.floor((new Date(cert?.validTo)?.getTime() - Date.now()) / (1000 * 60 * 60 * 24));\n    if (daysUntilExpiry < 7) return 'expires_soon';\n    if (daysUntilExpiry < 30) return 'warning';\n    return 'valid';\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <Server className=\"h-8 w-8 animate-pulse text-blue-600\" />\n        <span className=\"ml-2 text-gray-600\">Loading Nginx configuration...</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Nginx Status Overview */}\n      <div className=\"bg-white rounded-lg border p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <h3 className=\"text-lg font-semibold text-gray-900\">Nginx Status</h3>\n            <p className=\"text-sm text-gray-600\">Web server and reverse proxy status</p>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <div className={`w-3 h-3 rounded-full ${\n              nginxStatus?.status === 'running' ? 'bg-green-500' : 'bg-red-500'\n            }`} />\n            <span className={`font-medium ${\n              nginxStatus?.status === 'running' ? 'text-green-600' : 'text-red-600'\n            }`}>\n              {nginxStatus?.status}\n            </span>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-gray-900\">{nginxStatus?.connections?.toLocaleString()}</div>\n            <div className=\"text-sm text-gray-600\">Active Connections</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-gray-900\">{nginxStatus?.requests?.toLocaleString()}</div>\n            <div className=\"text-sm text-gray-600\">Total Requests</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-gray-900\">{nginxStatus?.requestsPerSecond}</div>\n            <div className=\"text-sm text-gray-600\">Requests/Second</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-gray-900\">{nginxStatus?.uptime}</div>\n            <div className=\"text-sm text-gray-600\">Uptime</div>\n          </div>\n        </div>\n\n        <div className=\"mt-6 flex space-x-2\">\n          <button\n            onClick={() => handleNginxAction('reload')}\n            className=\"bg-blue-600 text-white px-4 py-2 rounded-md text-sm font-medium hover:bg-blue-700 transition-colors flex items-center space-x-2\"\n          >\n            <RefreshCw className=\"h-4 w-4\" />\n            <span>Reload Config</span>\n          </button>\n          <button\n            onClick={() => handleNginxAction('restart')}\n            className=\"bg-orange-600 text-white px-4 py-2 rounded-md text-sm font-medium hover:bg-orange-700 transition-colors flex items-center space-x-2\"\n          >\n            <RefreshCw className=\"h-4 w-4\" />\n            <span>Restart Service</span>\n          </button>\n          <button\n            onClick={() => handleNginxAction('test')}\n            className=\"bg-gray-600 text-white px-4 py-2 rounded-md text-sm font-medium hover:bg-gray-700 transition-colors flex items-center space-x-2\"\n          >\n            <CheckCircle className=\"h-4 w-4\" />\n            <span>Test Config</span>\n          </button>\n        </div>\n      </div>\n      {/* Server Configurations */}\n      <div className=\"bg-white rounded-lg border overflow-hidden\">\n        <div className=\"bg-gray-50 px-6 py-4 border-b\">\n          <h3 className=\"text-lg font-semibold text-gray-900\">Server Configurations</h3>\n          <p className=\"text-sm text-gray-600 mt-1\">Virtual host configurations and settings</p>\n        </div>\n\n        <div className=\"p-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {configurations?.map((config) => (\n              <div key={config?.id} className=\"border rounded-lg p-4 hover:shadow-md transition-shadow\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Globe className=\"h-5 w-5 text-blue-500\" />\n                    <span className=\"font-medium text-gray-900\">{config?.name}</span>\n                  </div>\n                  <div className=\"flex items-center space-x-1\">\n                    {config?.ssl && <Lock className=\"h-4 w-4 text-green-500\" />}\n                    <div className={`w-2 h-2 rounded-full ${\n                      config?.status === 'active' ? 'bg-green-500' : 'bg-gray-400'\n                    }`} />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2 mb-4\">\n                  <div className=\"text-sm\">\n                    <span className=\"text-gray-600\">Domain: </span>\n                    <span className=\"font-mono text-gray-900\">{config?.domain}</span>\n                  </div>\n                  <div className=\"text-sm\">\n                    <span className=\"text-gray-600\">Type: </span>\n                    <span className={`inline-flex px-2 py-1 text-xs rounded-full ${\n                      config?.type === 'production' ? 'bg-green-100 text-green-800' :\n                      config?.type === 'staging'? 'bg-yellow-100 text-yellow-800' : 'bg-blue-100 text-blue-800'\n                    }`}>\n                      {config?.type}\n                    </span>\n                  </div>\n                  <div className=\"text-sm\">\n                    <span className=\"text-gray-600\">Upstream: </span>\n                    <span className=\"font-mono text-gray-900\">{config?.upstream}</span>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-xs text-gray-500\">\n                    Modified: {new Date(config?.lastModified)?.toLocaleDateString()}\n                  </span>\n                  <div className=\"flex space-x-2\">\n                    <button\n                      onClick={() => handleConfigEdit(config?.id)}\n                      className=\"text-blue-600 hover:text-blue-800\"\n                      title=\"Edit Configuration\"\n                    >\n                      <Edit3 className=\"h-4 w-4\" />\n                    </button>\n                    <button\n                      className=\"text-gray-600 hover:text-gray-800\"\n                      title=\"View Configuration\"\n                    >\n                      <Eye className=\"h-4 w-4\" />\n                    </button>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n      {/* SSL Certificates */}\n      <div className=\"bg-white rounded-lg border overflow-hidden\">\n        <div className=\"bg-gray-50 px-6 py-4 border-b\">\n          <h3 className=\"text-lg font-semibold text-gray-900\">SSL Certificates</h3>\n          <p className=\"text-sm text-gray-600 mt-1\">SSL certificate management and status</p>\n        </div>\n\n        <div className=\"overflow-x-auto\">\n          <table className=\"min-w-full divide-y divide-gray-200\">\n            <thead className=\"bg-gray-50\">\n              <tr>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Domain\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Issuer\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Valid Until\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Status\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Auto-Renewal\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {sslCertificates?.map((cert) => {\n                const status = getCertificateStatus(cert);\n                const daysUntilExpiry = Math.floor((new Date(cert?.validTo)?.getTime() - Date.now()) / (1000 * 60 * 60 * 24));\n                \n                return (\n                  <tr key={cert?.id} className=\"hover:bg-gray-50\">\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"flex items-center\">\n                        <Lock className=\"h-4 w-4 text-green-500 mr-2\" />\n                        <span className=\"font-mono text-sm text-gray-900\">{cert?.domain}</span>\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      {cert?.issuer}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      {new Date(cert?.validTo)?.toLocaleDateString()}\n                      <div className=\"text-xs text-gray-500\">\n                        ({daysUntilExpiry} days remaining)\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${\n                        status === 'valid' ? 'bg-green-100 text-green-800' :\n                        status === 'warning'? 'bg-yellow-100 text-yellow-800' : 'bg-red-100 text-red-800'\n                      }`}>\n                        {status === 'valid' ? 'Valid' :\n                         status === 'warning'? 'Expires Soon' : 'Critical'}\n                      </span>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      {cert?.autoRenewal ? (\n                        <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                      ) : (\n                        <AlertTriangle className=\"h-4 w-4 text-yellow-500\" />\n                      )}\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      </div>\n      {/* Performance & Caching */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Load Balancing */}\n        <div className=\"bg-white rounded-lg border overflow-hidden\">\n          <div className=\"bg-gray-50 px-6 py-4 border-b\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">Load Balancing</h3>\n          </div>\n          <div className=\"p-6\">\n            <div className=\"mb-4\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-sm text-gray-600\">Algorithm</span>\n                <span className=\"font-mono text-sm text-gray-900\">{loadBalancing?.algorithm}</span>\n              </div>\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-sm text-gray-600\">Health Checks</span>\n                <span className={`text-sm ${loadBalancing?.healthChecks ? 'text-green-600' : 'text-red-600'}`}>\n                  {loadBalancing?.healthChecks ? 'Enabled' : 'Disabled'}\n                </span>\n              </div>\n            </div>\n\n            <div className=\"space-y-3\">\n              <h4 className=\"font-medium text-gray-900\">Backend Servers</h4>\n              {loadBalancing?.backends?.map((backend) => (\n                <div key={backend?.id} className=\"flex items-center justify-between p-2 bg-gray-50 rounded\">\n                  <span className=\"font-mono text-sm\">{backend?.address}</span>\n                  <div className=\"flex items-center space-x-2\">\n                    <span className=\"text-sm text-gray-600\">Weight: {backend?.weight}</span>\n                    <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${\n                      backend?.status === 'healthy' ? 'bg-green-100 text-green-800' :\n                      backend?.status === 'maintenance'? 'bg-yellow-100 text-yellow-800' : 'bg-red-100 text-red-800'\n                    }`}>\n                      {backend?.status}\n                    </span>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        {/* Caching */}\n        <div className=\"bg-white rounded-lg border overflow-hidden\">\n          <div className=\"bg-gray-50 px-6 py-4 border-b\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">Caching & Compression</h3>\n          </div>\n          <div className=\"p-6\">\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-gray-600\">Cache Hit Rate</span>\n                <span className=\"text-xl font-bold text-green-600\">{cacheSettings?.cacheHitRate}%</span>\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                <div>\n                  <span className=\"text-gray-600\">Static Cache:</span>\n                  <span className=\"ml-2 font-mono\">{cacheSettings?.staticCache}</span>\n                </div>\n                <div>\n                  <span className=\"text-gray-600\">API Cache:</span>\n                  <span className=\"ml-2 font-mono\">{cacheSettings?.apiCache}</span>\n                </div>\n                <div>\n                  <span className=\"text-gray-600\">Gzip:</span>\n                  <span className={`ml-2 ${cacheSettings?.gzipEnabled ? 'text-green-600' : 'text-red-600'}`}>\n                    {cacheSettings?.gzipEnabled ? 'Enabled' : 'Disabled'}\n                  </span>\n                </div>\n                <div>\n                  <span className=\"text-gray-600\">Brotli:</span>\n                  <span className={`ml-2 ${cacheSettings?.brotliEnabled ? 'text-green-600' : 'text-red-600'}`}>\n                    {cacheSettings?.brotliEnabled ? 'Enabled' : 'Disabled'}\n                  </span>\n                </div>\n              </div>\n\n              <div className=\"pt-4 border-t\">\n                <div className=\"text-sm text-gray-600\">Cache purged today: {cacheSettings?.purgedToday}</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      {/* Configuration Editor Modal */}\n      {editingConfig && (\n        <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50\">\n          <div className=\"relative top-20 mx-auto p-5 border w-11/12 max-w-6xl shadow-lg rounded-md bg-white\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-lg font-semibold text-gray-900\">\n                Edit Configuration: {configurations?.find(c => c?.id === editingConfig)?.name}\n              </h3>\n              <button\n                onClick={() => setEditingConfig(null)}\n                className=\"text-gray-400 hover:text-gray-600\"\n              >\n                <span className=\"sr-only\">Close</span>\n                <svg className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                </svg>\n              </button>\n            </div>\n            \n            <div className=\"mb-4\">\n              <textarea\n                value={configContent}\n                onChange={(e) => setConfigContent(e?.target?.value)}\n                className=\"w-full h-96 p-4 border border-gray-300 rounded-md font-mono text-sm bg-gray-50 focus:ring-blue-500 focus:border-blue-500\"\n                placeholder=\"Nginx configuration content...\"\n              />\n            </div>\n            \n            <div className=\"flex justify-end space-x-2\">\n              <button\n                onClick={() => setEditingConfig(null)}\n                className=\"bg-gray-600 text-white px-4 py-2 rounded-md text-sm font-medium hover:bg-gray-700 transition-colors\"\n              >\n                Cancel\n              </button>\n              <button\n                onClick={handleConfigSave}\n                className=\"bg-blue-600 text-white px-4 py-2 rounded-md text-sm font-medium hover:bg-blue-700 transition-colors flex items-center space-x-2\"\n              >\n                <Save className=\"h-4 w-4\" />\n                <span>Save Configuration</span>\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default NginxConfigurationPanel;","size_bytes":23483},"src/pages/production-deployment-and-infrastructure-management/components/SecurityComplianceMonitor.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Shield, AlertTriangle, CheckCircle, XCircle, Activity, FileText, RefreshCw, Database } from 'lucide-react';\n\nconst SecurityComplianceMonitor = () => {\n  const [securityScore, setSecurityScore] = useState(0);\n  const [vulnerabilities, setVulnerabilities] = useState([]);\n  const [complianceStatus, setComplianceStatus] = useState({});\n  const [penetrationTests, setPenetrationTests] = useState([]);\n  const [securityPolicies, setSecurityPolicies] = useState([]);\n  const [auditLogs, setAuditLogs] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [scanning, setScanning] = useState(false);\n\n  // Load security and compliance data\n  useEffect(() => {\n    loadSecurityData();\n  }, []);\n\n  const loadSecurityData = async () => {\n    setLoading(true);\n    try {\n      // Simulate API calls for security data\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // Mock security score\n      setSecurityScore(94.2);\n\n      // Mock vulnerabilities\n      setVulnerabilities([\n        {\n          id: 'vuln-001',\n          title: 'Outdated SSL Certificate',\n          severity: 'medium',\n          category: 'encryption',\n          status: 'open',\n          discoveredAt: new Date(Date.now() - 259200000)?.toISOString(),\n          description: 'SSL certificate for staging.nova-hr.company.com expires in 7 days',\n          recommendation: 'Renew SSL certificate before expiration',\n          affectedAssets: ['staging.nova-hr.company.com'],\n          cvss: 5.3\n        },\n        {\n          id: 'vuln-002',\n          title: 'Missing Security Headers',\n          severity: 'low',\n          category: 'configuration',\n          status: 'resolved',\n          discoveredAt: new Date(Date.now() - 432000000)?.toISOString(),\n          resolvedAt: new Date(Date.now() - 86400000)?.toISOString(),\n          description: 'Content Security Policy header not configured properly',\n          recommendation: 'Implement proper CSP headers in Nginx configuration',\n          affectedAssets: ['api.nova-hr.company.com'],\n          cvss: 3.1\n        },\n        {\n          id: 'vuln-003',\n          title: 'Exposed Database Port',\n          severity: 'high',\n          category: 'network',\n          status: 'open',\n          discoveredAt: new Date(Date.now() - 172800000)?.toISOString(),\n          description: 'PostgreSQL port 5432 is exposed to public internet',\n          recommendation: 'Restrict database access to application servers only',\n          affectedAssets: ['db-primary.nova-hr.internal'],\n          cvss: 7.8\n        }\n      ]);\n\n      // Mock compliance status\n      setComplianceStatus({\n        overall: 'compliant',\n        frameworks: [\n          {\n            name: 'SOC 2 Type II',\n            status: 'compliant',\n            score: 98,\n            lastAudit: new Date(Date.now() - 7776000000)?.toISOString(),\n            nextAudit: new Date(Date.now() + 7776000000)?.toISOString(),\n            issues: 2\n          },\n          {\n            name: 'ISO 27001',\n            status: 'partial',\n            score: 87,\n            lastAudit: new Date(Date.now() - 15552000000)?.toISOString(),\n            nextAudit: new Date(Date.now() + 2592000000)?.toISOString(),\n            issues: 8\n          },\n          {\n            name: 'PCI DSS',\n            status: 'non_compliant',\n            score: 72,\n            lastAudit: new Date(Date.now() - 5184000000)?.toISOString(),\n            nextAudit: new Date(Date.now() + 1296000000)?.toISOString(),\n            issues: 15\n          }\n        ]\n      });\n\n      // Mock penetration test results\n      setPenetrationTests([\n        {\n          id: 'pentest-001',\n          name: 'Quarterly Security Assessment',\n          type: 'external',\n          status: 'completed',\n          startDate: new Date(Date.now() - 604800000)?.toISOString(),\n          endDate: new Date(Date.now() - 518400000)?.toISOString(),\n          findings: {\n            critical: 0,\n            high: 1,\n            medium: 3,\n            low: 7,\n            info: 12\n          },\n          scope: ['nova-hr.company.com', 'api.nova-hr.company.com'],\n          tester: 'CyberSec Solutions',\n          reportUrl: '#'\n        },\n        {\n          id: 'pentest-002',\n          name: 'Internal Network Scan',\n          type: 'internal',\n          status: 'in_progress',\n          startDate: new Date(Date.now() - 86400000)?.toISOString(),\n          endDate: null,\n          findings: {\n            critical: 0,\n            high: 0,\n            medium: 2,\n            low: 4,\n            info: 8\n          },\n          scope: ['10.0.0.0/16'],\n          tester: 'Internal Security Team',\n          reportUrl: null\n        }\n      ]);\n\n      // Mock security policies\n      setSecurityPolicies([\n        {\n          id: 'policy-001',\n          name: 'Password Policy',\n          category: 'authentication',\n          status: 'active',\n          compliance: 100,\n          lastReview: new Date(Date.now() - 2592000000)?.toISOString(),\n          nextReview: new Date(Date.now() + 10368000000)?.toISOString()\n        },\n        {\n          id: 'policy-002',\n          name: 'Data Encryption Standard',\n          category: 'encryption',\n          status: 'active',\n          compliance: 95,\n          lastReview: new Date(Date.now() - 5184000000)?.toISOString(),\n          nextReview: new Date(Date.now() + 7776000000)?.toISOString()\n        },\n        {\n          id: 'policy-003',\n          name: 'Access Control Policy',\n          category: 'authorization',\n          status: 'under_review',\n          compliance: 82,\n          lastReview: new Date(Date.now() - 7776000000)?.toISOString(),\n          nextReview: new Date(Date.now() + 1296000000)?.toISOString()\n        }\n      ]);\n\n      // Mock audit logs\n      setAuditLogs([\n        {\n          id: 'audit-001',\n          timestamp: new Date(Date.now() - 3600000)?.toISOString(),\n          event: 'Security scan initiated',\n          severity: 'info',\n          user: 'security.bot',\n          category: 'scanning',\n          details: 'Automated vulnerability scan started'\n        },\n        {\n          id: 'audit-002',\n          timestamp: new Date(Date.now() - 7200000)?.toISOString(),\n          event: 'Failed login attempt detected',\n          severity: 'warning',\n          user: 'unknown',\n          category: 'authentication',\n          details: 'Multiple failed login attempts from IP 192.168.1.100'\n        },\n        {\n          id: 'audit-003',\n          timestamp: new Date(Date.now() - 10800000)?.toISOString(),\n          event: 'SSL certificate renewed',\n          severity: 'info',\n          user: 'system',\n          category: 'encryption',\n          details: 'SSL certificate for nova-hr.company.com renewed successfully'\n        }\n      ]);\n\n    } catch (error) {\n      console.error('Failed to load security data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSecurityScan = async () => {\n    setScanning(true);\n    try {\n      console.log('Starting security scan...');\n      // Simulate security scan\n      await new Promise(resolve => setTimeout(resolve, 3000));\n      \n      // Refresh data after scan\n      await loadSecurityData();\n      \n    } catch (error) {\n      console.error('Failed to run security scan:', error);\n    } finally {\n      setScanning(false);\n    }\n  };\n\n  const getSeverityColor = (severity) => {\n    switch (severity) {\n      case 'critical':\n        return 'text-red-800 bg-red-100 border-red-200';\n      case 'high':\n        return 'text-red-700 bg-red-50 border-red-200';\n      case 'medium':\n        return 'text-yellow-700 bg-yellow-50 border-yellow-200';\n      case 'low':\n        return 'text-blue-700 bg-blue-50 border-blue-200';\n      default:\n        return 'text-gray-700 bg-gray-50 border-gray-200';\n    }\n  };\n\n  const getComplianceColor = (status) => {\n    switch (status) {\n      case 'compliant':\n        return 'text-green-700 bg-green-50 border-green-200';\n      case 'partial':\n        return 'text-yellow-700 bg-yellow-50 border-yellow-200';\n      case 'non_compliant':\n        return 'text-red-700 bg-red-50 border-red-200';\n      default:\n        return 'text-gray-700 bg-gray-50 border-gray-200';\n    }\n  };\n\n  const getSecurityScoreColor = (score) => {\n    if (score >= 90) return 'text-green-600';\n    if (score >= 70) return 'text-yellow-600';\n    return 'text-red-600';\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <Shield className=\"h-8 w-8 animate-pulse text-blue-600\" />\n        <span className=\"ml-2 text-gray-600\">Loading security compliance data...</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Security Score Overview */}\n      <div className=\"bg-white rounded-lg border p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <h3 className=\"text-lg font-semibold text-gray-900\">Security Compliance Overview</h3>\n            <p className=\"text-sm text-gray-600\">Current security posture and compliance status</p>\n          </div>\n          <button\n            onClick={handleSecurityScan}\n            disabled={scanning}\n            className=\"bg-blue-600 text-white px-4 py-2 rounded-md text-sm font-medium hover:bg-blue-700 transition-colors flex items-center space-x-2 disabled:opacity-50\"\n          >\n            {scanning ? (\n              <RefreshCw className=\"h-4 w-4 animate-spin\" />\n            ) : (\n              <Shield className=\"h-4 w-4\" />\n            )}\n            <span>{scanning ? 'Scanning...' : 'Run Security Scan'}</span>\n          </button>\n        </div>\n\n        <div className=\"text-center mb-6\">\n          <div className={`text-6xl font-bold mb-2 ${getSecurityScoreColor(securityScore)}`}>\n            {securityScore}\n          </div>\n          <div className=\"text-lg text-gray-700\">Overall Security Score</div>\n          <div className=\"text-sm text-gray-500\">Based on vulnerabilities, compliance, and policies</div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n            <CheckCircle className=\"h-8 w-8 text-green-500 mx-auto mb-2\" />\n            <div className=\"text-2xl font-bold text-green-900\">\n              {vulnerabilities?.filter(v => v?.status === 'resolved')?.length}\n            </div>\n            <div className=\"text-sm text-green-700\">Resolved Issues</div>\n          </div>\n          \n          <div className=\"text-center p-4 bg-red-50 rounded-lg\">\n            <XCircle className=\"h-8 w-8 text-red-500 mx-auto mb-2\" />\n            <div className=\"text-2xl font-bold text-red-900\">\n              {vulnerabilities?.filter(v => v?.status === 'open')?.length}\n            </div>\n            <div className=\"text-sm text-red-700\">Open Vulnerabilities</div>\n          </div>\n          \n          <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n            <Activity className=\"h-8 w-8 text-blue-500 mx-auto mb-2\" />\n            <div className=\"text-2xl font-bold text-blue-900\">\n              {penetrationTests?.filter(t => t?.status === 'completed')?.length}\n            </div>\n            <div className=\"text-sm text-blue-700\">Penetration Tests</div>\n          </div>\n        </div>\n      </div>\n      {/* Vulnerabilities */}\n      <div className=\"bg-white rounded-lg border overflow-hidden\">\n        <div className=\"bg-gray-50 px-6 py-4 border-b\">\n          <h3 className=\"text-lg font-semibold text-gray-900\">Security Vulnerabilities</h3>\n          <p className=\"text-sm text-gray-600 mt-1\">Identified security issues and remediation status</p>\n        </div>\n\n        <div className=\"p-6\">\n          <div className=\"space-y-4\">\n            {vulnerabilities?.map((vuln) => (\n              <div key={vuln?.id} className={`border rounded-lg p-4 ${\n                vuln?.status === 'resolved' ? 'opacity-75' : ''\n              }`}>\n                <div className=\"flex items-start justify-between mb-3\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className={`p-2 rounded ${\n                      vuln?.severity === 'high' ? 'bg-red-100' :\n                      vuln?.severity === 'medium'? 'bg-yellow-100' : 'bg-blue-100'\n                    }`}>\n                      <AlertTriangle className={`h-5 w-5 ${\n                        vuln?.severity === 'high' ? 'text-red-600' :\n                        vuln?.severity === 'medium'? 'text-yellow-600' : 'text-blue-600'\n                      }`} />\n                    </div>\n                    <div>\n                      <h4 className=\"font-semibold text-gray-900\">{vuln?.title}</h4>\n                      <p className=\"text-sm text-gray-600 mt-1\">{vuln?.description}</p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getSeverityColor(vuln?.severity)}`}>\n                      {vuln?.severity}\n                    </span>\n                    <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${\n                      vuln?.status === 'resolved' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'\n                    }`}>\n                      {vuln?.status}\n                    </span>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n                  <div>\n                    <span className=\"text-gray-600\">CVSS Score: </span>\n                    <span className=\"font-medium\">{vuln?.cvss}</span>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-600\">Category: </span>\n                    <span className=\"font-medium capitalize\">{vuln?.category}</span>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-600\">Discovered: </span>\n                    <span className=\"font-medium\">{new Date(vuln?.discoveredAt)?.toLocaleDateString()}</span>\n                  </div>\n                  {vuln?.resolvedAt && (\n                    <div>\n                      <span className=\"text-gray-600\">Resolved: </span>\n                      <span className=\"font-medium\">{new Date(vuln?.resolvedAt)?.toLocaleDateString()}</span>\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"mt-3 p-3 bg-blue-50 rounded-md\">\n                  <div className=\"text-sm\">\n                    <strong>Recommendation: </strong>\n                    {vuln?.recommendation}\n                  </div>\n                  {vuln?.affectedAssets?.length > 0 && (\n                    <div className=\"text-sm mt-2\">\n                      <strong>Affected Assets: </strong>\n                      {vuln?.affectedAssets?.join(', ')}\n                    </div>\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n      {/* Compliance Status */}\n      <div className=\"bg-white rounded-lg border overflow-hidden\">\n        <div className=\"bg-gray-50 px-6 py-4 border-b\">\n          <h3 className=\"text-lg font-semibold text-gray-900\">Compliance Frameworks</h3>\n          <p className=\"text-sm text-gray-600 mt-1\">Regulatory compliance status and audit results</p>\n        </div>\n\n        <div className=\"p-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            {complianceStatus?.frameworks?.map((framework) => (\n              <div key={framework?.name} className=\"border rounded-lg p-4\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <h4 className=\"font-semibold text-gray-900\">{framework?.name}</h4>\n                  <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getComplianceColor(framework?.status)}`}>\n                    {framework?.status?.replace('_', ' ')}\n                  </span>\n                </div>\n\n                <div className=\"mb-4\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"text-sm text-gray-600\">Compliance Score</span>\n                    <span className={`font-semibold ${getSecurityScoreColor(framework?.score)}`}>\n                      {framework?.score}%\n                    </span>\n                  </div>\n                  <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                    <div \n                      className={`h-2 rounded-full ${\n                        framework?.score >= 90 ? 'bg-green-500' :\n                        framework?.score >= 70 ? 'bg-yellow-500': 'bg-red-500'\n                      }`}\n                      style={{ width: `${framework?.score}%` }}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Open Issues:</span>\n                    <span className=\"font-medium\">{framework?.issues}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Last Audit:</span>\n                    <span className=\"font-medium\">{new Date(framework?.lastAudit)?.toLocaleDateString()}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Next Audit:</span>\n                    <span className=\"font-medium\">{new Date(framework?.nextAudit)?.toLocaleDateString()}</span>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n      {/* Security Audit Logs */}\n      <div className=\"bg-white rounded-lg border overflow-hidden\">\n        <div className=\"bg-gray-50 px-6 py-4 border-b\">\n          <h3 className=\"text-lg font-semibold text-gray-900\">Security Audit Trail</h3>\n          <p className=\"text-sm text-gray-600 mt-1\">Recent security events and system activities</p>\n        </div>\n\n        <div className=\"p-6\">\n          <div className=\"space-y-3\">\n            {auditLogs?.map((log) => (\n              <div key={log?.id} className={`flex items-center space-x-3 p-3 rounded-lg border ${\n                log?.severity === 'warning' ? 'bg-yellow-50 border-yellow-200' :\n                log?.severity === 'error'? 'bg-red-50 border-red-200' : 'bg-gray-50 border-gray-200'\n              }`}>\n                <div className={`p-2 rounded-full ${\n                  log?.severity === 'warning' ? 'bg-yellow-100' :\n                  log?.severity === 'error'? 'bg-red-100' : 'bg-blue-100'\n                }`}>\n                  <FileText className={`h-4 w-4 ${\n                    log?.severity === 'warning' ? 'text-yellow-600' :\n                    log?.severity === 'error'? 'text-red-600' : 'text-blue-600'\n                  }`} />\n                </div>\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"font-medium text-gray-900\">{log?.event}</span>\n                    <span className=\"text-sm text-gray-500\">\n                      {new Date(log?.timestamp)?.toLocaleString()}\n                    </span>\n                  </div>\n                  <div className=\"text-sm text-gray-600 mt-1\">{log?.details}</div>\n                  <div className=\"text-xs text-gray-500 mt-1\">\n                    User: {log?.user} • Category: {log?.category}\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SecurityComplianceMonitor;","size_bytes":19919},"src/pages/real-time-payroll-automation-engine-with-weekly-processing/components/EmployeePayrollGrid.jsx":{"content":"import React, { useState } from 'react';\nimport { User, MapPin, Clock, DollarSign, TrendingUp, AlertCircle, CheckCircle, RefreshCw } from 'lucide-react';\nimport brandingService from '../../../services/brandingService';\nimport { supabase } from '../../../lib/supabase';\nimport { useAuth } from '../../../contexts/AuthContext';\n\nexport default function EmployeePayrollGrid({ payrollData, loading, currentWeek, onEmployeeUpdate }) {\n  const { user, userProfile } = useAuth();\n  const [updatingEmployees, setUpdatingEmployees] = useState(new Set());\n  const [error, setError] = useState('');\n\n  const recalculateEmployeePayroll = async (employeeId) => {\n    if (!currentWeek?.start || updatingEmployees?.has(employeeId)) return;\n\n    setUpdatingEmployees(prev => new Set([...prev, employeeId]));\n    setError('');\n\n    try {\n      const { error: calcError } = await supabase\n        ?.rpc('calculate_weekly_payroll', {\n          p_employee_id: employeeId,\n          p_week_start: currentWeek?.start\n        });\n\n      if (calcError) throw calcError;\n\n      // Log the recalculation activity\n      await supabase?.from('logs_actividad')?.insert({\n        usuario_id: user?.id,\n        rol: userProfile?.role,\n        accion: 'payroll_recalculation',\n        modulo: 'Payroll Automation',\n        descripcion: `Nómina recalculada para empleado: ${employeeId}`\n      });\n\n      // Trigger parent component update\n      if (onEmployeeUpdate) {\n        onEmployeeUpdate();\n      }\n\n    } catch (error) {\n      setError(`Error recalculando nómina: ${error?.message}`);\n    } finally {\n      setUpdatingEmployees(prev => {\n        const newSet = new Set(prev);\n        newSet?.delete(employeeId);\n        return newSet;\n      });\n    }\n  };\n\n  const getPayrollStatus = (employee) => {\n    if (updatingEmployees?.has(employee?.id)) {\n      return { text: 'Calculando...', color: 'yellow', icon: RefreshCw, spin: true };\n    }\n    \n    if (!employee?.payroll) {\n      return { text: 'Sin datos', color: 'gray', icon: AlertCircle };\n    }\n    \n    if (employee?.payroll?.grossTotal > 0) {\n      return { text: 'Calculado', color: 'green', icon: CheckCircle };\n    }\n    \n    return { text: 'En proceso', color: 'yellow', icon: Clock };\n  };\n\n  const formatHours = (hours) => {\n    return `${parseFloat(hours || 0)?.toFixed(1)}h`;\n  };\n\n  const formatLastUpdate = (timestamp) => {\n    if (!timestamp) return 'Nunca';\n    \n    const date = new Date(timestamp);\n    const now = new Date();\n    const diffMs = now?.getTime() - date?.getTime();\n    const diffMins = Math.floor(diffMs / (1000 * 60));\n    \n    if (diffMins < 1) return 'Ahora mismo';\n    if (diffMins < 60) return `${diffMins}m`;\n    \n    const diffHours = Math.floor(diffMins / 60);\n    if (diffHours < 24) return `${diffHours}h`;\n    \n    return date?.toLocaleDateString('es-MX');\n  };\n\n  if (loading && payrollData?.length === 0) {\n    return (\n      <div className=\"bg-white rounded-lg shadow\">\n        <div className=\"px-6 py-4 border-b border-gray-200\">\n          <h2 className=\"text-xl font-semibold text-gray-900 flex items-center\">\n            <User className=\"h-6 w-6 text-blue-600 mr-2\" />\n            Nómina de Empleados\n          </h2>\n        </div>\n        <div className=\"p-8 text-center\">\n          <RefreshCw className=\"h-12 w-12 text-gray-400 mx-auto animate-spin mb-4\" />\n          <p className=\"text-gray-500\">Cargando datos de nómina...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-white rounded-lg shadow\">\n      {/* Header */}\n      <div className=\"px-6 py-4 border-b border-gray-200\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-xl font-semibold text-gray-900 flex items-center\">\n              <User className=\"h-6 w-6 text-blue-600 mr-2\" />\n              Nómina de Empleados\n            </h2>\n            <p className=\"text-sm text-gray-600 mt-1\">\n              {payrollData?.length} empleados • Actualización en tiempo real\n            </p>\n          </div>\n          {loading && (\n            <RefreshCw className=\"h-5 w-5 text-blue-600 animate-spin\" />\n          )}\n        </div>\n      </div>\n      {/* Error Alert */}\n      {error && (\n        <div className=\"mx-6 mt-4 bg-red-50 border border-red-200 rounded-lg p-4\">\n          <div className=\"flex items-center\">\n            <AlertCircle className=\"h-5 w-5 text-red-500 mr-2\" />\n            <span className=\"text-red-700 text-sm\">{error}</span>\n          </div>\n        </div>\n      )}\n      {/* Employee Grid */}\n      <div className=\"p-6\">\n        {payrollData?.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <User className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Sin empleados encontrados</h3>\n            <p className=\"text-gray-500\">No hay empleados con datos para la semana seleccionada.</p>\n          </div>\n        ) : (\n          <div className=\"space-y-4 max-h-96 overflow-y-auto\">\n            {payrollData?.map((employee) => {\n              const status = getPayrollStatus(employee);\n              const StatusIcon = status?.icon;\n              \n              return (\n                <div key={employee?.id} className=\"border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow\">\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <div className=\"flex items-center\">\n                      <div className=\"bg-blue-100 rounded-full p-2 mr-3\">\n                        <User className=\"h-4 w-4 text-blue-600\" />\n                      </div>\n                      <div>\n                        <h3 className=\"font-medium text-gray-900\">{employee?.name}</h3>\n                        <div className=\"flex items-center text-sm text-gray-500 mt-1\">\n                          <span className=\"bg-gray-100 px-2 py-1 rounded text-xs mr-2\">\n                            {employee?.position || 'Sin puesto'}\n                          </span>\n                          {employee?.site && (\n                            <div className=\"flex items-center\">\n                              <MapPin className=\"h-3 w-3 mr-1\" />\n                              <span>{employee?.site}</span>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center space-x-2\">\n                      <div className={`flex items-center px-2 py-1 rounded-full text-xs font-medium ${\n                        status?.color === 'green' ? 'bg-green-100 text-green-800' :\n                        status?.color === 'yellow'? 'bg-yellow-100 text-yellow-800' : 'bg-gray-100 text-gray-800'\n                      }`}>\n                        <StatusIcon className={`h-3 w-3 mr-1 ${status?.spin ? 'animate-spin' : ''}`} />\n                        {status?.text}\n                      </div>\n                      \n                      <button\n                        onClick={() => recalculateEmployeePayroll(employee?.id)}\n                        disabled={updatingEmployees?.has(employee?.id)}\n                        className=\"p-1 text-gray-400 hover:text-blue-600 transition-colors disabled:opacity-50\"\n                        title=\"Recalcular nómina\"\n                      >\n                        <RefreshCw className={`h-4 w-4 ${updatingEmployees?.has(employee?.id) ? 'animate-spin' : ''}`} />\n                      </button>\n                    </div>\n                  </div>\n                  {employee?.payroll ? (\n                    <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-4\">\n                      {/* Hours */}\n                      <div className=\"bg-blue-50 rounded-lg p-3\">\n                        <div className=\"flex items-center mb-1\">\n                          <Clock className=\"h-4 w-4 text-blue-600 mr-1\" />\n                          <span className=\"text-xs text-blue-600 font-medium\">Horas</span>\n                        </div>\n                        <p className=\"text-sm text-gray-900\">\n                          <span className=\"font-medium\">{formatHours(employee?.payroll?.regularHours)}</span>\n                          {employee?.payroll?.overtimeHours > 0 && (\n                            <span className=\"text-orange-600 ml-1\">\n                              +{formatHours(employee?.payroll?.overtimeHours)} extra\n                            </span>\n                          )}\n                        </p>\n                      </div>\n\n                      {/* Base Pay */}\n                      <div className=\"bg-green-50 rounded-lg p-3\">\n                        <div className=\"flex items-center mb-1\">\n                          <DollarSign className=\"h-4 w-4 text-green-600 mr-1\" />\n                          <span className=\"text-xs text-green-600 font-medium\">Pago Base</span>\n                        </div>\n                        <p className=\"text-sm font-medium text-gray-900\">\n                          {brandingService?.formatCurrency(employee?.payroll?.basePay || 0)}\n                        </p>\n                      </div>\n\n                      {/* Overtime Pay */}\n                      <div className=\"bg-orange-50 rounded-lg p-3\">\n                        <div className=\"flex items-center mb-1\">\n                          <TrendingUp className=\"h-4 w-4 text-orange-600 mr-1\" />\n                          <span className=\"text-xs text-orange-600 font-medium\">Extra</span>\n                        </div>\n                        <p className=\"text-sm font-medium text-gray-900\">\n                          {brandingService?.formatCurrency(employee?.payroll?.overtimePay || 0)}\n                        </p>\n                      </div>\n\n                      {/* Total */}\n                      <div className=\"bg-purple-50 rounded-lg p-3\">\n                        <div className=\"flex items-center mb-1\">\n                          <DollarSign className=\"h-4 w-4 text-purple-600 mr-1\" />\n                          <span className=\"text-xs text-purple-600 font-medium\">Total</span>\n                        </div>\n                        <p className=\"text-sm font-bold text-purple-900\">\n                          {brandingService?.formatCurrency(employee?.payroll?.grossTotal || 0)}\n                        </p>\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"bg-gray-50 rounded-lg p-6 text-center\">\n                      <AlertCircle className=\"h-8 w-8 text-gray-400 mx-auto mb-2\" />\n                      <p className=\"text-sm text-gray-500\">Sin registros de asistencia esta semana</p>\n                      <button\n                        onClick={() => recalculateEmployeePayroll(employee?.id)}\n                        disabled={updatingEmployees?.has(employee?.id)}\n                        className=\"mt-2 text-sm text-blue-600 hover:text-blue-800 transition-colors disabled:opacity-50\"\n                      >\n                        Calcular nómina\n                      </button>\n                    </div>\n                  )}\n                  {/* Last Update */}\n                  <div className=\"mt-3 text-xs text-gray-500 text-right\">\n                    Actualizado: {formatLastUpdate(employee?.payroll?.lastUpdated)}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":11520},"src/pages/real-time-payroll-automation-engine-with-weekly-processing/components/PayrollCalculationDashboard.jsx":{"content":"import React from 'react';\nimport { Calendar, Clock, DollarSign, Users, TrendingUp, CheckCircle, AlertTriangle, RefreshCw } from 'lucide-react';\nimport brandingService from '../../../services/brandingService';\n\nexport default function PayrollCalculationDashboard({ \n  currentWeek, \n  nextCutoff, \n  lastProcessing, \n  processingSummary, \n  automationStatus,\n  onTriggerCalculation,\n  loading \n}) {\n  \n  const formatTimeUntilCutoff = () => {\n    if (!nextCutoff) return 'N/A';\n    \n    const now = new Date();\n    const diffMs = nextCutoff?.getTime() - now?.getTime();\n    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));\n    const diffHours = Math.floor((diffMs % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n    \n    if (diffDays > 0) {\n      return `${diffDays}d ${diffHours}h`;\n    } else if (diffHours > 0) {\n      return `${diffHours}h`;\n    } else {\n      return 'Próximo corte';\n    }\n  };\n\n  const getProcessingStatus = () => {\n    if (loading) return { text: 'Procesando...', color: 'yellow', icon: RefreshCw };\n    if (processingSummary?.processedCount === processingSummary?.totalEmployees && processingSummary?.totalEmployees > 0) {\n      return { text: 'Completado', color: 'green', icon: CheckCircle };\n    }\n    if (processingSummary?.processedCount > 0) {\n      return { text: 'Parcial', color: 'yellow', icon: AlertTriangle };\n    }\n    return { text: 'Pendiente', color: 'gray', icon: Clock };\n  };\n\n  const processingStatus = getProcessingStatus();\n  const StatusIcon = processingStatus?.icon;\n\n  return (\n    <div className=\"bg-white rounded-lg shadow\">\n      {/* Header */}\n      <div className=\"px-6 py-4 border-b border-gray-200\">\n        <h2 className=\"text-xl font-semibold text-gray-900 flex items-center\">\n          <TrendingUp className=\"h-6 w-6 text-blue-600 mr-2\" />\n          Dashboard de Cálculos\n        </h2>\n        <p className=\"text-sm text-gray-600 mt-1\">\n          Monitoreo en tiempo real del procesamiento de nómina\n        </p>\n      </div>\n\n      <div className=\"p-6 space-y-6\">\n        {/* Current Week Info */}\n        <div className=\"bg-blue-50 rounded-lg p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h3 className=\"text-sm font-medium text-blue-900\">Semana Actual</h3>\n              <p className=\"text-lg font-bold text-blue-700\">\n                {currentWeek?.start && currentWeek?.end \n                  ? `${new Date(currentWeek?.start)?.toLocaleDateString('es-MX')} - ${new Date(currentWeek?.end)?.toLocaleDateString('es-MX')}`\n                  : 'Cargando...'\n                }\n              </p>\n            </div>\n            <Calendar className=\"h-8 w-8 text-blue-600\" />\n          </div>\n        </div>\n\n        {/* Processing Status */}\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div className={`rounded-lg p-4 ${\n            processingStatus?.color === 'green' ? 'bg-green-50' :\n            processingStatus?.color === 'yellow' ? 'bg-yellow-50' :\n            processingStatus?.color === 'gray' ? 'bg-gray-50' : 'bg-gray-50'\n          }`}>\n            <div className=\"flex items-center\">\n              <StatusIcon className={`h-5 w-5 mr-2 ${\n                processingStatus?.color === 'green' ? 'text-green-600' :\n                processingStatus?.color === 'yellow'? 'text-yellow-600' : 'text-gray-600'\n              } ${loading ? 'animate-spin' : ''}`} />\n              <div>\n                <p className=\"text-sm font-medium text-gray-900\">Estado</p>\n                <p className={`text-sm ${\n                  processingStatus?.color === 'green' ? 'text-green-700' :\n                  processingStatus?.color === 'yellow'? 'text-yellow-700' : 'text-gray-700'\n                }`}>\n                  {processingStatus?.text}\n                </p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-purple-50 rounded-lg p-4\">\n            <div className=\"flex items-center\">\n              <Clock className=\"h-5 w-5 text-purple-600 mr-2\" />\n              <div>\n                <p className=\"text-sm font-medium text-gray-900\">Próximo Corte</p>\n                <p className=\"text-sm text-purple-700\">{formatTimeUntilCutoff()}</p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Key Metrics */}\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div className=\"bg-gray-50 rounded-lg p-4\">\n            <div className=\"flex items-center\">\n              <Users className=\"h-8 w-8 text-gray-600 mr-3\" />\n              <div>\n                <p className=\"text-2xl font-bold text-gray-900\">\n                  {processingSummary?.processedCount || 0}\n                </p>\n                <p className=\"text-sm text-gray-600\">\n                  de {processingSummary?.totalEmployees || 0} empleados\n                </p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-green-50 rounded-lg p-4\">\n            <div className=\"flex items-center\">\n              <DollarSign className=\"h-8 w-8 text-green-600 mr-3\" />\n              <div>\n                <p className=\"text-xl font-bold text-green-900\">\n                  {brandingService?.formatCurrency(processingSummary?.totalPayroll || 0)}\n                </p>\n                <p className=\"text-sm text-green-600\">Total Nómina</p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Last Processing Info */}\n        {lastProcessing && (\n          <div className=\"bg-gray-50 rounded-lg p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-900\">Último Procesamiento</p>\n                <p className=\"text-sm text-gray-600\">\n                  {lastProcessing?.toLocaleString('es-MX', {\n                    year: 'numeric',\n                    month: 'short',\n                    day: 'numeric',\n                    hour: '2-digit',\n                    minute: '2-digit'\n                  })}\n                </p>\n              </div>\n              <CheckCircle className=\"h-5 w-5 text-green-600\" />\n            </div>\n          </div>\n        )}\n\n        {/* Automation Settings */}\n        <div className=\"border-t pt-6\">\n          <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Configuración de Automatización</h3>\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-900\">Corte Automático</p>\n                <p className=\"text-xs text-gray-600\">Domingos 23:59</p>\n              </div>\n              <div className=\"text-green-600\">\n                <CheckCircle className=\"h-5 w-5\" />\n              </div>\n            </div>\n            <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-900\">Cálculo en Tiempo Real</p>\n                <p className=\"text-xs text-gray-600\">Al registrar asistencia</p>\n              </div>\n              <div className={automationStatus === 'active' ? 'text-green-600' : 'text-red-600'}>\n                {automationStatus === 'active' ? (\n                  <CheckCircle className=\"h-5 w-5\" />\n                ) : (\n                  <AlertTriangle className=\"h-5 w-5\" />\n                )}\n              </div>\n            </div>\n            <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-900\">Validación de Conflictos</p>\n                <p className=\"text-xs text-gray-600\">Detección automática</p>\n              </div>\n              <div className=\"text-green-600\">\n                <CheckCircle className=\"h-5 w-5\" />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Progress Bar */}\n        {processingSummary?.totalEmployees > 0 && (\n          <div>\n            <div className=\"flex items-center justify-between mb-2\">\n              <span className=\"text-sm font-medium text-gray-700\">Progreso de Procesamiento</span>\n              <span className=\"text-sm text-gray-500\">\n                {Math.round((processingSummary?.processedCount / processingSummary?.totalEmployees) * 100)}%\n              </span>\n            </div>\n            <div className=\"w-full bg-gray-200 rounded-full h-2\">\n              <div \n                className=\"bg-blue-600 h-2 rounded-full transition-all duration-300\"\n                style={{ \n                  width: `${(processingSummary?.processedCount / processingSummary?.totalEmployees) * 100}%` \n                }}\n              />\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":8838},"src/pages/real-time-payroll-estimation-dashboard-with-zero-state-handling/components/PayrollEstimationCards.jsx":{"content":"import React from 'react';\nimport Icon from '../../../components/AppIcon';\nimport CurrencyDisplay from '../../../components/ui/CurrencyDisplay';\n\nconst PayrollEstimationCards = ({ summary, weekStart, weekEnd, loading = false }) => {\n  const cards = [\n    {\n      label: 'Total Empleados',\n      value: summary?.totalEmployees || 0,\n      icon: 'Users',\n      color: 'blue',\n      format: 'number'\n    },\n    {\n      label: 'Horas Regulares',\n      value: summary?.totalRegularHours || 0,\n      icon: 'Clock',\n      color: 'green',\n      format: 'hours'\n    },\n    {\n      label: 'Horas Extra',\n      value: summary?.totalOvertimeHours || 0,\n      icon: 'Clock4',\n      color: 'orange',\n      format: 'hours'\n    },\n    {\n      label: 'Total Bruto',\n      value: summary?.totalGrossPay || 0,\n      icon: 'DollarSign',\n      color: 'purple',\n      format: 'currency'\n    },\n    {\n      label: 'Total Neto',\n      value: summary?.totalNetPay || 0,\n      icon: 'Wallet',\n      color: 'emerald',\n      format: 'currency'\n    },\n    {\n      label: 'Promedio Diario',\n      value: summary?.averageDailyPay || 0,\n      icon: 'TrendingUp',\n      color: 'pink',\n      format: 'currency'\n    }\n  ];\n\n  const getColorClasses = (color) => {\n    const colorMap = {\n      blue: 'bg-blue-50 border-blue-200 text-blue-600',\n      green: 'bg-green-50 border-green-200 text-green-600',\n      orange: 'bg-orange-50 border-orange-200 text-orange-600',\n      purple: 'bg-purple-50 border-purple-200 text-purple-600',\n      emerald: 'bg-emerald-50 border-emerald-200 text-emerald-600',\n      pink: 'bg-pink-50 border-pink-200 text-pink-600'\n    };\n    return colorMap?.[color] || colorMap?.blue;\n  };\n\n  const formatValue = (value, format) => {\n    if (loading) return '---';\n    \n    switch (format) {\n      case 'currency':\n        return <CurrencyDisplay amount={value} />;\n      case 'hours':\n        return `${value?.toFixed(1)}h`;\n      case 'number':\n        return value?.toLocaleString('es-MX');\n      default:\n        return value;\n    }\n  };\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n      {cards?.map((card, index) => (\n        <div \n          key={index}\n          className=\"bg-card border border-border rounded-lg p-6 hover:shadow-md transition-shadow duration-200\"\n        >\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex-1\">\n              <p className=\"text-sm font-medium text-muted-foreground mb-1\">\n                {card?.label}\n              </p>\n              <div className={`text-2xl font-bold ${loading ? 'animate-pulse' : ''}`}>\n                {formatValue(card?.value, card?.format)}\n              </div>\n              \n              {/* Show zero state hint for currency values */}\n              {!loading && card?.format === 'currency' && card?.value === 0 && (\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  Se actualizará con datos de asistencia\n                </p>\n              )}\n            </div>\n            \n            <div className={`w-12 h-12 rounded-lg border flex items-center justify-center ${getColorClasses(card?.color)}`}>\n              <Icon name={card?.icon} size={20} />\n            </div>\n          </div>\n\n          {/* Progress bar for hours */}\n          {card?.format === 'hours' && !loading && (\n            <div className=\"mt-4\">\n              <div className=\"flex justify-between text-xs text-muted-foreground mb-1\">\n                <span>0h</span>\n                <span>40h/sem</span>\n              </div>\n              <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                <div\n                  className={`h-2 rounded-full transition-all duration-500 ${\n                    card?.color === 'green' ? 'bg-green-500' : 'bg-orange-500'\n                  }`}\n                  style={{\n                    width: `${Math.min((card?.value / 40) * 100, 100)}%`\n                  }}\n                />\n              </div>\n            </div>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default PayrollEstimationCards;","size_bytes":4121},"src/pages/real-time-payroll-estimation-dashboard-with-zero-state-handling/components/PayrollSummaryTable.jsx":{"content":"import React, { useState } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport CurrencyDisplay from '../../../components/ui/CurrencyDisplay';\n\nconst PayrollSummaryTable = ({ \n  payrollData, \n  selectedEmployees, \n  onSelectionChange, \n  onCalculateEmployee, \n  onExportEmployee,\n  calculating = false,\n  loading = false \n}) => {\n  const [sortConfig, setSortConfig] = useState({ key: 'full_name', direction: 'asc' });\n\n  const handleSort = (key) => {\n    let direction = 'asc';\n    if (sortConfig?.key === key && sortConfig?.direction === 'asc') {\n      direction = 'desc';\n    }\n    setSortConfig({ key, direction });\n  };\n\n  const handleSelectAll = (checked) => {\n    if (checked) {\n      onSelectionChange(payrollData?.map(record => record?.employee_profiles?.employee_id));\n    } else {\n      onSelectionChange([]);\n    }\n  };\n\n  const handleSelectRecord = (employeeId, checked) => {\n    if (checked) {\n      onSelectionChange([...selectedEmployees, employeeId]);\n    } else {\n      onSelectionChange(selectedEmployees?.filter(id => id !== employeeId));\n    }\n  };\n\n  const sortedData = [...payrollData]?.sort((a, b) => {\n    const aValue = a?.employee_profiles?.[sortConfig?.key] || a?.[sortConfig?.key];\n    const bValue = b?.employee_profiles?.[sortConfig?.key] || b?.[sortConfig?.key];\n    \n    if (aValue < bValue) return sortConfig?.direction === 'asc' ? -1 : 1;\n    if (aValue > bValue) return sortConfig?.direction === 'asc' ? 1 : -1;\n    return 0;\n  });\n\n  const SortableHeader = ({ children, sortKey, className = '' }) => (\n    <th \n      className={`px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-50 ${className}`}\n      onClick={() => handleSort(sortKey)}\n    >\n      <div className=\"flex items-center space-x-1\">\n        <span>{children}</span>\n        {sortConfig?.key === sortKey && (\n          <Icon \n            name={sortConfig?.direction === 'asc' ? 'ChevronUp' : 'ChevronDown'} \n            size={14} \n          />\n        )}\n      </div>\n    </th>\n  );\n\n  if (loading) {\n    return (\n      <div className=\"bg-card border border-border rounded-lg overflow-hidden\">\n        <div className=\"px-6 py-4 border-b\">\n          <h3 className=\"text-lg font-semibold\">Resumen de Nómina Semanal</h3>\n        </div>\n        <div className=\"p-6\">\n          <div className=\"animate-pulse space-y-4\">\n            <div className=\"h-4 bg-gray-200 rounded w-full\"></div>\n            <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n            <div className=\"h-4 bg-gray-200 rounded w-1/2\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (payrollData?.length === 0) {\n    return (\n      <div className=\"bg-card border border-border rounded-lg overflow-hidden\">\n        <div className=\"px-6 py-4 border-b\">\n          <h3 className=\"text-lg font-semibold\">Resumen de Nómina Semanal</h3>\n        </div>\n        <div className=\"p-8 text-center text-muted-foreground\">\n          <Icon name=\"FileText\" size={48} className=\"mx-auto mb-4 text-gray-300\" />\n          <p>No hay datos de nómina para mostrar</p>\n          <p className=\"text-sm\">Los empleados aparecerán aquí cuando se calculen las estimaciones</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-card border border-border rounded-lg overflow-hidden\">\n      <div className=\"px-6 py-4 border-b\">\n        <div className=\"flex items-center justify-between\">\n          <h3 className=\"text-lg font-semibold\">Resumen de Nómina Semanal</h3>\n          <div className=\"text-sm text-muted-foreground\">\n            {selectedEmployees?.length > 0 && `${selectedEmployees?.length} seleccionados`}\n          </div>\n        </div>\n      </div>\n      <div className=\"overflow-x-auto\">\n        <table className=\"min-w-full divide-y divide-gray-200\">\n          <thead className=\"bg-gray-50\">\n            <tr>\n              <th className=\"px-6 py-3 text-left\">\n                <input\n                  type=\"checkbox\"\n                  checked={selectedEmployees?.length === payrollData?.length}\n                  onChange={(e) => handleSelectAll(e?.target?.checked)}\n                  className=\"rounded border-gray-300\"\n                />\n              </th>\n              <SortableHeader sortKey=\"full_name\">Empleado</SortableHeader>\n              <SortableHeader sortKey=\"construction_sites.name\">Proyecto</SortableHeader>\n              <SortableHeader sortKey=\"regular_hours\">Horas Reg.</SortableHeader>\n              <SortableHeader sortKey=\"overtime_hours\">Horas Extra</SortableHeader>\n              <SortableHeader sortKey=\"base_pay\">Pago Base</SortableHeader>\n              <SortableHeader sortKey=\"overtime_pay\">Pago Extra</SortableHeader>\n              <SortableHeader sortKey=\"gross_total\">Total Bruto</SortableHeader>\n              <SortableHeader sortKey=\"net_total\">Total Neto</SortableHeader>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Acciones\n              </th>\n            </tr>\n          </thead>\n          <tbody className=\"bg-white divide-y divide-gray-200\">\n            {sortedData?.map((record) => {\n              const employee = record?.employee_profiles;\n              const isSelected = selectedEmployees?.includes(employee?.employee_id);\n              \n              return (\n                <tr \n                  key={record?.id} \n                  className={`hover:bg-gray-50 ${isSelected ? 'bg-blue-50' : ''}`}\n                >\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <input\n                      type=\"checkbox\"\n                      checked={isSelected}\n                      onChange={(e) => handleSelectRecord(employee?.employee_id, e?.target?.checked)}\n                      className=\"rounded border-gray-300\"\n                    />\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div className=\"flex items-center\">\n                      <div className=\"flex-shrink-0 h-8 w-8\">\n                        <div className=\"h-8 w-8 bg-gray-300 rounded-full flex items-center justify-center\">\n                          <span className=\"text-xs font-medium text-gray-700\">\n                            {employee?.full_name?.charAt(0)?.toUpperCase()}\n                          </span>\n                        </div>\n                      </div>\n                      <div className=\"ml-3\">\n                        <div className=\"text-sm font-medium text-gray-900\">\n                          {employee?.full_name}\n                        </div>\n                        <div className=\"text-sm text-gray-500\">\n                          ID: {employee?.employee_id}\n                        </div>\n                      </div>\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div className=\"text-sm text-gray-900\">\n                      {employee?.construction_sites?.name || 'Sin asignar'}\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    {parseFloat(record?.regular_hours || 0)?.toFixed(1)}h\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    {parseFloat(record?.overtime_hours || 0)?.toFixed(1)}h\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    <CurrencyDisplay amount={parseFloat(record?.base_pay || 0)} />\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                    <CurrencyDisplay amount={parseFloat(record?.overtime_pay || 0)} />\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n                    <CurrencyDisplay amount={parseFloat(record?.gross_total || 0)} />\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-green-600\">\n                    <CurrencyDisplay amount={parseFloat(record?.net_total || 0)} />\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => onCalculateEmployee(record?.employee_id)}\n                        disabled={calculating}\n                        iconName=\"RefreshCw\"\n                        className=\"p-1\"\n                      />\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => onExportEmployee(employee)}\n                        iconName=\"Download\"\n                        className=\"p-1\"\n                      />\n                    </div>\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n      {/* Summary Footer */}\n      <div className=\"bg-gray-50 px-6 py-4 border-t\">\n        <div className=\"flex justify-between items-center text-sm\">\n          <div className=\"text-muted-foreground\">\n            Mostrando {payrollData?.length} empleados\n          </div>\n          <div className=\"font-medium\">\n            Total General: <CurrencyDisplay \n              amount={payrollData?.reduce((sum, record) => sum + parseFloat(record?.net_total || 0), 0)} \n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PayrollSummaryTable;","size_bytes":9855},"src/pages/real-time-payroll-estimation-dashboard-with-zero-state-handling/components/WeeklyTimeline.jsx":{"content":"import React from 'react';\nimport CurrencyDisplay from '../../../components/ui/CurrencyDisplay';\n\nconst WeeklyTimeline = ({ weekStart, payrollData, loading = false }) => {\n  // Generate days of the week\n  const weekDays = [];\n  for (let i = 0; i < 7; i++) {\n    const day = new Date(weekStart);\n    day?.setDate(weekStart?.getDate() + i);\n    weekDays?.push({\n      date: day,\n      dayName: day?.toLocaleDateString('es-ES', { weekday: 'short' }),\n      dayNumber: day?.getDate(),\n      isToday: day?.toDateString() === new Date()?.toDateString()\n    });\n  }\n\n  // Calculate daily totals (mock data since we don't have daily breakdown)\n  const dailyTotals = weekDays?.map((day, index) => {\n    // Mock progressive accumulation for demonstration\n    const progress = Math.min((index + 1) / 7, 1);\n    const totalPay = payrollData?.reduce((sum, record) => sum + (parseFloat(record?.gross_total) || 0), 0);\n    \n    return {\n      ...day,\n      amount: totalPay * progress / 7,\n      hours: payrollData?.reduce((sum, record) => sum + (parseFloat(record?.regular_hours) || 0), 0) * progress / 7,\n      employees: Math.floor(payrollData?.length * progress)\n    };\n  });\n\n  const maxAmount = Math.max(...dailyTotals?.map(d => d?.amount));\n\n  if (loading) {\n    return (\n      <div className=\"bg-card border border-border rounded-lg p-6\">\n        <h3 className=\"text-lg font-semibold text-foreground mb-4\">\n          Progresión Semanal\n        </h3>\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-32 bg-gray-200 rounded\"></div>\n          <div className=\"flex justify-between\">\n            {[...Array(7)]?.map((_, i) => (\n              <div key={i} className=\"text-center\">\n                <div className=\"h-4 bg-gray-200 rounded w-8 mb-2\"></div>\n                <div className=\"h-3 bg-gray-200 rounded w-6\"></div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-card border border-border rounded-lg p-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h3 className=\"text-lg font-semibold text-foreground\">\n          Progresión Semanal de Ingresos\n        </h3>\n        <div className=\"text-sm text-muted-foreground\">\n          {payrollData?.length === 0 ? (\n            'Sin datos de asistencia'\n          ) : (\n            `${payrollData?.length} empleados activos`\n          )}\n        </div>\n      </div>\n      {payrollData?.length === 0 ? (\n        <div className=\"text-center py-8\">\n          <div className=\"flex justify-between items-end h-32 mb-4\">\n            {dailyTotals?.map((day, index) => (\n              <div key={index} className=\"flex flex-col items-center flex-1\">\n                <div\n                  className=\"bg-gray-200 w-8 rounded-t transition-all duration-500\"\n                  style={{ height: '8px' }}\n                />\n              </div>\n            ))}\n          </div>\n          \n          <div className=\"grid grid-cols-7 gap-2 text-center\">\n            {dailyTotals?.map((day, index) => (\n              <div key={index} className={`text-sm ${day?.isToday ? 'font-bold text-blue-600' : 'text-muted-foreground'}`}>\n                <div className=\"font-medium\">{day?.dayName}</div>\n                <div className=\"text-xs\">{day?.dayNumber}</div>\n                <div className=\"mt-2 text-xs\">\n                  <CurrencyDisplay amount={0} />\n                </div>\n              </div>\n            ))}\n          </div>\n          \n          <p className=\"text-muted-foreground text-sm mt-4\">\n            Los valores aparecerán cuando se registre asistencia diaria\n          </p>\n        </div>\n      ) : (\n        <div>\n          {/* Chart */}\n          <div className=\"flex justify-between items-end h-32 mb-4\">\n            {dailyTotals?.map((day, index) => (\n              <div key={index} className=\"flex flex-col items-center flex-1 group\">\n                <div className=\"relative\">\n                  {/* Tooltip */}\n                  <div className=\"absolute bottom-full mb-2 left-1/2 transform -translate-x-1/2 bg-gray-800 text-white text-xs px-2 py-1 rounded opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap\">\n                    <div>{day?.employees} empleados</div>\n                    <div>{day?.hours?.toFixed(1)}h trabajadas</div>\n                    <div><CurrencyDisplay amount={day?.amount} /></div>\n                  </div>\n                  \n                  {/* Bar */}\n                  <div\n                    className={`w-8 rounded-t transition-all duration-500 ${\n                      day?.isToday \n                        ? 'bg-blue-500 hover:bg-blue-600' :'bg-green-500 hover:bg-green-600'\n                    }`}\n                    style={{ \n                      height: maxAmount > 0 ? `${Math.max((day?.amount / maxAmount) * 120, 8)}px` : '8px' \n                    }}\n                  />\n                </div>\n              </div>\n            ))}\n          </div>\n\n          {/* Labels */}\n          <div className=\"grid grid-cols-7 gap-2 text-center\">\n            {dailyTotals?.map((day, index) => (\n              <div key={index} className={`text-sm ${day?.isToday ? 'font-bold text-blue-600' : 'text-muted-foreground'}`}>\n                <div className=\"font-medium\">{day?.dayName}</div>\n                <div className=\"text-xs\">{day?.dayNumber}</div>\n                <div className=\"mt-2 text-xs\">\n                  <CurrencyDisplay amount={day?.amount} />\n                </div>\n              </div>\n            ))}\n          </div>\n\n          {/* Summary */}\n          <div className=\"mt-6 pt-4 border-t border-border\">\n            <div className=\"flex justify-between text-sm\">\n              <div className=\"text-muted-foreground\">\n                Progreso de la semana\n              </div>\n              <div className=\"font-medium\">\n                {((new Date()?.getDay() + 6) % 7 + 1)} de 7 días\n              </div>\n            </div>\n            <div className=\"mt-2 w-full bg-gray-200 rounded-full h-2\">\n              <div\n                className=\"bg-blue-500 h-2 rounded-full transition-all duration-500\"\n                style={{\n                  width: `${Math.min(((new Date()?.getDay() + 6) % 7 + 1) / 7 * 100, 100)}%`\n                }}\n              />\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default WeeklyTimeline;","size_bytes":6412},"src/pages/real-time-payroll-estimation-dashboard-with-zero-state-handling/components/ZeroStateDisplay.jsx":{"content":"import React from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport CurrencyDisplay from '../../../components/ui/CurrencyDisplay';\n\nconst ZeroStateDisplay = ({ \n  type = 'no-data', \n  title, \n  description, \n  actionLabel, \n  onAction, \n  loading = false \n}) => {\n  const getIconName = () => {\n    switch (type) {\n      case 'no-employees': return 'Users';\n      case 'no-data': return 'Calculator';\n      case 'calculating': return 'Loader2';\n      default: return 'AlertCircle';\n    }\n  };\n\n  const getZeroStateCards = () => (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n      {[\n        { label: 'Horas Regulares', value: 0, icon: 'Clock' },\n        { label: 'Horas Extra', value: 0, icon: 'Clock4' },\n        { label: 'Bonificaciones', value: 0, icon: 'TrendingUp' },\n        { label: 'Total Estimado', value: 0, icon: 'DollarSign' }\n      ]?.map((item, index) => (\n        <div key={index} className=\"bg-card border border-border rounded-lg p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-muted-foreground\">\n                {item?.label}\n              </p>\n              <div className=\"text-2xl font-bold text-foreground\">\n                {item?.label?.includes('Horas') ? (\n                  `${item?.value?.toFixed(1)}h`\n                ) : (\n                  <CurrencyDisplay amount={item?.value} />\n                )}\n              </div>\n            </div>\n            <div className=\"w-8 h-8 bg-muted rounded-full flex items-center justify-center\">\n              <Icon name={item?.icon} size={16} className=\"text-muted-foreground\" />\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n\n  return (\n    <div className=\"text-center py-12\">\n      {/* Zero State Cards for no-data type */}\n      {type === 'no-data' && getZeroStateCards()}\n      {/* Main Zero State Content */}\n      <div className=\"max-w-md mx-auto\">\n        <div className=\"w-24 h-24 bg-muted rounded-full flex items-center justify-center mx-auto mb-6\">\n          <Icon \n            name={getIconName()} \n            size={32} \n            className={`text-muted-foreground ${type === 'calculating' ? 'animate-spin' : ''}`} \n          />\n        </div>\n        \n        <h3 className=\"text-xl font-semibold text-foreground mb-3\">\n          {title}\n        </h3>\n        \n        <p className=\"text-muted-foreground mb-6 max-w-sm mx-auto\">\n          {description}\n        </p>\n\n        {/* Zero Values Example for no-data state */}\n        {type === 'no-data' && (\n          <div className=\"mb-6 p-4 bg-gray-50 rounded-lg border\">\n            <h4 className=\"text-sm font-medium text-gray-700 mb-2\">\n              Vista Previa de Estimación\n            </h4>\n            <div className=\"text-center space-y-1\">\n              <div className=\"text-lg font-medium text-gray-900\">\n                Empleado Ejemplo\n              </div>\n              <div className=\"text-sm text-gray-500\">\n                Horas trabajadas: 0h • Horas extra: 0h\n              </div>\n              <div className=\"text-lg font-bold text-green-600\">\n                <CurrencyDisplay amount={0} />\n              </div>\n              <div className=\"text-xs text-gray-400\">\n                Se actualizará automáticamente con datos reales\n              </div>\n            </div>\n          </div>\n        )}\n        \n        {actionLabel && onAction && (\n          <Button\n            onClick={onAction}\n            disabled={loading}\n            iconName={loading ? 'Loader2' : 'Plus'}\n            className={loading ? 'animate-spin' : ''}\n          >\n            {loading ? 'Cargando...' : actionLabel}\n          </Button>\n        )}\n\n        {/* Additional Help Text */}\n        {type === 'no-data' && (\n          <div className=\"mt-8 text-xs text-muted-foreground\">\n            <p>\n              💡 <strong>Tip:</strong> Los valores cambiarán automáticamente cuando se registren datos de asistencia\n            </p>\n          </div>\n        )}\n      </div>\n      {/* Status Cards for Troubleshooting */}\n      {type === 'no-employees' && (\n        <div className=\"mt-8 max-w-2xl mx-auto grid grid-cols-1 md:grid-cols-3 gap-4\">\n          {[\n            { \n              title: '1. Registrar Empleados', \n              description: 'Agregue empleados al sistema',\n              icon: 'UserPlus',\n              status: 'pending'\n            },\n            { \n              title: '2. Asignar Proyectos', \n              description: 'Asigne empleados a proyectos activos',\n              icon: 'Building',\n              status: 'disabled'\n            },\n            { \n              title: '3. Registrar Asistencia', \n              description: 'Los empleados registran entrada/salida',\n              icon: 'Clock',\n              status: 'disabled'\n            }\n          ]?.map((step, index) => (\n            <div key={index} className=\"p-4 border rounded-lg bg-white\">\n              <div className=\"flex items-center space-x-3 mb-2\">\n                <div className={`w-8 h-8 rounded-full flex items-center justify-center ${\n                  step?.status === 'pending' ? 'bg-blue-100 text-blue-600' : 'bg-gray-100 text-gray-400'\n                }`}>\n                  <Icon name={step?.icon} size={16} />\n                </div>\n                <h4 className=\"text-sm font-medium text-gray-900\">\n                  {step?.title}\n                </h4>\n              </div>\n              <p className=\"text-xs text-gray-500\">\n                {step?.description}\n              </p>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ZeroStateDisplay;","size_bytes":5763},"src/pages/role-based-permission-enforcement-and-security-management-system/components/PermissionMatrix.jsx":{"content":"import React, { useState } from 'react';\nimport { Key, Check, X, Eye, Settings, Lock } from 'lucide-react';\n\nexport default function PermissionMatrix({\n  permissions,\n  roleHierarchy,\n  featurePermissions,\n  onValidateAccess\n}) {\n  const [selectedFeature, setSelectedFeature] = useState(null);\n  const [filterRole, setFilterRole] = useState('all');\n\n  // Get all unique roles\n  const roles = Object.keys(roleHierarchy);\n  const features = Object.keys(featurePermissions);\n\n  // Filter features based on selected role\n  const filteredFeatures = filterRole === 'all' \n    ? features \n    : features?.filter(feature => featurePermissions?.[feature]?.includes(filterRole));\n\n  const hasPermission = (feature, role) => {\n    const requiredRoles = featurePermissions?.[feature] || [];\n    return requiredRoles?.includes(role) || role === 'superadmin';\n  };\n\n  const getFeatureDescription = (feature) => {\n    const descriptions = {\n      'dashboard': 'Panel principal de asistencia y datos personales',\n      'employee_management': 'Gestión completa de empleados y perfiles',\n      'payroll_calculation': 'Cálculo y procesamiento de nóminas',\n      'reports': 'Generación de reportes y exportación de datos',\n      'system_settings': 'Configuración del sistema y parametros',\n      'role_management': 'Gestión de roles y permisos de usuarios',\n      'security_monitoring': 'Monitoreo de seguridad y auditoría',\n      'attendance_approval': 'Aprobación de asistencias e incidencias',\n      'site_management': 'Gestión de obras y sitios de construcción'\n    };\n    return descriptions?.[feature] || feature;\n  };\n\n  const getPermissionCount = (role) => {\n    if (role === 'superadmin') return features?.length;\n    return features?.filter(feature => hasPermission(feature, role))?.length;\n  };\n\n  return (\n    <div className=\"bg-white rounded-lg shadow\">\n      <div className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h2 className=\"text-xl font-bold text-gray-900\">\n            <Key className=\"h-6 w-6 inline mr-2 text-blue-600\" />\n            Matriz de Permisos por Rol\n          </h2>\n          \n          <div className=\"flex items-center space-x-4\">\n            <select\n              value={filterRole}\n              onChange={(e) => setFilterRole(e?.target?.value)}\n              className=\"px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500\"\n            >\n              <option value=\"all\">Todos los Roles</option>\n              {roles?.map(role => (\n                <option key={role} value={role}>\n                  {roleHierarchy?.[role]?.label || role}\n                </option>\n              ))}\n            </select>\n          </div>\n        </div>\n\n        {/* Role Summary Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-8\">\n          {roles?.map(role => (\n            <div key={role} className=\"p-4 border border-gray-200 rounded-lg\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className={`px-2 py-1 rounded-full text-xs font-medium ${roleHierarchy?.[role]?.color}`}>\n                  {roleHierarchy?.[role]?.label || role}\n                </span>\n                <span className=\"text-sm font-bold text-gray-700\">\n                  Nivel {roleHierarchy?.[role]?.level}\n                </span>\n              </div>\n              \n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-blue-600\">\n                  {getPermissionCount(role)}\n                </div>\n                <div className=\"text-sm text-gray-600\">\n                  de {features?.length} permisos\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {/* Permission Matrix Table */}\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full table-auto\">\n            <thead>\n              <tr className=\"bg-gray-50\">\n                <th className=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">\n                  Funcionalidad\n                </th>\n                {roles?.map(role => (\n                  <th key={role} className=\"px-4 py-3 text-center text-sm font-medium text-gray-700\">\n                    <div className=\"flex flex-col items-center\">\n                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${roleHierarchy?.[role]?.color} mb-1`}>\n                        {roleHierarchy?.[role]?.label || role}\n                      </span>\n                      <span className=\"text-xs text-gray-500\">\n                        Nivel {roleHierarchy?.[role]?.level}\n                      </span>\n                    </div>\n                  </th>\n                ))}\n                <th className=\"px-4 py-3 text-center text-sm font-medium text-gray-700\">\n                  Acciones\n                </th>\n              </tr>\n            </thead>\n            \n            <tbody className=\"divide-y divide-gray-200\">\n              {filteredFeatures?.map((feature) => (\n                <tr key={feature} className=\"hover:bg-gray-50\">\n                  <td className=\"px-4 py-3\">\n                    <div>\n                      <p className=\"font-medium text-gray-900 capitalize\">\n                        {feature?.replace(/_/g, ' ')}\n                      </p>\n                      <p className=\"text-sm text-gray-500\">\n                        {getFeatureDescription(feature)}\n                      </p>\n                    </div>\n                  </td>\n                  \n                  {roles?.map(role => (\n                    <td key={`${feature}-${role}`} className=\"px-4 py-3 text-center\">\n                      <div className=\"flex items-center justify-center\">\n                        {hasPermission(feature, role) ? (\n                          <div className=\"flex items-center text-green-600\">\n                            <Check className=\"h-5 w-5\" />\n                            <span className=\"sr-only\">Permitido</span>\n                          </div>\n                        ) : (\n                          <div className=\"flex items-center text-red-600\">\n                            <X className=\"h-5 w-5\" />\n                            <span className=\"sr-only\">Denegado</span>\n                          </div>\n                        )}\n                      </div>\n                    </td>\n                  ))}\n                  \n                  <td className=\"px-4 py-3 text-center\">\n                    <div className=\"flex items-center justify-center space-x-2\">\n                      <button\n                        onClick={() => setSelectedFeature(selectedFeature === feature ? null : feature)}\n                        className=\"p-2 text-blue-600 hover:bg-blue-100 rounded-full\"\n                        title=\"Ver detalles\"\n                      >\n                        <Eye className=\"h-4 w-4\" />\n                      </button>\n                      \n                      <button\n                        className=\"p-2 text-gray-600 hover:bg-gray-100 rounded-full\"\n                        title=\"Configurar permisos\"\n                      >\n                        <Settings className=\"h-4 w-4\" />\n                      </button>\n                    </div>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n\n        {/* Feature Details Panel */}\n        {selectedFeature && (\n          <div className=\"mt-6 p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n            <div className=\"flex items-start justify-between mb-4\">\n              <div>\n                <h4 className=\"text-lg font-semibold text-blue-900 capitalize\">\n                  {selectedFeature?.replace(/_/g, ' ')}\n                </h4>\n                <p className=\"text-blue-700\">{getFeatureDescription(selectedFeature)}</p>\n              </div>\n              \n              <button\n                onClick={() => setSelectedFeature(null)}\n                className=\"text-blue-600 hover:text-blue-800\"\n              >\n                <X className=\"h-5 w-5\" />\n              </button>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <h5 className=\"font-medium text-blue-900 mb-2\">Roles con Acceso:</h5>\n                <div className=\"space-y-2\">\n                  {featurePermissions?.[selectedFeature]?.map(role => (\n                    <div key={role} className=\"flex items-center space-x-2\">\n                      <Check className=\"h-4 w-4 text-green-600\" />\n                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${roleHierarchy?.[role]?.color}`}>\n                        {roleHierarchy?.[role]?.label || role}\n                      </span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              <div>\n                <h5 className=\"font-medium text-blue-900 mb-2\">Roles sin Acceso:</h5>\n                <div className=\"space-y-2\">\n                  {roles?.filter(role => !hasPermission(selectedFeature, role) && role !== 'superadmin')?.map(role => (\n                    <div key={role} className=\"flex items-center space-x-2\">\n                      <X className=\"h-4 w-4 text-red-600\" />\n                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${roleHierarchy?.[role]?.color}`}>\n                        {roleHierarchy?.[role]?.label || role}\n                      </span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n\n            <div className=\"mt-4 p-3 bg-yellow-50 border border-yellow-200 rounded\">\n              <div className=\"flex items-center\">\n                <Lock className=\"h-4 w-4 text-yellow-600 mr-2\" />\n                <span className=\"text-sm text-yellow-800\">\n                  <strong>Nota:</strong> Los Super Administradores tienen acceso completo a todas las funcionalidades del sistema.\n                </span>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Matrix Summary */}\n        <div className=\"mt-6 p-4 bg-gray-50 rounded-lg\">\n          <h4 className=\"font-medium text-gray-900 mb-3\">Resumen de la Matriz</h4>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n            <div className=\"text-center\">\n              <p className=\"text-2xl font-bold text-blue-600\">{features?.length}</p>\n              <p className=\"text-gray-600\">Funcionalidades Totales</p>\n            </div>\n            \n            <div className=\"text-center\">\n              <p className=\"text-2xl font-bold text-green-600\">{roles?.length}</p>\n              <p className=\"text-gray-600\">Roles Definidos</p>\n            </div>\n            \n            <div className=\"text-center\">\n              <p className=\"text-2xl font-bold text-purple-600\">\n                {features?.length * roles?.length}\n              </p>\n              <p className=\"text-gray-600\">Relaciones Permiso-Rol</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":11175},"src/pages/role-based-permission-enforcement-and-security-management-system/components/RealTimeAccessValidation.jsx":{"content":"import React, { useState } from 'react';\nimport { Eye, AlertTriangle, CheckCircle2, XCircle, Clock, User } from 'lucide-react';\n\nexport default function RealTimeAccessValidation({\n  validationQueue,\n  roleHierarchy,\n  users,\n  onValidateAccess,\n  onEmergencyOverride\n}) {\n  const [testUserId, setTestUserId] = useState('');\n  const [testFeature, setTestFeature] = useState('');\n  const [overrideReason, setOverrideReason] = useState('');\n\n  const features = [\n    'dashboard',\n    'employee_management',\n    'payroll_calculation',\n    'reports',\n    'system_settings',\n    'role_management',\n    'security_monitoring',\n    'attendance_approval',\n    'site_management'\n  ];\n\n  const handleTestValidation = () => {\n    if (testUserId && testFeature) {\n      onValidateAccess(testUserId, testFeature);\n      setTestFeature('');\n    }\n  };\n\n  const handleEmergencyOverride = (validation) => {\n    if (overrideReason?.trim()) {\n      onEmergencyOverride(validation?.userId, validation?.feature, overrideReason);\n      setOverrideReason('');\n    }\n  };\n\n  const getFeatureDescription = (feature) => {\n    const descriptions = {\n      'dashboard': 'Panel Principal',\n      'employee_management': 'Gestión de Empleados',\n      'payroll_calculation': 'Cálculo de Nóminas',\n      'reports': 'Reportes',\n      'system_settings': 'Configuración Sistema',\n      'role_management': 'Gestión de Roles',\n      'security_monitoring': 'Monitoreo Seguridad',\n      'attendance_approval': 'Aprobación Asistencias',\n      'site_management': 'Gestión de Sitios'\n    };\n    return descriptions?.[feature] || feature;\n  };\n\n  const getValidationIcon = (hasAccess) => {\n    if (hasAccess) {\n      return <CheckCircle2 className=\"h-5 w-5 text-green-600\" />;\n    } else {\n      return <XCircle className=\"h-5 w-5 text-red-600\" />;\n    }\n  };\n\n  const getTimeAgo = (timestamp) => {\n    const now = new Date();\n    const diff = Math.floor((now - timestamp) / 1000); // seconds\n\n    if (diff < 60) return `hace ${diff}s`;\n    if (diff < 3600) return `hace ${Math.floor(diff / 60)}m`;\n    if (diff < 86400) return `hace ${Math.floor(diff / 3600)}h`;\n    return `hace ${Math.floor(diff / 86400)}d`;\n  };\n\n  return (\n    <div className=\"bg-white rounded-lg shadow\">\n      <div className=\"p-6\">\n        <h2 className=\"text-xl font-bold text-gray-900 mb-6\">\n          <Eye className=\"h-6 w-6 inline mr-2 text-blue-600\" />\n          Validación de Acceso en Tiempo Real\n        </h2>\n\n        {/* Test Access Panel */}\n        <div className=\"bg-gray-50 rounded-lg p-4 mb-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Probar Validación de Acceso</h3>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Usuario\n              </label>\n              <select\n                value={testUserId}\n                onChange={(e) => setTestUserId(e?.target?.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500\"\n              >\n                <option value=\"\">Seleccionar usuario...</option>\n                {users?.map(user => (\n                  <option key={user?.id} value={user?.id}>\n                    {user?.full_name} ({roleHierarchy?.[user?.role]?.label || user?.role})\n                  </option>\n                ))}\n              </select>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Funcionalidad\n              </label>\n              <select\n                value={testFeature}\n                onChange={(e) => setTestFeature(e?.target?.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500\"\n              >\n                <option value=\"\">Seleccionar funcionalidad...</option>\n                {features?.map(feature => (\n                  <option key={feature} value={feature}>\n                    {getFeatureDescription(feature)}\n                  </option>\n                ))}\n              </select>\n            </div>\n\n            <div className=\"flex items-end\">\n              <button\n                onClick={handleTestValidation}\n                disabled={!testUserId || !testFeature}\n                className=\"w-full px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed\"\n              >\n                Probar Acceso\n              </button>\n            </div>\n          </div>\n        </div>\n\n        {/* Real-time Validation Queue */}\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">\n              <Clock className=\"h-5 w-5 inline mr-2\" />\n              Validaciones Recientes\n            </h3>\n            <span className=\"text-sm text-gray-600\">\n              {validationQueue?.length || 0} validaciones en cola\n            </span>\n          </div>\n\n          <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n            {validationQueue?.map((validation) => (\n              <div key={validation?.id} className={`border rounded-lg p-4 ${\n                validation?.hasAccess ? 'border-green-200 bg-green-50' : 'border-red-200 bg-red-50'\n              }`}>\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex items-start space-x-3 flex-1\">\n                    <div className=\"flex-shrink-0 mt-1\">\n                      {getValidationIcon(validation?.hasAccess)}\n                    </div>\n                    \n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-2 mb-2\">\n                        <User className=\"h-4 w-4 text-gray-400\" />\n                        <span className=\"font-medium text-gray-900\">\n                          {validation?.userName}\n                        </span>\n                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${\n                          roleHierarchy?.[validation?.userRole]?.color || 'bg-gray-100 text-gray-800'\n                        }`}>\n                          {roleHierarchy?.[validation?.userRole]?.label || validation?.userRole}\n                        </span>\n                      </div>\n                      \n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 text-sm\">\n                        <div>\n                          <p className=\"text-gray-600\">Función solicitada:</p>\n                          <p className=\"font-medium text-gray-900\">\n                            {getFeatureDescription(validation?.feature)}\n                          </p>\n                        </div>\n                        \n                        <div>\n                          <p className=\"text-gray-600\">Roles requeridos:</p>\n                          <div className=\"flex flex-wrap gap-1\">\n                            {validation?.requiredRoles?.map(role => (\n                              <span key={role} className={`px-1 py-0.5 rounded text-xs font-medium ${\n                                roleHierarchy?.[role]?.color || 'bg-gray-100 text-gray-800'\n                              }`}>\n                                {roleHierarchy?.[role]?.label || role}\n                              </span>\n                            ))}\n                          </div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center justify-between mt-3\">\n                        <div className=\"flex items-center text-xs text-gray-500\">\n                          <Clock className=\"h-3 w-3 mr-1\" />\n                          {getTimeAgo(validation?.timestamp)}\n                        </div>\n                        \n                        <div className={`px-3 py-1 rounded-full text-xs font-bold ${\n                          validation?.hasAccess \n                            ? 'bg-green-100 text-green-800' :'bg-red-100 text-red-800'\n                        }`}>\n                          {validation?.hasAccess ? 'ACCESO PERMITIDO' : 'ACCESO DENEGADO'}\n                        </div>\n                      </div>\n                      \n                      {/* Emergency Override for Denied Access */}\n                      {!validation?.hasAccess && (\n                        <div className=\"mt-3 p-3 bg-yellow-50 border border-yellow-200 rounded\">\n                          <div className=\"flex items-center mb-2\">\n                            <AlertTriangle className=\"h-4 w-4 text-yellow-600 mr-2\" />\n                            <span className=\"text-sm font-medium text-yellow-800\">\n                              Override de Emergencia\n                            </span>\n                          </div>\n                          \n                          <div className=\"flex items-center space-x-2\">\n                            <input\n                              type=\"text\"\n                              value={overrideReason}\n                              onChange={(e) => setOverrideReason(e?.target?.value)}\n                              placeholder=\"Razón del override...\"\n                              className=\"flex-1 px-2 py-1 text-sm border border-yellow-300 rounded focus:ring-yellow-500 focus:border-yellow-500\"\n                            />\n                            <button\n                              onClick={() => handleEmergencyOverride(validation)}\n                              disabled={!overrideReason?.trim()}\n                              className=\"px-3 py-1 bg-yellow-600 text-white text-sm rounded hover:bg-yellow-700 disabled:opacity-50\"\n                            >\n                              Override\n                            </button>\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n\n          {validationQueue?.length === 0 && (\n            <div className=\"text-center py-12 text-gray-500\">\n              <Eye className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n              <p className=\"text-lg font-medium mb-2\">No hay validaciones recientes</p>\n              <p className=\"text-sm\">\n                Use el panel de prueba arriba para simular validaciones de acceso\n              </p>\n            </div>\n          )}\n        </div>\n\n        {/* Validation Statistics */}\n        {validationQueue?.length > 0 && (\n          <div className=\"mt-6 p-4 bg-gray-50 rounded-lg\">\n            <h4 className=\"font-medium text-gray-900 mb-3\">Estadísticas de Validación</h4>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 text-sm\">\n              <div className=\"text-center\">\n                <p className=\"text-2xl font-bold text-blue-600\">\n                  {validationQueue?.length}\n                </p>\n                <p className=\"text-gray-600\">Total Validaciones</p>\n              </div>\n              \n              <div className=\"text-center\">\n                <p className=\"text-2xl font-bold text-green-600\">\n                  {validationQueue?.filter(v => v?.hasAccess)?.length}\n                </p>\n                <p className=\"text-gray-600\">Accesos Permitidos</p>\n              </div>\n              \n              <div className=\"text-center\">\n                <p className=\"text-2xl font-bold text-red-600\">\n                  {validationQueue?.filter(v => !v?.hasAccess)?.length}\n                </p>\n                <p className=\"text-gray-600\">Accesos Denegados</p>\n              </div>\n              \n              <div className=\"text-center\">\n                <p className=\"text-2xl font-bold text-purple-600\">\n                  {Math.round((validationQueue?.filter(v => v?.hasAccess)?.length / validationQueue?.length) * 100)}%\n                </p>\n                <p className=\"text-gray-600\">Tasa de Éxito</p>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":12227},"src/pages/role-based-permission-enforcement-and-security-management-system/components/RoleManagementTools.jsx":{"content":"import React, { useState } from 'react';\nimport { Users, Edit3, Save, X, AlertTriangle, CheckCircle2, Shield, UserPlus } from 'lucide-react';\n\nexport default function RoleManagementTools({\n  users,\n  roleHierarchy,\n  onUpdateUserRole,\n  currentUser\n}) {\n  const [editingUserId, setEditingUserId] = useState(null);\n  const [selectedRole, setSelectedRole] = useState('');\n  const [bulkSelectedUsers, setBulkSelectedUsers] = useState([]);\n  const [bulkRole, setBulkRole] = useState('');\n  const [showBulkEdit, setShowBulkEdit] = useState(false);\n\n  // Only allow role changes if current user is superadmin\n  const canModifyRoles = currentUser?.role === 'superadmin';\n\n  const handleStartEdit = (userId, currentRole) => {\n    if (!canModifyRoles) return;\n    setEditingUserId(userId);\n    setSelectedRole(currentRole);\n  };\n\n  const handleSaveRole = async () => {\n    if (editingUserId && selectedRole) {\n      await onUpdateUserRole(editingUserId, selectedRole);\n      setEditingUserId(null);\n      setSelectedRole('');\n    }\n  };\n\n  const handleCancelEdit = () => {\n    setEditingUserId(null);\n    setSelectedRole('');\n  };\n\n  const handleBulkUserSelection = (userId) => {\n    setBulkSelectedUsers(prev => \n      prev?.includes(userId)\n        ? prev?.filter(id => id !== userId)\n        : [...prev, userId]\n    );\n  };\n\n  const handleBulkRoleUpdate = async () => {\n    if (bulkSelectedUsers?.length === 0 || !bulkRole) return;\n\n    for (const userId of bulkSelectedUsers) {\n      await onUpdateUserRole(userId, bulkRole);\n    }\n\n    setBulkSelectedUsers([]);\n    setBulkRole('');\n    setShowBulkEdit(false);\n  };\n\n  const getRoleStats = () => {\n    const stats = {};\n    Object.keys(roleHierarchy)?.forEach(role => {\n      stats[role] = users?.filter(user => user?.role === role)?.length || 0;\n    });\n    return stats;\n  };\n\n  const roleStats = getRoleStats();\n  const roles = Object.keys(roleHierarchy)?.sort((a, b) => \n    roleHierarchy?.[b]?.level - roleHierarchy?.[a]?.level\n  );\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Role Statistics */}\n      <div className=\"bg-white rounded-lg shadow\">\n        <div className=\"p-6\">\n          <h2 className=\"text-xl font-bold text-gray-900 mb-4\">\n            <Users className=\"h-6 w-6 inline mr-2 text-blue-600\" />\n            Gestión de Roles de Usuario\n          </h2>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n            {roles?.map(role => (\n              <div key={role} className=\"p-4 border border-gray-200 rounded-lg\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <span className={`px-2 py-1 rounded-full text-xs font-medium ${roleHierarchy?.[role]?.color}`}>\n                    {roleHierarchy?.[role]?.label}\n                  </span>\n                  <Shield className=\"h-4 w-4 text-gray-400\" />\n                </div>\n                \n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-gray-900\">\n                    {roleStats?.[role]}\n                  </div>\n                  <div className=\"text-sm text-gray-600\">usuarios</div>\n                </div>\n              </div>\n            ))}\n          </div>\n\n          {!canModifyRoles && (\n            <div className=\"mb-4 p-3 bg-yellow-50 border border-yellow-200 rounded\">\n              <div className=\"flex items-center\">\n                <AlertTriangle className=\"h-4 w-4 text-yellow-600 mr-2\" />\n                <span className=\"text-sm text-yellow-800\">\n                  Solo los Super Administradores pueden modificar roles de usuario.\n                </span>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n      {/* Bulk Role Management */}\n      {canModifyRoles && (\n        <div className=\"bg-white rounded-lg shadow\">\n          <div className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-lg font-semibold text-gray-900\">\n                <UserPlus className=\"h-5 w-5 inline mr-2\" />\n                Gestión Masiva de Roles\n              </h3>\n              \n              <button\n                onClick={() => setShowBulkEdit(!showBulkEdit)}\n                className=\"px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700\"\n              >\n                {showBulkEdit ? 'Cancelar' : 'Editar Masivo'}\n              </button>\n            </div>\n\n            {showBulkEdit && (\n              <div className=\"bg-purple-50 border border-purple-200 rounded-lg p-4\">\n                <div className=\"flex items-center space-x-4 mb-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-purple-700 mb-1\">\n                      Nuevo Rol\n                    </label>\n                    <select\n                      value={bulkRole}\n                      onChange={(e) => setBulkRole(e?.target?.value)}\n                      className=\"px-3 py-2 border border-purple-300 rounded-md focus:ring-purple-500 focus:border-purple-500\"\n                    >\n                      <option value=\"\">Seleccionar rol...</option>\n                      {roles?.map(role => (\n                        <option key={role} value={role}>\n                          {roleHierarchy?.[role]?.label}\n                        </option>\n                      ))}\n                    </select>\n                  </div>\n                  \n                  <div className=\"flex items-end\">\n                    <button\n                      onClick={handleBulkRoleUpdate}\n                      disabled={bulkSelectedUsers?.length === 0 || !bulkRole}\n                      className=\"px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 disabled:opacity-50\"\n                    >\n                      Aplicar a {bulkSelectedUsers?.length} usuarios\n                    </button>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n      {/* User Role Management Table */}\n      <div className=\"bg-white rounded-lg shadow\">\n        <div className=\"p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Lista de Usuarios</h3>\n          \n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full table-auto\">\n              <thead>\n                <tr className=\"bg-gray-50\">\n                  {showBulkEdit && (\n                    <th className=\"px-4 py-3 text-left\">\n                      <input\n                        type=\"checkbox\"\n                        checked={bulkSelectedUsers?.length === users?.length}\n                        onChange={(e) => {\n                          if (e?.target?.checked) {\n                            setBulkSelectedUsers(users?.map(u => u?.id) || []);\n                          } else {\n                            setBulkSelectedUsers([]);\n                          }\n                        }}\n                        className=\"rounded border-gray-300 text-purple-600 focus:ring-purple-500\"\n                      />\n                    </th>\n                  )}\n                  \n                  <th className=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">\n                    Usuario\n                  </th>\n                  \n                  <th className=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">\n                    Rol Actual\n                  </th>\n                  \n                  <th className=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">\n                    Estado\n                  </th>\n                  \n                  <th className=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">\n                    Última Actividad\n                  </th>\n                  \n                  <th className=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">\n                    Acciones\n                  </th>\n                </tr>\n              </thead>\n              \n              <tbody className=\"divide-y divide-gray-200\">\n                {users?.map((user) => (\n                  <tr key={user?.id} className=\"hover:bg-gray-50\">\n                    {showBulkEdit && (\n                      <td className=\"px-4 py-3\">\n                        <input\n                          type=\"checkbox\"\n                          checked={bulkSelectedUsers?.includes(user?.id)}\n                          onChange={() => handleBulkUserSelection(user?.id)}\n                          className=\"rounded border-gray-300 text-purple-600 focus:ring-purple-500\"\n                        />\n                      </td>\n                    )}\n                    \n                    <td className=\"px-4 py-3\">\n                      <div className=\"flex items-center\">\n                        <div className=\"w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center mr-3\">\n                          <Users className=\"h-5 w-5 text-blue-600\" />\n                        </div>\n                        <div>\n                          <p className=\"font-medium text-gray-900\">{user?.full_name || 'Sin nombre'}</p>\n                          <p className=\"text-sm text-gray-500\">{user?.email || 'Sin email'}</p>\n                        </div>\n                      </div>\n                    </td>\n                    \n                    <td className=\"px-4 py-3\">\n                      {editingUserId === user?.id ? (\n                        <select\n                          value={selectedRole}\n                          onChange={(e) => setSelectedRole(e?.target?.value)}\n                          className=\"px-3 py-1 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500\"\n                        >\n                          {roles?.map(role => (\n                            <option key={role} value={role}>\n                              {roleHierarchy?.[role]?.label}\n                            </option>\n                          ))}\n                        </select>\n                      ) : (\n                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${\n                          roleHierarchy?.[user?.role]?.color || 'bg-gray-100 text-gray-800'\n                        }`}>\n                          {roleHierarchy?.[user?.role]?.label || user?.role}\n                        </span>\n                      )}\n                    </td>\n                    \n                    <td className=\"px-4 py-3\">\n                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${\n                        user?.status === 'active' ?'bg-green-100 text-green-800' :'bg-red-100 text-red-800'\n                      }`}>\n                        {user?.status === 'active' ? 'Activo' : 'Inactivo'}\n                      </span>\n                    </td>\n                    \n                    <td className=\"px-4 py-3 text-sm text-gray-600\">\n                      {user?.last_attendance_date \n                        ? new Date(user.last_attendance_date)?.toLocaleDateString()\n                        : 'Nunca'\n                      }\n                    </td>\n                    \n                    <td className=\"px-4 py-3\">\n                      {canModifyRoles && (\n                        <div className=\"flex items-center space-x-2\">\n                          {editingUserId === user?.id ? (\n                            <>\n                              <button\n                                onClick={handleSaveRole}\n                                className=\"p-2 text-green-600 hover:bg-green-100 rounded-full\"\n                                title=\"Guardar\"\n                              >\n                                <Save className=\"h-4 w-4\" />\n                              </button>\n                              <button\n                                onClick={handleCancelEdit}\n                                className=\"p-2 text-gray-600 hover:bg-gray-100 rounded-full\"\n                                title=\"Cancelar\"\n                              >\n                                <X className=\"h-4 w-4\" />\n                              </button>\n                            </>\n                          ) : (\n                            <button\n                              onClick={() => handleStartEdit(user?.id, user?.role)}\n                              className=\"p-2 text-blue-600 hover:bg-blue-100 rounded-full\"\n                              title=\"Editar rol\"\n                            >\n                              <Edit3 className=\"h-4 w-4\" />\n                            </button>\n                          )}\n                        </div>\n                      )}\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n\n          {users?.length === 0 && (\n            <div className=\"text-center py-12\">\n              <Users className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n              <p className=\"text-gray-500\">No hay usuarios disponibles</p>\n            </div>\n          )}\n        </div>\n      </div>\n      {/* Role Change History */}\n      <div className=\"bg-white rounded-lg shadow\">\n        <div className=\"p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n            <CheckCircle2 className=\"h-5 w-5 inline mr-2\" />\n            Historial de Cambios Recientes\n          </h3>\n          \n          <div className=\"text-center py-8 text-gray-500\">\n            <CheckCircle2 className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n            <p>No hay cambios recientes de roles</p>\n            <p className=\"text-sm\">Los cambios aparecerán aquí después de modificar roles</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":13758},"src/pages/role-based-permission-enforcement-and-security-management-system/components/SecurityAuditPanel.jsx":{"content":"import React, { useState } from 'react';\nimport { AlertTriangle, Eye, Shield, User, Clock, Filter, Download, Trash2 } from 'lucide-react';\n\nexport default function SecurityAuditPanel({ securityEvents, onClearEvents }) {\n  const [filterType, setFilterType] = useState('all');\n  const [sortOrder, setSortOrder] = useState('desc');\n  const [selectedEvent, setSelectedEvent] = useState(null);\n\n  // Filter events by type\n  const filteredEvents = securityEvents?.filter(event => {\n    if (filterType === 'all') return true;\n    return event.type === filterType;\n  }) || [];\n\n  // Sort events\n  const sortedEvents = filteredEvents?.sort((a, b) => {\n    const dateA = new Date(a.timestamp);\n    const dateB = new Date(b.timestamp);\n    return sortOrder === 'desc' ? dateB - dateA : dateA - dateB;\n  });\n\n  const getEventIcon = (type) => {\n    const icons = {\n      'permission_check': Eye,\n      'role_change': User,\n      'emergency_override': AlertTriangle,\n      'security_violation': Shield,\n      'system_access': Shield\n    };\n    const IconComponent = icons?.[type] || AlertTriangle;\n    return <IconComponent className=\"h-5 w-5\" />;\n  };\n\n  const getEventColor = (type, result) => {\n    if (type === 'permission_check') {\n      return result === 'granted' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800';\n    }\n    if (type === 'role_change') return 'bg-blue-100 text-blue-800';\n    if (type === 'emergency_override') return 'bg-yellow-100 text-yellow-800';\n    if (type === 'security_violation') return 'bg-red-100 text-red-800';\n    return 'bg-gray-100 text-gray-800';\n  };\n\n  const getEventLabel = (type) => {\n    const labels = {\n      'permission_check': 'Verificación de Permisos',\n      'role_change': 'Cambio de Rol',\n      'emergency_override': 'Override de Emergencia',\n      'security_violation': 'Violación de Seguridad',\n      'system_access': 'Acceso al Sistema'\n    };\n    return labels?.[type] || type;\n  };\n\n  const getTimeAgo = (timestamp) => {\n    const now = new Date();\n    const diff = Math.floor((now - timestamp) / 1000);\n\n    if (diff < 60) return `hace ${diff}s`;\n    if (diff < 3600) return `hace ${Math.floor(diff / 60)}m`;\n    if (diff < 86400) return `hace ${Math.floor(diff / 3600)}h`;\n    return `hace ${Math.floor(diff / 86400)}d`;\n  };\n\n  const exportEvents = () => {\n    const headers = [\n      'Fecha/Hora',\n      'Tipo',\n      'Usuario',\n      'Acción',\n      'Resultado',\n      'Detalles'\n    ];\n\n    const csvContent = [\n      headers?.join(','),\n      ...sortedEvents?.map(event => [\n        new Date(event.timestamp)?.toLocaleString(),\n        getEventLabel(event.type),\n        event.user,\n        event.action,\n        event.result,\n        event.details || ''\n      ]?.join(','))\n    ]?.join('\\n');\n\n    const blob = new Blob([csvContent], { type: 'text/csv' });\n    const url = window.URL?.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `auditoria_seguridad_${new Date()?.toISOString()?.split('T')?.[0]}.csv`;\n    document.body?.appendChild(a);\n    a?.click();\n    document.body?.removeChild(a);\n    window.URL?.revokeObjectURL(url);\n  };\n\n  const eventTypeStats = {\n    permission_check: securityEvents?.filter(e => e?.type === 'permission_check')?.length || 0,\n    role_change: securityEvents?.filter(e => e?.type === 'role_change')?.length || 0,\n    emergency_override: securityEvents?.filter(e => e?.type === 'emergency_override')?.length || 0,\n    security_violation: securityEvents?.filter(e => e?.type === 'security_violation')?.length || 0\n  };\n\n  return (\n    <div className=\"bg-white rounded-lg shadow\">\n      <div className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h2 className=\"text-xl font-bold text-gray-900\">\n            <AlertTriangle className=\"h-6 w-6 inline mr-2 text-red-600\" />\n            Auditoría de Seguridad\n          </h2>\n          \n          <div className=\"flex items-center space-x-4\">\n            <button\n              onClick={exportEvents}\n              disabled={sortedEvents?.length === 0}\n              className=\"px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50 flex items-center\"\n            >\n              <Download className=\"h-4 w-4 mr-2\" />\n              Exportar\n            </button>\n            \n            <button\n              onClick={onClearEvents}\n              disabled={securityEvents?.length === 0}\n              className=\"px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 disabled:opacity-50 flex items-center\"\n            >\n              <Trash2 className=\"h-4 w-4 mr-2\" />\n              Limpiar\n            </button>\n          </div>\n        </div>\n\n        {/* Event Statistics */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n          <div className=\"p-4 bg-blue-50 rounded-lg\">\n            <div className=\"flex items-center\">\n              <Eye className=\"h-6 w-6 text-blue-600\" />\n              <div className=\"ml-3\">\n                <p className=\"text-sm font-medium text-blue-600\">Verificaciones</p>\n                <p className=\"text-lg font-bold text-blue-900\">{eventTypeStats?.permission_check}</p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"p-4 bg-green-50 rounded-lg\">\n            <div className=\"flex items-center\">\n              <User className=\"h-6 w-6 text-green-600\" />\n              <div className=\"ml-3\">\n                <p className=\"text-sm font-medium text-green-600\">Cambios de Rol</p>\n                <p className=\"text-lg font-bold text-green-900\">{eventTypeStats?.role_change}</p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"p-4 bg-yellow-50 rounded-lg\">\n            <div className=\"flex items-center\">\n              <AlertTriangle className=\"h-6 w-6 text-yellow-600\" />\n              <div className=\"ml-3\">\n                <p className=\"text-sm font-medium text-yellow-600\">Overrides</p>\n                <p className=\"text-lg font-bold text-yellow-900\">{eventTypeStats?.emergency_override}</p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"p-4 bg-red-50 rounded-lg\">\n            <div className=\"flex items-center\">\n              <Shield className=\"h-6 w-6 text-red-600\" />\n              <div className=\"ml-3\">\n                <p className=\"text-sm font-medium text-red-600\">Violaciones</p>\n                <p className=\"text-lg font-bold text-red-900\">{eventTypeStats?.security_violation}</p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Filters */}\n        <div className=\"flex items-center space-x-4 mb-6\">\n          <div className=\"flex items-center space-x-2\">\n            <Filter className=\"h-4 w-4 text-gray-400\" />\n            <select\n              value={filterType}\n              onChange={(e) => setFilterType(e?.target?.value)}\n              className=\"px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500\"\n            >\n              <option value=\"all\">Todos los Eventos</option>\n              <option value=\"permission_check\">Verificaciones de Permisos</option>\n              <option value=\"role_change\">Cambios de Rol</option>\n              <option value=\"emergency_override\">Overrides de Emergencia</option>\n              <option value=\"security_violation\">Violaciones de Seguridad</option>\n            </select>\n          </div>\n\n          <select\n            value={sortOrder}\n            onChange={(e) => setSortOrder(e?.target?.value)}\n            className=\"px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500\"\n          >\n            <option value=\"desc\">Más Reciente Primero</option>\n            <option value=\"asc\">Más Antiguo Primero</option>\n          </select>\n\n          <div className=\"text-sm text-gray-600\">\n            {sortedEvents?.length} de {securityEvents?.length || 0} eventos\n          </div>\n        </div>\n\n        {/* Security Events List */}\n        <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n          {sortedEvents?.map((event) => (\n            <div key={event.id} className=\"border border-gray-200 rounded-lg p-4 hover:bg-gray-50\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex items-start space-x-3 flex-1\">\n                  <div className=\"flex-shrink-0 mt-1\">\n                    <div className={`p-2 rounded-full ${getEventColor(event.type, event.result)}`}>\n                      {getEventIcon(event.type)}\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-2 mb-2\">\n                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${getEventColor(event.type, event.result)}`}>\n                        {getEventLabel(event.type)}\n                      </span>\n                      \n                      <div className=\"flex items-center text-sm text-gray-500\">\n                        <Clock className=\"h-3 w-3 mr-1\" />\n                        {getTimeAgo(event.timestamp)}\n                      </div>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-2 text-sm\">\n                      <div>\n                        <p className=\"text-gray-600\">Usuario:</p>\n                        <p className=\"font-medium text-gray-900\">{event.user}</p>\n                      </div>\n                      \n                      <div>\n                        <p className=\"text-gray-600\">Acción:</p>\n                        <p className=\"font-medium text-gray-900\">{event.action}</p>\n                      </div>\n                      \n                      <div>\n                        <p className=\"text-gray-600\">Resultado:</p>\n                        <span className={`inline-flex px-2 py-1 rounded-full text-xs font-medium ${\n                          event.result === 'granted' || event.result === 'completed'\n                            ? 'bg-green-100 text-green-800'\n                            : event.result === 'denied' ?'bg-red-100 text-red-800' :'bg-yellow-100 text-yellow-800'\n                        }`}>\n                          {event.result?.toUpperCase()}\n                        </span>\n                      </div>\n                    </div>\n                    \n                    {event.details && (\n                      <div className=\"mt-3 p-2 bg-gray-100 rounded text-sm text-gray-700\">\n                        <p className=\"font-medium text-gray-600 mb-1\">Detalles:</p>\n                        <p>{event.details}</p>\n                      </div>\n                    )}\n                  </div>\n                </div>\n                \n                <button\n                  onClick={() => setSelectedEvent(selectedEvent === event.id ? null : event.id)}\n                  className=\"p-2 text-gray-400 hover:text-gray-600 rounded-full hover:bg-gray-100\"\n                >\n                  <Eye className=\"h-4 w-4\" />\n                </button>\n              </div>\n              \n              {/* Extended Details */}\n              {selectedEvent === event.id && (\n                <div className=\"mt-4 p-3 bg-blue-50 border border-blue-200 rounded\">\n                  <h5 className=\"font-medium text-blue-900 mb-2\">Información Adicional</h5>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3 text-sm\">\n                    <div>\n                      <p className=\"text-blue-700 font-medium\">Timestamp Completo:</p>\n                      <p className=\"text-blue-800\">{new Date(event.timestamp)?.toLocaleString()}</p>\n                    </div>\n                    <div>\n                      <p className=\"text-blue-700 font-medium\">ID del Evento:</p>\n                      <p className=\"text-blue-800 font-mono\">{event.id}</p>\n                    </div>\n                  </div>\n                  \n                  {event.type === 'permission_check' && (\n                    <div className=\"mt-3 p-2 bg-white rounded border\">\n                      <p className=\"text-sm\">\n                        <strong>Análisis:</strong> Verificación de permisos para acceder a funcionalidad específica.\n                        {event.result === 'denied' && ' Se recomienda revisar los roles asignados al usuario.'}\n                      </p>\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n          ))}\n        </div>\n\n        {sortedEvents?.length === 0 && (\n          <div className=\"text-center py-12 text-gray-500\">\n            <AlertTriangle className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n            {securityEvents?.length === 0 ? (\n              <div>\n                <p className=\"text-lg font-medium mb-2\">No hay eventos de seguridad</p>\n                <p className=\"text-sm\">Los eventos aparecerán aquí cuando ocurran</p>\n              </div>\n            ) : (\n              <div>\n                <p className=\"text-lg font-medium mb-2\">No hay eventos que coincidan con el filtro</p>\n                <p className=\"text-sm\">Intenta cambiar los filtros para ver más resultados</p>\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":13358},"src/pages/system-administration-and-configuration-panel/components/AuditLogViewer.jsx":{"content":"import React, { useState } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport Input from '../../../components/ui/Input';\nimport Select from '../../../components/ui/Select';\n\nconst AuditLogViewer = () => {\n  const [filters, setFilters] = useState({\n    dateFrom: '',\n    dateTo: '',\n    user: '',\n    action: '',\n    module: ''\n  });\n\n  const [auditLogs] = useState([\n    {\n      id: 1,\n      timestamp: new Date(Date.now() - 15 * 60 * 1000),\n      user: 'carlos.rodriguez@construcciones.com',\n      action: 'USER_CREATED',\n      module: 'User Management',\n      details: 'Nuevo usuario creado: María González',\n      ipAddress: '192.168.1.100',\n      userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)',\n      severity: 'info',\n      success: true\n    },\n    {\n      id: 2,\n      timestamp: new Date(Date.now() - 30 * 60 * 1000),\n      user: 'admin@construcciones.com',\n      action: 'PERMISSION_MODIFIED',\n      module: 'Security',\n      details: 'Permisos modificados para usuario Juan Pérez',\n      ipAddress: '192.168.1.101',\n      userAgent: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7)',\n      severity: 'warning',\n      success: true\n    },\n    {\n      id: 3,\n      timestamp: new Date(Date.now() - 45 * 60 * 1000),\n      user: 'maria.gonzalez@construcciones.com',\n      action: 'DATA_EXPORT',\n      module: 'Reports',\n      details: 'Exportación de reporte de nómina - Enero 2025',\n      ipAddress: '192.168.1.102',\n      userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)',\n      severity: 'info',\n      success: true\n    },\n    {\n      id: 4,\n      timestamp: new Date(Date.now() - 60 * 60 * 1000),\n      user: 'juan.perez@construcciones.com',\n      action: 'LOGIN_FAILED',\n      module: 'Authentication',\n      details: 'Intento de inicio de sesión fallido - Contraseña incorrecta',\n      ipAddress: '192.168.1.103',\n      userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X)',\n      severity: 'error',\n      success: false\n    },\n    {\n      id: 5,\n      timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000),\n      user: 'system@construcciones.com',\n      action: 'BACKUP_COMPLETED',\n      module: 'System',\n      details: 'Respaldo automático completado exitosamente',\n      ipAddress: '127.0.0.1',\n      userAgent: 'System Process',\n      severity: 'info',\n      success: true\n    },\n    {\n      id: 6,\n      timestamp: new Date(Date.now() - 3 * 60 * 60 * 1000),\n      user: 'ana.martinez@construcciones.com',\n      action: 'PAYROLL_CALCULATED',\n      module: 'Payroll',\n      details: 'Cálculo de nómina semanal - Semana 2, Enero 2025',\n      ipAddress: '192.168.1.104',\n      userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)',\n      severity: 'info',\n      success: true\n    }\n  ]);\n\n  const actionOptions = [\n    { value: '', label: 'Todas las acciones' },\n    { value: 'USER_CREATED', label: 'Usuario Creado' },\n    { value: 'USER_MODIFIED', label: 'Usuario Modificado' },\n    { value: 'USER_DELETED', label: 'Usuario Eliminado' },\n    { value: 'PERMISSION_MODIFIED', label: 'Permisos Modificados' },\n    { value: 'LOGIN_SUCCESS', label: 'Inicio de Sesión Exitoso' },\n    { value: 'LOGIN_FAILED', label: 'Inicio de Sesión Fallido' },\n    { value: 'DATA_EXPORT', label: 'Exportación de Datos' },\n    { value: 'BACKUP_COMPLETED', label: 'Respaldo Completado' },\n    { value: 'PAYROLL_CALCULATED', label: 'Nómina Calculada' }\n  ];\n\n  const moduleOptions = [\n    { value: '', label: 'Todos los módulos' },\n    { value: 'User Management', label: 'Gestión de Usuarios' },\n    { value: 'Security', label: 'Seguridad' },\n    { value: 'Authentication', label: 'Autenticación' },\n    { value: 'Reports', label: 'Reportes' },\n    { value: 'Payroll', label: 'Nómina' },\n    { value: 'System', label: 'Sistema' },\n    { value: 'Attendance', label: 'Asistencia' }\n  ];\n\n  const getSeverityColor = (severity) => {\n    const colors = {\n      info: 'text-primary',\n      warning: 'text-warning',\n      error: 'text-error',\n      success: 'text-success'\n    };\n    return colors?.[severity] || colors?.info;\n  };\n\n  const getSeverityIcon = (severity) => {\n    const icons = {\n      info: 'Info',\n      warning: 'AlertTriangle',\n      error: 'XCircle',\n      success: 'CheckCircle'\n    };\n    return icons?.[severity] || icons?.info;\n  };\n\n  const getActionIcon = (action) => {\n    const icons = {\n      USER_CREATED: 'UserPlus',\n      USER_MODIFIED: 'UserCheck',\n      USER_DELETED: 'UserX',\n      PERMISSION_MODIFIED: 'Shield',\n      LOGIN_SUCCESS: 'LogIn',\n      LOGIN_FAILED: 'LogOut',\n      DATA_EXPORT: 'Download',\n      BACKUP_COMPLETED: 'Database',\n      PAYROLL_CALCULATED: 'Calculator'\n    };\n    return icons?.[action] || 'Activity';\n  };\n\n  const formatTimestamp = (date) => {\n    return date?.toLocaleString('es-ES', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit'\n    });\n  };\n\n  const handleExport = () => {\n    console.log('Exporting audit logs with filters:', filters);\n  };\n\n  const filteredLogs = auditLogs?.filter(log => {\n    const matchesUser = !filters?.user || log?.user?.toLowerCase()?.includes(filters?.user?.toLowerCase());\n    const matchesAction = !filters?.action || log?.action === filters?.action;\n    const matchesModule = !filters?.module || log?.module === filters?.module;\n    return matchesUser && matchesAction && matchesModule;\n  });\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Filters */}\n      <div className=\"bg-card rounded-lg border border-border p-6\">\n        <div className=\"flex items-center space-x-2 mb-4\">\n          <Icon name=\"Filter\" size={20} className=\"text-primary\" />\n          <h3 className=\"text-lg font-semibold text-foreground\">Filtros de Búsqueda</h3>\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4\">\n          <Input\n            label=\"Fecha Desde\"\n            type=\"date\"\n            value={filters?.dateFrom}\n            onChange={(e) => setFilters(prev => ({ ...prev, dateFrom: e?.target?.value }))}\n          />\n          <Input\n            label=\"Fecha Hasta\"\n            type=\"date\"\n            value={filters?.dateTo}\n            onChange={(e) => setFilters(prev => ({ ...prev, dateTo: e?.target?.value }))}\n          />\n          <Input\n            label=\"Usuario\"\n            type=\"text\"\n            placeholder=\"Buscar por email...\"\n            value={filters?.user}\n            onChange={(e) => setFilters(prev => ({ ...prev, user: e?.target?.value }))}\n          />\n          <Select\n            label=\"Acción\"\n            options={actionOptions}\n            value={filters?.action}\n            onChange={(value) => setFilters(prev => ({ ...prev, action: value }))}\n          />\n          <Select\n            label=\"Módulo\"\n            options={moduleOptions}\n            value={filters?.module}\n            onChange={(value) => setFilters(prev => ({ ...prev, module: value }))}\n          />\n        </div>\n        \n        <div className=\"flex justify-between items-center mt-4\">\n          <span className=\"text-sm text-muted-foreground\">\n            {filteredLogs?.length} registro(s) encontrado(s)\n          </span>\n          <div className=\"flex space-x-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              iconName=\"RotateCcw\"\n              onClick={() => setFilters({ dateFrom: '', dateTo: '', user: '', action: '', module: '' })}\n            >\n              Limpiar Filtros\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              iconName=\"Download\"\n              onClick={handleExport}\n            >\n              Exportar\n            </Button>\n          </div>\n        </div>\n      </div>\n      {/* Audit Logs Table */}\n      <div className=\"bg-card rounded-lg border border-border overflow-hidden\">\n        <div className=\"p-6 border-b border-border\">\n          <h3 className=\"text-lg font-semibold text-foreground\">Registro de Auditoría</h3>\n        </div>\n        \n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full\">\n            <thead className=\"bg-muted\">\n              <tr>\n                <th className=\"text-left p-4 font-medium text-foreground\">Fecha/Hora</th>\n                <th className=\"text-left p-4 font-medium text-foreground\">Usuario</th>\n                <th className=\"text-left p-4 font-medium text-foreground\">Acción</th>\n                <th className=\"text-left p-4 font-medium text-foreground\">Módulo</th>\n                <th className=\"text-left p-4 font-medium text-foreground\">Detalles</th>\n                <th className=\"text-left p-4 font-medium text-foreground\">Estado</th>\n                <th className=\"text-left p-4 font-medium text-foreground\">IP</th>\n              </tr>\n            </thead>\n            <tbody>\n              {filteredLogs?.map((log) => (\n                <tr key={log?.id} className=\"border-t border-border hover:bg-muted/50\">\n                  <td className=\"p-4 text-sm text-foreground\">\n                    {formatTimestamp(log?.timestamp)}\n                  </td>\n                  <td className=\"p-4\">\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"w-6 h-6 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-xs font-medium\">\n                        {log?.user?.charAt(0)?.toUpperCase()}\n                      </div>\n                      <span className=\"text-sm text-foreground\">{log?.user}</span>\n                    </div>\n                  </td>\n                  <td className=\"p-4\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Icon \n                        name={getActionIcon(log?.action)} \n                        size={16} \n                        className={getSeverityColor(log?.severity)} \n                      />\n                      <span className=\"text-sm text-foreground\">{log?.action}</span>\n                    </div>\n                  </td>\n                  <td className=\"p-4 text-sm text-foreground\">\n                    {log?.module}\n                  </td>\n                  <td className=\"p-4 text-sm text-muted-foreground max-w-xs truncate\">\n                    {log?.details}\n                  </td>\n                  <td className=\"p-4\">\n                    <div className=\"flex items-center space-x-1\">\n                      <Icon \n                        name={getSeverityIcon(log?.severity)} \n                        size={16} \n                        className={getSeverityColor(log?.severity)} \n                      />\n                      <span className={`text-sm ${getSeverityColor(log?.severity)}`}>\n                        {log?.success ? 'Exitoso' : 'Fallido'}\n                      </span>\n                    </div>\n                  </td>\n                  <td className=\"p-4 text-sm text-muted-foreground\">\n                    {log?.ipAddress}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n        \n        {filteredLogs?.length === 0 && (\n          <div className=\"p-8 text-center\">\n            <Icon name=\"Search\" size={32} className=\"mx-auto text-muted-foreground mb-2\" />\n            <p className=\"text-sm text-muted-foreground\">No se encontraron registros con los filtros aplicados</p>\n          </div>\n        )}\n      </div>\n      {/* Summary Statistics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <div className=\"bg-card rounded-lg border border-border p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-foreground\">Total Eventos</p>\n              <p className=\"text-2xl font-bold text-foreground\">{filteredLogs?.length}</p>\n            </div>\n            <Icon name=\"Activity\" size={24} className=\"text-primary\" />\n          </div>\n        </div>\n        \n        <div className=\"bg-card rounded-lg border border-border p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-foreground\">Eventos Exitosos</p>\n              <p className=\"text-2xl font-bold text-success\">\n                {filteredLogs?.filter(log => log?.success)?.length}\n              </p>\n            </div>\n            <Icon name=\"CheckCircle\" size={24} className=\"text-success\" />\n          </div>\n        </div>\n        \n        <div className=\"bg-card rounded-lg border border-border p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-foreground\">Eventos Fallidos</p>\n              <p className=\"text-2xl font-bold text-error\">\n                {filteredLogs?.filter(log => !log?.success)?.length}\n              </p>\n            </div>\n            <Icon name=\"XCircle\" size={24} className=\"text-error\" />\n          </div>\n        </div>\n        \n        <div className=\"bg-card rounded-lg border border-border p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-foreground\">Usuarios Únicos</p>\n              <p className=\"text-2xl font-bold text-foreground\">\n                {new Set(filteredLogs.map(log => log.user))?.size}\n              </p>\n            </div>\n            <Icon name=\"Users\" size={24} className=\"text-primary\" />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AuditLogViewer;","size_bytes":13688},"src/pages/system-administration-and-configuration-panel/components/BrandingCustomizationTab.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport Input from '../../../components/ui/Input';\n\nimport { useAuth } from '../../../contexts/AuthContext';\nimport brandingService from '../../../services/brandingService';\n\nconst BrandingCustomizationTab = () => {\n  const { isSuperAdmin } = useAuth();\n  const [brandingSettings, setBrandingSettings] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [hasChanges, setHasChanges] = useState(false);\n  const [uploading, setUploading] = useState(false);\n\n  const [formData, setFormData] = useState({\n    nombre_empresa: '',\n    logo_url: '',\n    color_primario: '#3B82F6',\n    color_secundario: '#10B981',\n    mensaje_bienvenida: '',\n    moneda: 'MXN',\n    simbolo_moneda: '$'\n  });\n\n  useEffect(() => {\n    if (isSuperAdmin()) {\n      loadBrandingSettings();\n    } else {\n      setError('Acceso denegado. Solo los SuperAdministradores pueden acceder a esta funcionalidad.');\n      setLoading(false);\n    }\n  }, [isSuperAdmin]);\n\n  const loadBrandingSettings = async () => {\n    try {\n      setLoading(true);\n      setError('');\n      const settings = await brandingService?.getActiveBrandingSettings();\n      \n      if (settings) {\n        setBrandingSettings(settings);\n        setFormData({\n          nombre_empresa: settings?.nombre_empresa || '',\n          logo_url: settings?.logo_url || '',\n          color_primario: settings?.color_primario || '#3B82F6',\n          color_secundario: settings?.color_secundario || '#10B981',\n          mensaje_bienvenida: settings?.mensaje_bienvenida || '',\n          moneda: settings?.moneda || 'MXN',\n          simbolo_moneda: settings?.simbolo_moneda || '$'\n        });\n      }\n    } catch (err) {\n      setError(err?.message || 'Error al cargar la configuración de marca');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleInputChange = (field, value) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n    setHasChanges(true);\n    setError('');\n    setSuccess('');\n  };\n\n  const handleLogoUpload = async (file) => {\n    if (!file) return;\n\n    try {\n      setUploading(true);\n      setError('');\n\n      let result = await brandingService?.uploadBrandingAsset(file, 'logo');\n      \n      // Update form data with new logo URL\n      handleInputChange('logo_url', result?.publicUrl);\n      \n      setSuccess('Logo subido exitosamente');\n      setTimeout(() => setSuccess(''), 3000);\n    } catch (err) {\n      setError(err?.message || 'Error al subir el logo');\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  const handleSave = async () => {\n    try {\n      setSaving(true);\n      setError('');\n      \n      let result;\n      if (brandingSettings?.id) {\n        result = await brandingService?.updateBrandingSettings(brandingSettings?.id, formData);\n      } else {\n        result = await brandingService?.createBrandingSettings(formData);\n      }\n      \n      setBrandingSettings(result);\n      setHasChanges(false);\n      setSuccess('¡Configuración de marca guardada exitosamente!');\n      \n      // Apply branding immediately\n      brandingService?.applyBrandingSettings(result);\n      \n      // Clear success message after 3 seconds\n      setTimeout(() => setSuccess(''), 3000);\n    } catch (err) {\n      setError(err?.message || 'Error al guardar la configuración de marca');\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handleReset = () => {\n    if (brandingSettings) {\n      setFormData({\n        nombre_empresa: brandingSettings?.nombre_empresa || '',\n        logo_url: brandingSettings?.logo_url || '',\n        color_primario: brandingSettings?.color_primario || '#3B82F6',\n        color_secundario: brandingSettings?.color_secundario || '#10B981',\n        mensaje_bienvenida: brandingSettings?.mensaje_bienvenida || '',\n        moneda: brandingSettings?.moneda || 'MXN',\n        simbolo_moneda: brandingSettings?.simbolo_moneda || '$'\n      });\n    }\n    setHasChanges(false);\n    setError('');\n    setSuccess('');\n  };\n\n  const currencyOptions = [\n    { code: 'MXN', symbol: '$', name: 'Peso Mexicano (MXN)' },\n    { code: 'USD', symbol: '$', name: 'Dólar Estadounidense (USD)' },\n    { code: 'EUR', symbol: '€', name: 'Euro (EUR)' }\n  ];\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center p-8\">\n        <div className=\"text-center\">\n          <Icon name=\"Loader2\" size={24} className=\"animate-spin text-primary mx-auto mb-2\" />\n          <p className=\"text-muted-foreground\">Cargando configuración de marca...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isSuperAdmin()) {\n    return (\n      <div className=\"text-center p-8\">\n        <Icon name=\"Lock\" size={48} className=\"text-muted-foreground mx-auto mb-4\" />\n        <h3 className=\"text-lg font-semibold text-foreground mb-2\">Acceso Restringido</h3>\n        <p className=\"text-muted-foreground\">\n          Solo los SuperAdministradores pueden acceder a la personalización de marca.\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Action Banner */}\n      {hasChanges && (\n        <div className=\"bg-warning/10 border border-warning/20 rounded-lg p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              <Icon name=\"AlertTriangle\" size={20} className=\"text-warning\" />\n              <span className=\"text-sm font-medium text-foreground\">\n                Tienes cambios sin guardar en la configuración de marca\n              </span>\n            </div>\n            <div className=\"flex space-x-2\">\n              <Button variant=\"outline\" size=\"sm\" onClick={handleReset}>\n                Descartar\n              </Button>\n              <Button size=\"sm\" onClick={handleSave} disabled={saving}>\n                {saving ? (\n                  <>\n                    <Icon name=\"Loader2\" size={16} className=\"animate-spin mr-2\" />\n                    Guardando...\n                  </>\n                ) : (\n                  'Guardar Cambios'\n                )}\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Success Message */}\n      {success && (\n        <div className=\"bg-success/10 border border-success/20 rounded-lg p-4\">\n          <div className=\"flex items-center space-x-2\">\n            <Icon name=\"CheckCircle\" size={20} className=\"text-success\" />\n            <span className=\"text-sm font-medium text-foreground\">{success}</span>\n          </div>\n        </div>\n      )}\n\n      {/* Error Message */}\n      {error && (\n        <div className=\"bg-destructive/10 border border-destructive/20 rounded-lg p-4\">\n          <div className=\"flex items-center space-x-2\">\n            <Icon name=\"AlertCircle\" size={20} className=\"text-destructive\" />\n            <span className=\"text-sm font-medium text-foreground\">{error}</span>\n          </div>\n        </div>\n      )}\n\n      {/* Company Identity */}\n      <div className=\"bg-card rounded-lg border border-border p-6\">\n        <div className=\"flex items-center space-x-2 mb-6\">\n          <Icon name=\"Building\" size={20} className=\"text-primary\" />\n          <h3 className=\"text-lg font-semibold text-foreground\">Identidad de la Empresa</h3>\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <Input\n            label=\"Nombre de la Empresa\"\n            value={formData?.nombre_empresa}\n            onChange={(e) => handleInputChange('nombre_empresa', e?.target?.value)}\n            placeholder=\"Mi Empresa Constructora\"\n          />\n          <div className=\"md:col-span-2\">\n            <Input\n              label=\"Mensaje de Bienvenida\"\n              value={formData?.mensaje_bienvenida}\n              onChange={(e) => handleInputChange('mensaje_bienvenida', e?.target?.value)}\n              placeholder=\"Sistema de gestión de asistencia y recursos humanos\"\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Logo Upload */}\n      <div className=\"bg-card rounded-lg border border-border p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <div className=\"flex items-center space-x-2\">\n            <Icon name=\"Image\" size={20} className=\"text-primary\" />\n            <h3 className=\"text-lg font-semibold text-foreground\">Logo de la Empresa</h3>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              variant=\"outline\" \n              size=\"sm\"\n              onClick={() => document.getElementById('logo-upload')?.click()}\n              disabled={uploading}\n            >\n              {uploading ? (\n                <>\n                  <Icon name=\"Loader2\" size={16} className=\"animate-spin mr-2\" />\n                  Subiendo...\n                </>\n              ) : (\n                <>\n                  <Icon name=\"Upload\" size={16} className=\"mr-2\" />\n                  Subir Logo\n                </>\n              )}\n            </Button>\n            {formData?.logo_url && (\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => handleInputChange('logo_url', '')}\n                disabled={uploading}\n              >\n                <Icon name=\"Trash2\" size={16} className=\"mr-2\" />\n                Eliminar\n              </Button>\n            )}\n          </div>\n        </div>\n        \n        <div className=\"space-y-4\">\n          {formData?.logo_url && (\n            <div className=\"flex items-center justify-center p-4 border-2 border-dashed border-border rounded-lg bg-muted/30\">\n              <div className=\"text-center\">\n                <img\n                  src={formData?.logo_url}\n                  alt=\"Logo actual\"\n                  className=\"max-h-32 max-w-full object-contain mx-auto mb-2\"\n                />\n                <p className=\"text-xs text-muted-foreground\">Logo actual</p>\n              </div>\n            </div>\n          )}\n          \n          <div className=\"border-2 border-dashed border-border rounded-lg p-6 text-center hover:bg-muted/30 transition-colors\">\n            <input\n              type=\"file\"\n              accept=\"image/*\"\n              onChange={(e) => handleLogoUpload(e?.target?.files?.[0])}\n              className=\"hidden\"\n              id=\"logo-upload\"\n              disabled={uploading}\n            />\n            <label\n              htmlFor=\"logo-upload\"\n              className={`cursor-pointer block ${uploading ? 'opacity-50 cursor-not-allowed' : ''}`}\n            >\n              <Icon name={uploading ? \"Loader2\" : \"Upload\"} \n                    size={32} \n                    className={`text-muted-foreground mx-auto mb-2 ${uploading ? 'animate-spin' : ''}`} />\n              <p className=\"text-sm text-primary hover:text-primary/80 font-medium mb-1\">\n                {uploading ? 'Subiendo logo...' : 'Seleccionar nuevo logo'}\n              </p>\n              <p className=\"text-xs text-muted-foreground\">\n                Formatos permitidos: JPG, PNG, SVG. Máximo 5MB\n              </p>\n            </label>\n          </div>\n          \n          {/* Logo Preview in Sidebar Context */}\n          {formData?.logo_url && (\n            <div className=\"mt-4 p-4 bg-muted rounded-lg\">\n              <h4 className=\"text-sm font-medium text-foreground mb-3\">Vista previa en sidebar:</h4>\n              <div className=\"flex items-center space-x-3 p-3 bg-background rounded border\">\n                <div className=\"flex items-center justify-center w-8 h-8 bg-primary rounded-md flex-shrink-0 overflow-hidden\">\n                  <img\n                    src={formData?.logo_url}\n                    alt=\"Preview\"\n                    className=\"w-full h-full object-contain\"\n                  />\n                </div>\n                <h1 className=\"text-lg font-semibold text-foreground\">\n                  {formData?.nombre_empresa || 'Nombre de la Empresa'}\n                </h1>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Brand Colors */}\n      <div className=\"bg-card rounded-lg border border-border p-6\">\n        <div className=\"flex items-center space-x-2 mb-6\">\n          <Icon name=\"Palette\" size={20} className=\"text-primary\" />\n          <h3 className=\"text-lg font-semibold text-foreground\">Colores de Marca</h3>\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-foreground mb-2\">\n              Color Primario\n            </label>\n            <div className=\"flex space-x-2\">\n              <input\n                type=\"color\"\n                value={formData?.color_primario}\n                onChange={(e) => handleInputChange('color_primario', e?.target?.value)}\n                className=\"w-12 h-10 rounded border border-border cursor-pointer\"\n              />\n              <Input\n                value={formData?.color_primario}\n                onChange={(e) => handleInputChange('color_primario', e?.target?.value)}\n                placeholder=\"#3B82F6\"\n                className=\"flex-1\"\n              />\n            </div>\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium text-foreground mb-2\">\n              Color Secundario\n            </label>\n            <div className=\"flex space-x-2\">\n              <input\n                type=\"color\"\n                value={formData?.color_secundario}\n                onChange={(e) => handleInputChange('color_secundario', e?.target?.value)}\n                className=\"w-12 h-10 rounded border border-border cursor-pointer\"\n              />\n              <Input\n                value={formData?.color_secundario}\n                onChange={(e) => handleInputChange('color_secundario', e?.target?.value)}\n                placeholder=\"#10B981\"\n                className=\"flex-1\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Currency Configuration */}\n      <div className=\"bg-card rounded-lg border border-border p-6\">\n        <div className=\"flex items-center space-x-2 mb-6\">\n          <Icon name=\"DollarSign\" size={20} className=\"text-primary\" />\n          <h3 className=\"text-lg font-semibold text-foreground\">Configuración de Moneda</h3>\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-foreground mb-2\">\n              Moneda\n            </label>\n            <select\n              value={formData?.moneda}\n              onChange={(e) => {\n                const selectedCurrency = currencyOptions?.find(c => c?.code === e?.target?.value);\n                handleInputChange('moneda', selectedCurrency?.code);\n                handleInputChange('simbolo_moneda', selectedCurrency?.symbol);\n              }}\n              className=\"w-full px-3 py-2 text-sm border border-border rounded-md bg-background text-foreground focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent\"\n            >\n              {currencyOptions?.map(currency => (\n                <option key={currency?.code} value={currency?.code}>\n                  {currency?.name}\n                </option>\n              ))}\n            </select>\n          </div>\n          \n          <Input\n            label=\"Símbolo de Moneda\"\n            value={formData?.simbolo_moneda}\n            onChange={(e) => handleInputChange('simbolo_moneda', e?.target?.value)}\n            placeholder=\"$\"\n          />\n        </div>\n        \n        <div className=\"mt-4 p-3 bg-muted rounded-lg\">\n          <p className=\"text-sm text-muted-foreground\">\n            Vista previa: <span className=\"font-semibold text-foreground\">\n              {formData?.simbolo_moneda}1,234.56 {formData?.moneda}\n            </span>\n          </p>\n        </div>\n      </div>\n\n      {/* Save Actions */}\n      <div className=\"flex justify-end space-x-4\">\n        <Button\n          variant=\"outline\"\n          onClick={handleReset}\n          disabled={!hasChanges || saving}\n        >\n          Restablecer\n        </Button>\n        <Button\n          onClick={handleSave}\n          disabled={saving}\n        >\n          {saving ? (\n            <>\n              <Icon name=\"Loader2\" size={16} className=\"animate-spin mr-2\" />\n              Guardando...\n            </>\n          ) : (\n            <>\n              <Icon name=\"Save\" size={16} className=\"mr-2\" />\n              Guardar Configuración\n            </>\n          )}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default BrandingCustomizationTab;","size_bytes":16929},"src/pages/system-administration-and-configuration-panel/components/IntegrationManagementTab.jsx":{"content":"import React, { useState } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport Input from '../../../components/ui/Input';\n\nimport { Checkbox } from '../../../components/ui/Checkbox';\n\nconst IntegrationManagementTab = () => {\n  const [integrations, setIntegrations] = useState([\n    {\n      id: 1,\n      name: 'Active Directory',\n      type: 'authentication',\n      status: 'connected',\n      lastSync: new Date(Date.now() - 30 * 60 * 1000),\n      health: 'healthy',\n      config: {\n        server: 'ldap://ad.construcciones.com',\n        port: '389',\n        baseDN: 'DC=construcciones,DC=com',\n        syncInterval: '60'\n      }\n    },\n    {\n      id: 2,\n      name: 'SAP ERP',\n      type: 'erp',\n      status: 'connected',\n      lastSync: new Date(Date.now() - 2 * 60 * 60 * 1000),\n      health: 'warning',\n      config: {\n        endpoint: 'https://sap.construcciones.com/api',\n        clientId: 'ASISTENCIA_PRO',\n        syncInterval: '120'\n      }\n    },\n    {\n      id: 3,\n      name: 'QuickBooks',\n      type: 'accounting',\n      status: 'disconnected',\n      lastSync: new Date(Date.now() - 24 * 60 * 60 * 1000),\n      health: 'error',\n      config: {\n        companyId: 'QB_CONSTRUCCIONES',\n        environment: 'production',\n        syncInterval: '240'\n      }\n    },\n    {\n      id: 4,\n      name: 'Microsoft Teams',\n      type: 'communication',\n      status: 'connected',\n      lastSync: new Date(Date.now() - 15 * 60 * 1000),\n      health: 'healthy',\n      config: {\n        tenantId: 'construcciones-teams',\n        webhookUrl: 'https://teams.microsoft.com/webhook/...',\n        syncInterval: '30'\n      }\n    }\n  ]);\n\n  const [selectedIntegration, setSelectedIntegration] = useState(null);\n  const [showConfigModal, setShowConfigModal] = useState(false);\n\n  const getStatusColor = (status) => {\n    const colors = {\n      connected: 'bg-success text-success-foreground',\n      disconnected: 'bg-error text-error-foreground',\n      connecting: 'bg-warning text-warning-foreground'\n    };\n    return colors?.[status] || colors?.disconnected;\n  };\n\n  const getHealthColor = (health) => {\n    const colors = {\n      healthy: 'text-success',\n      warning: 'text-warning',\n      error: 'text-error'\n    };\n    return colors?.[health] || colors?.error;\n  };\n\n  const getHealthIcon = (health) => {\n    const icons = {\n      healthy: 'CheckCircle',\n      warning: 'AlertTriangle',\n      error: 'XCircle'\n    };\n    return icons?.[health] || icons?.error;\n  };\n\n  const getTypeIcon = (type) => {\n    const icons = {\n      authentication: 'Shield',\n      erp: 'Building2',\n      accounting: 'Calculator',\n      communication: 'MessageSquare',\n      hr: 'Users'\n    };\n    return icons?.[type] || 'Settings';\n  };\n\n  const formatLastSync = (date) => {\n    const now = new Date();\n    const diff = now - date;\n    const minutes = Math.floor(diff / (1000 * 60));\n    const hours = Math.floor(diff / (1000 * 60 * 60));\n    \n    if (minutes < 60) return `hace ${minutes}m`;\n    if (hours < 24) return `hace ${hours}h`;\n    return `hace ${Math.floor(hours / 24)}d`;\n  };\n\n  const handleTestConnection = (integration) => {\n    console.log('Testing connection for:', integration?.name);\n    // Simulate connection test\n  };\n\n  const handleSync = (integration) => {\n    console.log('Syncing:', integration?.name);\n    // Simulate sync operation\n  };\n\n  const handleConfigure = (integration) => {\n    setSelectedIntegration(integration);\n    setShowConfigModal(true);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Integration Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <div className=\"bg-card rounded-lg border border-border p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-foreground\">Total Integraciones</p>\n              <p className=\"text-2xl font-bold text-foreground\">{integrations?.length}</p>\n            </div>\n            <Icon name=\"Plug\" size={24} className=\"text-primary\" />\n          </div>\n        </div>\n        \n        <div className=\"bg-card rounded-lg border border-border p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-foreground\">Conectadas</p>\n              <p className=\"text-2xl font-bold text-success\">\n                {integrations?.filter(i => i?.status === 'connected')?.length}\n              </p>\n            </div>\n            <Icon name=\"CheckCircle\" size={24} className=\"text-success\" />\n          </div>\n        </div>\n        \n        <div className=\"bg-card rounded-lg border border-border p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-foreground\">Con Problemas</p>\n              <p className=\"text-2xl font-bold text-warning\">\n                {integrations?.filter(i => i?.health === 'warning')?.length}\n              </p>\n            </div>\n            <Icon name=\"AlertTriangle\" size={24} className=\"text-warning\" />\n          </div>\n        </div>\n        \n        <div className=\"bg-card rounded-lg border border-border p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-foreground\">Desconectadas</p>\n              <p className=\"text-2xl font-bold text-error\">\n                {integrations?.filter(i => i?.status === 'disconnected')?.length}\n              </p>\n            </div>\n            <Icon name=\"XCircle\" size={24} className=\"text-error\" />\n          </div>\n        </div>\n      </div>\n      {/* Integration List */}\n      <div className=\"bg-card rounded-lg border border-border\">\n        <div className=\"p-6 border-b border-border\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"text-lg font-semibold text-foreground\">Integraciones Configuradas</h3>\n            <Button iconName=\"Plus\">\n              Nueva Integración\n            </Button>\n          </div>\n        </div>\n        \n        <div className=\"divide-y divide-border\">\n          {integrations?.map((integration) => (\n            <div key={integration?.id} className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"w-12 h-12 bg-muted rounded-lg flex items-center justify-center\">\n                    <Icon name={getTypeIcon(integration?.type)} size={24} className=\"text-primary\" />\n                  </div>\n                  \n                  <div>\n                    <div className=\"flex items-center space-x-2\">\n                      <h4 className=\"text-lg font-medium text-foreground\">{integration?.name}</h4>\n                      <span className={`px-2 py-1 text-xs font-medium rounded-full ${getStatusColor(integration?.status)}`}>\n                        {integration?.status === 'connected' ? 'Conectado' : \n                         integration?.status === 'disconnected' ? 'Desconectado' : 'Conectando'}\n                      </span>\n                    </div>\n                    <div className=\"flex items-center space-x-4 mt-1\">\n                      <div className=\"flex items-center space-x-1\">\n                        <Icon \n                          name={getHealthIcon(integration?.health)} \n                          size={16} \n                          className={getHealthColor(integration?.health)} \n                        />\n                        <span className=\"text-sm text-muted-foreground\">\n                          {integration?.health === 'healthy' ? 'Saludable' :\n                           integration?.health === 'warning' ? 'Advertencia' : 'Error'}\n                        </span>\n                      </div>\n                      <span className=\"text-sm text-muted-foreground\">\n                        Última sincronización: {formatLastSync(integration?.lastSync)}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center space-x-2\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    iconName=\"RefreshCw\"\n                    onClick={() => handleSync(integration)}\n                  >\n                    Sincronizar\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    iconName=\"Zap\"\n                    onClick={() => handleTestConnection(integration)}\n                  >\n                    Probar\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    iconName=\"Settings\"\n                    onClick={() => handleConfigure(integration)}\n                  >\n                    Configurar\n                  </Button>\n                </div>\n              </div>\n              \n              {/* Integration Details */}\n              <div className=\"mt-4 grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n                <div>\n                  <span className=\"text-muted-foreground\">Tipo:</span>\n                  <span className=\"ml-2 text-foreground capitalize\">{integration?.type}</span>\n                </div>\n                <div>\n                  <span className=\"text-muted-foreground\">Intervalo de Sync:</span>\n                  <span className=\"ml-2 text-foreground\">{integration?.config?.syncInterval} min</span>\n                </div>\n                <div>\n                  <span className=\"text-muted-foreground\">Estado de Salud:</span>\n                  <span className={`ml-2 ${getHealthColor(integration?.health)}`}>\n                    {integration?.health === 'healthy' ? 'Óptimo' :\n                     integration?.health === 'warning' ? 'Necesita atención' : 'Crítico'}\n                  </span>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n      {/* Sync Schedule */}\n      <div className=\"bg-card rounded-lg border border-border p-6\">\n        <div className=\"flex items-center space-x-2 mb-6\">\n          <Icon name=\"Clock\" size={20} className=\"text-primary\" />\n          <h3 className=\"text-lg font-semibold text-foreground\">Programación de Sincronización</h3>\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <div className=\"space-y-4\">\n            <Checkbox\n              label=\"Sincronización Automática\"\n              description=\"Ejecutar sincronizaciones según intervalos configurados\"\n              checked\n            />\n            <Checkbox\n              label=\"Sincronización Nocturna\"\n              description=\"Ejecutar sincronización completa a las 2:00 AM\"\n              checked\n            />\n            <Checkbox\n              label=\"Notificar Errores\"\n              description=\"Enviar alertas cuando falle una sincronización\"\n              checked\n            />\n          </div>\n          <div className=\"space-y-4\">\n            <Input\n              label=\"Hora de Sincronización Nocturna\"\n              type=\"time\"\n              value=\"02:00\"\n            />\n            <Input\n              label=\"Reintentos en Caso de Error\"\n              type=\"number\"\n              min=\"1\"\n              max=\"10\"\n              value=\"3\"\n            />\n            <Input\n              label=\"Timeout de Conexión (seg)\"\n              type=\"number\"\n              min=\"10\"\n              max=\"300\"\n              value=\"30\"\n            />\n          </div>\n        </div>\n      </div>\n      {/* Configuration Modal */}\n      {showConfigModal && selectedIntegration && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n          <div className=\"bg-card rounded-lg border border-border w-full max-w-2xl max-h-[90vh] overflow-y-auto\">\n            <div className=\"p-6 border-b border-border\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-lg font-semibold text-foreground\">\n                  Configurar {selectedIntegration?.name}\n                </h3>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  iconName=\"X\"\n                  onClick={() => setShowConfigModal(false)}\n                />\n              </div>\n            </div>\n            \n            <div className=\"p-6 space-y-6\">\n              {/* Connection Settings */}\n              <div>\n                <h4 className=\"text-md font-medium text-foreground mb-4\">Configuración de Conexión</h4>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  {Object.entries(selectedIntegration?.config)?.map(([key, value]) => (\n                    <Input\n                      key={key}\n                      label={key?.charAt(0)?.toUpperCase() + key?.slice(1)}\n                      value={value}\n                      onChange={() => {}}\n                    />\n                  ))}\n                </div>\n              </div>\n              \n              {/* Sync Settings */}\n              <div>\n                <h4 className=\"text-md font-medium text-foreground mb-4\">Configuración de Sincronización</h4>\n                <div className=\"space-y-4\">\n                  <Checkbox\n                    label=\"Sincronización Bidireccional\"\n                    description=\"Permitir que los datos fluyan en ambas direcciones\"\n                    checked\n                  />\n                  <Checkbox\n                    label=\"Validación de Datos\"\n                    description=\"Validar datos antes de sincronizar\"\n                    checked\n                  />\n                  <Checkbox\n                    label=\"Log Detallado\"\n                    description=\"Registrar información detallada de sincronización\"\n                   \n                  />\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"p-6 border-t border-border flex justify-end space-x-3\">\n              <Button\n                variant=\"outline\"\n                onClick={() => setShowConfigModal(false)}\n              >\n                Cancelar\n              </Button>\n              <Button\n                variant=\"outline\"\n                iconName=\"Zap\"\n                onClick={() => handleTestConnection(selectedIntegration)}\n              >\n                Probar Conexión\n              </Button>\n              <Button onClick={() => setShowConfigModal(false)}>\n                Guardar Configuración\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default IntegrationManagementTab;","size_bytes":14948},"src/pages/system-administration-and-configuration-panel/components/SecurityPoliciesTab.jsx":{"content":"import React, { useState } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport Input from '../../../components/ui/Input';\n\nimport { Checkbox } from '../../../components/ui/Checkbox';\n\nconst SecurityPoliciesTab = () => {\n  const [policies, setPolicies] = useState({\n    password: {\n      minLength: '8',\n      requireUppercase: true,\n      requireLowercase: true,\n      requireNumbers: true,\n      requireSpecialChars: true,\n      expirationDays: '90',\n      historyCount: '5'\n    },\n    session: {\n      timeoutMinutes: '30',\n      maxConcurrentSessions: '3',\n      requireReauth: true,\n      rememberDevice: false\n    },\n    twoFactor: {\n      enabled: true,\n      requiredForAdmins: true,\n      requiredForSupervisors: false,\n      backupCodes: true,\n      smsEnabled: true,\n      emailEnabled: true\n    },\n    api: {\n      rateLimitEnabled: true,\n      requestsPerMinute: '100',\n      tokenExpirationHours: '24',\n      refreshTokenDays: '30'\n    }\n  });\n\n  const [securityEvents, setSecurityEvents] = useState([\n    {\n      id: 1,\n      type: 'login_failure',\n      user: 'carlos.rodriguez@construcciones.com',\n      timestamp: new Date(Date.now() - 15 * 60 * 1000),\n      details: 'Múltiples intentos fallidos de inicio de sesión',\n      severity: 'high',\n      status: 'active'\n    },\n    {\n      id: 2,\n      type: 'permission_change',\n      user: 'admin@construcciones.com',\n      timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000),\n      details: 'Permisos modificados para usuario María González',\n      severity: 'medium',\n      status: 'resolved'\n    },\n    {\n      id: 3,\n      type: 'data_export',\n      user: 'maria.gonzalez@construcciones.com',\n      timestamp: new Date(Date.now() - 4 * 60 * 60 * 1000),\n      details: 'Exportación masiva de datos de nómina',\n      severity: 'medium',\n      status: 'reviewed'\n    }\n  ]);\n\n  const [hasChanges, setHasChanges] = useState(false);\n\n  const handlePolicyChange = (section, field, value) => {\n    setPolicies(prev => ({\n      ...prev,\n      [section]: {\n        ...prev?.[section],\n        [field]: value\n      }\n    }));\n    setHasChanges(true);\n  };\n\n  const getSeverityColor = (severity) => {\n    const colors = {\n      high: 'bg-error/10 text-error border-error/20',\n      medium: 'bg-warning/10 text-warning border-warning/20',\n      low: 'bg-success/10 text-success border-success/20'\n    };\n    return colors?.[severity] || colors?.low;\n  };\n\n  const getStatusColor = (status) => {\n    const colors = {\n      active: 'bg-error text-error-foreground',\n      resolved: 'bg-success text-success-foreground',\n      reviewed: 'bg-secondary text-secondary-foreground'\n    };\n    return colors?.[status] || colors?.active;\n  };\n\n  const formatTimestamp = (date) => {\n    return date?.toLocaleString('es-ES', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Save Banner */}\n      {hasChanges && (\n        <div className=\"bg-warning/10 border border-warning/20 rounded-lg p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              <Icon name=\"AlertTriangle\" size={20} className=\"text-warning\" />\n              <span className=\"text-sm font-medium text-foreground\">\n                Cambios de seguridad pendientes de aplicar\n              </span>\n            </div>\n            <div className=\"flex space-x-2\">\n              <Button variant=\"outline\" size=\"sm\">\n                Descartar\n              </Button>\n              <Button size=\"sm\">\n                Aplicar Políticas\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n      {/* Password Policies */}\n      <div className=\"bg-card rounded-lg border border-border p-6\">\n        <div className=\"flex items-center space-x-2 mb-6\">\n          <Icon name=\"Lock\" size={20} className=\"text-primary\" />\n          <h3 className=\"text-lg font-semibold text-foreground\">Políticas de Contraseña</h3>\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-6\">\n          <Input\n            label=\"Longitud Mínima\"\n            type=\"number\"\n            min=\"6\"\n            max=\"20\"\n            value={policies?.password?.minLength}\n            onChange={(e) => handlePolicyChange('password', 'minLength', e?.target?.value)}\n          />\n          <Input\n            label=\"Expiración (días)\"\n            type=\"number\"\n            min=\"30\"\n            max=\"365\"\n            value={policies?.password?.expirationDays}\n            onChange={(e) => handlePolicyChange('password', 'expirationDays', e?.target?.value)}\n          />\n          <Input\n            label=\"Historial de Contraseñas\"\n            type=\"number\"\n            min=\"1\"\n            max=\"10\"\n            value={policies?.password?.historyCount}\n            onChange={(e) => handlePolicyChange('password', 'historyCount', e?.target?.value)}\n          />\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <div className=\"space-y-3\">\n            <Checkbox\n              label=\"Requerir Mayúsculas\"\n              description=\"Al menos una letra mayúscula\"\n              checked={policies?.password?.requireUppercase}\n              onChange={(e) => handlePolicyChange('password', 'requireUppercase', e?.target?.checked)}\n            />\n            <Checkbox\n              label=\"Requerir Minúsculas\"\n              description=\"Al menos una letra minúscula\"\n              checked={policies?.password?.requireLowercase}\n              onChange={(e) => handlePolicyChange('password', 'requireLowercase', e?.target?.checked)}\n            />\n          </div>\n          <div className=\"space-y-3\">\n            <Checkbox\n              label=\"Requerir Números\"\n              description=\"Al menos un dígito numérico\"\n              checked={policies?.password?.requireNumbers}\n              onChange={(e) => handlePolicyChange('password', 'requireNumbers', e?.target?.checked)}\n            />\n            <Checkbox\n              label=\"Requerir Caracteres Especiales\"\n              description=\"Al menos un símbolo especial\"\n              checked={policies?.password?.requireSpecialChars}\n              onChange={(e) => handlePolicyChange('password', 'requireSpecialChars', e?.target?.checked)}\n            />\n          </div>\n        </div>\n      </div>\n      {/* Session Management */}\n      <div className=\"bg-card rounded-lg border border-border p-6\">\n        <div className=\"flex items-center space-x-2 mb-6\">\n          <Icon name=\"Timer\" size={20} className=\"text-primary\" />\n          <h3 className=\"text-lg font-semibold text-foreground\">Gestión de Sesiones</h3>\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-6\">\n          <Input\n            label=\"Tiempo de Inactividad (min)\"\n            type=\"number\"\n            min=\"5\"\n            max=\"120\"\n            value={policies?.session?.timeoutMinutes}\n            onChange={(e) => handlePolicyChange('session', 'timeoutMinutes', e?.target?.value)}\n          />\n          <Input\n            label=\"Sesiones Concurrentes Máximas\"\n            type=\"number\"\n            min=\"1\"\n            max=\"10\"\n            value={policies?.session?.maxConcurrentSessions}\n            onChange={(e) => handlePolicyChange('session', 'maxConcurrentSessions', e?.target?.value)}\n          />\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <Checkbox\n            label=\"Reautenticación Requerida\"\n            description=\"Solicitar contraseña para acciones críticas\"\n            checked={policies?.session?.requireReauth}\n            onChange={(e) => handlePolicyChange('session', 'requireReauth', e?.target?.checked)}\n          />\n          <Checkbox\n            label=\"Recordar Dispositivo\"\n            description=\"Permitir recordar dispositivos confiables\"\n            checked={policies?.session?.rememberDevice}\n            onChange={(e) => handlePolicyChange('session', 'rememberDevice', e?.target?.checked)}\n          />\n        </div>\n      </div>\n      {/* Two-Factor Authentication */}\n      <div className=\"bg-card rounded-lg border border-border p-6\">\n        <div className=\"flex items-center space-x-2 mb-6\">\n          <Icon name=\"Shield\" size={20} className=\"text-primary\" />\n          <h3 className=\"text-lg font-semibold text-foreground\">Autenticación de Dos Factores</h3>\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <div className=\"space-y-4\">\n            <Checkbox\n              label=\"Habilitar 2FA\"\n              description=\"Activar autenticación de dos factores\"\n              checked={policies?.twoFactor?.enabled}\n              onChange={(e) => handlePolicyChange('twoFactor', 'enabled', e?.target?.checked)}\n            />\n            <Checkbox\n              label=\"Obligatorio para Administradores\"\n              description=\"Requerir 2FA para roles administrativos\"\n              checked={policies?.twoFactor?.requiredForAdmins}\n              onChange={(e) => handlePolicyChange('twoFactor', 'requiredForAdmins', e?.target?.checked)}\n            />\n            <Checkbox\n              label=\"Obligatorio para Supervisores\"\n              description=\"Requerir 2FA para supervisores\"\n              checked={policies?.twoFactor?.requiredForSupervisors}\n              onChange={(e) => handlePolicyChange('twoFactor', 'requiredForSupervisors', e?.target?.checked)}\n            />\n          </div>\n          <div className=\"space-y-4\">\n            <Checkbox\n              label=\"Códigos de Respaldo\"\n              description=\"Generar códigos de emergencia\"\n              checked={policies?.twoFactor?.backupCodes}\n              onChange={(e) => handlePolicyChange('twoFactor', 'backupCodes', e?.target?.checked)}\n            />\n            <Checkbox\n              label=\"Verificación por SMS\"\n              description=\"Permitir códigos por mensaje de texto\"\n              checked={policies?.twoFactor?.smsEnabled}\n              onChange={(e) => handlePolicyChange('twoFactor', 'smsEnabled', e?.target?.checked)}\n            />\n            <Checkbox\n              label=\"Verificación por Email\"\n              description=\"Permitir códigos por correo electrónico\"\n              checked={policies?.twoFactor?.emailEnabled}\n              onChange={(e) => handlePolicyChange('twoFactor', 'emailEnabled', e?.target?.checked)}\n            />\n          </div>\n        </div>\n      </div>\n      {/* API Security */}\n      <div className=\"bg-card rounded-lg border border-border p-6\">\n        <div className=\"flex items-center space-x-2 mb-6\">\n          <Icon name=\"Key\" size={20} className=\"text-primary\" />\n          <h3 className=\"text-lg font-semibold text-foreground\">Seguridad de API</h3>\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-6\">\n          <Input\n            label=\"Límite de Peticiones/min\"\n            type=\"number\"\n            min=\"10\"\n            max=\"1000\"\n            value={policies?.api?.requestsPerMinute}\n            onChange={(e) => handlePolicyChange('api', 'requestsPerMinute', e?.target?.value)}\n          />\n          <Input\n            label=\"Expiración Token (horas)\"\n            type=\"number\"\n            min=\"1\"\n            max=\"168\"\n            value={policies?.api?.tokenExpirationHours}\n            onChange={(e) => handlePolicyChange('api', 'tokenExpirationHours', e?.target?.value)}\n          />\n          <Input\n            label=\"Refresh Token (días)\"\n            type=\"number\"\n            min=\"1\"\n            max=\"90\"\n            value={policies?.api?.refreshTokenDays}\n            onChange={(e) => handlePolicyChange('api', 'refreshTokenDays', e?.target?.value)}\n          />\n        </div>\n        \n        <Checkbox\n          label=\"Límite de Velocidad Habilitado\"\n          description=\"Aplicar límites de peticiones por minuto\"\n          checked={policies?.api?.rateLimitEnabled}\n          onChange={(e) => handlePolicyChange('api', 'rateLimitEnabled', e?.target?.checked)}\n        />\n      </div>\n      {/* Security Events */}\n      <div className=\"bg-card rounded-lg border border-border p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <div className=\"flex items-center space-x-2\">\n            <Icon name=\"AlertTriangle\" size={20} className=\"text-primary\" />\n            <h3 className=\"text-lg font-semibold text-foreground\">Eventos de Seguridad Recientes</h3>\n          </div>\n          <Button variant=\"outline\" size=\"sm\" iconName=\"Download\">\n            Exportar Log\n          </Button>\n        </div>\n        \n        <div className=\"space-y-3\">\n          {securityEvents?.map((event) => (\n            <div key={event.id} className={`p-4 rounded-lg border ${getSeverityColor(event.severity)}`}>\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <span className=\"text-sm font-medium text-foreground\">{event.user}</span>\n                    <span className={`px-2 py-0.5 text-xs font-medium rounded-full ${getStatusColor(event.status)}`}>\n                      {event.status === 'active' ? 'Activo' : event.status === 'resolved' ? 'Resuelto' : 'Revisado'}\n                    </span>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground mb-1\">{event.details}</p>\n                  <p className=\"text-xs text-muted-foreground\">{formatTimestamp(event.timestamp)}</p>\n                </div>\n                <div className=\"flex space-x-2\">\n                  <Button variant=\"ghost\" size=\"sm\" iconName=\"Eye\">\n                    Ver\n                  </Button>\n                  {event.status === 'active' && (\n                    <Button variant=\"outline\" size=\"sm\" iconName=\"Check\">\n                      Resolver\n                    </Button>\n                  )}\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SecurityPoliciesTab;","size_bytes":14349},"src/pages/system-administration-and-configuration-panel/components/SystemHealthDashboard.jsx":{"content":"import React, { useState, useEffect } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\n\nconst SystemHealthDashboard = () => {\n  const [systemMetrics, setSystemMetrics] = useState({\n    server: {\n      status: 'healthy',\n      uptime: '15d 8h 32m',\n      cpu: 45,\n      memory: 68,\n      disk: 72,\n      load: 1.2\n    },\n    database: {\n      status: 'healthy',\n      connections: 25,\n      maxConnections: 100,\n      queryTime: 12,\n      size: '2.4 GB',\n      backupStatus: 'completed'\n    },\n    application: {\n      status: 'healthy',\n      activeUsers: 127,\n      requestsPerMinute: 450,\n      errorRate: 0.02,\n      responseTime: 180\n    },\n    integrations: {\n      status: 'warning',\n      activeConnections: 3,\n      totalConnections: 4,\n      lastSyncErrors: 1,\n      avgSyncTime: 45\n    }\n  });\n\n  const [alerts] = useState([\n    {\n      id: 1,\n      type: 'warning',\n      title: 'Uso de Disco Alto',\n      message: 'El disco del servidor está al 72% de capacidad',\n      timestamp: new Date(Date.now() - 30 * 60 * 1000),\n      acknowledged: false\n    },\n    {\n      id: 2,\n      type: 'error',\n      title: 'Fallo en Integración QuickBooks',\n      message: 'La conexión con QuickBooks ha fallado durante la última sincronización',\n      timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000),\n      acknowledged: false\n    },\n    {\n      id: 3,\n      type: 'info',\n      title: 'Respaldo Completado',\n      message: 'El respaldo automático se completó exitosamente',\n      timestamp: new Date(Date.now() - 4 * 60 * 60 * 1000),\n      acknowledged: true\n    }\n  ]);\n\n  const getStatusColor = (status) => {\n    const colors = {\n      healthy: 'text-success',\n      warning: 'text-warning',\n      error: 'text-error',\n      critical: 'text-error'\n    };\n    return colors?.[status] || colors?.error;\n  };\n\n  const getStatusBgColor = (status) => {\n    const colors = {\n      healthy: 'bg-success/10 border-success/20',\n      warning: 'bg-warning/10 border-warning/20',\n      error: 'bg-error/10 border-error/20',\n      critical: 'bg-error/10 border-error/20'\n    };\n    return colors?.[status] || colors?.error;\n  };\n\n  const getStatusIcon = (status) => {\n    const icons = {\n      healthy: 'CheckCircle',\n      warning: 'AlertTriangle',\n      error: 'XCircle',\n      critical: 'AlertOctagon'\n    };\n    return icons?.[status] || icons?.error;\n  };\n\n  const getAlertColor = (type) => {\n    const colors = {\n      info: 'bg-primary/10 border-primary/20 text-primary',\n      warning: 'bg-warning/10 border-warning/20 text-warning',\n      error: 'bg-error/10 border-error/20 text-error'\n    };\n    return colors?.[type] || colors?.info;\n  };\n\n  const getAlertIcon = (type) => {\n    const icons = {\n      info: 'Info',\n      warning: 'AlertTriangle',\n      error: 'AlertCircle'\n    };\n    return icons?.[type] || icons?.info;\n  };\n\n  const formatTimestamp = (date) => {\n    const now = new Date();\n    const diff = now - date;\n    const hours = Math.floor(diff / (1000 * 60 * 60));\n    const minutes = Math.floor(diff / (1000 * 60));\n    \n    if (minutes < 60) return `hace ${minutes}m`;\n    if (hours < 24) return `hace ${hours}h`;\n    return `hace ${Math.floor(hours / 24)}d`;\n  };\n\n  const getProgressColor = (percentage) => {\n    if (percentage < 50) return 'bg-success';\n    if (percentage < 80) return 'bg-warning';\n    return 'bg-error';\n  };\n\n  // Simulate real-time updates\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setSystemMetrics(prev => ({\n        ...prev,\n        server: {\n          ...prev?.server,\n          cpu: Math.max(20, Math.min(80, prev?.server?.cpu + (Math.random() - 0.5) * 10)),\n          memory: Math.max(30, Math.min(90, prev?.server?.memory + (Math.random() - 0.5) * 5))\n        },\n        application: {\n          ...prev?.application,\n          activeUsers: Math.max(50, Math.min(200, prev?.application?.activeUsers + Math.floor((Math.random() - 0.5) * 10))),\n          requestsPerMinute: Math.max(200, Math.min(800, prev?.application?.requestsPerMinute + Math.floor((Math.random() - 0.5) * 50)))\n        }\n      }));\n    }, 5000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div className=\"space-y-6\">\n      {/* System Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <div className={`rounded-lg border p-4 ${getStatusBgColor(systemMetrics?.server?.status)}`}>\n          <div className=\"flex items-center justify-between mb-2\">\n            <h3 className=\"text-sm font-medium text-foreground\">Servidor</h3>\n            <Icon \n              name={getStatusIcon(systemMetrics?.server?.status)} \n              size={20} \n              className={getStatusColor(systemMetrics?.server?.status)} \n            />\n          </div>\n          <p className=\"text-xs text-muted-foreground\">Uptime: {systemMetrics?.server?.uptime}</p>\n          <p className=\"text-xs text-muted-foreground\">Load: {systemMetrics?.server?.load}</p>\n        </div>\n\n        <div className={`rounded-lg border p-4 ${getStatusBgColor(systemMetrics?.database?.status)}`}>\n          <div className=\"flex items-center justify-between mb-2\">\n            <h3 className=\"text-sm font-medium text-foreground\">Base de Datos</h3>\n            <Icon \n              name={getStatusIcon(systemMetrics?.database?.status)} \n              size={20} \n              className={getStatusColor(systemMetrics?.database?.status)} \n            />\n          </div>\n          <p className=\"text-xs text-muted-foreground\">\n            Conexiones: {systemMetrics?.database?.connections}/{systemMetrics?.database?.maxConnections}\n          </p>\n          <p className=\"text-xs text-muted-foreground\">Tamaño: {systemMetrics?.database?.size}</p>\n        </div>\n\n        <div className={`rounded-lg border p-4 ${getStatusBgColor(systemMetrics?.application?.status)}`}>\n          <div className=\"flex items-center justify-between mb-2\">\n            <h3 className=\"text-sm font-medium text-foreground\">Aplicación</h3>\n            <Icon \n              name={getStatusIcon(systemMetrics?.application?.status)} \n              size={20} \n              className={getStatusColor(systemMetrics?.application?.status)} \n            />\n          </div>\n          <p className=\"text-xs text-muted-foreground\">Usuarios: {systemMetrics?.application?.activeUsers}</p>\n          <p className=\"text-xs text-muted-foreground\">Req/min: {systemMetrics?.application?.requestsPerMinute}</p>\n        </div>\n\n        <div className={`rounded-lg border p-4 ${getStatusBgColor(systemMetrics?.integrations?.status)}`}>\n          <div className=\"flex items-center justify-between mb-2\">\n            <h3 className=\"text-sm font-medium text-foreground\">Integraciones</h3>\n            <Icon \n              name={getStatusIcon(systemMetrics?.integrations?.status)} \n              size={20} \n              className={getStatusColor(systemMetrics?.integrations?.status)} \n            />\n          </div>\n          <p className=\"text-xs text-muted-foreground\">\n            Activas: {systemMetrics?.integrations?.activeConnections}/{systemMetrics?.integrations?.totalConnections}\n          </p>\n          <p className=\"text-xs text-muted-foreground\">Errores: {systemMetrics?.integrations?.lastSyncErrors}</p>\n        </div>\n      </div>\n      {/* Detailed Metrics */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Server Resources */}\n        <div className=\"bg-card rounded-lg border border-border p-6\">\n          <div className=\"flex items-center space-x-2 mb-4\">\n            <Icon name=\"Server\" size={20} className=\"text-primary\" />\n            <h3 className=\"text-lg font-semibold text-foreground\">Recursos del Servidor</h3>\n          </div>\n          \n          <div className=\"space-y-4\">\n            <div>\n              <div className=\"flex justify-between text-sm mb-1\">\n                <span className=\"text-foreground\">CPU</span>\n                <span className=\"text-muted-foreground\">{systemMetrics?.server?.cpu}%</span>\n              </div>\n              <div className=\"w-full bg-muted rounded-full h-2\">\n                <div \n                  className={`h-2 rounded-full transition-all duration-300 ${getProgressColor(systemMetrics?.server?.cpu)}`}\n                  style={{ width: `${systemMetrics?.server?.cpu}%` }}\n                ></div>\n              </div>\n            </div>\n            \n            <div>\n              <div className=\"flex justify-between text-sm mb-1\">\n                <span className=\"text-foreground\">Memoria</span>\n                <span className=\"text-muted-foreground\">{systemMetrics?.server?.memory}%</span>\n              </div>\n              <div className=\"w-full bg-muted rounded-full h-2\">\n                <div \n                  className={`h-2 rounded-full transition-all duration-300 ${getProgressColor(systemMetrics?.server?.memory)}`}\n                  style={{ width: `${systemMetrics?.server?.memory}%` }}\n                ></div>\n              </div>\n            </div>\n            \n            <div>\n              <div className=\"flex justify-between text-sm mb-1\">\n                <span className=\"text-foreground\">Disco</span>\n                <span className=\"text-muted-foreground\">{systemMetrics?.server?.disk}%</span>\n              </div>\n              <div className=\"w-full bg-muted rounded-full h-2\">\n                <div \n                  className={`h-2 rounded-full ${getProgressColor(systemMetrics?.server?.disk)}`}\n                  style={{ width: `${systemMetrics?.server?.disk}%` }}\n                ></div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Application Performance */}\n        <div className=\"bg-card rounded-lg border border-border p-6\">\n          <div className=\"flex items-center space-x-2 mb-4\">\n            <Icon name=\"Activity\" size={20} className=\"text-primary\" />\n            <h3 className=\"text-lg font-semibold text-foreground\">Rendimiento de la Aplicación</h3>\n          </div>\n          \n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"text-center\">\n              <p className=\"text-2xl font-bold text-foreground\">{systemMetrics?.application?.activeUsers}</p>\n              <p className=\"text-sm text-muted-foreground\">Usuarios Activos</p>\n            </div>\n            <div className=\"text-center\">\n              <p className=\"text-2xl font-bold text-foreground\">{systemMetrics?.application?.requestsPerMinute}</p>\n              <p className=\"text-sm text-muted-foreground\">Req/min</p>\n            </div>\n            <div className=\"text-center\">\n              <p className=\"text-2xl font-bold text-success\">{systemMetrics?.application?.errorRate}%</p>\n              <p className=\"text-sm text-muted-foreground\">Tasa de Error</p>\n            </div>\n            <div className=\"text-center\">\n              <p className=\"text-2xl font-bold text-foreground\">{systemMetrics?.application?.responseTime}ms</p>\n              <p className=\"text-sm text-muted-foreground\">Tiempo Respuesta</p>\n            </div>\n          </div>\n        </div>\n      </div>\n      {/* System Alerts */}\n      <div className=\"bg-card rounded-lg border border-border p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center space-x-2\">\n            <Icon name=\"AlertTriangle\" size={20} className=\"text-primary\" />\n            <h3 className=\"text-lg font-semibold text-foreground\">Alertas del Sistema</h3>\n          </div>\n          <Button variant=\"outline\" size=\"sm\" iconName=\"Settings\">\n            Configurar Alertas\n          </Button>\n        </div>\n        \n        <div className=\"space-y-3\">\n          {alerts?.map((alert) => (\n            <div key={alert.id} className={`p-4 rounded-lg border ${getAlertColor(alert.type)}`}>\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex items-start space-x-3\">\n                  <Icon name={getAlertIcon(alert.type)} size={20} />\n                  <div>\n                    <h4 className=\"font-medium\">{alert.title}</h4>\n                    <p className=\"text-sm opacity-80 mt-1\">{alert.message}</p>\n                    <p className=\"text-xs opacity-60 mt-2\">{formatTimestamp(alert.timestamp)}</p>\n                  </div>\n                </div>\n                <div className=\"flex space-x-2\">\n                  {!alert.acknowledged && (\n                    <Button variant=\"ghost\" size=\"sm\" iconName=\"Check\">\n                      Reconocer\n                    </Button>\n                  )}\n                  <Button variant=\"ghost\" size=\"sm\" iconName=\"X\">\n                    Descartar\n                  </Button>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n      {/* Quick Actions */}\n      <div className=\"bg-card rounded-lg border border-border p-6\">\n        <div className=\"flex items-center space-x-2 mb-4\">\n          <Icon name=\"Zap\" size={20} className=\"text-primary\" />\n          <h3 className=\"text-lg font-semibold text-foreground\">Acciones Rápidas</h3>\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          <Button variant=\"outline\" iconName=\"RotateCcw\" fullWidth>\n            Reiniciar Servicios\n          </Button>\n          <Button variant=\"outline\" iconName=\"Database\" fullWidth>\n            Ejecutar Respaldo\n          </Button>\n          <Button variant=\"outline\" iconName=\"RefreshCw\" fullWidth>\n            Limpiar Caché\n          </Button>\n          <Button variant=\"outline\" iconName=\"FileText\" fullWidth>\n            Ver Logs\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SystemHealthDashboard;","size_bytes":13813},"src/pages/system-administration-and-configuration-panel/components/SystemSettingsTab.jsx":{"content":"import React, { useState } from 'react';\nimport Icon from '../../../components/AppIcon';\nimport Button from '../../../components/ui/Button';\nimport Input from '../../../components/ui/Input';\nimport Select from '../../../components/ui/Select';\nimport { Checkbox } from '../../../components/ui/Checkbox';\n\nconst SystemSettingsTab = () => {\n  const [settings, setSettings] = useState({\n    workingHours: {\n      startTime: '08:00',\n      endTime: '18:00',\n      lunchDuration: '60',\n      tardinessTolerance: '10'\n    },\n    payroll: {\n      overtimeThreshold: '9',\n      overtimeMultiplier: '1.5',\n      weekendMultiplier: '2.0',\n      holidayMultiplier: '2.5'\n    },\n    attendance: {\n      autoClockOut: true,\n      locationRequired: true,\n      photoRequired: false,\n      offlineMode: true\n    },\n    notifications: {\n      emailNotifications: true,\n      smsNotifications: false,\n      pushNotifications: true,\n      reminderTime: '30'\n    }\n  });\n\n  const [hasChanges, setHasChanges] = useState(false);\n\n  const timezoneOptions = [\n    { value: 'America/Mexico_City', label: 'Ciudad de México (GMT-6)' },\n    { value: 'America/Bogota', label: 'Bogotá (GMT-5)' },\n    { value: 'America/Lima', label: 'Lima (GMT-5)' },\n    { value: 'America/Argentina/Buenos_Aires', label: 'Buenos Aires (GMT-3)' },\n    { value: 'Europe/Madrid', label: 'Madrid (GMT+1)' }\n  ];\n\n  const currencyOptions = [\n    { value: 'MXN', label: 'Peso Mexicano (MXN)' },\n    { value: 'COP', label: 'Peso Colombiano (COP)' },\n    { value: 'PEN', label: 'Sol Peruano (PEN)' },\n    { value: 'ARS', label: 'Peso Argentino (ARS)' },\n    { value: 'EUR', label: 'Euro (EUR)' }\n  ];\n\n  const handleInputChange = (section, field, value) => {\n    setSettings(prev => ({\n      ...prev,\n      [section]: {\n        ...prev?.[section],\n        [field]: value\n      }\n    }));\n    setHasChanges(true);\n  };\n\n  const handleSave = () => {\n    // Simulate save operation\n    console.log('Saving settings:', settings);\n    setHasChanges(false);\n  };\n\n  const handleReset = () => {\n    // Reset to default values\n    setHasChanges(false);\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Save Banner */}\n      {hasChanges && (\n        <div className=\"bg-warning/10 border border-warning/20 rounded-lg p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              <Icon name=\"AlertTriangle\" size={20} className=\"text-warning\" />\n              <span className=\"text-sm font-medium text-foreground\">\n                Tienes cambios sin guardar\n              </span>\n            </div>\n            <div className=\"flex space-x-2\">\n              <Button variant=\"outline\" size=\"sm\" onClick={handleReset}>\n                Descartar\n              </Button>\n              <Button size=\"sm\" onClick={handleSave}>\n                Guardar Cambios\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n      {/* Working Hours Configuration */}\n      <div className=\"bg-card rounded-lg border border-border p-6\">\n        <div className=\"flex items-center space-x-2 mb-6\">\n          <Icon name=\"Clock\" size={20} className=\"text-primary\" />\n          <h3 className=\"text-lg font-semibold text-foreground\">Configuración de Horarios</h3>\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          <Input\n            label=\"Hora de Entrada\"\n            type=\"time\"\n            value={settings?.workingHours?.startTime}\n            onChange={(e) => handleInputChange('workingHours', 'startTime', e?.target?.value)}\n          />\n          <Input\n            label=\"Hora de Salida\"\n            type=\"time\"\n            value={settings?.workingHours?.endTime}\n            onChange={(e) => handleInputChange('workingHours', 'endTime', e?.target?.value)}\n          />\n          <Input\n            label=\"Duración Almuerzo (min)\"\n            type=\"number\"\n            value={settings?.workingHours?.lunchDuration}\n            onChange={(e) => handleInputChange('workingHours', 'lunchDuration', e?.target?.value)}\n          />\n          <Input\n            label=\"Tolerancia Tardanza (min)\"\n            type=\"number\"\n            value={settings?.workingHours?.tardinessTolerance}\n            onChange={(e) => handleInputChange('workingHours', 'tardinessTolerance', e?.target?.value)}\n          />\n        </div>\n      </div>\n      {/* Payroll Configuration */}\n      <div className=\"bg-card rounded-lg border border-border p-6\">\n        <div className=\"flex items-center space-x-2 mb-6\">\n          <Icon name=\"Calculator\" size={20} className=\"text-primary\" />\n          <h3 className=\"text-lg font-semibold text-foreground\">Configuración de Nómina</h3>\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          <Input\n            label=\"Umbral Horas Extra (h)\"\n            type=\"number\"\n            step=\"0.5\"\n            value={settings?.payroll?.overtimeThreshold}\n            onChange={(e) => handleInputChange('payroll', 'overtimeThreshold', e?.target?.value)}\n            description=\"Horas trabajadas para considerar tiempo extra\"\n          />\n          <Input\n            label=\"Multiplicador Horas Extra\"\n            type=\"number\"\n            step=\"0.1\"\n            value={settings?.payroll?.overtimeMultiplier}\n            onChange={(e) => handleInputChange('payroll', 'overtimeMultiplier', e?.target?.value)}\n          />\n          <Input\n            label=\"Multiplicador Fin de Semana\"\n            type=\"number\"\n            step=\"0.1\"\n            value={settings?.payroll?.weekendMultiplier}\n            onChange={(e) => handleInputChange('payroll', 'weekendMultiplier', e?.target?.value)}\n          />\n          <Input\n            label=\"Multiplicador Feriados\"\n            type=\"number\"\n            step=\"0.1\"\n            value={settings?.payroll?.holidayMultiplier}\n            onChange={(e) => handleInputChange('payroll', 'holidayMultiplier', e?.target?.value)}\n          />\n        </div>\n      </div>\n      {/* Attendance Settings */}\n      <div className=\"bg-card rounded-lg border border-border p-6\">\n        <div className=\"flex items-center space-x-2 mb-6\">\n          <Icon name=\"UserCheck\" size={20} className=\"text-primary\" />\n          <h3 className=\"text-lg font-semibold text-foreground\">Configuración de Asistencia</h3>\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <div className=\"space-y-4\">\n            <Checkbox\n              label=\"Cierre Automático de Jornada\"\n              description=\"Cerrar automáticamente a las 18:00 si no se registra salida\"\n              checked={settings?.attendance?.autoClockOut}\n              onChange={(e) => handleInputChange('attendance', 'autoClockOut', e?.target?.checked)}\n            />\n            <Checkbox\n              label=\"Ubicación Requerida\"\n              description=\"Solicitar ubicación GPS al registrar asistencia\"\n              checked={settings?.attendance?.locationRequired}\n              onChange={(e) => handleInputChange('attendance', 'locationRequired', e?.target?.checked)}\n            />\n          </div>\n          <div className=\"space-y-4\">\n            <Checkbox\n              label=\"Foto Requerida\"\n              description=\"Solicitar foto de verificación al registrar\"\n              checked={settings?.attendance?.photoRequired}\n              onChange={(e) => handleInputChange('attendance', 'photoRequired', e?.target?.checked)}\n            />\n            <Checkbox\n              label=\"Modo Offline\"\n              description=\"Permitir registro sin conexión a internet\"\n              checked={settings?.attendance?.offlineMode}\n              onChange={(e) => handleInputChange('attendance', 'offlineMode', e?.target?.checked)}\n            />\n          </div>\n        </div>\n      </div>\n      {/* Notification Settings */}\n      <div className=\"bg-card rounded-lg border border-border p-6\">\n        <div className=\"flex items-center space-x-2 mb-6\">\n          <Icon name=\"Bell\" size={20} className=\"text-primary\" />\n          <h3 className=\"text-lg font-semibold text-foreground\">Configuración de Notificaciones</h3>\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <div className=\"space-y-4\">\n            <Checkbox\n              label=\"Notificaciones por Email\"\n              description=\"Enviar alertas y recordatorios por correo\"\n              checked={settings?.notifications?.emailNotifications}\n              onChange={(e) => handleInputChange('notifications', 'emailNotifications', e?.target?.checked)}\n            />\n            <Checkbox\n              label=\"Notificaciones SMS\"\n              description=\"Enviar alertas críticas por mensaje de texto\"\n              checked={settings?.notifications?.smsNotifications}\n              onChange={(e) => handleInputChange('notifications', 'smsNotifications', e?.target?.checked)}\n            />\n          </div>\n          <div className=\"space-y-4\">\n            <Checkbox\n              label=\"Notificaciones Push\"\n              description=\"Mostrar notificaciones en la aplicación\"\n              checked={settings?.notifications?.pushNotifications}\n              onChange={(e) => handleInputChange('notifications', 'pushNotifications', e?.target?.checked)}\n            />\n            <Input\n              label=\"Tiempo de Recordatorio (min)\"\n              type=\"number\"\n              value={settings?.notifications?.reminderTime}\n              onChange={(e) => handleInputChange('notifications', 'reminderTime', e?.target?.value)}\n              description=\"Minutos antes del fin de jornada para recordar\"\n            />\n          </div>\n        </div>\n      </div>\n      {/* Regional Settings */}\n      <div className=\"bg-card rounded-lg border border-border p-6\">\n        <div className=\"flex items-center space-x-2 mb-6\">\n          <Icon name=\"Globe\" size={20} className=\"text-primary\" />\n          <h3 className=\"text-lg font-semibold text-foreground\">Configuración Regional</h3>\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <Select\n            label=\"Zona Horaria\"\n            options={timezoneOptions}\n            value=\"America/Mexico_City\"\n            onChange={() => {}}\n            description=\"Zona horaria para cálculos de tiempo\"\n          />\n          <Select\n            label=\"Moneda\"\n            options={currencyOptions}\n            value=\"MXN\"\n            onChange={() => {}}\n            description=\"Moneda para cálculos de nómina\"\n          />\n        </div>\n      </div>\n      {/* System Health */}\n      <div className=\"bg-card rounded-lg border border-border p-6\">\n        <div className=\"flex items-center space-x-2 mb-6\">\n          <Icon name=\"Activity\" size={20} className=\"text-primary\" />\n          <h3 className=\"text-lg font-semibold text-foreground\">Estado del Sistema</h3>\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <div className=\"bg-success/10 border border-success/20 rounded-lg p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-foreground\">Base de Datos</p>\n                <p className=\"text-xs text-muted-foreground\">Conexión estable</p>\n              </div>\n              <Icon name=\"Database\" size={20} className=\"text-success\" />\n            </div>\n          </div>\n          \n          <div className=\"bg-success/10 border border-success/20 rounded-lg p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-foreground\">Servidor</p>\n                <p className=\"text-xs text-muted-foreground\">Funcionando correctamente</p>\n              </div>\n              <Icon name=\"Server\" size={20} className=\"text-success\" />\n            </div>\n          </div>\n          \n          <div className=\"bg-warning/10 border border-warning/20 rounded-lg p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-foreground\">Almacenamiento</p>\n                <p className=\"text-xs text-muted-foreground\">85% utilizado</p>\n              </div>\n              <Icon name=\"HardDrive\" size={20} className=\"text-warning\" />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SystemSettingsTab;","size_bytes":12567},"src/pages/system-administration-and-configuration-panel/components/UserManagementTab.jsx":{"content":"import React, { useState } from 'react';\n\nimport Button from '../../../components/ui/Button';\nimport Input from '../../../components/ui/Input';\nimport Select from '../../../components/ui/Select';\nimport { Checkbox } from '../../../components/ui/Checkbox';\n\nconst UserManagementTab = () => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedRole, setSelectedRole] = useState('');\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const [showPermissionModal, setShowPermissionModal] = useState(false);\n  const [selectedUser, setSelectedUser] = useState(null);\n\n  const users = [\n    {\n      id: 1,\n      name: \"Carlos Rodríguez\",\n      email: \"carlos.rodriguez@construcciones.com\",\n      role: \"SuperAdmin\",\n      status: \"active\",\n      lastLogin: new Date(Date.now() - 2 * 60 * 60 * 1000),\n      site: \"Oficina Central\",\n      permissions: {\n        userManagement: true,\n        systemConfig: true,\n        payrollAccess: true,\n        reportGeneration: true,\n        auditLogs: true\n      }\n    },\n    {\n      id: 2,\n      name: \"María González\",\n      email: \"maria.gonzalez@construcciones.com\",\n      role: \"Admin\",\n      status: \"active\",\n      lastLogin: new Date(Date.now() - 30 * 60 * 1000),\n      site: \"Obra Norte\",\n      permissions: {\n        userManagement: true,\n        systemConfig: false,\n        payrollAccess: true,\n        reportGeneration: true,\n        auditLogs: false\n      }\n    },\n    {\n      id: 3,\n      name: \"Juan Pérez\",\n      email: \"juan.perez@construcciones.com\",\n      role: \"Supervisor\",\n      status: \"active\",\n      lastLogin: new Date(Date.now() - 4 * 60 * 60 * 1000),\n      site: \"Proyecto Sur\",\n      permissions: {\n        userManagement: false,\n        systemConfig: false,\n        payrollAccess: false,\n        reportGeneration: true,\n        auditLogs: false\n      }\n    },\n    {\n      id: 4,\n      name: \"Ana Martínez\",\n      email: \"ana.martinez@construcciones.com\",\n      role: \"Employee\",\n      status: \"inactive\",\n      lastLogin: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000),\n      site: \"Obra Central\",\n      permissions: {\n        userManagement: false,\n        systemConfig: false,\n        payrollAccess: false,\n        reportGeneration: false,\n        auditLogs: false\n      }\n    }\n  ];\n\n  const roleOptions = [\n    { value: '', label: 'Todos los roles' },\n    { value: 'SuperAdmin', label: 'SuperAdmin' },\n    { value: 'Admin', label: 'Administrador' },\n    { value: 'Supervisor', label: 'Supervisor' },\n    { value: 'Employee', label: 'Empleado' }\n  ];\n\n  const filteredUsers = users?.filter(user => {\n    const matchesSearch = user?.name?.toLowerCase()?.includes(searchTerm?.toLowerCase()) ||\n                         user?.email?.toLowerCase()?.includes(searchTerm?.toLowerCase());\n    const matchesRole = !selectedRole || user?.role === selectedRole;\n    return matchesSearch && matchesRole;\n  });\n\n  const handleUserSelection = (userId, checked) => {\n    if (checked) {\n      setSelectedUsers([...selectedUsers, userId]);\n    } else {\n      setSelectedUsers(selectedUsers?.filter(id => id !== userId));\n    }\n  };\n\n  const handleSelectAll = (checked) => {\n    if (checked) {\n      setSelectedUsers(filteredUsers?.map(user => user?.id));\n    } else {\n      setSelectedUsers([]);\n    }\n  };\n\n  const formatLastLogin = (date) => {\n    const now = new Date();\n    const diff = now - date;\n    const hours = Math.floor(diff / (1000 * 60 * 60));\n    const days = Math.floor(diff / (1000 * 60 * 60 * 24));\n    \n    if (hours < 24) return `hace ${hours}h`;\n    return `hace ${days}d`;\n  };\n\n  const getRoleColor = (role) => {\n    const colors = {\n      SuperAdmin: 'bg-error text-error-foreground',\n      Admin: 'bg-warning text-warning-foreground',\n      Supervisor: 'bg-primary text-primary-foreground',\n      Employee: 'bg-secondary text-secondary-foreground'\n    };\n    return colors?.[role] || colors?.Employee;\n  };\n\n  const getStatusColor = (status) => {\n    return status === 'active' ?'bg-success/10 text-success border-success/20' :'bg-muted text-muted-foreground border-border';\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header Actions */}\n      <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4\">\n        <div className=\"flex flex-col sm:flex-row gap-4 flex-1\">\n          <div className=\"flex-1\">\n            <Input\n              type=\"search\"\n              placeholder=\"Buscar usuarios por nombre o email...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e?.target?.value)}\n              className=\"w-full\"\n            />\n          </div>\n          <div className=\"w-full sm:w-48\">\n            <Select\n              options={roleOptions}\n              value={selectedRole}\n              onChange={setSelectedRole}\n              placeholder=\"Filtrar por rol\"\n            />\n          </div>\n        </div>\n        \n        <div className=\"flex gap-2\">\n          <Button variant=\"outline\" iconName=\"Download\">\n            Exportar\n          </Button>\n          <Button iconName=\"Plus\">\n            Nuevo Usuario\n          </Button>\n        </div>\n      </div>\n      {/* Bulk Actions */}\n      {selectedUsers?.length > 0 && (\n        <div className=\"bg-muted p-4 rounded-lg border border-border\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm font-medium text-foreground\">\n              {selectedUsers?.length} usuario(s) seleccionado(s)\n            </span>\n            <div className=\"flex gap-2\">\n              <Button variant=\"outline\" size=\"sm\" iconName=\"Shield\">\n                Cambiar Permisos\n              </Button>\n              <Button variant=\"outline\" size=\"sm\" iconName=\"UserX\">\n                Desactivar\n              </Button>\n              <Button variant=\"destructive\" size=\"sm\" iconName=\"Trash2\">\n                Eliminar\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n      {/* Users Table */}\n      <div className=\"bg-card rounded-lg border border-border overflow-hidden\">\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full\">\n            <thead className=\"bg-muted\">\n              <tr>\n                <th className=\"text-left p-4 font-medium text-foreground\">\n                  <Checkbox\n                    checked={selectedUsers?.length === filteredUsers?.length && filteredUsers?.length > 0}\n                    onChange={(e) => handleSelectAll(e?.target?.checked)}\n                  />\n                </th>\n                <th className=\"text-left p-4 font-medium text-foreground\">Usuario</th>\n                <th className=\"text-left p-4 font-medium text-foreground\">Rol</th>\n                <th className=\"text-left p-4 font-medium text-foreground\">Estado</th>\n                <th className=\"text-left p-4 font-medium text-foreground\">Último Acceso</th>\n                <th className=\"text-left p-4 font-medium text-foreground\">Sitio</th>\n                <th className=\"text-left p-4 font-medium text-foreground\">Acciones</th>\n              </tr>\n            </thead>\n            <tbody>\n              {filteredUsers?.map((user) => (\n                <tr key={user?.id} className=\"border-t border-border hover:bg-muted/50\">\n                  <td className=\"p-4\">\n                    <Checkbox\n                      checked={selectedUsers?.includes(user?.id)}\n                      onChange={(e) => handleUserSelection(user?.id, e?.target?.checked)}\n                    />\n                  </td>\n                  <td className=\"p-4\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-8 h-8 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-sm font-medium\">\n                        {user?.name?.split(' ')?.map(n => n?.[0])?.join('')?.toUpperCase()}\n                      </div>\n                      <div>\n                        <div className=\"font-medium text-foreground\">{user?.name}</div>\n                        <div className=\"text-sm text-muted-foreground\">{user?.email}</div>\n                      </div>\n                    </div>\n                  </td>\n                  <td className=\"p-4\">\n                    <span className={`px-2 py-1 text-xs font-medium rounded-full ${getRoleColor(user?.role)}`}>\n                      {user?.role}\n                    </span>\n                  </td>\n                  <td className=\"p-4\">\n                    <span className={`px-2 py-1 text-xs font-medium rounded-full border ${getStatusColor(user?.status)}`}>\n                      {user?.status === 'active' ? 'Activo' : 'Inactivo'}\n                    </span>\n                  </td>\n                  <td className=\"p-4 text-sm text-muted-foreground\">\n                    {formatLastLogin(user?.lastLogin)}\n                  </td>\n                  <td className=\"p-4 text-sm text-foreground\">\n                    {user?.site}\n                  </td>\n                  <td className=\"p-4\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        iconName=\"Shield\"\n                        onClick={() => {\n                          setSelectedUser(user);\n                          setShowPermissionModal(true);\n                        }}\n                      >\n                        Permisos\n                      </Button>\n                      <Button variant=\"ghost\" size=\"sm\" iconName=\"Edit\">\n                        Editar\n                      </Button>\n                    </div>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n      {/* Permission Modal */}\n      {showPermissionModal && selectedUser && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n          <div className=\"bg-card rounded-lg border border-border w-full max-w-md\">\n            <div className=\"p-6 border-b border-border\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-lg font-semibold text-foreground\">\n                  Permisos de {selectedUser?.name}\n                </h3>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  iconName=\"X\"\n                  onClick={() => setShowPermissionModal(false)}\n                />\n              </div>\n            </div>\n            \n            <div className=\"p-6 space-y-4\">\n              <div className=\"space-y-3\">\n                <Checkbox\n                  label=\"Gestión de Usuarios\"\n                  description=\"Crear, editar y eliminar usuarios\"\n                  checked={selectedUser?.permissions?.userManagement}\n                />\n                <Checkbox\n                  label=\"Configuración del Sistema\"\n                  description=\"Modificar configuraciones globales\"\n                  checked={selectedUser?.permissions?.systemConfig}\n                />\n                <Checkbox\n                  label=\"Acceso a Nómina\"\n                  description=\"Ver y gestionar información de nómina\"\n                  checked={selectedUser?.permissions?.payrollAccess}\n                />\n                <Checkbox\n                  label=\"Generación de Reportes\"\n                  description=\"Crear y exportar reportes\"\n                  checked={selectedUser?.permissions?.reportGeneration}\n                />\n                <Checkbox\n                  label=\"Logs de Auditoría\"\n                  description=\"Acceder a registros de auditoría\"\n                  checked={selectedUser?.permissions?.auditLogs}\n                />\n              </div>\n            </div>\n            \n            <div className=\"p-6 border-t border-border flex justify-end space-x-3\">\n              <Button\n                variant=\"outline\"\n                onClick={() => setShowPermissionModal(false)}\n              >\n                Cancelar\n              </Button>\n              <Button onClick={() => setShowPermissionModal(false)}>\n                Guardar Cambios\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default UserManagementTab;","size_bytes":12357}},"version":1}